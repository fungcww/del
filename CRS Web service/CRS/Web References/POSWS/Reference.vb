'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace POSWS
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="POSWSSoap", [Namespace]:="http://inglife.com.hk/")>  _
    Partial Public Class POSWS
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private dBSOAPHeaderValueField As DBSOAPHeader
        
        Private SearchPolicy_MCUOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRiderDefaultSISettingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyLastEffectiveDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckNoReinstatementRiderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyAdminFNARecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private addPolicyAdminFNARecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private deletePolicyAdminFNARecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private changePolicyAdminFNARecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendMailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransSummaryChangeInsuredOperationCompleted As System.Threading.SendOrPostCallback
        
        Private mQSOAPHeaderValueField As MQSOAPHeader
        
        Private HasOutstandingClaimOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AllowChangeInsuredOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsPolicyChangeInsuredOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInforceCoverageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClawbackCampaignQuotationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ClawbackCampaignDiscountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransactionRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransactionRecordDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllClientTransactionRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClientTransactionRrcordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveManualLetterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveManualLetterByPolicyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckReprintRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckReprintRecordByPolicyNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyReceivedDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SavePolicyReceivedDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPostFundAllocationChecklistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFundAllocationLetterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllPolicyFundAllocationLetterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFundBalanceLetterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFundSwitchPublicWebsiteAllowStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFundAllocationLASAllowStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCapsilFundAuthStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFundCloseStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCapsilFundCloseStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFundLetterProductsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFundMaintReuquestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FundSubmitRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFundMandatDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FundMandatSubmitRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelFundRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ApproveFundRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLifeAsiaFundStatOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdLifeAsiaFundStatOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetComplusoryFundSwitchTransLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SubmitFundChangeLetterRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFundChangeLetterRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFundChangeLetterRequestHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateFundChangeLetterRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFundChangeRequestNewPolicyListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckFundChangePolicyListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFundChangeLetterLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateFundChangeRequestStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isNBUSIndiciaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isPOSUSIndiciaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private iNG_SOAPHeaderValueField As ING_SOAPHeader
        
        Private GetCodeTableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetServiceFeeEnquiryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ServiceFeeRegistrationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ServiceFeeTerminationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DpmsServiceFeeRegistrationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DpmsServiceFeeTerminationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRequestFromCodeByRefNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckBrokerValidForDPMSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private strmsgreqOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendSMS2CustomerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendPolicySMSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCapsilNegativeCashValueReminderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCapsilNegativeCashValueReminderFlagOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isAnnuityPlanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DirectCreditOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isAnnuityPolicyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HasULRegularContributionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMinimumRequiredPremiumOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveDpmsMailRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDpmsImportFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateDpmsMailStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDpmsDailyStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveDpmsMailLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckCNHolderWithPolicyNoteIFSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMortalityClassRankCAPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMortalityClassRankLAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CUPDDAtoCashConversionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPosSoftCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EnquireEGPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveEGPApplySyncRcdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveEGPReleaseSyncRcdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveEGPSuppressBillinfSyncRcdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEGPRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EnquireSpecialEventBenefitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveSpecialEventApplySyncRcdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveSpecialEventTerminateSyncRcdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSpecialEventTransOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddProblemPolicyMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCRSTranscationLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCRSTranscationLogByTranscationLogIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCRSFollowUpLetterTranscationLogByCustomerIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCRSFollowUpLetterTranscationLogByTranscationIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDataRetentionOldCustomerIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMediumListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEventCategoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEventDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEventTypeDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEventSourceIndicatorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStatusListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInitiatorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get_MCU_ServiceLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Save_MCU_ServiceLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBasicPlanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccountStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAgentLocationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateChequeStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDirectCreditHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAnnuityPaymentHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCouponHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLoanAndAPLHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CNBAFIByPolicyNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FCRenqOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FCRupdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FSurRevOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BillDateRevOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PTDAdvOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Las2CapsilOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCIWexclusionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UCIWOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRiderListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAvailFundListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUnitJournalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteUnitJournalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertUnitJournalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateUnitJournalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DiffUnitJournalUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateUnitJournalBackendOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ApproveUnitJournalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SearchUnitJournalHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CalVPOOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetVPOAgentInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetVPOPersonalInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetVPOAgentCodesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetVPOLetterFieldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetVPOBasicInsuredInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetVPOPolicyAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetVPOCompanyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNormalCurrencySignCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPaidToDateFromCAPSILOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPremiumModeCapsilOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyPOInfofromCAPSILOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetVPOAgentDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetVPOAgentMgrOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetVPOMemoDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInsuredOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDividendOptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyCurrencyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFromCodeTableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInterestRateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTargetPremiumOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckExchangeRateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransLogClaimsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CFIWarningForLinkProductOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWarningMessageByPolicyNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAgentFaxNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRequestTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPOLCTransLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPOLMTransLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPCOVTransLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPPOLTransLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidProductTheOneOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TheOnePlanIsPRCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFundListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EnableFundSwitchInPublicWebsiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DisableFundSwitchInPublicWebsiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SuspensionFundSwitchInPublicWebsiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EnableFundSwitchOutPublicWebsiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DisableFundSwitchOutPublicWebsiteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EnableFundAllocationLASOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DisableFundAllocationLASOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeAuthCapsilFundOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AuthCapsilFundOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EnableFundClosingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DisableFundClosingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CloseCapsilFundOperationCompleted As System.Threading.SendOrPostCallback
        
        Private OpenCapsilFundOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReleaseFundSwitchOutMinReqOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ResumeFundSwitchOutMinReqOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckFundSwitchOutMinReqOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFundPolicyListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateMarkinOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCapsilFundNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCapsilFundNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLifeAsiaFundNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateLifeAsiaFundNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateFundNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddMarkinReqOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPendingMarkinReqListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMarkinReqStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SurByAmountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SurEnableEffDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBoosterPlanByBoosterRiderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMarkInRequestTypeListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMarkInStatusListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMarkInInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCompanyNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyInfoListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ResumeCapsilTransOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPaymentSourceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getIsExRateExistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMoneyAdjRecOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAcctMappingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMoneyAdjEnquireOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUWTransHistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUWTransTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUWRiderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUWCapsilRiderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRiderStatusDescOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveUWTransHistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUWInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUWInfoForCalcOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveUWInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUWSysInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUwWorksheetPrtInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLoadingExclusionPrtInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUWMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveUWMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPoilcyStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransQueSummaryValOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransSummaryBouncedChequeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransSummaryClientRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransQueSummaryRIHistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransSummaryPolicyAddressLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransSummaryChangeServiceAgentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransSummaryChangeDOBOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransSummaryPremHolidayOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransSummaryCovHistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransSummaryRPUOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransRemarkTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransRemarkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveTransRemarkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransSummaryPOHOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransSummaryAddBoosterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransSummaryFundAlloOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransSummaryChgCurrOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransSummaryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransSummaryLASOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAutoMaturityRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyNoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyNoteByPolicyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyNoteByPageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SavePolicyNoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerCoverageDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBenefitPlanCodeInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerInfoByPolicyNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAgingInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCCSInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAgentInfoByPolicyNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRemarkTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TraditionalParSurOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PolicyValueEnqOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyProjectionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InvokeBOMethodOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDividendAdjustTransactionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DividendAdjustInputOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DividendAdjustApproveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValueWithdrawOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCashValueRiderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownloadCashValueRiderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RejectDDAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDDARefEnquiryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAPLStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessVpoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLCPPaymentByPaymentNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessRpuOperationCompleted As System.Threading.SendOrPostCallback
        
        Private QuoteRpuOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLCPPaymentByCaseNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckLCPPaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddLcpPaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLCPChequeDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetChequeHistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidateChequeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetChqDSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPositionInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddPositionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdatePositionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeletePositionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetChequeLimitInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddChequeLimitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateChequeLimitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteChequeLimitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckIsPositionInUseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMultiCurOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetExchangeRateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetExchangeRateWithPolicyNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCurrencyCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChkChqAuthPosOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFuncCategoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MinContribValidationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AllowParSurMinBalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AllowParSurrValidationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParSurMinAmtValidationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ParSurMaxPercValidationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FundSWMinSwitchAmtValidationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FundSWAllowSwitchingValidationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReinstateValidationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AllowChgOwnerValidationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AllowChgModeValidationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AllowChgBTValidationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChkPolicyInforceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransQStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private saveAddBoosterSynRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private saveAddPDFSynRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private checkAddPDFSynRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private saveWithdrawPDFRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPDFEnquiryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSWInMainRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private saveFundAllocSynRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFundAllocRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveParSurrSynRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllParSurrRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private saveFSSynRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private saveReInstateSynRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReinstateEnquiryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReinstateRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckReinstateTheOneMedicalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBeneShareRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private saveCltRelationSynRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetContAssignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetContBeneOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCIWPolicyaccountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetContOwnerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPayorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBillingChgRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPaymentMethEnqOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetModeCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBillingChgQuotOperationCompleted As System.Threading.SendOrPostCallback
        
        Private saveBCSynRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcEventLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrepareTransQDTOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransQueRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransQueRecordBetterVersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransHeadTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLogonDBOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMenuItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPayment_FreqOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPayment_MethOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBillingNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCIWOwnerInsuredOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendNoClaimDiscReqOperationCompleted As System.Threading.SendOrPostCallback
        
        Private savePremiumHolidaySynRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPremiumHolidayMainRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPremiumHolidayMainRecordByPolicyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAvailableFundListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PlanNotAllowAECardOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UFProductCheckingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FreeWithdrawalPeriodCheckingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CommissionClawbackCheckingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PlanWarningMessageGenericOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCashFlowListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPremiumRoutineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRiderPremiumOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetContractDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInterestQuotationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EnqSurByCashflowBOOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidAgentByProductTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBECustomerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveExchangeRateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInforceIllustrationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInforceIllustrationPhaseIIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveFundPriceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCapsilPolicyRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RequiredAddrProofWarningOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAgentRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCapsilPolicyNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLifeAsiaPolicyNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPaymentHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReprintPolicyScheduleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelReceiptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReceipCancellationLogByIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBounceChequeReasonListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRpuPendingMemoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRpuProjectionLetterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBounceChequePendingMemoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SubmitBounceChequeLetterRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSoftCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCompSelectionRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCompSelectionWithCustNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAvailComponentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCovMaintHistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetComponentSysTableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDistChannelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSpecPayOptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyClientSysTableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFundAllocSysTableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetContExDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCompDetailRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFundDirectRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPoInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFundInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIAAccountTableSchemaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyFundDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTrailerMapOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUFPolicyFundDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSurValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSurrChargeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyAccountBalanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClientRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClientRoleExtendOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PolicyAssignedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSubAcctBalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSubAcctPostOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAgentCommDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAgentSplitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSpecialTermsDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSpecialTermsByTrailerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCoveredLifeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFundHoldingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTotalInvestPremPaidFromCAPSILOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTranHistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransactionHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddAnotherLifeRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeComponentRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeComponentRecordThroughBackEndOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSubAccountBalanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private OverCoolOffPeriodOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LapseDateValidationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TransTypeValidationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLetterHeaderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SavePolSurrSynRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolSurrRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLastSurrReqOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveValTransSynRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetValTransRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUnitTranOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPOSValHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPOSValHistory2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetChqLimitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNewChqLimitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCategoryIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCurrencyIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPositionAndDeptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddNewUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.CRS.My.MySettings.Default.CRS_POSWS_POSWS
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Property DBSOAPHeaderValue() As DBSOAPHeader
            Get
                Return Me.dBSOAPHeaderValueField
            End Get
            Set
                Me.dBSOAPHeaderValueField = value
            End Set
        End Property
        
        Public Property MQSOAPHeaderValue() As MQSOAPHeader
            Get
                Return Me.mQSOAPHeaderValueField
            End Get
            Set
                Me.mQSOAPHeaderValueField = value
            End Set
        End Property
        
        Public Property ING_SOAPHeaderValue() As ING_SOAPHeader
            Get
                Return Me.iNG_SOAPHeaderValueField
            End Get
            Set
                Me.iNG_SOAPHeaderValueField = value
            End Set
        End Property
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event SearchPolicy_MCUCompleted As SearchPolicy_MCUCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRiderDefaultSISettingCompleted As GetRiderDefaultSISettingCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyLastEffectiveDateCompleted As GetPolicyLastEffectiveDateCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckNoReinstatementRiderCompleted As CheckNoReinstatementRiderCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyAdminFNARecordCompleted As GetPolicyAdminFNARecordCompletedEventHandler
        
        '''<remarks/>
        Public Event addPolicyAdminFNARecordCompleted As addPolicyAdminFNARecordCompletedEventHandler
        
        '''<remarks/>
        Public Event deletePolicyAdminFNARecordCompleted As deletePolicyAdminFNARecordCompletedEventHandler
        
        '''<remarks/>
        Public Event changePolicyAdminFNARecordCompleted As changePolicyAdminFNARecordCompletedEventHandler
        
        '''<remarks/>
        Public Event SendMailCompleted As SendMailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransSummaryChangeInsuredCompleted As GetTransSummaryChangeInsuredCompletedEventHandler
        
        '''<remarks/>
        Public Event HasOutstandingClaimCompleted As HasOutstandingClaimCompletedEventHandler
        
        '''<remarks/>
        Public Event AllowChangeInsuredCompleted As AllowChangeInsuredCompletedEventHandler
        
        '''<remarks/>
        Public Event IsPolicyChangeInsuredCompleted As IsPolicyChangeInsuredCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInforceCoverageCompleted As GetInforceCoverageCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClawbackCampaignQuotationCompleted As GetClawbackCampaignQuotationCompletedEventHandler
        
        '''<remarks/>
        Public Event ClawbackCampaignDiscountCompleted As ClawbackCampaignDiscountCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransactionRecordCompleted As GetTransactionRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransactionRecordDetailCompleted As GetTransactionRecordDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllClientTransactionRecordCompleted As GetAllClientTransactionRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClientTransactionRrcordCompleted As GetClientTransactionRrcordCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveManualLetterCompleted As SaveManualLetterCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveManualLetterByPolicyCompleted As SaveManualLetterByPolicyCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckReprintRecordCompleted As CheckReprintRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckReprintRecordByPolicyNoCompleted As CheckReprintRecordByPolicyNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyReceivedDateCompleted As GetPolicyReceivedDateCompletedEventHandler
        
        '''<remarks/>
        Public Event SavePolicyReceivedDateCompleted As SavePolicyReceivedDateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPostFundAllocationChecklistCompleted As GetPostFundAllocationChecklistCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFundAllocationLetterCompleted As GetFundAllocationLetterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllPolicyFundAllocationLetterCompleted As GetAllPolicyFundAllocationLetterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFundBalanceLetterCompleted As GetFundBalanceLetterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFundSwitchPublicWebsiteAllowStatusCompleted As GetFundSwitchPublicWebsiteAllowStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFundAllocationLASAllowStatusCompleted As GetFundAllocationLASAllowStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCapsilFundAuthStatusCompleted As GetCapsilFundAuthStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFundCloseStatusCompleted As GetFundCloseStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCapsilFundCloseStatusCompleted As GetCapsilFundCloseStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFundLetterProductsCompleted As GetFundLetterProductsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFundMaintReuquestCompleted As GetFundMaintReuquestCompletedEventHandler
        
        '''<remarks/>
        Public Event FundSubmitRequestCompleted As FundSubmitRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFundMandatDetailCompleted As GetFundMandatDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event FundMandatSubmitRequestCompleted As FundMandatSubmitRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelFundRequestCompleted As CancelFundRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event ApproveFundRequestCompleted As ApproveFundRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLifeAsiaFundStatCompleted As GetLifeAsiaFundStatCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdLifeAsiaFundStatCompleted As UpdLifeAsiaFundStatCompletedEventHandler
        
        '''<remarks/>
        Public Event GetComplusoryFundSwitchTransLogCompleted As GetComplusoryFundSwitchTransLogCompletedEventHandler
        
        '''<remarks/>
        Public Event SubmitFundChangeLetterRequestCompleted As SubmitFundChangeLetterRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFundChangeLetterRequestCompleted As GetFundChangeLetterRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFundChangeLetterRequestHistoryCompleted As GetFundChangeLetterRequestHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateFundChangeLetterRequestCompleted As UpdateFundChangeLetterRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFundChangeRequestNewPolicyListCompleted As GetFundChangeRequestNewPolicyListCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckFundChangePolicyListCompleted As CheckFundChangePolicyListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFundChangeLetterLogCompleted As GetFundChangeLetterLogCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateFundChangeRequestStatusCompleted As UpdateFundChangeRequestStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event isNBUSIndiciaCompleted As isNBUSIndiciaCompletedEventHandler
        
        '''<remarks/>
        Public Event isPOSUSIndiciaCompleted As isPOSUSIndiciaCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCodeTableCompleted As GetCodeTableCompletedEventHandler
        
        '''<remarks/>
        Public Event GetServiceFeeEnquiryCompleted As GetServiceFeeEnquiryCompletedEventHandler
        
        '''<remarks/>
        Public Event ServiceFeeRegistrationCompleted As ServiceFeeRegistrationCompletedEventHandler
        
        '''<remarks/>
        Public Event ServiceFeeTerminationCompleted As ServiceFeeTerminationCompletedEventHandler
        
        '''<remarks/>
        Public Event DpmsServiceFeeRegistrationCompleted As DpmsServiceFeeRegistrationCompletedEventHandler
        
        '''<remarks/>
        Public Event DpmsServiceFeeTerminationCompleted As DpmsServiceFeeTerminationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRequestFromCodeByRefNoCompleted As GetRequestFromCodeByRefNoCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckBrokerValidForDPMSCompleted As CheckBrokerValidForDPMSCompletedEventHandler
        
        '''<remarks/>
        Public Event strmsgreqCompleted As strmsgreqCompletedEventHandler
        
        '''<remarks/>
        Public Event SendSMS2CustomerCompleted As SendSMS2CustomerCompletedEventHandler
        
        '''<remarks/>
        Public Event SendPolicySMSCompleted As SendPolicySMSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCapsilNegativeCashValueReminderCompleted As GetCapsilNegativeCashValueReminderCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCapsilNegativeCashValueReminderFlagCompleted As UpdateCapsilNegativeCashValueReminderFlagCompletedEventHandler
        
        '''<remarks/>
        Public Event isAnnuityPlanCompleted As isAnnuityPlanCompletedEventHandler
        
        '''<remarks/>
        Public Event DirectCreditCompleted As DirectCreditCompletedEventHandler
        
        '''<remarks/>
        Public Event isAnnuityPolicyCompleted As isAnnuityPolicyCompletedEventHandler
        
        '''<remarks/>
        Public Event HasULRegularContributionCompleted As HasULRegularContributionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMinimumRequiredPremiumCompleted As GetMinimumRequiredPremiumCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveDpmsMailRequestCompleted As SaveDpmsMailRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDpmsImportFileCompleted As GetDpmsImportFileCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateDpmsMailStatusCompleted As UpdateDpmsMailStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDpmsDailyStatusCompleted As GetDpmsDailyStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveDpmsMailLogCompleted As SaveDpmsMailLogCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckCNHolderWithPolicyNoteIFSCompleted As CheckCNHolderWithPolicyNoteIFSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMortalityClassRankCAPCompleted As GetMortalityClassRankCAPCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMortalityClassRankLACompleted As GetMortalityClassRankLACompletedEventHandler
        
        '''<remarks/>
        Public Event CUPDDAtoCashConversionCompleted As CUPDDAtoCashConversionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPosSoftCodeCompleted As GetPosSoftCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event EnquireEGPCompleted As EnquireEGPCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveEGPApplySyncRcdCompleted As SaveEGPApplySyncRcdCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveEGPReleaseSyncRcdCompleted As SaveEGPReleaseSyncRcdCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveEGPSuppressBillinfSyncRcdCompleted As SaveEGPSuppressBillinfSyncRcdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEGPRecordCompleted As GetEGPRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event EnquireSpecialEventBenefitCompleted As EnquireSpecialEventBenefitCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveSpecialEventApplySyncRcdCompleted As SaveSpecialEventApplySyncRcdCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveSpecialEventTerminateSyncRcdCompleted As SaveSpecialEventTerminateSyncRcdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSpecialEventTransCompleted As GetSpecialEventTransCompletedEventHandler
        
        '''<remarks/>
        Public Event AddProblemPolicyMessageCompleted As AddProblemPolicyMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCRSTranscationLogCompleted As GetCRSTranscationLogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCRSTranscationLogByTranscationLogIdCompleted As GetCRSTranscationLogByTranscationLogIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCRSFollowUpLetterTranscationLogByCustomerIdCompleted As GetCRSFollowUpLetterTranscationLogByCustomerIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCRSFollowUpLetterTranscationLogByTranscationIdCompleted As GetCRSFollowUpLetterTranscationLogByTranscationIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDataRetentionOldCustomerIdCompleted As GetDataRetentionOldCustomerIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMediumListCompleted As GetMediumListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEventCategoryCompleted As GetEventCategoryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEventDetailCompleted As GetEventDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEventTypeDetailCompleted As GetEventTypeDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEventSourceIndicatorCompleted As GetEventSourceIndicatorCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStatusListCompleted As GetStatusListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInitiatorCompleted As GetInitiatorCompletedEventHandler
        
        '''<remarks/>
        Public Event Get_MCU_ServiceLogCompleted As Get_MCU_ServiceLogCompletedEventHandler
        
        '''<remarks/>
        Public Event Save_MCU_ServiceLogCompleted As Save_MCU_ServiceLogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBasicPlanCompleted As GetBasicPlanCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccountStatusCompleted As GetAccountStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAgentLocationCompleted As GetAgentLocationCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateChequeStatusCompleted As UpdateChequeStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDirectCreditHistoryCompleted As GetDirectCreditHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAnnuityPaymentHistoryCompleted As GetAnnuityPaymentHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCouponHistoryCompleted As GetCouponHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLoanAndAPLHistoryCompleted As GetLoanAndAPLHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event CNBAFIByPolicyNoCompleted As CNBAFIByPolicyNoCompletedEventHandler
        
        '''<remarks/>
        Public Event FCRenqCompleted As FCRenqCompletedEventHandler
        
        '''<remarks/>
        Public Event FCRupdCompleted As FCRupdCompletedEventHandler
        
        '''<remarks/>
        Public Event FSurRevCompleted As FSurRevCompletedEventHandler
        
        '''<remarks/>
        Public Event BillDateRevCompleted As BillDateRevCompletedEventHandler
        
        '''<remarks/>
        Public Event PTDAdvCompleted As PTDAdvCompletedEventHandler
        
        '''<remarks/>
        Public Event Las2CapsilCompleted As Las2CapsilCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCIWexclusionCompleted As GetCIWexclusionCompletedEventHandler
        
        '''<remarks/>
        Public Event UCIWCompleted As UCIWCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRiderListCompleted As GetRiderListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAvailFundListCompleted As GetAvailFundListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUnitJournalCompleted As GetUnitJournalCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteUnitJournalCompleted As DeleteUnitJournalCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertUnitJournalCompleted As InsertUnitJournalCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateUnitJournalCompleted As UpdateUnitJournalCompletedEventHandler
        
        '''<remarks/>
        Public Event DiffUnitJournalUserCompleted As DiffUnitJournalUserCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateUnitJournalBackendCompleted As UpdateUnitJournalBackendCompletedEventHandler
        
        '''<remarks/>
        Public Event ApproveUnitJournalCompleted As ApproveUnitJournalCompletedEventHandler
        
        '''<remarks/>
        Public Event SearchUnitJournalHistoryCompleted As SearchUnitJournalHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event CalVPOCompleted As CalVPOCompletedEventHandler
        
        '''<remarks/>
        Public Event GetVPOAgentInfoCompleted As GetVPOAgentInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetVPOPersonalInfoCompleted As GetVPOPersonalInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetVPOAgentCodesCompleted As GetVPOAgentCodesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetVPOLetterFieldCompleted As GetVPOLetterFieldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetVPOBasicInsuredInfoCompleted As GetVPOBasicInsuredInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetVPOPolicyAddressCompleted As GetVPOPolicyAddressCompletedEventHandler
        
        '''<remarks/>
        Public Event GetVPOCompanyCompleted As GetVPOCompanyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNormalCurrencySignCodeCompleted As GetNormalCurrencySignCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPaidToDateFromCAPSILCompleted As GetPaidToDateFromCAPSILCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPremiumModeCapsilCompleted As GetPremiumModeCapsilCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyPOInfofromCAPSILCompleted As GetPolicyPOInfofromCAPSILCompletedEventHandler
        
        '''<remarks/>
        Public Event GetVPOAgentDetailCompleted As GetVPOAgentDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetVPOAgentMgrCompleted As GetVPOAgentMgrCompletedEventHandler
        
        '''<remarks/>
        Public Event GetVPOMemoDetailCompleted As GetVPOMemoDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInsuredCompleted As GetInsuredCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDividendOptionCompleted As GetDividendOptionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyCurrencyCompleted As GetPolicyCurrencyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyStatusCompleted As GetPolicyStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFromCodeTableCompleted As GetFromCodeTableCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInterestRateCompleted As GetInterestRateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTargetPremiumCompleted As GetTargetPremiumCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckExchangeRateCompleted As CheckExchangeRateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransLogClaimsCompleted As GetTransLogClaimsCompletedEventHandler
        
        '''<remarks/>
        Public Event CFIWarningForLinkProductCompleted As CFIWarningForLinkProductCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWarningMessageByPolicyNoCompleted As GetWarningMessageByPolicyNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAgentFaxNoCompleted As GetAgentFaxNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRequestTypeCompleted As GetRequestTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPOLCTransLogCompleted As GetPOLCTransLogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPOLMTransLogCompleted As GetPOLMTransLogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPCOVTransLogCompleted As GetPCOVTransLogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPPOLTransLogCompleted As GetPPOLTransLogCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidProductTheOneCompleted As ValidProductTheOneCompletedEventHandler
        
        '''<remarks/>
        Public Event TheOnePlanIsPRCCompleted As TheOnePlanIsPRCCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFundListCompleted As GetFundListCompletedEventHandler
        
        '''<remarks/>
        Public Event EnableFundSwitchInPublicWebsiteCompleted As EnableFundSwitchInPublicWebsiteCompletedEventHandler
        
        '''<remarks/>
        Public Event DisableFundSwitchInPublicWebsiteCompleted As DisableFundSwitchInPublicWebsiteCompletedEventHandler
        
        '''<remarks/>
        Public Event SuspensionFundSwitchInPublicWebsiteCompleted As SuspensionFundSwitchInPublicWebsiteCompletedEventHandler
        
        '''<remarks/>
        Public Event EnableFundSwitchOutPublicWebsiteCompleted As EnableFundSwitchOutPublicWebsiteCompletedEventHandler
        
        '''<remarks/>
        Public Event DisableFundSwitchOutPublicWebsiteCompleted As DisableFundSwitchOutPublicWebsiteCompletedEventHandler
        
        '''<remarks/>
        Public Event EnableFundAllocationLASCompleted As EnableFundAllocationLASCompletedEventHandler
        
        '''<remarks/>
        Public Event DisableFundAllocationLASCompleted As DisableFundAllocationLASCompletedEventHandler
        
        '''<remarks/>
        Public Event DeAuthCapsilFundCompleted As DeAuthCapsilFundCompletedEventHandler
        
        '''<remarks/>
        Public Event AuthCapsilFundCompleted As AuthCapsilFundCompletedEventHandler
        
        '''<remarks/>
        Public Event EnableFundClosingCompleted As EnableFundClosingCompletedEventHandler
        
        '''<remarks/>
        Public Event DisableFundClosingCompleted As DisableFundClosingCompletedEventHandler
        
        '''<remarks/>
        Public Event CloseCapsilFundCompleted As CloseCapsilFundCompletedEventHandler
        
        '''<remarks/>
        Public Event OpenCapsilFundCompleted As OpenCapsilFundCompletedEventHandler
        
        '''<remarks/>
        Public Event ReleaseFundSwitchOutMinReqCompleted As ReleaseFundSwitchOutMinReqCompletedEventHandler
        
        '''<remarks/>
        Public Event ResumeFundSwitchOutMinReqCompleted As ResumeFundSwitchOutMinReqCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckFundSwitchOutMinReqCompleted As CheckFundSwitchOutMinReqCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFundPolicyListCompleted As GetFundPolicyListCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateMarkinCompleted As CreateMarkinCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCapsilFundNameCompleted As GetCapsilFundNameCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCapsilFundNameCompleted As UpdateCapsilFundNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLifeAsiaFundNameCompleted As GetLifeAsiaFundNameCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateLifeAsiaFundNameCompleted As UpdateLifeAsiaFundNameCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateFundNameCompleted As UpdateFundNameCompletedEventHandler
        
        '''<remarks/>
        Public Event AddMarkinReqCompleted As AddMarkinReqCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPendingMarkinReqListCompleted As GetPendingMarkinReqListCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMarkinReqStatusCompleted As UpdateMarkinReqStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event SurByAmountCompleted As SurByAmountCompletedEventHandler
        
        '''<remarks/>
        Public Event SurEnableEffDateCompleted As SurEnableEffDateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBoosterPlanByBoosterRiderCompleted As GetBoosterPlanByBoosterRiderCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMarkInRequestTypeListCompleted As GetMarkInRequestTypeListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMarkInStatusListCompleted As GetMarkInStatusListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMarkInInfoCompleted As GetMarkInInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCompanyNameCompleted As GetCompanyNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyInfoListCompleted As GetPolicyInfoListCompletedEventHandler
        
        '''<remarks/>
        Public Event ResumeCapsilTransCompleted As ResumeCapsilTransCompletedEventHandler
        
        '''<remarks/>
        Public Event getPaymentSourceCompleted As getPaymentSourceCompletedEventHandler
        
        '''<remarks/>
        Public Event getIsExRateExistCompleted As getIsExRateExistCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMoneyAdjRecCompleted As UpdateMoneyAdjRecCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAcctMappingCompleted As GetAcctMappingCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMoneyAdjEnquireCompleted As GetMoneyAdjEnquireCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUWTransHistCompleted As GetUWTransHistCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUWTransTypeCompleted As GetUWTransTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUWRiderCompleted As GetUWRiderCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUWCapsilRiderCompleted As GetUWCapsilRiderCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRiderStatusDescCompleted As GetRiderStatusDescCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveUWTransHistCompleted As SaveUWTransHistCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUWInfoCompleted As GetUWInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUWInfoForCalcCompleted As GetUWInfoForCalcCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveUWInfoCompleted As SaveUWInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUWSysInfoCompleted As GetUWSysInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUwWorksheetPrtInfoCompleted As GetUwWorksheetPrtInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLoadingExclusionPrtInfoCompleted As GetLoadingExclusionPrtInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUWMessageCompleted As GetUWMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveUWMessageCompleted As SaveUWMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPoilcyStatusCompleted As GetPoilcyStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransQueSummaryValCompleted As GetTransQueSummaryValCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransSummaryBouncedChequeCompleted As GetTransSummaryBouncedChequeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransSummaryClientRoleCompleted As GetTransSummaryClientRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransQueSummaryRIHistCompleted As GetTransQueSummaryRIHistCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransSummaryPolicyAddressLogCompleted As GetTransSummaryPolicyAddressLogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransSummaryChangeServiceAgentCompleted As GetTransSummaryChangeServiceAgentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransSummaryChangeDOBCompleted As GetTransSummaryChangeDOBCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransSummaryPremHolidayCompleted As GetTransSummaryPremHolidayCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransSummaryCovHistCompleted As GetTransSummaryCovHistCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransSummaryRPUCompleted As GetTransSummaryRPUCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransRemarkTypeCompleted As GetTransRemarkTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransRemarkCompleted As GetTransRemarkCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveTransRemarkCompleted As SaveTransRemarkCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransSummaryPOHCompleted As GetTransSummaryPOHCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransSummaryAddBoosterCompleted As GetTransSummaryAddBoosterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransSummaryFundAlloCompleted As GetTransSummaryFundAlloCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransSummaryChgCurrCompleted As GetTransSummaryChgCurrCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransSummaryCompleted As GetTransSummaryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransSummaryLASCompleted As GetTransSummaryLASCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAutoMaturityRecordCompleted As GetAutoMaturityRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyNoteCompleted As GetPolicyNoteCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyNoteByPolicyCompleted As GetPolicyNoteByPolicyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyNoteByPageCompleted As GetPolicyNoteByPageCompletedEventHandler
        
        '''<remarks/>
        Public Event SavePolicyNoteCompleted As SavePolicyNoteCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerCompleted As GetCustomerCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerCoverageDetailCompleted As GetCustomerCoverageDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBenefitPlanCodeInfoCompleted As GetBenefitPlanCodeInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerInfoByPolicyNoCompleted As GetCustomerInfoByPolicyNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAgingInfoCompleted As GetAgingInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCCSInfoCompleted As GetCCSInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAgentInfoByPolicyNoCompleted As GetAgentInfoByPolicyNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRemarkTypeCompleted As GetRemarkTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event TraditionalParSurCompleted As TraditionalParSurCompletedEventHandler
        
        '''<remarks/>
        Public Event PolicyValueEnqCompleted As PolicyValueEnqCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyProjectionCompleted As GetPolicyProjectionCompletedEventHandler
        
        '''<remarks/>
        Public Event InvokeBOMethodCompleted As InvokeBOMethodCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDividendAdjustTransactionCompleted As GetDividendAdjustTransactionCompletedEventHandler
        
        '''<remarks/>
        Public Event DividendAdjustInputCompleted As DividendAdjustInputCompletedEventHandler
        
        '''<remarks/>
        Public Event DividendAdjustApproveCompleted As DividendAdjustApproveCompletedEventHandler
        
        '''<remarks/>
        Public Event ValueWithdrawCompleted As ValueWithdrawCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCashValueRiderCompleted As GetCashValueRiderCompletedEventHandler
        
        '''<remarks/>
        Public Event DownloadCashValueRiderCompleted As DownloadCashValueRiderCompletedEventHandler
        
        '''<remarks/>
        Public Event RejectDDACompleted As RejectDDACompletedEventHandler
        
        '''<remarks/>
        Public Event GetDDARefEnquiryCompleted As GetDDARefEnquiryCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAPLStatusCompleted As UpdateAPLStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessVpoCompleted As ProcessVpoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLCPPaymentByPaymentNoCompleted As GetLCPPaymentByPaymentNoCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessRpuCompleted As ProcessRpuCompletedEventHandler
        
        '''<remarks/>
        Public Event QuoteRpuCompleted As QuoteRpuCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLCPPaymentByCaseNoCompleted As GetLCPPaymentByCaseNoCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckLCPPaymentCompleted As CheckLCPPaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event AddLcpPaymentCompleted As AddLcpPaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLCPChequeDetailCompleted As GetLCPChequeDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetChequeHistCompleted As GetChequeHistCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidateChequeCompleted As ValidateChequeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetChqDSCompleted As GetChqDSCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateUserCompleted As UpdateUserCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteUserCompleted As DeleteUserCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPositionInfoCompleted As GetPositionInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event AddPositionCompleted As AddPositionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdatePositionCompleted As UpdatePositionCompletedEventHandler
        
        '''<remarks/>
        Public Event DeletePositionCompleted As DeletePositionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetChequeLimitInfoCompleted As GetChequeLimitInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event AddChequeLimitCompleted As AddChequeLimitCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateChequeLimitCompleted As UpdateChequeLimitCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteChequeLimitCompleted As DeleteChequeLimitCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckIsPositionInUseCompleted As CheckIsPositionInUseCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMultiCurCompleted As GetMultiCurCompletedEventHandler
        
        '''<remarks/>
        Public Event GetExchangeRateCompleted As GetExchangeRateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetExchangeRateWithPolicyNoCompleted As GetExchangeRateWithPolicyNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCurrencyCodeCompleted As GetCurrencyCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event ChkChqAuthPosCompleted As ChkChqAuthPosCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFuncCategoryCompleted As GetFuncCategoryCompletedEventHandler
        
        '''<remarks/>
        Public Event MinContribValidationCompleted As MinContribValidationCompletedEventHandler
        
        '''<remarks/>
        Public Event AllowParSurMinBalCompleted As AllowParSurMinBalCompletedEventHandler
        
        '''<remarks/>
        Public Event AllowParSurrValidationCompleted As AllowParSurrValidationCompletedEventHandler
        
        '''<remarks/>
        Public Event ParSurMinAmtValidationCompleted As ParSurMinAmtValidationCompletedEventHandler
        
        '''<remarks/>
        Public Event ParSurMaxPercValidationCompleted As ParSurMaxPercValidationCompletedEventHandler
        
        '''<remarks/>
        Public Event FundSWMinSwitchAmtValidationCompleted As FundSWMinSwitchAmtValidationCompletedEventHandler
        
        '''<remarks/>
        Public Event FundSWAllowSwitchingValidationCompleted As FundSWAllowSwitchingValidationCompletedEventHandler
        
        '''<remarks/>
        Public Event ReinstateValidationCompleted As ReinstateValidationCompletedEventHandler
        
        '''<remarks/>
        Public Event AllowChgOwnerValidationCompleted As AllowChgOwnerValidationCompletedEventHandler
        
        '''<remarks/>
        Public Event AllowChgModeValidationCompleted As AllowChgModeValidationCompletedEventHandler
        
        '''<remarks/>
        Public Event AllowChgBTValidationCompleted As AllowChgBTValidationCompletedEventHandler
        
        '''<remarks/>
        Public Event ChkPolicyInforceCompleted As ChkPolicyInforceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransQStatusCompleted As GetTransQStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event saveAddBoosterSynRecordCompleted As saveAddBoosterSynRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event saveAddPDFSynRecordCompleted As saveAddPDFSynRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event checkAddPDFSynRecordCompleted As checkAddPDFSynRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event saveWithdrawPDFRecordCompleted As saveWithdrawPDFRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPDFEnquiryCompleted As GetPDFEnquiryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSWInMainRecordCompleted As GetSWInMainRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event saveFundAllocSynRecordCompleted As saveFundAllocSynRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFundAllocRecordCompleted As GetFundAllocRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveParSurrSynRecordCompleted As SaveParSurrSynRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllParSurrRecordCompleted As GetAllParSurrRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event saveFSSynRecordCompleted As saveFSSynRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event saveReInstateSynRecordCompleted As saveReInstateSynRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReinstateEnquiryCompleted As GetReinstateEnquiryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReinstateRecordCompleted As GetReinstateRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckReinstateTheOneMedicalCompleted As CheckReinstateTheOneMedicalCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBeneShareRecordCompleted As GetBeneShareRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event saveCltRelationSynRecordCompleted As saveCltRelationSynRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetContAssignCompleted As GetContAssignCompletedEventHandler
        
        '''<remarks/>
        Public Event GetContBeneCompleted As GetContBeneCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCIWPolicyaccountCompleted As GetCIWPolicyaccountCompletedEventHandler
        
        '''<remarks/>
        Public Event GetContOwnerCompleted As GetContOwnerCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPayorCompleted As GetPayorCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBillingChgRecordCompleted As GetBillingChgRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPaymentMethEnqCompleted As GetPaymentMethEnqCompletedEventHandler
        
        '''<remarks/>
        Public Event GetModeCodeCompleted As GetModeCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBillingChgQuotCompleted As GetBillingChgQuotCompletedEventHandler
        
        '''<remarks/>
        Public Event saveBCSynRecordCompleted As saveBCSynRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcEventLogCompleted As ProcEventLogCompletedEventHandler
        
        '''<remarks/>
        Public Event PrepareTransQDTCompleted As PrepareTransQDTCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransQueRecordCompleted As GetTransQueRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransQueRecordBetterVersionCompleted As GetTransQueRecordBetterVersionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransHeadTypeCompleted As GetTransHeadTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLogonDBCompleted As GetLogonDBCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMenuItemCompleted As GetMenuItemCompletedEventHandler
        
        '''<remarks/>
        Public Event getPayment_FreqCompleted As getPayment_FreqCompletedEventHandler
        
        '''<remarks/>
        Public Event getPayment_MethCompleted As getPayment_MethCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBillingNoCompleted As GetBillingNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCIWOwnerInsuredCompleted As GetCIWOwnerInsuredCompletedEventHandler
        
        '''<remarks/>
        Public Event SendNoClaimDiscReqCompleted As SendNoClaimDiscReqCompletedEventHandler
        
        '''<remarks/>
        Public Event savePremiumHolidaySynRecordCompleted As savePremiumHolidaySynRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPremiumHolidayMainRecordCompleted As GetPremiumHolidayMainRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPremiumHolidayMainRecordByPolicyCompleted As GetPremiumHolidayMainRecordByPolicyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAvailableFundListCompleted As GetAvailableFundListCompletedEventHandler
        
        '''<remarks/>
        Public Event PlanNotAllowAECardCompleted As PlanNotAllowAECardCompletedEventHandler
        
        '''<remarks/>
        Public Event UFProductCheckingCompleted As UFProductCheckingCompletedEventHandler
        
        '''<remarks/>
        Public Event FreeWithdrawalPeriodCheckingCompleted As FreeWithdrawalPeriodCheckingCompletedEventHandler
        
        '''<remarks/>
        Public Event CommissionClawbackCheckingCompleted As CommissionClawbackCheckingCompletedEventHandler
        
        '''<remarks/>
        Public Event PlanWarningMessageGenericCompleted As PlanWarningMessageGenericCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCashFlowListCompleted As GetCashFlowListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPremiumRoutineCompleted As GetPremiumRoutineCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRiderPremiumCompleted As GetRiderPremiumCompletedEventHandler
        
        '''<remarks/>
        Public Event GetContractDetailCompleted As GetContractDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInterestQuotationCompleted As GetInterestQuotationCompletedEventHandler
        
        '''<remarks/>
        Public Event EnqSurByCashflowBOCompleted As EnqSurByCashflowBOCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidAgentByProductTypeCompleted As ValidAgentByProductTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyRecordCompleted As GetPolicyRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBECustomerCompleted As GetBECustomerCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveExchangeRateCompleted As SaveExchangeRateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInforceIllustrationCompleted As GetInforceIllustrationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInforceIllustrationPhaseIICompleted As GetInforceIllustrationPhaseIICompletedEventHandler
        
        '''<remarks/>
        Public Event SaveFundPriceCompleted As SaveFundPriceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCapsilPolicyRecordCompleted As GetCapsilPolicyRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyTypeCompleted As GetPolicyTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event RequiredAddrProofWarningCompleted As RequiredAddrProofWarningCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAgentRecordCompleted As GetAgentRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCapsilPolicyNoCompleted As GetCapsilPolicyNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLifeAsiaPolicyNoCompleted As GetLifeAsiaPolicyNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPaymentHistoryCompleted As GetPaymentHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event ReprintPolicyScheduleCompleted As ReprintPolicyScheduleCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelReceiptCompleted As CancelReceiptCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReceipCancellationLogByIdCompleted As GetReceipCancellationLogByIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBounceChequeReasonListCompleted As GetBounceChequeReasonListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRpuPendingMemoCompleted As GetRpuPendingMemoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRpuProjectionLetterCompleted As GetRpuProjectionLetterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBounceChequePendingMemoCompleted As GetBounceChequePendingMemoCompletedEventHandler
        
        '''<remarks/>
        Public Event SubmitBounceChequeLetterRequestCompleted As SubmitBounceChequeLetterRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSoftCodeCompleted As GetSoftCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCompSelectionRecordCompleted As GetCompSelectionRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCompSelectionWithCustNoCompleted As GetCompSelectionWithCustNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAvailComponentCompleted As GetAvailComponentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCovMaintHistCompleted As GetCovMaintHistCompletedEventHandler
        
        '''<remarks/>
        Public Event GetComponentSysTableCompleted As GetComponentSysTableCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDistChannelCompleted As GetDistChannelCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSpecPayOptCompleted As GetSpecPayOptCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyClientSysTableCompleted As GetPolicyClientSysTableCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFundAllocSysTableCompleted As GetFundAllocSysTableCompletedEventHandler
        
        '''<remarks/>
        Public Event GetContExDetailCompleted As GetContExDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCompDetailRecordCompleted As GetCompDetailRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFundDirectRecordCompleted As GetFundDirectRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPoInfoCompleted As GetPoInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFundInfoCompleted As GetFundInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIAAccountTableSchemaCompleted As GetIAAccountTableSchemaCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyFundDetailCompleted As GetPolicyFundDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTrailerMapCompleted As GetTrailerMapCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUFPolicyFundDetailCompleted As GetUFPolicyFundDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSurValueCompleted As GetSurValueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSurrChargeCompleted As GetSurrChargeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyAccountBalanceCompleted As GetPolicyAccountBalanceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClientRoleCompleted As GetClientRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClientRoleExtendCompleted As GetClientRoleExtendCompletedEventHandler
        
        '''<remarks/>
        Public Event PolicyAssignedCompleted As PolicyAssignedCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSubAcctBalCompleted As GetSubAcctBalCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSubAcctPostCompleted As GetSubAcctPostCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAgentCommDetailCompleted As GetAgentCommDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAgentSplitCompleted As GetAgentSplitCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSpecialTermsDetailsCompleted As GetSpecialTermsDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSpecialTermsByTrailerCompleted As GetSpecialTermsByTrailerCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCoveredLifeCompleted As GetCoveredLifeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFundHoldingCompleted As GetFundHoldingCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTotalInvestPremPaidFromCAPSILCompleted As GetTotalInvestPremPaidFromCAPSILCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTranHistCompleted As GetTranHistCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransactionHistoryCompleted As GetTransactionHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event AddAnotherLifeRecordCompleted As AddAnotherLifeRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeComponentRecordCompleted As ChangeComponentRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeComponentRecordThroughBackEndCompleted As ChangeComponentRecordThroughBackEndCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSubAccountBalanceCompleted As GetSubAccountBalanceCompletedEventHandler
        
        '''<remarks/>
        Public Event OverCoolOffPeriodCompleted As OverCoolOffPeriodCompletedEventHandler
        
        '''<remarks/>
        Public Event LapseDateValidationCompleted As LapseDateValidationCompletedEventHandler
        
        '''<remarks/>
        Public Event TransTypeValidationCompleted As TransTypeValidationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLetterHeaderCompleted As GetLetterHeaderCompletedEventHandler
        
        '''<remarks/>
        Public Event SavePolSurrSynRecordCompleted As SavePolSurrSynRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolSurrRecordCompleted As GetPolSurrRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLastSurrReqCompleted As GetLastSurrReqCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveValTransSynRecordCompleted As SaveValTransSynRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetValTransRecordCompleted As GetValTransRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUnitTranCompleted As GetUnitTranCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPOSValHistoryCompleted As GetPOSValHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPOSValHistory2Completed As GetPOSValHistory2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetChqLimitCompleted As GetChqLimitCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNewChqLimitCompleted As GetNewChqLimitCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserInfoCompleted As GetUserInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCategoryIDCompleted As GetCategoryIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCurrencyIDCompleted As GetCurrencyIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPositionAndDeptCompleted As GetPositionAndDeptCompletedEventHandler
        
        '''<remarks/>
        Public Event AddNewUserCompleted As AddNewUserCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SearchPolicy_MCU", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SearchPolicy_MCU(ByVal strPolicy As String, ByRef dsPolicy As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SearchPolicy_MCU", New Object() {strPolicy, dsPolicy, strErr})
            dsPolicy = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SearchPolicy_MCUAsync(ByVal strPolicy As String, ByVal dsPolicy As System.Data.DataSet, ByVal strErr As String)
            Me.SearchPolicy_MCUAsync(strPolicy, dsPolicy, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SearchPolicy_MCUAsync(ByVal strPolicy As String, ByVal dsPolicy As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.SearchPolicy_MCUOperationCompleted Is Nothing) Then
                Me.SearchPolicy_MCUOperationCompleted = AddressOf Me.OnSearchPolicy_MCUOperationCompleted
            End If
            Me.InvokeAsync("SearchPolicy_MCU", New Object() {strPolicy, dsPolicy, strErr}, Me.SearchPolicy_MCUOperationCompleted, userState)
        End Sub
        
        Private Sub OnSearchPolicy_MCUOperationCompleted(ByVal arg As Object)
            If (Not (Me.SearchPolicy_MCUCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SearchPolicy_MCUCompleted(Me, New SearchPolicy_MCUCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetRiderDefaultSISetting", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRiderDefaultSISetting(ByVal defaultType As String, ByRef dtSetting As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetRiderDefaultSISetting", New Object() {defaultType, dtSetting, strErr})
            dtSetting = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRiderDefaultSISettingAsync(ByVal defaultType As String, ByVal dtSetting As System.Data.DataTable, ByVal strErr As String)
            Me.GetRiderDefaultSISettingAsync(defaultType, dtSetting, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRiderDefaultSISettingAsync(ByVal defaultType As String, ByVal dtSetting As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetRiderDefaultSISettingOperationCompleted Is Nothing) Then
                Me.GetRiderDefaultSISettingOperationCompleted = AddressOf Me.OnGetRiderDefaultSISettingOperationCompleted
            End If
            Me.InvokeAsync("GetRiderDefaultSISetting", New Object() {defaultType, dtSetting, strErr}, Me.GetRiderDefaultSISettingOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRiderDefaultSISettingOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRiderDefaultSISettingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRiderDefaultSISettingCompleted(Me, New GetRiderDefaultSISettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPolicyLastEffectiveDate", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyLastEffectiveDate(ByVal strPolicyNo As String, ByRef effDate As Date, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPolicyLastEffectiveDate", New Object() {strPolicyNo, effDate, strErr})
            effDate = CType(results(1),Date)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyLastEffectiveDateAsync(ByVal strPolicyNo As String, ByVal effDate As Date, ByVal strErr As String)
            Me.GetPolicyLastEffectiveDateAsync(strPolicyNo, effDate, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyLastEffectiveDateAsync(ByVal strPolicyNo As String, ByVal effDate As Date, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPolicyLastEffectiveDateOperationCompleted Is Nothing) Then
                Me.GetPolicyLastEffectiveDateOperationCompleted = AddressOf Me.OnGetPolicyLastEffectiveDateOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyLastEffectiveDate", New Object() {strPolicyNo, effDate, strErr}, Me.GetPolicyLastEffectiveDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyLastEffectiveDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyLastEffectiveDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyLastEffectiveDateCompleted(Me, New GetPolicyLastEffectiveDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CheckNoReinstatementRider", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckNoReinstatementRider(ByVal strPolicyNo As String, ByRef dtRider As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckNoReinstatementRider", New Object() {strPolicyNo, dtRider, strErr})
            dtRider = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckNoReinstatementRiderAsync(ByVal strPolicyNo As String, ByVal dtRider As System.Data.DataTable, ByVal strErr As String)
            Me.CheckNoReinstatementRiderAsync(strPolicyNo, dtRider, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckNoReinstatementRiderAsync(ByVal strPolicyNo As String, ByVal dtRider As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.CheckNoReinstatementRiderOperationCompleted Is Nothing) Then
                Me.CheckNoReinstatementRiderOperationCompleted = AddressOf Me.OnCheckNoReinstatementRiderOperationCompleted
            End If
            Me.InvokeAsync("CheckNoReinstatementRider", New Object() {strPolicyNo, dtRider, strErr}, Me.CheckNoReinstatementRiderOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckNoReinstatementRiderOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckNoReinstatementRiderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckNoReinstatementRiderCompleted(Me, New CheckNoReinstatementRiderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPolicyAdminFNARecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyAdminFNARecord(ByVal strPolicyNo As String, ByRef dsFNAInfo As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPolicyAdminFNARecord", New Object() {strPolicyNo, dsFNAInfo, strErr})
            dsFNAInfo = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyAdminFNARecordAsync(ByVal strPolicyNo As String, ByVal dsFNAInfo As System.Data.DataSet, ByVal strErr As String)
            Me.GetPolicyAdminFNARecordAsync(strPolicyNo, dsFNAInfo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyAdminFNARecordAsync(ByVal strPolicyNo As String, ByVal dsFNAInfo As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPolicyAdminFNARecordOperationCompleted Is Nothing) Then
                Me.GetPolicyAdminFNARecordOperationCompleted = AddressOf Me.OnGetPolicyAdminFNARecordOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyAdminFNARecord", New Object() {strPolicyNo, dsFNAInfo, strErr}, Me.GetPolicyAdminFNARecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyAdminFNARecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyAdminFNARecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyAdminFNARecordCompleted(Me, New GetPolicyAdminFNARecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/addPolicyAdminFNARecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function addPolicyAdminFNARecord(ByVal strPolicyNo As String, ByRef dt As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("addPolicyAdminFNARecord", New Object() {strPolicyNo, dt, strErr})
            dt = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub addPolicyAdminFNARecordAsync(ByVal strPolicyNo As String, ByVal dt As System.Data.DataSet, ByVal strErr As String)
            Me.addPolicyAdminFNARecordAsync(strPolicyNo, dt, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub addPolicyAdminFNARecordAsync(ByVal strPolicyNo As String, ByVal dt As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.addPolicyAdminFNARecordOperationCompleted Is Nothing) Then
                Me.addPolicyAdminFNARecordOperationCompleted = AddressOf Me.OnaddPolicyAdminFNARecordOperationCompleted
            End If
            Me.InvokeAsync("addPolicyAdminFNARecord", New Object() {strPolicyNo, dt, strErr}, Me.addPolicyAdminFNARecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnaddPolicyAdminFNARecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.addPolicyAdminFNARecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent addPolicyAdminFNARecordCompleted(Me, New addPolicyAdminFNARecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/deletePolicyAdminFNARecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function deletePolicyAdminFNARecord(ByVal strFNAID As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("deletePolicyAdminFNARecord", New Object() {strFNAID, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub deletePolicyAdminFNARecordAsync(ByVal strFNAID As String, ByVal strErr As String)
            Me.deletePolicyAdminFNARecordAsync(strFNAID, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub deletePolicyAdminFNARecordAsync(ByVal strFNAID As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.deletePolicyAdminFNARecordOperationCompleted Is Nothing) Then
                Me.deletePolicyAdminFNARecordOperationCompleted = AddressOf Me.OndeletePolicyAdminFNARecordOperationCompleted
            End If
            Me.InvokeAsync("deletePolicyAdminFNARecord", New Object() {strFNAID, strErr}, Me.deletePolicyAdminFNARecordOperationCompleted, userState)
        End Sub
        
        Private Sub OndeletePolicyAdminFNARecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.deletePolicyAdminFNARecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent deletePolicyAdminFNARecordCompleted(Me, New deletePolicyAdminFNARecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/changePolicyAdminFNARecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function changePolicyAdminFNARecord(ByVal strFNAID As String, ByRef dt As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("changePolicyAdminFNARecord", New Object() {strFNAID, dt, strErr})
            dt = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub changePolicyAdminFNARecordAsync(ByVal strFNAID As String, ByVal dt As System.Data.DataSet, ByVal strErr As String)
            Me.changePolicyAdminFNARecordAsync(strFNAID, dt, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub changePolicyAdminFNARecordAsync(ByVal strFNAID As String, ByVal dt As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.changePolicyAdminFNARecordOperationCompleted Is Nothing) Then
                Me.changePolicyAdminFNARecordOperationCompleted = AddressOf Me.OnchangePolicyAdminFNARecordOperationCompleted
            End If
            Me.InvokeAsync("changePolicyAdminFNARecord", New Object() {strFNAID, dt, strErr}, Me.changePolicyAdminFNARecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnchangePolicyAdminFNARecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.changePolicyAdminFNARecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent changePolicyAdminFNARecordCompleted(Me, New changePolicyAdminFNARecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SendMail", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendMail(ByVal strHost As String, ByVal strFrom As String, ByVal strTo() As String, ByVal strCC() As String, ByVal strBcc() As String, ByVal strSubject As String, ByVal strBody As String, ByVal strAttachName As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal oAttachment() As Byte, ByRef strErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("SendMail", New Object() {strHost, strFrom, strTo, strCC, strBcc, strSubject, strBody, strAttachName, oAttachment, strErrMsg})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendMailAsync(ByVal strHost As String, ByVal strFrom As String, ByVal strTo() As String, ByVal strCC() As String, ByVal strBcc() As String, ByVal strSubject As String, ByVal strBody As String, ByVal strAttachName As String, ByVal oAttachment() As Byte, ByVal strErrMsg As String)
            Me.SendMailAsync(strHost, strFrom, strTo, strCC, strBcc, strSubject, strBody, strAttachName, oAttachment, strErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendMailAsync(ByVal strHost As String, ByVal strFrom As String, ByVal strTo() As String, ByVal strCC() As String, ByVal strBcc() As String, ByVal strSubject As String, ByVal strBody As String, ByVal strAttachName As String, ByVal oAttachment() As Byte, ByVal strErrMsg As String, ByVal userState As Object)
            If (Me.SendMailOperationCompleted Is Nothing) Then
                Me.SendMailOperationCompleted = AddressOf Me.OnSendMailOperationCompleted
            End If
            Me.InvokeAsync("SendMail", New Object() {strHost, strFrom, strTo, strCC, strBcc, strSubject, strBody, strAttachName, oAttachment, strErrMsg}, Me.SendMailOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendMailOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendMailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendMailCompleted(Me, New SendMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransSummaryChangeInsured", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransSummaryChangeInsured(ByVal TransId As Integer, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransSummaryChangeInsured", New Object() {TransId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryChangeInsuredAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetTransSummaryChangeInsuredAsync(TransId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryChangeInsuredAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransSummaryChangeInsuredOperationCompleted Is Nothing) Then
                Me.GetTransSummaryChangeInsuredOperationCompleted = AddressOf Me.OnGetTransSummaryChangeInsuredOperationCompleted
            End If
            Me.InvokeAsync("GetTransSummaryChangeInsured", New Object() {TransId, ds, strErr}, Me.GetTransSummaryChangeInsuredOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransSummaryChangeInsuredOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransSummaryChangeInsuredCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransSummaryChangeInsuredCompleted(Me, New GetTransSummaryChangeInsuredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/HasOutstandingClaim", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HasOutstandingClaim(ByVal strPolicy As String, ByRef blnHasOutstandingClaim As Boolean, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("HasOutstandingClaim", New Object() {strPolicy, blnHasOutstandingClaim, strErr})
            blnHasOutstandingClaim = CType(results(1),Boolean)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HasOutstandingClaimAsync(ByVal strPolicy As String, ByVal blnHasOutstandingClaim As Boolean, ByVal strErr As String)
            Me.HasOutstandingClaimAsync(strPolicy, blnHasOutstandingClaim, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HasOutstandingClaimAsync(ByVal strPolicy As String, ByVal blnHasOutstandingClaim As Boolean, ByVal strErr As String, ByVal userState As Object)
            If (Me.HasOutstandingClaimOperationCompleted Is Nothing) Then
                Me.HasOutstandingClaimOperationCompleted = AddressOf Me.OnHasOutstandingClaimOperationCompleted
            End If
            Me.InvokeAsync("HasOutstandingClaim", New Object() {strPolicy, blnHasOutstandingClaim, strErr}, Me.HasOutstandingClaimOperationCompleted, userState)
        End Sub
        
        Private Sub OnHasOutstandingClaimOperationCompleted(ByVal arg As Object)
            If (Not (Me.HasOutstandingClaimCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HasOutstandingClaimCompleted(Me, New HasOutstandingClaimCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/AllowChangeInsured", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AllowChangeInsured(ByVal strPolicyNo As String, ByRef blnAllow As Boolean, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("AllowChangeInsured", New Object() {strPolicyNo, blnAllow, strErr})
            blnAllow = CType(results(1),Boolean)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AllowChangeInsuredAsync(ByVal strPolicyNo As String, ByVal blnAllow As Boolean, ByVal strErr As String)
            Me.AllowChangeInsuredAsync(strPolicyNo, blnAllow, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AllowChangeInsuredAsync(ByVal strPolicyNo As String, ByVal blnAllow As Boolean, ByVal strErr As String, ByVal userState As Object)
            If (Me.AllowChangeInsuredOperationCompleted Is Nothing) Then
                Me.AllowChangeInsuredOperationCompleted = AddressOf Me.OnAllowChangeInsuredOperationCompleted
            End If
            Me.InvokeAsync("AllowChangeInsured", New Object() {strPolicyNo, blnAllow, strErr}, Me.AllowChangeInsuredOperationCompleted, userState)
        End Sub
        
        Private Sub OnAllowChangeInsuredOperationCompleted(ByVal arg As Object)
            If (Not (Me.AllowChangeInsuredCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AllowChangeInsuredCompleted(Me, New AllowChangeInsuredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/IsPolicyChangeInsured", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsPolicyChangeInsured(ByVal strPolicyNo As String, ByRef blnInsuredChanged As Boolean, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("IsPolicyChangeInsured", New Object() {strPolicyNo, blnInsuredChanged, strErr})
            blnInsuredChanged = CType(results(1),Boolean)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsPolicyChangeInsuredAsync(ByVal strPolicyNo As String, ByVal blnInsuredChanged As Boolean, ByVal strErr As String)
            Me.IsPolicyChangeInsuredAsync(strPolicyNo, blnInsuredChanged, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsPolicyChangeInsuredAsync(ByVal strPolicyNo As String, ByVal blnInsuredChanged As Boolean, ByVal strErr As String, ByVal userState As Object)
            If (Me.IsPolicyChangeInsuredOperationCompleted Is Nothing) Then
                Me.IsPolicyChangeInsuredOperationCompleted = AddressOf Me.OnIsPolicyChangeInsuredOperationCompleted
            End If
            Me.InvokeAsync("IsPolicyChangeInsured", New Object() {strPolicyNo, blnInsuredChanged, strErr}, Me.IsPolicyChangeInsuredOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsPolicyChangeInsuredOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsPolicyChangeInsuredCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsPolicyChangeInsuredCompleted(Me, New IsPolicyChangeInsuredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetInforceCoverage", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInforceCoverage(ByVal intInsuredId As Long, ByRef dtCov As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetInforceCoverage", New Object() {intInsuredId, dtCov, strErr})
            dtCov = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInforceCoverageAsync(ByVal intInsuredId As Long, ByVal dtCov As System.Data.DataTable, ByVal strErr As String)
            Me.GetInforceCoverageAsync(intInsuredId, dtCov, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInforceCoverageAsync(ByVal intInsuredId As Long, ByVal dtCov As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetInforceCoverageOperationCompleted Is Nothing) Then
                Me.GetInforceCoverageOperationCompleted = AddressOf Me.OnGetInforceCoverageOperationCompleted
            End If
            Me.InvokeAsync("GetInforceCoverage", New Object() {intInsuredId, dtCov, strErr}, Me.GetInforceCoverageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInforceCoverageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInforceCoverageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInforceCoverageCompleted(Me, New GetInforceCoverageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetClawbackCampaignQuotation", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClawbackCampaignQuotation(ByVal strPolicyNo As String, ByRef dtEffectiveDate As Date, ByRef dblAvailablePremiumSusp As Double, ByRef dblClawbackFromPremiumSusp As Double, ByRef dblAvailablePaymentSusp As Double, ByRef dblClawbackFromPaymentSusp As Double, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetClawbackCampaignQuotation", New Object() {strPolicyNo, dtEffectiveDate, dblAvailablePremiumSusp, dblClawbackFromPremiumSusp, dblAvailablePaymentSusp, dblClawbackFromPaymentSusp, strErr})
            dtEffectiveDate = CType(results(1),Date)
            dblAvailablePremiumSusp = CType(results(2),Double)
            dblClawbackFromPremiumSusp = CType(results(3),Double)
            dblAvailablePaymentSusp = CType(results(4),Double)
            dblClawbackFromPaymentSusp = CType(results(5),Double)
            strErr = CType(results(6),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClawbackCampaignQuotationAsync(ByVal strPolicyNo As String, ByVal dtEffectiveDate As Date, ByVal dblAvailablePremiumSusp As Double, ByVal dblClawbackFromPremiumSusp As Double, ByVal dblAvailablePaymentSusp As Double, ByVal dblClawbackFromPaymentSusp As Double, ByVal strErr As String)
            Me.GetClawbackCampaignQuotationAsync(strPolicyNo, dtEffectiveDate, dblAvailablePremiumSusp, dblClawbackFromPremiumSusp, dblAvailablePaymentSusp, dblClawbackFromPaymentSusp, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClawbackCampaignQuotationAsync(ByVal strPolicyNo As String, ByVal dtEffectiveDate As Date, ByVal dblAvailablePremiumSusp As Double, ByVal dblClawbackFromPremiumSusp As Double, ByVal dblAvailablePaymentSusp As Double, ByVal dblClawbackFromPaymentSusp As Double, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetClawbackCampaignQuotationOperationCompleted Is Nothing) Then
                Me.GetClawbackCampaignQuotationOperationCompleted = AddressOf Me.OnGetClawbackCampaignQuotationOperationCompleted
            End If
            Me.InvokeAsync("GetClawbackCampaignQuotation", New Object() {strPolicyNo, dtEffectiveDate, dblAvailablePremiumSusp, dblClawbackFromPremiumSusp, dblAvailablePaymentSusp, dblClawbackFromPaymentSusp, strErr}, Me.GetClawbackCampaignQuotationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClawbackCampaignQuotationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClawbackCampaignQuotationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClawbackCampaignQuotationCompleted(Me, New GetClawbackCampaignQuotationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ClawbackCampaignDiscount", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ClawbackCampaignDiscount(ByVal strPolicyNo As String, ByRef dtEffectiveDate As Date, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ClawbackCampaignDiscount", New Object() {strPolicyNo, dtEffectiveDate, strErr})
            dtEffectiveDate = CType(results(1),Date)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ClawbackCampaignDiscountAsync(ByVal strPolicyNo As String, ByVal dtEffectiveDate As Date, ByVal strErr As String)
            Me.ClawbackCampaignDiscountAsync(strPolicyNo, dtEffectiveDate, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClawbackCampaignDiscountAsync(ByVal strPolicyNo As String, ByVal dtEffectiveDate As Date, ByVal strErr As String, ByVal userState As Object)
            If (Me.ClawbackCampaignDiscountOperationCompleted Is Nothing) Then
                Me.ClawbackCampaignDiscountOperationCompleted = AddressOf Me.OnClawbackCampaignDiscountOperationCompleted
            End If
            Me.InvokeAsync("ClawbackCampaignDiscount", New Object() {strPolicyNo, dtEffectiveDate, strErr}, Me.ClawbackCampaignDiscountOperationCompleted, userState)
        End Sub
        
        Private Sub OnClawbackCampaignDiscountOperationCompleted(ByVal arg As Object)
            If (Not (Me.ClawbackCampaignDiscountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ClawbackCampaignDiscountCompleted(Me, New ClawbackCampaignDiscountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransactionRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransactionRecord(ByVal dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransactionRecord", New Object() {dsSendData, dsReceData, strErr})
            dsReceData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransactionRecordAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetTransactionRecordAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransactionRecordAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransactionRecordOperationCompleted Is Nothing) Then
                Me.GetTransactionRecordOperationCompleted = AddressOf Me.OnGetTransactionRecordOperationCompleted
            End If
            Me.InvokeAsync("GetTransactionRecord", New Object() {dsSendData, dsReceData, strErr}, Me.GetTransactionRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransactionRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransactionRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransactionRecordCompleted(Me, New GetTransactionRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransactionRecordDetail", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransactionRecordDetail(ByVal iTranID As Integer, ByVal sFunctionType As String, ByRef strErr As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTransactionRecordDetail", New Object() {iTranID, sFunctionType, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransactionRecordDetailAsync(ByVal iTranID As Integer, ByVal sFunctionType As String, ByVal strErr As String)
            Me.GetTransactionRecordDetailAsync(iTranID, sFunctionType, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransactionRecordDetailAsync(ByVal iTranID As Integer, ByVal sFunctionType As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransactionRecordDetailOperationCompleted Is Nothing) Then
                Me.GetTransactionRecordDetailOperationCompleted = AddressOf Me.OnGetTransactionRecordDetailOperationCompleted
            End If
            Me.InvokeAsync("GetTransactionRecordDetail", New Object() {iTranID, sFunctionType, strErr}, Me.GetTransactionRecordDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransactionRecordDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransactionRecordDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransactionRecordDetailCompleted(Me, New GetTransactionRecordDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetAllClientTransactionRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllClientTransactionRecord(ByVal strClientID As String, ByVal iTranID As Integer, ByRef dtResult As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAllClientTransactionRecord", New Object() {strClientID, iTranID, dtResult, strErr})
            dtResult = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllClientTransactionRecordAsync(ByVal strClientID As String, ByVal iTranID As Integer, ByVal dtResult As System.Data.DataTable, ByVal strErr As String)
            Me.GetAllClientTransactionRecordAsync(strClientID, iTranID, dtResult, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllClientTransactionRecordAsync(ByVal strClientID As String, ByVal iTranID As Integer, ByVal dtResult As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetAllClientTransactionRecordOperationCompleted Is Nothing) Then
                Me.GetAllClientTransactionRecordOperationCompleted = AddressOf Me.OnGetAllClientTransactionRecordOperationCompleted
            End If
            Me.InvokeAsync("GetAllClientTransactionRecord", New Object() {strClientID, iTranID, dtResult, strErr}, Me.GetAllClientTransactionRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllClientTransactionRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllClientTransactionRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllClientTransactionRecordCompleted(Me, New GetAllClientTransactionRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetClientTransactionRrcord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientTransactionRrcord(ByVal strClientID As String, ByVal iLetterType As Integer, ByRef dtResult As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetClientTransactionRrcord", New Object() {strClientID, iLetterType, dtResult, strErr})
            dtResult = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClientTransactionRrcordAsync(ByVal strClientID As String, ByVal iLetterType As Integer, ByVal dtResult As System.Data.DataTable, ByVal strErr As String)
            Me.GetClientTransactionRrcordAsync(strClientID, iLetterType, dtResult, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClientTransactionRrcordAsync(ByVal strClientID As String, ByVal iLetterType As Integer, ByVal dtResult As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetClientTransactionRrcordOperationCompleted Is Nothing) Then
                Me.GetClientTransactionRrcordOperationCompleted = AddressOf Me.OnGetClientTransactionRrcordOperationCompleted
            End If
            Me.InvokeAsync("GetClientTransactionRrcord", New Object() {strClientID, iLetterType, dtResult, strErr}, Me.GetClientTransactionRrcordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClientTransactionRrcordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClientTransactionRrcordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClientTransactionRrcordCompleted(Me, New GetClientTransactionRrcordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SaveManualLetter", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveManualLetter(ByVal strPolicyID As String, ByVal strClientID As String, ByVal iLetterType As Integer, ByVal iTranID As Integer, ByVal iParameter1 As Integer, ByVal iParameter2 As Integer, ByVal iParameter3 As Integer, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveManualLetter", New Object() {strPolicyID, strClientID, iLetterType, iTranID, iParameter1, iParameter2, iParameter3, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveManualLetterAsync(ByVal strPolicyID As String, ByVal strClientID As String, ByVal iLetterType As Integer, ByVal iTranID As Integer, ByVal iParameter1 As Integer, ByVal iParameter2 As Integer, ByVal iParameter3 As Integer, ByVal strErr As String)
            Me.SaveManualLetterAsync(strPolicyID, strClientID, iLetterType, iTranID, iParameter1, iParameter2, iParameter3, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveManualLetterAsync(ByVal strPolicyID As String, ByVal strClientID As String, ByVal iLetterType As Integer, ByVal iTranID As Integer, ByVal iParameter1 As Integer, ByVal iParameter2 As Integer, ByVal iParameter3 As Integer, ByVal strErr As String, ByVal userState As Object)
            If (Me.SaveManualLetterOperationCompleted Is Nothing) Then
                Me.SaveManualLetterOperationCompleted = AddressOf Me.OnSaveManualLetterOperationCompleted
            End If
            Me.InvokeAsync("SaveManualLetter", New Object() {strPolicyID, strClientID, iLetterType, iTranID, iParameter1, iParameter2, iParameter3, strErr}, Me.SaveManualLetterOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveManualLetterOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveManualLetterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveManualLetterCompleted(Me, New SaveManualLetterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SaveManualLetterByPolicy", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveManualLetterByPolicy(ByVal strPolicyNo As String, ByVal iLetterType As Integer, ByVal iParameter1 As Integer, ByVal iParameter2 As Integer, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveManualLetterByPolicy", New Object() {strPolicyNo, iLetterType, iParameter1, iParameter2, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveManualLetterByPolicyAsync(ByVal strPolicyNo As String, ByVal iLetterType As Integer, ByVal iParameter1 As Integer, ByVal iParameter2 As Integer, ByVal strErr As String)
            Me.SaveManualLetterByPolicyAsync(strPolicyNo, iLetterType, iParameter1, iParameter2, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveManualLetterByPolicyAsync(ByVal strPolicyNo As String, ByVal iLetterType As Integer, ByVal iParameter1 As Integer, ByVal iParameter2 As Integer, ByVal strErr As String, ByVal userState As Object)
            If (Me.SaveManualLetterByPolicyOperationCompleted Is Nothing) Then
                Me.SaveManualLetterByPolicyOperationCompleted = AddressOf Me.OnSaveManualLetterByPolicyOperationCompleted
            End If
            Me.InvokeAsync("SaveManualLetterByPolicy", New Object() {strPolicyNo, iLetterType, iParameter1, iParameter2, strErr}, Me.SaveManualLetterByPolicyOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveManualLetterByPolicyOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveManualLetterByPolicyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveManualLetterByPolicyCompleted(Me, New SaveManualLetterByPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CheckReprintRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckReprintRecord(ByVal strClientID As String, ByVal iLetterType As Integer, ByVal iTranID As Integer, ByVal iParameter1 As Integer, ByVal iParameter2 As Integer, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckReprintRecord", New Object() {strClientID, iLetterType, iTranID, iParameter1, iParameter2, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckReprintRecordAsync(ByVal strClientID As String, ByVal iLetterType As Integer, ByVal iTranID As Integer, ByVal iParameter1 As Integer, ByVal iParameter2 As Integer, ByVal strErr As String)
            Me.CheckReprintRecordAsync(strClientID, iLetterType, iTranID, iParameter1, iParameter2, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckReprintRecordAsync(ByVal strClientID As String, ByVal iLetterType As Integer, ByVal iTranID As Integer, ByVal iParameter1 As Integer, ByVal iParameter2 As Integer, ByVal strErr As String, ByVal userState As Object)
            If (Me.CheckReprintRecordOperationCompleted Is Nothing) Then
                Me.CheckReprintRecordOperationCompleted = AddressOf Me.OnCheckReprintRecordOperationCompleted
            End If
            Me.InvokeAsync("CheckReprintRecord", New Object() {strClientID, iLetterType, iTranID, iParameter1, iParameter2, strErr}, Me.CheckReprintRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckReprintRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckReprintRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckReprintRecordCompleted(Me, New CheckReprintRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CheckReprintRecordByPolicyNo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckReprintRecordByPolicyNo(ByVal strPolicyNo As String, ByVal iLetterType As Integer, ByVal iParameter1 As Integer, ByVal iParameter2 As Integer, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckReprintRecordByPolicyNo", New Object() {strPolicyNo, iLetterType, iParameter1, iParameter2, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckReprintRecordByPolicyNoAsync(ByVal strPolicyNo As String, ByVal iLetterType As Integer, ByVal iParameter1 As Integer, ByVal iParameter2 As Integer, ByVal strErr As String)
            Me.CheckReprintRecordByPolicyNoAsync(strPolicyNo, iLetterType, iParameter1, iParameter2, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckReprintRecordByPolicyNoAsync(ByVal strPolicyNo As String, ByVal iLetterType As Integer, ByVal iParameter1 As Integer, ByVal iParameter2 As Integer, ByVal strErr As String, ByVal userState As Object)
            If (Me.CheckReprintRecordByPolicyNoOperationCompleted Is Nothing) Then
                Me.CheckReprintRecordByPolicyNoOperationCompleted = AddressOf Me.OnCheckReprintRecordByPolicyNoOperationCompleted
            End If
            Me.InvokeAsync("CheckReprintRecordByPolicyNo", New Object() {strPolicyNo, iLetterType, iParameter1, iParameter2, strErr}, Me.CheckReprintRecordByPolicyNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckReprintRecordByPolicyNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckReprintRecordByPolicyNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckReprintRecordByPolicyNoCompleted(Me, New CheckReprintRecordByPolicyNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPolicyReceivedDate", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyReceivedDate(ByVal strpolnum As String, ByRef receivedDate As Date, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPolicyReceivedDate", New Object() {strpolnum, receivedDate, strErr})
            receivedDate = CType(results(1),Date)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyReceivedDateAsync(ByVal strpolnum As String, ByVal receivedDate As Date, ByVal strErr As String)
            Me.GetPolicyReceivedDateAsync(strpolnum, receivedDate, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyReceivedDateAsync(ByVal strpolnum As String, ByVal receivedDate As Date, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPolicyReceivedDateOperationCompleted Is Nothing) Then
                Me.GetPolicyReceivedDateOperationCompleted = AddressOf Me.OnGetPolicyReceivedDateOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyReceivedDate", New Object() {strpolnum, receivedDate, strErr}, Me.GetPolicyReceivedDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyReceivedDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyReceivedDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyReceivedDateCompleted(Me, New GetPolicyReceivedDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SavePolicyReceivedDate", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SavePolicyReceivedDate(ByVal strpolnum As String, ByVal receivedDate As Date, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SavePolicyReceivedDate", New Object() {strpolnum, receivedDate, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SavePolicyReceivedDateAsync(ByVal strpolnum As String, ByVal receivedDate As Date, ByVal strErr As String)
            Me.SavePolicyReceivedDateAsync(strpolnum, receivedDate, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SavePolicyReceivedDateAsync(ByVal strpolnum As String, ByVal receivedDate As Date, ByVal strErr As String, ByVal userState As Object)
            If (Me.SavePolicyReceivedDateOperationCompleted Is Nothing) Then
                Me.SavePolicyReceivedDateOperationCompleted = AddressOf Me.OnSavePolicyReceivedDateOperationCompleted
            End If
            Me.InvokeAsync("SavePolicyReceivedDate", New Object() {strpolnum, receivedDate, strErr}, Me.SavePolicyReceivedDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnSavePolicyReceivedDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.SavePolicyReceivedDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SavePolicyReceivedDateCompleted(Me, New SavePolicyReceivedDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPostFundAllocationChecklist", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPostFundAllocationChecklist(ByRef dtData As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPostFundAllocationChecklist", New Object() {dtData, strErr})
            dtData = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPostFundAllocationChecklistAsync(ByVal dtData As System.Data.DataTable, ByVal strErr As String)
            Me.GetPostFundAllocationChecklistAsync(dtData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPostFundAllocationChecklistAsync(ByVal dtData As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPostFundAllocationChecklistOperationCompleted Is Nothing) Then
                Me.GetPostFundAllocationChecklistOperationCompleted = AddressOf Me.OnGetPostFundAllocationChecklistOperationCompleted
            End If
            Me.InvokeAsync("GetPostFundAllocationChecklist", New Object() {dtData, strErr}, Me.GetPostFundAllocationChecklistOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPostFundAllocationChecklistOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPostFundAllocationChecklistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPostFundAllocationChecklistCompleted(Me, New GetPostFundAllocationChecklistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetFundAllocationLetter", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFundAllocationLetter(ByRef dtData As System.Data.DataTable, ByRef strErr As String, ByVal FundCodeList() As String, ByVal ProductIDList() As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFundAllocationLetter", New Object() {dtData, strErr, FundCodeList, ProductIDList})
            dtData = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFundAllocationLetterAsync(ByVal dtData As System.Data.DataTable, ByVal strErr As String, ByVal FundCodeList() As String, ByVal ProductIDList() As String)
            Me.GetFundAllocationLetterAsync(dtData, strErr, FundCodeList, ProductIDList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFundAllocationLetterAsync(ByVal dtData As System.Data.DataTable, ByVal strErr As String, ByVal FundCodeList() As String, ByVal ProductIDList() As String, ByVal userState As Object)
            If (Me.GetFundAllocationLetterOperationCompleted Is Nothing) Then
                Me.GetFundAllocationLetterOperationCompleted = AddressOf Me.OnGetFundAllocationLetterOperationCompleted
            End If
            Me.InvokeAsync("GetFundAllocationLetter", New Object() {dtData, strErr, FundCodeList, ProductIDList}, Me.GetFundAllocationLetterOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFundAllocationLetterOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFundAllocationLetterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFundAllocationLetterCompleted(Me, New GetFundAllocationLetterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetAllPolicyFundAllocationLetter", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllPolicyFundAllocationLetter(ByRef dtData As System.Data.DataTable, ByRef strErr As String, ByVal FundCodeList() As String, ByVal ProductIDList() As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAllPolicyFundAllocationLetter", New Object() {dtData, strErr, FundCodeList, ProductIDList})
            dtData = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllPolicyFundAllocationLetterAsync(ByVal dtData As System.Data.DataTable, ByVal strErr As String, ByVal FundCodeList() As String, ByVal ProductIDList() As String)
            Me.GetAllPolicyFundAllocationLetterAsync(dtData, strErr, FundCodeList, ProductIDList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllPolicyFundAllocationLetterAsync(ByVal dtData As System.Data.DataTable, ByVal strErr As String, ByVal FundCodeList() As String, ByVal ProductIDList() As String, ByVal userState As Object)
            If (Me.GetAllPolicyFundAllocationLetterOperationCompleted Is Nothing) Then
                Me.GetAllPolicyFundAllocationLetterOperationCompleted = AddressOf Me.OnGetAllPolicyFundAllocationLetterOperationCompleted
            End If
            Me.InvokeAsync("GetAllPolicyFundAllocationLetter", New Object() {dtData, strErr, FundCodeList, ProductIDList}, Me.GetAllPolicyFundAllocationLetterOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllPolicyFundAllocationLetterOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllPolicyFundAllocationLetterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllPolicyFundAllocationLetterCompleted(Me, New GetAllPolicyFundAllocationLetterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetFundBalanceLetter", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFundBalanceLetter(ByRef dtData As System.Data.DataTable, ByRef strErr As String, ByVal FundCodeList() As String, ByVal ProductIDList() As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFundBalanceLetter", New Object() {dtData, strErr, FundCodeList, ProductIDList})
            dtData = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFundBalanceLetterAsync(ByVal dtData As System.Data.DataTable, ByVal strErr As String, ByVal FundCodeList() As String, ByVal ProductIDList() As String)
            Me.GetFundBalanceLetterAsync(dtData, strErr, FundCodeList, ProductIDList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFundBalanceLetterAsync(ByVal dtData As System.Data.DataTable, ByVal strErr As String, ByVal FundCodeList() As String, ByVal ProductIDList() As String, ByVal userState As Object)
            If (Me.GetFundBalanceLetterOperationCompleted Is Nothing) Then
                Me.GetFundBalanceLetterOperationCompleted = AddressOf Me.OnGetFundBalanceLetterOperationCompleted
            End If
            Me.InvokeAsync("GetFundBalanceLetter", New Object() {dtData, strErr, FundCodeList, ProductIDList}, Me.GetFundBalanceLetterOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFundBalanceLetterOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFundBalanceLetterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFundBalanceLetterCompleted(Me, New GetFundBalanceLetterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetFundSwitchPublicWebsiteAllowStatus", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFundSwitchPublicWebsiteAllowStatus(ByVal strFundCode As String, ByRef strBuyStatus As String, ByRef strSellStatus As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFundSwitchPublicWebsiteAllowStatus", New Object() {strFundCode, strBuyStatus, strSellStatus, strErr})
            strBuyStatus = CType(results(1),String)
            strSellStatus = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFundSwitchPublicWebsiteAllowStatusAsync(ByVal strFundCode As String, ByVal strBuyStatus As String, ByVal strSellStatus As String, ByVal strErr As String)
            Me.GetFundSwitchPublicWebsiteAllowStatusAsync(strFundCode, strBuyStatus, strSellStatus, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFundSwitchPublicWebsiteAllowStatusAsync(ByVal strFundCode As String, ByVal strBuyStatus As String, ByVal strSellStatus As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetFundSwitchPublicWebsiteAllowStatusOperationCompleted Is Nothing) Then
                Me.GetFundSwitchPublicWebsiteAllowStatusOperationCompleted = AddressOf Me.OnGetFundSwitchPublicWebsiteAllowStatusOperationCompleted
            End If
            Me.InvokeAsync("GetFundSwitchPublicWebsiteAllowStatus", New Object() {strFundCode, strBuyStatus, strSellStatus, strErr}, Me.GetFundSwitchPublicWebsiteAllowStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFundSwitchPublicWebsiteAllowStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFundSwitchPublicWebsiteAllowStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFundSwitchPublicWebsiteAllowStatusCompleted(Me, New GetFundSwitchPublicWebsiteAllowStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetFundAllocationLASAllowStatus", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFundAllocationLASAllowStatus(ByVal strFundCode As String, ByRef strStatus As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFundAllocationLASAllowStatus", New Object() {strFundCode, strStatus, strErr})
            strStatus = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFundAllocationLASAllowStatusAsync(ByVal strFundCode As String, ByVal strStatus As String, ByVal strErr As String)
            Me.GetFundAllocationLASAllowStatusAsync(strFundCode, strStatus, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFundAllocationLASAllowStatusAsync(ByVal strFundCode As String, ByVal strStatus As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetFundAllocationLASAllowStatusOperationCompleted Is Nothing) Then
                Me.GetFundAllocationLASAllowStatusOperationCompleted = AddressOf Me.OnGetFundAllocationLASAllowStatusOperationCompleted
            End If
            Me.InvokeAsync("GetFundAllocationLASAllowStatus", New Object() {strFundCode, strStatus, strErr}, Me.GetFundAllocationLASAllowStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFundAllocationLASAllowStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFundAllocationLASAllowStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFundAllocationLASAllowStatusCompleted(Me, New GetFundAllocationLASAllowStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCapsilFundAuthStatus", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCapsilFundAuthStatus(ByVal strFundCode As String, ByRef strStatus As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCapsilFundAuthStatus", New Object() {strFundCode, strStatus, strErr})
            strStatus = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCapsilFundAuthStatusAsync(ByVal strFundCode As String, ByVal strStatus As String, ByVal strErr As String)
            Me.GetCapsilFundAuthStatusAsync(strFundCode, strStatus, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCapsilFundAuthStatusAsync(ByVal strFundCode As String, ByVal strStatus As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCapsilFundAuthStatusOperationCompleted Is Nothing) Then
                Me.GetCapsilFundAuthStatusOperationCompleted = AddressOf Me.OnGetCapsilFundAuthStatusOperationCompleted
            End If
            Me.InvokeAsync("GetCapsilFundAuthStatus", New Object() {strFundCode, strStatus, strErr}, Me.GetCapsilFundAuthStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCapsilFundAuthStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCapsilFundAuthStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCapsilFundAuthStatusCompleted(Me, New GetCapsilFundAuthStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetFundCloseStatus", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFundCloseStatus(ByVal strFundCode As String, ByRef strNbrStatus As String, ByRef strFprStatus As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFundCloseStatus", New Object() {strFundCode, strNbrStatus, strFprStatus, strErr})
            strNbrStatus = CType(results(1),String)
            strFprStatus = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFundCloseStatusAsync(ByVal strFundCode As String, ByVal strNbrStatus As String, ByVal strFprStatus As String, ByVal strErr As String)
            Me.GetFundCloseStatusAsync(strFundCode, strNbrStatus, strFprStatus, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFundCloseStatusAsync(ByVal strFundCode As String, ByVal strNbrStatus As String, ByVal strFprStatus As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetFundCloseStatusOperationCompleted Is Nothing) Then
                Me.GetFundCloseStatusOperationCompleted = AddressOf Me.OnGetFundCloseStatusOperationCompleted
            End If
            Me.InvokeAsync("GetFundCloseStatus", New Object() {strFundCode, strNbrStatus, strFprStatus, strErr}, Me.GetFundCloseStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFundCloseStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFundCloseStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFundCloseStatusCompleted(Me, New GetFundCloseStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCapsilFundCloseStatus", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCapsilFundCloseStatus(ByVal strFundCode As String, ByRef strStatus As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCapsilFundCloseStatus", New Object() {strFundCode, strStatus, strErr})
            strStatus = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCapsilFundCloseStatusAsync(ByVal strFundCode As String, ByVal strStatus As String, ByVal strErr As String)
            Me.GetCapsilFundCloseStatusAsync(strFundCode, strStatus, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCapsilFundCloseStatusAsync(ByVal strFundCode As String, ByVal strStatus As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCapsilFundCloseStatusOperationCompleted Is Nothing) Then
                Me.GetCapsilFundCloseStatusOperationCompleted = AddressOf Me.OnGetCapsilFundCloseStatusOperationCompleted
            End If
            Me.InvokeAsync("GetCapsilFundCloseStatus", New Object() {strFundCode, strStatus, strErr}, Me.GetCapsilFundCloseStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCapsilFundCloseStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCapsilFundCloseStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCapsilFundCloseStatusCompleted(Me, New GetCapsilFundCloseStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetFundLetterProducts", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFundLetterProducts(ByRef dt As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFundLetterProducts", New Object() {dt, strErr})
            dt = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFundLetterProductsAsync(ByVal dt As System.Data.DataTable, ByVal strErr As String)
            Me.GetFundLetterProductsAsync(dt, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFundLetterProductsAsync(ByVal dt As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetFundLetterProductsOperationCompleted Is Nothing) Then
                Me.GetFundLetterProductsOperationCompleted = AddressOf Me.OnGetFundLetterProductsOperationCompleted
            End If
            Me.InvokeAsync("GetFundLetterProducts", New Object() {dt, strErr}, Me.GetFundLetterProductsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFundLetterProductsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFundLetterProductsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFundLetterProductsCompleted(Me, New GetFundLetterProductsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetFundMaintReuquest", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFundMaintReuquest(ByVal strFundCode As String, ByVal strStatus As String, ByRef dtRequest As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFundMaintReuquest", New Object() {strFundCode, strStatus, dtRequest, strErr})
            dtRequest = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFundMaintReuquestAsync(ByVal strFundCode As String, ByVal strStatus As String, ByVal dtRequest As System.Data.DataTable, ByVal strErr As String)
            Me.GetFundMaintReuquestAsync(strFundCode, strStatus, dtRequest, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFundMaintReuquestAsync(ByVal strFundCode As String, ByVal strStatus As String, ByVal dtRequest As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetFundMaintReuquestOperationCompleted Is Nothing) Then
                Me.GetFundMaintReuquestOperationCompleted = AddressOf Me.OnGetFundMaintReuquestOperationCompleted
            End If
            Me.InvokeAsync("GetFundMaintReuquest", New Object() {strFundCode, strStatus, dtRequest, strErr}, Me.GetFundMaintReuquestOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFundMaintReuquestOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFundMaintReuquestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFundMaintReuquestCompleted(Me, New GetFundMaintReuquestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/FundSubmitRequest", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FundSubmitRequest(ByVal strFund As String, ByVal sType As String, ByVal dtDate As Date, ByRef strErr As String, ByVal ciwfcr_id As String) As Boolean
            Dim results() As Object = Me.Invoke("FundSubmitRequest", New Object() {strFund, sType, dtDate, strErr, ciwfcr_id})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FundSubmitRequestAsync(ByVal strFund As String, ByVal sType As String, ByVal dtDate As Date, ByVal strErr As String, ByVal ciwfcr_id As String)
            Me.FundSubmitRequestAsync(strFund, sType, dtDate, strErr, ciwfcr_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FundSubmitRequestAsync(ByVal strFund As String, ByVal sType As String, ByVal dtDate As Date, ByVal strErr As String, ByVal ciwfcr_id As String, ByVal userState As Object)
            If (Me.FundSubmitRequestOperationCompleted Is Nothing) Then
                Me.FundSubmitRequestOperationCompleted = AddressOf Me.OnFundSubmitRequestOperationCompleted
            End If
            Me.InvokeAsync("FundSubmitRequest", New Object() {strFund, sType, dtDate, strErr, ciwfcr_id}, Me.FundSubmitRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnFundSubmitRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.FundSubmitRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FundSubmitRequestCompleted(Me, New FundSubmitRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetFundMandatDetail", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFundMandatDetail(ByRef ds_FundIn As System.Data.DataSet, ByRef ds_FundOut As System.Data.DataSet, ByVal ciwfcr_id As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFundMandatDetail", New Object() {ds_FundIn, ds_FundOut, ciwfcr_id, strErr})
            ds_FundIn = CType(results(1),System.Data.DataSet)
            ds_FundOut = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFundMandatDetailAsync(ByVal ds_FundIn As System.Data.DataSet, ByVal ds_FundOut As System.Data.DataSet, ByVal ciwfcr_id As String, ByVal strErr As String)
            Me.GetFundMandatDetailAsync(ds_FundIn, ds_FundOut, ciwfcr_id, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFundMandatDetailAsync(ByVal ds_FundIn As System.Data.DataSet, ByVal ds_FundOut As System.Data.DataSet, ByVal ciwfcr_id As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetFundMandatDetailOperationCompleted Is Nothing) Then
                Me.GetFundMandatDetailOperationCompleted = AddressOf Me.OnGetFundMandatDetailOperationCompleted
            End If
            Me.InvokeAsync("GetFundMandatDetail", New Object() {ds_FundIn, ds_FundOut, ciwfcr_id, strErr}, Me.GetFundMandatDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFundMandatDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFundMandatDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFundMandatDetailCompleted(Me, New GetFundMandatDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/FundMandatSubmitRequest", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FundMandatSubmitRequest(ByVal dt_FundIn As System.Data.DataTable, ByVal dt_FundOut As System.Data.DataTable, ByVal strType As String, ByVal dtRequest As Date, ByVal strDescription As String, ByVal strRemark As String, ByRef strErr As String, ByVal ciwfcr_id As String) As Boolean
            Dim results() As Object = Me.Invoke("FundMandatSubmitRequest", New Object() {dt_FundIn, dt_FundOut, strType, dtRequest, strDescription, strRemark, strErr, ciwfcr_id})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FundMandatSubmitRequestAsync(ByVal dt_FundIn As System.Data.DataTable, ByVal dt_FundOut As System.Data.DataTable, ByVal strType As String, ByVal dtRequest As Date, ByVal strDescription As String, ByVal strRemark As String, ByVal strErr As String, ByVal ciwfcr_id As String)
            Me.FundMandatSubmitRequestAsync(dt_FundIn, dt_FundOut, strType, dtRequest, strDescription, strRemark, strErr, ciwfcr_id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FundMandatSubmitRequestAsync(ByVal dt_FundIn As System.Data.DataTable, ByVal dt_FundOut As System.Data.DataTable, ByVal strType As String, ByVal dtRequest As Date, ByVal strDescription As String, ByVal strRemark As String, ByVal strErr As String, ByVal ciwfcr_id As String, ByVal userState As Object)
            If (Me.FundMandatSubmitRequestOperationCompleted Is Nothing) Then
                Me.FundMandatSubmitRequestOperationCompleted = AddressOf Me.OnFundMandatSubmitRequestOperationCompleted
            End If
            Me.InvokeAsync("FundMandatSubmitRequest", New Object() {dt_FundIn, dt_FundOut, strType, dtRequest, strDescription, strRemark, strErr, ciwfcr_id}, Me.FundMandatSubmitRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnFundMandatSubmitRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.FundMandatSubmitRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FundMandatSubmitRequestCompleted(Me, New FundMandatSubmitRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CancelFundRequest", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelFundRequest(ByVal lngID As Long, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CancelFundRequest", New Object() {lngID, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelFundRequestAsync(ByVal lngID As Long, ByVal strErr As String)
            Me.CancelFundRequestAsync(lngID, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelFundRequestAsync(ByVal lngID As Long, ByVal strErr As String, ByVal userState As Object)
            If (Me.CancelFundRequestOperationCompleted Is Nothing) Then
                Me.CancelFundRequestOperationCompleted = AddressOf Me.OnCancelFundRequestOperationCompleted
            End If
            Me.InvokeAsync("CancelFundRequest", New Object() {lngID, strErr}, Me.CancelFundRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelFundRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelFundRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelFundRequestCompleted(Me, New CancelFundRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ApproveFundRequest", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ApproveFundRequest(ByVal lngID As Long, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ApproveFundRequest", New Object() {lngID, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ApproveFundRequestAsync(ByVal lngID As Long, ByVal strErr As String)
            Me.ApproveFundRequestAsync(lngID, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ApproveFundRequestAsync(ByVal lngID As Long, ByVal strErr As String, ByVal userState As Object)
            If (Me.ApproveFundRequestOperationCompleted Is Nothing) Then
                Me.ApproveFundRequestOperationCompleted = AddressOf Me.OnApproveFundRequestOperationCompleted
            End If
            Me.InvokeAsync("ApproveFundRequest", New Object() {lngID, strErr}, Me.ApproveFundRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnApproveFundRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.ApproveFundRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ApproveFundRequestCompleted(Me, New ApproveFundRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLifeAsiaFundStat", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLifeAsiaFundStat(ByVal strFund As String, ByRef dsFundStat As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLifeAsiaFundStat", New Object() {strFund, dsFundStat, strErr})
            dsFundStat = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLifeAsiaFundStatAsync(ByVal strFund As String, ByVal dsFundStat As System.Data.DataSet, ByVal strErr As String)
            Me.GetLifeAsiaFundStatAsync(strFund, dsFundStat, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLifeAsiaFundStatAsync(ByVal strFund As String, ByVal dsFundStat As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLifeAsiaFundStatOperationCompleted Is Nothing) Then
                Me.GetLifeAsiaFundStatOperationCompleted = AddressOf Me.OnGetLifeAsiaFundStatOperationCompleted
            End If
            Me.InvokeAsync("GetLifeAsiaFundStat", New Object() {strFund, dsFundStat, strErr}, Me.GetLifeAsiaFundStatOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLifeAsiaFundStatOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLifeAsiaFundStatCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLifeAsiaFundStatCompleted(Me, New GetLifeAsiaFundStatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdLifeAsiaFundStat", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdLifeAsiaFundStat(ByVal strFund As String, ByVal strEffDate As String, ByVal strCloseType As String, ByRef dsFundStat As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdLifeAsiaFundStat", New Object() {strFund, strEffDate, strCloseType, dsFundStat, strErr})
            dsFundStat = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdLifeAsiaFundStatAsync(ByVal strFund As String, ByVal strEffDate As String, ByVal strCloseType As String, ByVal dsFundStat As System.Data.DataSet, ByVal strErr As String)
            Me.UpdLifeAsiaFundStatAsync(strFund, strEffDate, strCloseType, dsFundStat, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdLifeAsiaFundStatAsync(ByVal strFund As String, ByVal strEffDate As String, ByVal strCloseType As String, ByVal dsFundStat As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdLifeAsiaFundStatOperationCompleted Is Nothing) Then
                Me.UpdLifeAsiaFundStatOperationCompleted = AddressOf Me.OnUpdLifeAsiaFundStatOperationCompleted
            End If
            Me.InvokeAsync("UpdLifeAsiaFundStat", New Object() {strFund, strEffDate, strCloseType, dsFundStat, strErr}, Me.UpdLifeAsiaFundStatOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdLifeAsiaFundStatOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdLifeAsiaFundStatCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdLifeAsiaFundStatCompleted(Me, New UpdLifeAsiaFundStatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetComplusoryFundSwitchTransLog", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetComplusoryFundSwitchTransLog(ByRef dt As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetComplusoryFundSwitchTransLog", New Object() {dt, strErr})
            dt = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetComplusoryFundSwitchTransLogAsync(ByVal dt As System.Data.DataTable, ByVal strErr As String)
            Me.GetComplusoryFundSwitchTransLogAsync(dt, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetComplusoryFundSwitchTransLogAsync(ByVal dt As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetComplusoryFundSwitchTransLogOperationCompleted Is Nothing) Then
                Me.GetComplusoryFundSwitchTransLogOperationCompleted = AddressOf Me.OnGetComplusoryFundSwitchTransLogOperationCompleted
            End If
            Me.InvokeAsync("GetComplusoryFundSwitchTransLog", New Object() {dt, strErr}, Me.GetComplusoryFundSwitchTransLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetComplusoryFundSwitchTransLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetComplusoryFundSwitchTransLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetComplusoryFundSwitchTransLogCompleted(Me, New GetComplusoryFundSwitchTransLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SubmitFundChangeLetterRequest", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SubmitFundChangeLetterRequest(ByVal dsRequest As System.Data.DataSet, ByRef strErr As String, ByRef intId As Integer) As Boolean
            Dim results() As Object = Me.Invoke("SubmitFundChangeLetterRequest", New Object() {dsRequest, strErr, intId})
            strErr = CType(results(1),String)
            intId = CType(results(2),Integer)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SubmitFundChangeLetterRequestAsync(ByVal dsRequest As System.Data.DataSet, ByVal strErr As String, ByVal intId As Integer)
            Me.SubmitFundChangeLetterRequestAsync(dsRequest, strErr, intId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SubmitFundChangeLetterRequestAsync(ByVal dsRequest As System.Data.DataSet, ByVal strErr As String, ByVal intId As Integer, ByVal userState As Object)
            If (Me.SubmitFundChangeLetterRequestOperationCompleted Is Nothing) Then
                Me.SubmitFundChangeLetterRequestOperationCompleted = AddressOf Me.OnSubmitFundChangeLetterRequestOperationCompleted
            End If
            Me.InvokeAsync("SubmitFundChangeLetterRequest", New Object() {dsRequest, strErr, intId}, Me.SubmitFundChangeLetterRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnSubmitFundChangeLetterRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.SubmitFundChangeLetterRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SubmitFundChangeLetterRequestCompleted(Me, New SubmitFundChangeLetterRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetFundChangeLetterRequest", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFundChangeLetterRequest(ByVal intReqId As Integer, ByRef dsRequest As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFundChangeLetterRequest", New Object() {intReqId, dsRequest, strErr})
            dsRequest = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFundChangeLetterRequestAsync(ByVal intReqId As Integer, ByVal dsRequest As System.Data.DataSet, ByVal strErr As String)
            Me.GetFundChangeLetterRequestAsync(intReqId, dsRequest, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFundChangeLetterRequestAsync(ByVal intReqId As Integer, ByVal dsRequest As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetFundChangeLetterRequestOperationCompleted Is Nothing) Then
                Me.GetFundChangeLetterRequestOperationCompleted = AddressOf Me.OnGetFundChangeLetterRequestOperationCompleted
            End If
            Me.InvokeAsync("GetFundChangeLetterRequest", New Object() {intReqId, dsRequest, strErr}, Me.GetFundChangeLetterRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFundChangeLetterRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFundChangeLetterRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFundChangeLetterRequestCompleted(Me, New GetFundChangeLetterRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetFundChangeLetterRequestHistory", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFundChangeLetterRequestHistory(ByRef dtHistory As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFundChangeLetterRequestHistory", New Object() {dtHistory, strErr})
            dtHistory = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFundChangeLetterRequestHistoryAsync(ByVal dtHistory As System.Data.DataTable, ByVal strErr As String)
            Me.GetFundChangeLetterRequestHistoryAsync(dtHistory, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFundChangeLetterRequestHistoryAsync(ByVal dtHistory As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetFundChangeLetterRequestHistoryOperationCompleted Is Nothing) Then
                Me.GetFundChangeLetterRequestHistoryOperationCompleted = AddressOf Me.OnGetFundChangeLetterRequestHistoryOperationCompleted
            End If
            Me.InvokeAsync("GetFundChangeLetterRequestHistory", New Object() {dtHistory, strErr}, Me.GetFundChangeLetterRequestHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFundChangeLetterRequestHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFundChangeLetterRequestHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFundChangeLetterRequestHistoryCompleted(Me, New GetFundChangeLetterRequestHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdateFundChangeLetterRequest", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateFundChangeLetterRequest(ByVal dsRequest As System.Data.DataSet, ByVal strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateFundChangeLetterRequest", New Object() {dsRequest, strErr})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateFundChangeLetterRequestAsync(ByVal dsRequest As System.Data.DataSet, ByVal strErr As String)
            Me.UpdateFundChangeLetterRequestAsync(dsRequest, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateFundChangeLetterRequestAsync(ByVal dsRequest As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateFundChangeLetterRequestOperationCompleted Is Nothing) Then
                Me.UpdateFundChangeLetterRequestOperationCompleted = AddressOf Me.OnUpdateFundChangeLetterRequestOperationCompleted
            End If
            Me.InvokeAsync("UpdateFundChangeLetterRequest", New Object() {dsRequest, strErr}, Me.UpdateFundChangeLetterRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateFundChangeLetterRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateFundChangeLetterRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateFundChangeLetterRequestCompleted(Me, New UpdateFundChangeLetterRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetFundChangeRequestNewPolicyList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFundChangeRequestNewPolicyList(ByVal intReqId As Integer, ByRef dtPolicyList As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFundChangeRequestNewPolicyList", New Object() {intReqId, dtPolicyList, strErr})
            dtPolicyList = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFundChangeRequestNewPolicyListAsync(ByVal intReqId As Integer, ByVal dtPolicyList As System.Data.DataTable, ByVal strErr As String)
            Me.GetFundChangeRequestNewPolicyListAsync(intReqId, dtPolicyList, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFundChangeRequestNewPolicyListAsync(ByVal intReqId As Integer, ByVal dtPolicyList As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetFundChangeRequestNewPolicyListOperationCompleted Is Nothing) Then
                Me.GetFundChangeRequestNewPolicyListOperationCompleted = AddressOf Me.OnGetFundChangeRequestNewPolicyListOperationCompleted
            End If
            Me.InvokeAsync("GetFundChangeRequestNewPolicyList", New Object() {intReqId, dtPolicyList, strErr}, Me.GetFundChangeRequestNewPolicyListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFundChangeRequestNewPolicyListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFundChangeRequestNewPolicyListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFundChangeRequestNewPolicyListCompleted(Me, New GetFundChangeRequestNewPolicyListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CheckFundChangePolicyList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckFundChangePolicyList(ByVal strListType As String, ByVal FundCodeList() As String, ByVal ProductIDList() As String, ByRef dtPolicyList As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckFundChangePolicyList", New Object() {strListType, FundCodeList, ProductIDList, dtPolicyList, strErr})
            dtPolicyList = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckFundChangePolicyListAsync(ByVal strListType As String, ByVal FundCodeList() As String, ByVal ProductIDList() As String, ByVal dtPolicyList As System.Data.DataTable, ByVal strErr As String)
            Me.CheckFundChangePolicyListAsync(strListType, FundCodeList, ProductIDList, dtPolicyList, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckFundChangePolicyListAsync(ByVal strListType As String, ByVal FundCodeList() As String, ByVal ProductIDList() As String, ByVal dtPolicyList As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.CheckFundChangePolicyListOperationCompleted Is Nothing) Then
                Me.CheckFundChangePolicyListOperationCompleted = AddressOf Me.OnCheckFundChangePolicyListOperationCompleted
            End If
            Me.InvokeAsync("CheckFundChangePolicyList", New Object() {strListType, FundCodeList, ProductIDList, dtPolicyList, strErr}, Me.CheckFundChangePolicyListOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckFundChangePolicyListOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckFundChangePolicyListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckFundChangePolicyListCompleted(Me, New CheckFundChangePolicyListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetFundChangeLetterLog", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFundChangeLetterLog(ByVal intReqId As Integer, ByRef dtLetterLog As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFundChangeLetterLog", New Object() {intReqId, dtLetterLog, strErr})
            dtLetterLog = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFundChangeLetterLogAsync(ByVal intReqId As Integer, ByVal dtLetterLog As System.Data.DataTable, ByVal strErr As String)
            Me.GetFundChangeLetterLogAsync(intReqId, dtLetterLog, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFundChangeLetterLogAsync(ByVal intReqId As Integer, ByVal dtLetterLog As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetFundChangeLetterLogOperationCompleted Is Nothing) Then
                Me.GetFundChangeLetterLogOperationCompleted = AddressOf Me.OnGetFundChangeLetterLogOperationCompleted
            End If
            Me.InvokeAsync("GetFundChangeLetterLog", New Object() {intReqId, dtLetterLog, strErr}, Me.GetFundChangeLetterLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFundChangeLetterLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFundChangeLetterLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFundChangeLetterLogCompleted(Me, New GetFundChangeLetterLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdateFundChangeRequestStatus", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateFundChangeRequestStatus(ByVal intReqId As Integer, ByVal strStatus As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateFundChangeRequestStatus", New Object() {intReqId, strStatus, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateFundChangeRequestStatusAsync(ByVal intReqId As Integer, ByVal strStatus As String, ByVal strErr As String)
            Me.UpdateFundChangeRequestStatusAsync(intReqId, strStatus, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateFundChangeRequestStatusAsync(ByVal intReqId As Integer, ByVal strStatus As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateFundChangeRequestStatusOperationCompleted Is Nothing) Then
                Me.UpdateFundChangeRequestStatusOperationCompleted = AddressOf Me.OnUpdateFundChangeRequestStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateFundChangeRequestStatus", New Object() {intReqId, strStatus, strErr}, Me.UpdateFundChangeRequestStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateFundChangeRequestStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateFundChangeRequestStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateFundChangeRequestStatusCompleted(Me, New UpdateFundChangeRequestStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/isNBUSIndicia", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isNBUSIndicia(ByVal strOwnerNo As String, ByVal strPolicyNo As String, ByRef isUS As Boolean, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("isNBUSIndicia", New Object() {strOwnerNo, strPolicyNo, isUS, strErr})
            isUS = CType(results(1),Boolean)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isNBUSIndiciaAsync(ByVal strOwnerNo As String, ByVal strPolicyNo As String, ByVal isUS As Boolean, ByVal strErr As String)
            Me.isNBUSIndiciaAsync(strOwnerNo, strPolicyNo, isUS, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isNBUSIndiciaAsync(ByVal strOwnerNo As String, ByVal strPolicyNo As String, ByVal isUS As Boolean, ByVal strErr As String, ByVal userState As Object)
            If (Me.isNBUSIndiciaOperationCompleted Is Nothing) Then
                Me.isNBUSIndiciaOperationCompleted = AddressOf Me.OnisNBUSIndiciaOperationCompleted
            End If
            Me.InvokeAsync("isNBUSIndicia", New Object() {strOwnerNo, strPolicyNo, isUS, strErr}, Me.isNBUSIndiciaOperationCompleted, userState)
        End Sub
        
        Private Sub OnisNBUSIndiciaOperationCompleted(ByVal arg As Object)
            If (Not (Me.isNBUSIndiciaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isNBUSIndiciaCompleted(Me, New isNBUSIndiciaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/isPOSUSIndicia", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isPOSUSIndicia(ByVal strOwnerNo As String, ByVal strPolicyNo As String, ByRef isUS As Boolean, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("isPOSUSIndicia", New Object() {strOwnerNo, strPolicyNo, isUS, strErr})
            isUS = CType(results(1),Boolean)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isPOSUSIndiciaAsync(ByVal strOwnerNo As String, ByVal strPolicyNo As String, ByVal isUS As Boolean, ByVal strErr As String)
            Me.isPOSUSIndiciaAsync(strOwnerNo, strPolicyNo, isUS, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isPOSUSIndiciaAsync(ByVal strOwnerNo As String, ByVal strPolicyNo As String, ByVal isUS As Boolean, ByVal strErr As String, ByVal userState As Object)
            If (Me.isPOSUSIndiciaOperationCompleted Is Nothing) Then
                Me.isPOSUSIndiciaOperationCompleted = AddressOf Me.OnisPOSUSIndiciaOperationCompleted
            End If
            Me.InvokeAsync("isPOSUSIndicia", New Object() {strOwnerNo, strPolicyNo, isUS, strErr}, Me.isPOSUSIndiciaOperationCompleted, userState)
        End Sub
        
        Private Sub OnisPOSUSIndiciaOperationCompleted(ByVal arg As Object)
            If (Not (Me.isPOSUSIndiciaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isPOSUSIndiciaCompleted(Me, New isPOSUSIndiciaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCodeTable", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCodeTable(ByVal funcName As String, ByRef dtReturn As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCodeTable", New Object() {funcName, dtReturn, strErr})
            dtReturn = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCodeTableAsync(ByVal funcName As String, ByVal dtReturn As System.Data.DataTable, ByVal strErr As String)
            Me.GetCodeTableAsync(funcName, dtReturn, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCodeTableAsync(ByVal funcName As String, ByVal dtReturn As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCodeTableOperationCompleted Is Nothing) Then
                Me.GetCodeTableOperationCompleted = AddressOf Me.OnGetCodeTableOperationCompleted
            End If
            Me.InvokeAsync("GetCodeTable", New Object() {funcName, dtReturn, strErr}, Me.GetCodeTableOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCodeTableOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCodeTableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCodeTableCompleted(Me, New GetCodeTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetServiceFeeEnquiry", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetServiceFeeEnquiry(ByVal strPolicyNo As String, ByRef dsServiceFee As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetServiceFeeEnquiry", New Object() {strPolicyNo, dsServiceFee, strErr})
            dsServiceFee = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetServiceFeeEnquiryAsync(ByVal strPolicyNo As String, ByVal dsServiceFee As System.Data.DataSet, ByVal strErr As String)
            Me.GetServiceFeeEnquiryAsync(strPolicyNo, dsServiceFee, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetServiceFeeEnquiryAsync(ByVal strPolicyNo As String, ByVal dsServiceFee As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetServiceFeeEnquiryOperationCompleted Is Nothing) Then
                Me.GetServiceFeeEnquiryOperationCompleted = AddressOf Me.OnGetServiceFeeEnquiryOperationCompleted
            End If
            Me.InvokeAsync("GetServiceFeeEnquiry", New Object() {strPolicyNo, dsServiceFee, strErr}, Me.GetServiceFeeEnquiryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetServiceFeeEnquiryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetServiceFeeEnquiryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetServiceFeeEnquiryCompleted(Me, New GetServiceFeeEnquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ServiceFeeRegistration", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ServiceFeeRegistration(ByVal dsEnquiry As System.Data.DataSet, ByVal strPolicyNo As String, ByVal datRegistrationStartDate As Date, ByVal rate As String, ByRef dsReturn As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ServiceFeeRegistration", New Object() {dsEnquiry, strPolicyNo, datRegistrationStartDate, rate, dsReturn, strErr})
            dsReturn = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ServiceFeeRegistrationAsync(ByVal dsEnquiry As System.Data.DataSet, ByVal strPolicyNo As String, ByVal datRegistrationStartDate As Date, ByVal rate As String, ByVal dsReturn As System.Data.DataSet, ByVal strErr As String)
            Me.ServiceFeeRegistrationAsync(dsEnquiry, strPolicyNo, datRegistrationStartDate, rate, dsReturn, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ServiceFeeRegistrationAsync(ByVal dsEnquiry As System.Data.DataSet, ByVal strPolicyNo As String, ByVal datRegistrationStartDate As Date, ByVal rate As String, ByVal dsReturn As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.ServiceFeeRegistrationOperationCompleted Is Nothing) Then
                Me.ServiceFeeRegistrationOperationCompleted = AddressOf Me.OnServiceFeeRegistrationOperationCompleted
            End If
            Me.InvokeAsync("ServiceFeeRegistration", New Object() {dsEnquiry, strPolicyNo, datRegistrationStartDate, rate, dsReturn, strErr}, Me.ServiceFeeRegistrationOperationCompleted, userState)
        End Sub
        
        Private Sub OnServiceFeeRegistrationOperationCompleted(ByVal arg As Object)
            If (Not (Me.ServiceFeeRegistrationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ServiceFeeRegistrationCompleted(Me, New ServiceFeeRegistrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ServiceFeeTermination", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ServiceFeeTermination(ByVal dsEnquiry As System.Data.DataSet, ByVal strPolicyNo As String, ByVal datTerminationDate As Date, ByRef dsReturn As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ServiceFeeTermination", New Object() {dsEnquiry, strPolicyNo, datTerminationDate, dsReturn, strErr})
            dsReturn = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ServiceFeeTerminationAsync(ByVal dsEnquiry As System.Data.DataSet, ByVal strPolicyNo As String, ByVal datTerminationDate As Date, ByVal dsReturn As System.Data.DataSet, ByVal strErr As String)
            Me.ServiceFeeTerminationAsync(dsEnquiry, strPolicyNo, datTerminationDate, dsReturn, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ServiceFeeTerminationAsync(ByVal dsEnquiry As System.Data.DataSet, ByVal strPolicyNo As String, ByVal datTerminationDate As Date, ByVal dsReturn As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.ServiceFeeTerminationOperationCompleted Is Nothing) Then
                Me.ServiceFeeTerminationOperationCompleted = AddressOf Me.OnServiceFeeTerminationOperationCompleted
            End If
            Me.InvokeAsync("ServiceFeeTermination", New Object() {dsEnquiry, strPolicyNo, datTerminationDate, dsReturn, strErr}, Me.ServiceFeeTerminationOperationCompleted, userState)
        End Sub
        
        Private Sub OnServiceFeeTerminationOperationCompleted(ByVal arg As Object)
            If (Not (Me.ServiceFeeTerminationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ServiceFeeTerminationCompleted(Me, New ServiceFeeTerminationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/DpmsServiceFeeRegistration", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DpmsServiceFeeRegistration(ByVal dsEnquiry As System.Data.DataSet, ByVal strPolicyNo As String, ByVal datRegistrationStartDate As Date, ByVal rate As String, ByRef dsReturn As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("DpmsServiceFeeRegistration", New Object() {dsEnquiry, strPolicyNo, datRegistrationStartDate, rate, dsReturn, strErr})
            dsReturn = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DpmsServiceFeeRegistrationAsync(ByVal dsEnquiry As System.Data.DataSet, ByVal strPolicyNo As String, ByVal datRegistrationStartDate As Date, ByVal rate As String, ByVal dsReturn As System.Data.DataSet, ByVal strErr As String)
            Me.DpmsServiceFeeRegistrationAsync(dsEnquiry, strPolicyNo, datRegistrationStartDate, rate, dsReturn, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DpmsServiceFeeRegistrationAsync(ByVal dsEnquiry As System.Data.DataSet, ByVal strPolicyNo As String, ByVal datRegistrationStartDate As Date, ByVal rate As String, ByVal dsReturn As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.DpmsServiceFeeRegistrationOperationCompleted Is Nothing) Then
                Me.DpmsServiceFeeRegistrationOperationCompleted = AddressOf Me.OnDpmsServiceFeeRegistrationOperationCompleted
            End If
            Me.InvokeAsync("DpmsServiceFeeRegistration", New Object() {dsEnquiry, strPolicyNo, datRegistrationStartDate, rate, dsReturn, strErr}, Me.DpmsServiceFeeRegistrationOperationCompleted, userState)
        End Sub
        
        Private Sub OnDpmsServiceFeeRegistrationOperationCompleted(ByVal arg As Object)
            If (Not (Me.DpmsServiceFeeRegistrationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DpmsServiceFeeRegistrationCompleted(Me, New DpmsServiceFeeRegistrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/DpmsServiceFeeTermination", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DpmsServiceFeeTermination(ByVal dsEnquiry As System.Data.DataSet, ByVal strPolicyNo As String, ByVal datTerminationDate As Date, ByRef dsReturn As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("DpmsServiceFeeTermination", New Object() {dsEnquiry, strPolicyNo, datTerminationDate, dsReturn, strErr})
            dsReturn = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DpmsServiceFeeTerminationAsync(ByVal dsEnquiry As System.Data.DataSet, ByVal strPolicyNo As String, ByVal datTerminationDate As Date, ByVal dsReturn As System.Data.DataSet, ByVal strErr As String)
            Me.DpmsServiceFeeTerminationAsync(dsEnquiry, strPolicyNo, datTerminationDate, dsReturn, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DpmsServiceFeeTerminationAsync(ByVal dsEnquiry As System.Data.DataSet, ByVal strPolicyNo As String, ByVal datTerminationDate As Date, ByVal dsReturn As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.DpmsServiceFeeTerminationOperationCompleted Is Nothing) Then
                Me.DpmsServiceFeeTerminationOperationCompleted = AddressOf Me.OnDpmsServiceFeeTerminationOperationCompleted
            End If
            Me.InvokeAsync("DpmsServiceFeeTermination", New Object() {dsEnquiry, strPolicyNo, datTerminationDate, dsReturn, strErr}, Me.DpmsServiceFeeTerminationOperationCompleted, userState)
        End Sub
        
        Private Sub OnDpmsServiceFeeTerminationOperationCompleted(ByVal arg As Object)
            If (Not (Me.DpmsServiceFeeTerminationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DpmsServiceFeeTerminationCompleted(Me, New DpmsServiceFeeTerminationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetRequestFromCodeByRefNo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRequestFromCodeByRefNo(ByVal strRefNo As String, ByRef strErr As String) As String
            Dim results() As Object = Me.Invoke("GetRequestFromCodeByRefNo", New Object() {strRefNo, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRequestFromCodeByRefNoAsync(ByVal strRefNo As String, ByVal strErr As String)
            Me.GetRequestFromCodeByRefNoAsync(strRefNo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRequestFromCodeByRefNoAsync(ByVal strRefNo As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetRequestFromCodeByRefNoOperationCompleted Is Nothing) Then
                Me.GetRequestFromCodeByRefNoOperationCompleted = AddressOf Me.OnGetRequestFromCodeByRefNoOperationCompleted
            End If
            Me.InvokeAsync("GetRequestFromCodeByRefNo", New Object() {strRefNo, strErr}, Me.GetRequestFromCodeByRefNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRequestFromCodeByRefNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRequestFromCodeByRefNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRequestFromCodeByRefNoCompleted(Me, New GetRequestFromCodeByRefNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CheckBrokerValidForDPMS", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckBrokerValidForDPMS(ByVal policyno As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckBrokerValidForDPMS", New Object() {policyno, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckBrokerValidForDPMSAsync(ByVal policyno As String, ByVal strErr As String)
            Me.CheckBrokerValidForDPMSAsync(policyno, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckBrokerValidForDPMSAsync(ByVal policyno As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.CheckBrokerValidForDPMSOperationCompleted Is Nothing) Then
                Me.CheckBrokerValidForDPMSOperationCompleted = AddressOf Me.OnCheckBrokerValidForDPMSOperationCompleted
            End If
            Me.InvokeAsync("CheckBrokerValidForDPMS", New Object() {policyno, strErr}, Me.CheckBrokerValidForDPMSOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckBrokerValidForDPMSOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckBrokerValidForDPMSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckBrokerValidForDPMSCompleted(Me, New CheckBrokerValidForDPMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/strmsgreq", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function strmsgreq(ByVal PstrUser As String, ByVal PdblCustID As Double, ByVal PstrAgent As String, ByVal PdtEffDate As Date, ByVal PdtExpDate As Date, ByVal PstrMsgCat As String, ByVal PstrMsg As String, ByRef PstrRefNo As String, ByVal PstrPolNo As String, ByRef strErr As String) As Integer
            Dim results() As Object = Me.Invoke("strmsgreq", New Object() {PstrUser, PdblCustID, PstrAgent, PdtEffDate, PdtExpDate, PstrMsgCat, PstrMsg, PstrRefNo, PstrPolNo, strErr})
            PstrRefNo = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub strmsgreqAsync(ByVal PstrUser As String, ByVal PdblCustID As Double, ByVal PstrAgent As String, ByVal PdtEffDate As Date, ByVal PdtExpDate As Date, ByVal PstrMsgCat As String, ByVal PstrMsg As String, ByVal PstrRefNo As String, ByVal PstrPolNo As String, ByVal strErr As String)
            Me.strmsgreqAsync(PstrUser, PdblCustID, PstrAgent, PdtEffDate, PdtExpDate, PstrMsgCat, PstrMsg, PstrRefNo, PstrPolNo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub strmsgreqAsync(ByVal PstrUser As String, ByVal PdblCustID As Double, ByVal PstrAgent As String, ByVal PdtEffDate As Date, ByVal PdtExpDate As Date, ByVal PstrMsgCat As String, ByVal PstrMsg As String, ByVal PstrRefNo As String, ByVal PstrPolNo As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.strmsgreqOperationCompleted Is Nothing) Then
                Me.strmsgreqOperationCompleted = AddressOf Me.OnstrmsgreqOperationCompleted
            End If
            Me.InvokeAsync("strmsgreq", New Object() {PstrUser, PdblCustID, PstrAgent, PdtEffDate, PdtExpDate, PstrMsgCat, PstrMsg, PstrRefNo, PstrPolNo, strErr}, Me.strmsgreqOperationCompleted, userState)
        End Sub
        
        Private Sub OnstrmsgreqOperationCompleted(ByVal arg As Object)
            If (Not (Me.strmsgreqCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent strmsgreqCompleted(Me, New strmsgreqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SendSMS2Customer", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendSMS2Customer(ByVal PstrUser As String, ByVal PstrCustID As String, ByVal PstrLangFlag As String, ByVal PStrPhoneMobile As String, ByVal PdtEffDate As Date, ByVal PdtExpDate As Date, ByVal PstrMsgCat As String, ByVal PstrMsg As String, ByRef PstrRefNo As String, ByVal PstrPolNo As String, ByRef PstrErrMsg As String) As Integer
            Dim results() As Object = Me.Invoke("SendSMS2Customer", New Object() {PstrUser, PstrCustID, PstrLangFlag, PStrPhoneMobile, PdtEffDate, PdtExpDate, PstrMsgCat, PstrMsg, PstrRefNo, PstrPolNo, PstrErrMsg})
            PstrRefNo = CType(results(1),String)
            PstrErrMsg = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendSMS2CustomerAsync(ByVal PstrUser As String, ByVal PstrCustID As String, ByVal PstrLangFlag As String, ByVal PStrPhoneMobile As String, ByVal PdtEffDate As Date, ByVal PdtExpDate As Date, ByVal PstrMsgCat As String, ByVal PstrMsg As String, ByVal PstrRefNo As String, ByVal PstrPolNo As String, ByVal PstrErrMsg As String)
            Me.SendSMS2CustomerAsync(PstrUser, PstrCustID, PstrLangFlag, PStrPhoneMobile, PdtEffDate, PdtExpDate, PstrMsgCat, PstrMsg, PstrRefNo, PstrPolNo, PstrErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendSMS2CustomerAsync(ByVal PstrUser As String, ByVal PstrCustID As String, ByVal PstrLangFlag As String, ByVal PStrPhoneMobile As String, ByVal PdtEffDate As Date, ByVal PdtExpDate As Date, ByVal PstrMsgCat As String, ByVal PstrMsg As String, ByVal PstrRefNo As String, ByVal PstrPolNo As String, ByVal PstrErrMsg As String, ByVal userState As Object)
            If (Me.SendSMS2CustomerOperationCompleted Is Nothing) Then
                Me.SendSMS2CustomerOperationCompleted = AddressOf Me.OnSendSMS2CustomerOperationCompleted
            End If
            Me.InvokeAsync("SendSMS2Customer", New Object() {PstrUser, PstrCustID, PstrLangFlag, PStrPhoneMobile, PdtEffDate, PdtExpDate, PstrMsgCat, PstrMsg, PstrRefNo, PstrPolNo, PstrErrMsg}, Me.SendSMS2CustomerOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendSMS2CustomerOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendSMS2CustomerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendSMS2CustomerCompleted(Me, New SendSMS2CustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SendPolicySMS", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendPolicySMS(ByVal pstrPolicyNo As String, ByRef pstrSMSType As String, ByRef pstrSmsid As String, ByRef pstrErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("SendPolicySMS", New Object() {pstrPolicyNo, pstrSMSType, pstrSmsid, pstrErrMsg})
            pstrSMSType = CType(results(1),String)
            pstrSmsid = CType(results(2),String)
            pstrErrMsg = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendPolicySMSAsync(ByVal pstrPolicyNo As String, ByVal pstrSMSType As String, ByVal pstrSmsid As String, ByVal pstrErrMsg As String)
            Me.SendPolicySMSAsync(pstrPolicyNo, pstrSMSType, pstrSmsid, pstrErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendPolicySMSAsync(ByVal pstrPolicyNo As String, ByVal pstrSMSType As String, ByVal pstrSmsid As String, ByVal pstrErrMsg As String, ByVal userState As Object)
            If (Me.SendPolicySMSOperationCompleted Is Nothing) Then
                Me.SendPolicySMSOperationCompleted = AddressOf Me.OnSendPolicySMSOperationCompleted
            End If
            Me.InvokeAsync("SendPolicySMS", New Object() {pstrPolicyNo, pstrSMSType, pstrSmsid, pstrErrMsg}, Me.SendPolicySMSOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendPolicySMSOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendPolicySMSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendPolicySMSCompleted(Me, New SendPolicySMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCapsilNegativeCashValueReminder", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCapsilNegativeCashValueReminder(ByVal strPolicy As String, ByRef ds1 As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCapsilNegativeCashValueReminder", New Object() {strPolicy, ds1, strErr})
            ds1 = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCapsilNegativeCashValueReminderAsync(ByVal strPolicy As String, ByVal ds1 As System.Data.DataSet, ByVal strErr As String)
            Me.GetCapsilNegativeCashValueReminderAsync(strPolicy, ds1, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCapsilNegativeCashValueReminderAsync(ByVal strPolicy As String, ByVal ds1 As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCapsilNegativeCashValueReminderOperationCompleted Is Nothing) Then
                Me.GetCapsilNegativeCashValueReminderOperationCompleted = AddressOf Me.OnGetCapsilNegativeCashValueReminderOperationCompleted
            End If
            Me.InvokeAsync("GetCapsilNegativeCashValueReminder", New Object() {strPolicy, ds1, strErr}, Me.GetCapsilNegativeCashValueReminderOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCapsilNegativeCashValueReminderOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCapsilNegativeCashValueReminderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCapsilNegativeCashValueReminderCompleted(Me, New GetCapsilNegativeCashValueReminderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdateCapsilNegativeCashValueReminderFlag", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCapsilNegativeCashValueReminderFlag(ByVal strPolicy As String, ByVal strFlag As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateCapsilNegativeCashValueReminderFlag", New Object() {strPolicy, strFlag, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCapsilNegativeCashValueReminderFlagAsync(ByVal strPolicy As String, ByVal strFlag As String, ByVal strErr As String)
            Me.UpdateCapsilNegativeCashValueReminderFlagAsync(strPolicy, strFlag, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCapsilNegativeCashValueReminderFlagAsync(ByVal strPolicy As String, ByVal strFlag As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateCapsilNegativeCashValueReminderFlagOperationCompleted Is Nothing) Then
                Me.UpdateCapsilNegativeCashValueReminderFlagOperationCompleted = AddressOf Me.OnUpdateCapsilNegativeCashValueReminderFlagOperationCompleted
            End If
            Me.InvokeAsync("UpdateCapsilNegativeCashValueReminderFlag", New Object() {strPolicy, strFlag, strErr}, Me.UpdateCapsilNegativeCashValueReminderFlagOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCapsilNegativeCashValueReminderFlagOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCapsilNegativeCashValueReminderFlagCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCapsilNegativeCashValueReminderFlagCompleted(Me, New UpdateCapsilNegativeCashValueReminderFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/isAnnuityPlan", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isAnnuityPlan(ByVal strContTypeCode As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("isAnnuityPlan", New Object() {strContTypeCode, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isAnnuityPlanAsync(ByVal strContTypeCode As String, ByVal strErr As String)
            Me.isAnnuityPlanAsync(strContTypeCode, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isAnnuityPlanAsync(ByVal strContTypeCode As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.isAnnuityPlanOperationCompleted Is Nothing) Then
                Me.isAnnuityPlanOperationCompleted = AddressOf Me.OnisAnnuityPlanOperationCompleted
            End If
            Me.InvokeAsync("isAnnuityPlan", New Object() {strContTypeCode, strErr}, Me.isAnnuityPlanOperationCompleted, userState)
        End Sub
        
        Private Sub OnisAnnuityPlanOperationCompleted(ByVal arg As Object)
            If (Not (Me.isAnnuityPlanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isAnnuityPlanCompleted(Me, New isAnnuityPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/DirectCredit", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DirectCredit(ByVal strActionType As String, ByVal strPolicyNo As String, ByVal strLAClientNo As String, ByVal strBankCode As String, ByVal strBranchCode As String, ByVal strBankAcctNo As String, ByVal strAccountStatus As String, ByRef dsResult As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("DirectCredit", New Object() {strActionType, strPolicyNo, strLAClientNo, strBankCode, strBranchCode, strBankAcctNo, strAccountStatus, dsResult, strErr})
            dsResult = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DirectCreditAsync(ByVal strActionType As String, ByVal strPolicyNo As String, ByVal strLAClientNo As String, ByVal strBankCode As String, ByVal strBranchCode As String, ByVal strBankAcctNo As String, ByVal strAccountStatus As String, ByVal dsResult As System.Data.DataSet, ByVal strErr As String)
            Me.DirectCreditAsync(strActionType, strPolicyNo, strLAClientNo, strBankCode, strBranchCode, strBankAcctNo, strAccountStatus, dsResult, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DirectCreditAsync(ByVal strActionType As String, ByVal strPolicyNo As String, ByVal strLAClientNo As String, ByVal strBankCode As String, ByVal strBranchCode As String, ByVal strBankAcctNo As String, ByVal strAccountStatus As String, ByVal dsResult As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.DirectCreditOperationCompleted Is Nothing) Then
                Me.DirectCreditOperationCompleted = AddressOf Me.OnDirectCreditOperationCompleted
            End If
            Me.InvokeAsync("DirectCredit", New Object() {strActionType, strPolicyNo, strLAClientNo, strBankCode, strBranchCode, strBankAcctNo, strAccountStatus, dsResult, strErr}, Me.DirectCreditOperationCompleted, userState)
        End Sub
        
        Private Sub OnDirectCreditOperationCompleted(ByVal arg As Object)
            If (Not (Me.DirectCreditCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DirectCreditCompleted(Me, New DirectCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/isAnnuityPolicy", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isAnnuityPolicy(ByVal strPolicyNo As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("isAnnuityPolicy", New Object() {strPolicyNo, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isAnnuityPolicyAsync(ByVal strPolicyNo As String, ByVal strErr As String)
            Me.isAnnuityPolicyAsync(strPolicyNo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isAnnuityPolicyAsync(ByVal strPolicyNo As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.isAnnuityPolicyOperationCompleted Is Nothing) Then
                Me.isAnnuityPolicyOperationCompleted = AddressOf Me.OnisAnnuityPolicyOperationCompleted
            End If
            Me.InvokeAsync("isAnnuityPolicy", New Object() {strPolicyNo, strErr}, Me.isAnnuityPolicyOperationCompleted, userState)
        End Sub
        
        Private Sub OnisAnnuityPolicyOperationCompleted(ByVal arg As Object)
            If (Not (Me.isAnnuityPolicyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isAnnuityPolicyCompleted(Me, New isAnnuityPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/HasULRegularContribution", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HasULRegularContribution(ByVal strPolicyNo As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("HasULRegularContribution", New Object() {strPolicyNo, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HasULRegularContributionAsync(ByVal strPolicyNo As String, ByVal strErr As String)
            Me.HasULRegularContributionAsync(strPolicyNo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HasULRegularContributionAsync(ByVal strPolicyNo As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.HasULRegularContributionOperationCompleted Is Nothing) Then
                Me.HasULRegularContributionOperationCompleted = AddressOf Me.OnHasULRegularContributionOperationCompleted
            End If
            Me.InvokeAsync("HasULRegularContribution", New Object() {strPolicyNo, strErr}, Me.HasULRegularContributionOperationCompleted, userState)
        End Sub
        
        Private Sub OnHasULRegularContributionOperationCompleted(ByVal arg As Object)
            If (Not (Me.HasULRegularContributionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HasULRegularContributionCompleted(Me, New HasULRegularContributionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetMinimumRequiredPremium", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMinimumRequiredPremium(ByVal policyNo As String, ByVal effDate As Date, ByRef dsRece As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetMinimumRequiredPremium", New Object() {policyNo, effDate, dsRece, strErr})
            dsRece = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMinimumRequiredPremiumAsync(ByVal policyNo As String, ByVal effDate As Date, ByVal dsRece As System.Data.DataSet, ByVal strErr As String)
            Me.GetMinimumRequiredPremiumAsync(policyNo, effDate, dsRece, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMinimumRequiredPremiumAsync(ByVal policyNo As String, ByVal effDate As Date, ByVal dsRece As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetMinimumRequiredPremiumOperationCompleted Is Nothing) Then
                Me.GetMinimumRequiredPremiumOperationCompleted = AddressOf Me.OnGetMinimumRequiredPremiumOperationCompleted
            End If
            Me.InvokeAsync("GetMinimumRequiredPremium", New Object() {policyNo, effDate, dsRece, strErr}, Me.GetMinimumRequiredPremiumOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMinimumRequiredPremiumOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMinimumRequiredPremiumCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMinimumRequiredPremiumCompleted(Me, New GetMinimumRequiredPremiumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SaveDpmsMailRequest", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveDpmsMailRequest(ByVal dteToday As Date, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveDpmsMailRequest", New Object() {dteToday, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveDpmsMailRequestAsync(ByVal dteToday As Date, ByVal strError As String)
            Me.SaveDpmsMailRequestAsync(dteToday, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveDpmsMailRequestAsync(ByVal dteToday As Date, ByVal strError As String, ByVal userState As Object)
            If (Me.SaveDpmsMailRequestOperationCompleted Is Nothing) Then
                Me.SaveDpmsMailRequestOperationCompleted = AddressOf Me.OnSaveDpmsMailRequestOperationCompleted
            End If
            Me.InvokeAsync("SaveDpmsMailRequest", New Object() {dteToday, strError}, Me.SaveDpmsMailRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveDpmsMailRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveDpmsMailRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveDpmsMailRequestCompleted(Me, New SaveDpmsMailRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetDpmsImportFile", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDpmsImportFile(ByVal dteToday As Date, ByVal strBRKName As String, ByRef dsResult As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetDpmsImportFile", New Object() {dteToday, strBRKName, dsResult, strError})
            dsResult = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDpmsImportFileAsync(ByVal dteToday As Date, ByVal strBRKName As String, ByVal dsResult As System.Data.DataSet, ByVal strError As String)
            Me.GetDpmsImportFileAsync(dteToday, strBRKName, dsResult, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDpmsImportFileAsync(ByVal dteToday As Date, ByVal strBRKName As String, ByVal dsResult As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetDpmsImportFileOperationCompleted Is Nothing) Then
                Me.GetDpmsImportFileOperationCompleted = AddressOf Me.OnGetDpmsImportFileOperationCompleted
            End If
            Me.InvokeAsync("GetDpmsImportFile", New Object() {dteToday, strBRKName, dsResult, strError}, Me.GetDpmsImportFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDpmsImportFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDpmsImportFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDpmsImportFileCompleted(Me, New GetDpmsImportFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdateDpmsMailStatus", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateDpmsMailStatus(ByVal intRequestID As Integer, ByVal strUpdUser As String, ByVal strStatus As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateDpmsMailStatus", New Object() {intRequestID, strUpdUser, strStatus, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateDpmsMailStatusAsync(ByVal intRequestID As Integer, ByVal strUpdUser As String, ByVal strStatus As String, ByVal strError As String)
            Me.UpdateDpmsMailStatusAsync(intRequestID, strUpdUser, strStatus, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateDpmsMailStatusAsync(ByVal intRequestID As Integer, ByVal strUpdUser As String, ByVal strStatus As String, ByVal strError As String, ByVal userState As Object)
            If (Me.UpdateDpmsMailStatusOperationCompleted Is Nothing) Then
                Me.UpdateDpmsMailStatusOperationCompleted = AddressOf Me.OnUpdateDpmsMailStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateDpmsMailStatus", New Object() {intRequestID, strUpdUser, strStatus, strError}, Me.UpdateDpmsMailStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateDpmsMailStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateDpmsMailStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateDpmsMailStatusCompleted(Me, New UpdateDpmsMailStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetDpmsDailyStatus", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDpmsDailyStatus(ByVal strBRKName As String, ByVal dteCurrDate As Date, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetDpmsDailyStatus", New Object() {strBRKName, dteCurrDate, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDpmsDailyStatusAsync(ByVal strBRKName As String, ByVal dteCurrDate As Date, ByVal strError As String)
            Me.GetDpmsDailyStatusAsync(strBRKName, dteCurrDate, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDpmsDailyStatusAsync(ByVal strBRKName As String, ByVal dteCurrDate As Date, ByVal strError As String, ByVal userState As Object)
            If (Me.GetDpmsDailyStatusOperationCompleted Is Nothing) Then
                Me.GetDpmsDailyStatusOperationCompleted = AddressOf Me.OnGetDpmsDailyStatusOperationCompleted
            End If
            Me.InvokeAsync("GetDpmsDailyStatus", New Object() {strBRKName, dteCurrDate, strError}, Me.GetDpmsDailyStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDpmsDailyStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDpmsDailyStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDpmsDailyStatusCompleted(Me, New GetDpmsDailyStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SaveDpmsMailLog", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveDpmsMailLog(ByVal dtLog As System.Data.DataTable) As Boolean
            Dim results() As Object = Me.Invoke("SaveDpmsMailLog", New Object() {dtLog})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveDpmsMailLogAsync(ByVal dtLog As System.Data.DataTable)
            Me.SaveDpmsMailLogAsync(dtLog, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveDpmsMailLogAsync(ByVal dtLog As System.Data.DataTable, ByVal userState As Object)
            If (Me.SaveDpmsMailLogOperationCompleted Is Nothing) Then
                Me.SaveDpmsMailLogOperationCompleted = AddressOf Me.OnSaveDpmsMailLogOperationCompleted
            End If
            Me.InvokeAsync("SaveDpmsMailLog", New Object() {dtLog}, Me.SaveDpmsMailLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveDpmsMailLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveDpmsMailLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveDpmsMailLogCompleted(Me, New SaveDpmsMailLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CheckCNHolderWithPolicyNoteIFS", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckCNHolderWithPolicyNoteIFS(ByVal strPolicyNo As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckCNHolderWithPolicyNoteIFS", New Object() {strPolicyNo, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckCNHolderWithPolicyNoteIFSAsync(ByVal strPolicyNo As String, ByVal strErr As String)
            Me.CheckCNHolderWithPolicyNoteIFSAsync(strPolicyNo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckCNHolderWithPolicyNoteIFSAsync(ByVal strPolicyNo As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.CheckCNHolderWithPolicyNoteIFSOperationCompleted Is Nothing) Then
                Me.CheckCNHolderWithPolicyNoteIFSOperationCompleted = AddressOf Me.OnCheckCNHolderWithPolicyNoteIFSOperationCompleted
            End If
            Me.InvokeAsync("CheckCNHolderWithPolicyNoteIFS", New Object() {strPolicyNo, strErr}, Me.CheckCNHolderWithPolicyNoteIFSOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckCNHolderWithPolicyNoteIFSOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckCNHolderWithPolicyNoteIFSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckCNHolderWithPolicyNoteIFSCompleted(Me, New CheckCNHolderWithPolicyNoteIFSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetMortalityClassRankCAP", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMortalityClassRankCAP(ByVal strSubPlanCode As String, ByRef strErr As String) As Integer
            Dim results() As Object = Me.Invoke("GetMortalityClassRankCAP", New Object() {strSubPlanCode, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMortalityClassRankCAPAsync(ByVal strSubPlanCode As String, ByVal strErr As String)
            Me.GetMortalityClassRankCAPAsync(strSubPlanCode, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMortalityClassRankCAPAsync(ByVal strSubPlanCode As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetMortalityClassRankCAPOperationCompleted Is Nothing) Then
                Me.GetMortalityClassRankCAPOperationCompleted = AddressOf Me.OnGetMortalityClassRankCAPOperationCompleted
            End If
            Me.InvokeAsync("GetMortalityClassRankCAP", New Object() {strSubPlanCode, strErr}, Me.GetMortalityClassRankCAPOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMortalityClassRankCAPOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMortalityClassRankCAPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMortalityClassRankCAPCompleted(Me, New GetMortalityClassRankCAPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetMortalityClassRankLA", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMortalityClassRankLA(ByVal strSubPlanCode As String, ByVal strMortCode As String, ByRef strErr As String) As Integer
            Dim results() As Object = Me.Invoke("GetMortalityClassRankLA", New Object() {strSubPlanCode, strMortCode, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMortalityClassRankLAAsync(ByVal strSubPlanCode As String, ByVal strMortCode As String, ByVal strErr As String)
            Me.GetMortalityClassRankLAAsync(strSubPlanCode, strMortCode, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMortalityClassRankLAAsync(ByVal strSubPlanCode As String, ByVal strMortCode As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetMortalityClassRankLAOperationCompleted Is Nothing) Then
                Me.GetMortalityClassRankLAOperationCompleted = AddressOf Me.OnGetMortalityClassRankLAOperationCompleted
            End If
            Me.InvokeAsync("GetMortalityClassRankLA", New Object() {strSubPlanCode, strMortCode, strErr}, Me.GetMortalityClassRankLAOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMortalityClassRankLAOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMortalityClassRankLACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMortalityClassRankLACompleted(Me, New GetMortalityClassRankLACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CUPDDAtoCashConversion", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CUPDDAtoCashConversion(ByVal dsBC As System.Data.DataSet, ByRef strErr As String) As Integer
            Dim results() As Object = Me.Invoke("CUPDDAtoCashConversion", New Object() {dsBC, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CUPDDAtoCashConversionAsync(ByVal dsBC As System.Data.DataSet, ByVal strErr As String)
            Me.CUPDDAtoCashConversionAsync(dsBC, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CUPDDAtoCashConversionAsync(ByVal dsBC As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.CUPDDAtoCashConversionOperationCompleted Is Nothing) Then
                Me.CUPDDAtoCashConversionOperationCompleted = AddressOf Me.OnCUPDDAtoCashConversionOperationCompleted
            End If
            Me.InvokeAsync("CUPDDAtoCashConversion", New Object() {dsBC, strErr}, Me.CUPDDAtoCashConversionOperationCompleted, userState)
        End Sub
        
        Private Sub OnCUPDDAtoCashConversionOperationCompleted(ByVal arg As Object)
            If (Not (Me.CUPDDAtoCashConversionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CUPDDAtoCashConversionCompleted(Me, New CUPDDAtoCashConversionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPosSoftCode", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPosSoftCode(ByVal type As String, ByRef dtValue As System.Data.DataTable, ByRef strErr As String, ByRef code As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPosSoftCode", New Object() {type, dtValue, strErr, code})
            dtValue = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            code = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPosSoftCodeAsync(ByVal type As String, ByVal dtValue As System.Data.DataTable, ByVal strErr As String, ByVal code As String)
            Me.GetPosSoftCodeAsync(type, dtValue, strErr, code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPosSoftCodeAsync(ByVal type As String, ByVal dtValue As System.Data.DataTable, ByVal strErr As String, ByVal code As String, ByVal userState As Object)
            If (Me.GetPosSoftCodeOperationCompleted Is Nothing) Then
                Me.GetPosSoftCodeOperationCompleted = AddressOf Me.OnGetPosSoftCodeOperationCompleted
            End If
            Me.InvokeAsync("GetPosSoftCode", New Object() {type, dtValue, strErr, code}, Me.GetPosSoftCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPosSoftCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPosSoftCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPosSoftCodeCompleted(Me, New GetPosSoftCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/EnquireEGP", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EnquireEGP(ByVal policyNo As String, ByVal lifeNo As String, ByVal coverageNo As String, ByVal riderNo As String, ByRef status As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef effectiveFrom As System.Nullable(Of Date), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef effectiveTo As System.Nullable(Of Date), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef suppressFrom As System.Nullable(Of Date), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef suppressTo As System.Nullable(Of Date), ByRef os_premium As Decimal, ByRef os_levy As Decimal, ByRef isEligible As Boolean, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("EnquireEGP", New Object() {policyNo, lifeNo, coverageNo, riderNo, status, effectiveFrom, effectiveTo, suppressFrom, suppressTo, os_premium, os_levy, isEligible, strErr})
            status = CType(results(1),String)
            effectiveFrom = CType(results(2),System.Nullable(Of Date))
            effectiveTo = CType(results(3),System.Nullable(Of Date))
            suppressFrom = CType(results(4),System.Nullable(Of Date))
            suppressTo = CType(results(5),System.Nullable(Of Date))
            os_premium = CType(results(6),Decimal)
            os_levy = CType(results(7),Decimal)
            isEligible = CType(results(8),Boolean)
            strErr = CType(results(9),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EnquireEGPAsync(ByVal policyNo As String, ByVal lifeNo As String, ByVal coverageNo As String, ByVal riderNo As String, ByVal status As String, ByVal effectiveFrom As System.Nullable(Of Date), ByVal effectiveTo As System.Nullable(Of Date), ByVal suppressFrom As System.Nullable(Of Date), ByVal suppressTo As System.Nullable(Of Date), ByVal os_premium As Decimal, ByVal os_levy As Decimal, ByVal isEligible As Boolean, ByVal strErr As String)
            Me.EnquireEGPAsync(policyNo, lifeNo, coverageNo, riderNo, status, effectiveFrom, effectiveTo, suppressFrom, suppressTo, os_premium, os_levy, isEligible, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EnquireEGPAsync(ByVal policyNo As String, ByVal lifeNo As String, ByVal coverageNo As String, ByVal riderNo As String, ByVal status As String, ByVal effectiveFrom As System.Nullable(Of Date), ByVal effectiveTo As System.Nullable(Of Date), ByVal suppressFrom As System.Nullable(Of Date), ByVal suppressTo As System.Nullable(Of Date), ByVal os_premium As Decimal, ByVal os_levy As Decimal, ByVal isEligible As Boolean, ByVal strErr As String, ByVal userState As Object)
            If (Me.EnquireEGPOperationCompleted Is Nothing) Then
                Me.EnquireEGPOperationCompleted = AddressOf Me.OnEnquireEGPOperationCompleted
            End If
            Me.InvokeAsync("EnquireEGP", New Object() {policyNo, lifeNo, coverageNo, riderNo, status, effectiveFrom, effectiveTo, suppressFrom, suppressTo, os_premium, os_levy, isEligible, strErr}, Me.EnquireEGPOperationCompleted, userState)
        End Sub
        
        Private Sub OnEnquireEGPOperationCompleted(ByVal arg As Object)
            If (Not (Me.EnquireEGPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EnquireEGPCompleted(Me, New EnquireEGPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SaveEGPApplySyncRcd", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveEGPApplySyncRcd(ByVal policyNo As String, ByVal lifeNo As String, ByVal coverageNo As String, ByVal riderNo As String, ByVal effFrom As Date, ByVal effTo As Date, ByRef lngTransID As Long, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveEGPApplySyncRcd", New Object() {policyNo, lifeNo, coverageNo, riderNo, effFrom, effTo, lngTransID, strErr})
            lngTransID = CType(results(1),Long)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveEGPApplySyncRcdAsync(ByVal policyNo As String, ByVal lifeNo As String, ByVal coverageNo As String, ByVal riderNo As String, ByVal effFrom As Date, ByVal effTo As Date, ByVal lngTransID As Long, ByVal strErr As String)
            Me.SaveEGPApplySyncRcdAsync(policyNo, lifeNo, coverageNo, riderNo, effFrom, effTo, lngTransID, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveEGPApplySyncRcdAsync(ByVal policyNo As String, ByVal lifeNo As String, ByVal coverageNo As String, ByVal riderNo As String, ByVal effFrom As Date, ByVal effTo As Date, ByVal lngTransID As Long, ByVal strErr As String, ByVal userState As Object)
            If (Me.SaveEGPApplySyncRcdOperationCompleted Is Nothing) Then
                Me.SaveEGPApplySyncRcdOperationCompleted = AddressOf Me.OnSaveEGPApplySyncRcdOperationCompleted
            End If
            Me.InvokeAsync("SaveEGPApplySyncRcd", New Object() {policyNo, lifeNo, coverageNo, riderNo, effFrom, effTo, lngTransID, strErr}, Me.SaveEGPApplySyncRcdOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveEGPApplySyncRcdOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveEGPApplySyncRcdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveEGPApplySyncRcdCompleted(Me, New SaveEGPApplySyncRcdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SaveEGPReleaseSyncRcd", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveEGPReleaseSyncRcd(ByVal policyNo As String, ByVal lifeNo As String, ByVal coverageNo As String, ByVal riderNo As String, ByVal effTo As Date, ByRef lngTransID As Long, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveEGPReleaseSyncRcd", New Object() {policyNo, lifeNo, coverageNo, riderNo, effTo, lngTransID, strErr})
            lngTransID = CType(results(1),Long)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveEGPReleaseSyncRcdAsync(ByVal policyNo As String, ByVal lifeNo As String, ByVal coverageNo As String, ByVal riderNo As String, ByVal effTo As Date, ByVal lngTransID As Long, ByVal strErr As String)
            Me.SaveEGPReleaseSyncRcdAsync(policyNo, lifeNo, coverageNo, riderNo, effTo, lngTransID, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveEGPReleaseSyncRcdAsync(ByVal policyNo As String, ByVal lifeNo As String, ByVal coverageNo As String, ByVal riderNo As String, ByVal effTo As Date, ByVal lngTransID As Long, ByVal strErr As String, ByVal userState As Object)
            If (Me.SaveEGPReleaseSyncRcdOperationCompleted Is Nothing) Then
                Me.SaveEGPReleaseSyncRcdOperationCompleted = AddressOf Me.OnSaveEGPReleaseSyncRcdOperationCompleted
            End If
            Me.InvokeAsync("SaveEGPReleaseSyncRcd", New Object() {policyNo, lifeNo, coverageNo, riderNo, effTo, lngTransID, strErr}, Me.SaveEGPReleaseSyncRcdOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveEGPReleaseSyncRcdOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveEGPReleaseSyncRcdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveEGPReleaseSyncRcdCompleted(Me, New SaveEGPReleaseSyncRcdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SaveEGPSuppressBillinfSyncRcd", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveEGPSuppressBillinfSyncRcd(ByVal policyNo As String, ByVal lifeNo As String, ByVal cov As String, ByVal rider As String, ByVal suppressFrom As Date, ByVal suppressTo As Date, ByRef lngTransID As Long, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveEGPSuppressBillinfSyncRcd", New Object() {policyNo, lifeNo, cov, rider, suppressFrom, suppressTo, lngTransID, strErr})
            lngTransID = CType(results(1),Long)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveEGPSuppressBillinfSyncRcdAsync(ByVal policyNo As String, ByVal lifeNo As String, ByVal cov As String, ByVal rider As String, ByVal suppressFrom As Date, ByVal suppressTo As Date, ByVal lngTransID As Long, ByVal strErr As String)
            Me.SaveEGPSuppressBillinfSyncRcdAsync(policyNo, lifeNo, cov, rider, suppressFrom, suppressTo, lngTransID, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveEGPSuppressBillinfSyncRcdAsync(ByVal policyNo As String, ByVal lifeNo As String, ByVal cov As String, ByVal rider As String, ByVal suppressFrom As Date, ByVal suppressTo As Date, ByVal lngTransID As Long, ByVal strErr As String, ByVal userState As Object)
            If (Me.SaveEGPSuppressBillinfSyncRcdOperationCompleted Is Nothing) Then
                Me.SaveEGPSuppressBillinfSyncRcdOperationCompleted = AddressOf Me.OnSaveEGPSuppressBillinfSyncRcdOperationCompleted
            End If
            Me.InvokeAsync("SaveEGPSuppressBillinfSyncRcd", New Object() {policyNo, lifeNo, cov, rider, suppressFrom, suppressTo, lngTransID, strErr}, Me.SaveEGPSuppressBillinfSyncRcdOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveEGPSuppressBillinfSyncRcdOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveEGPSuppressBillinfSyncRcdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveEGPSuppressBillinfSyncRcdCompleted(Me, New SaveEGPSuppressBillinfSyncRcdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetEGPRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEGPRecord(ByVal lngTransID As Long, ByRef dtTrans As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetEGPRecord", New Object() {lngTransID, dtTrans, strErr})
            dtTrans = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEGPRecordAsync(ByVal lngTransID As Long, ByVal dtTrans As System.Data.DataTable, ByVal strErr As String)
            Me.GetEGPRecordAsync(lngTransID, dtTrans, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEGPRecordAsync(ByVal lngTransID As Long, ByVal dtTrans As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetEGPRecordOperationCompleted Is Nothing) Then
                Me.GetEGPRecordOperationCompleted = AddressOf Me.OnGetEGPRecordOperationCompleted
            End If
            Me.InvokeAsync("GetEGPRecord", New Object() {lngTransID, dtTrans, strErr}, Me.GetEGPRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEGPRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEGPRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEGPRecordCompleted(Me, New GetEGPRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/EnquireSpecialEventBenefit", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EnquireSpecialEventBenefit(ByVal policyNo As String, ByVal lifeNo As String, ByVal coverageNo As String, ByVal riderNo As String, ByRef status As String, ByRef statusDesc As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef effectiveFrom As System.Nullable(Of Date), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef effectiveTo As System.Nullable(Of Date), ByRef reason As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("EnquireSpecialEventBenefit", New Object() {policyNo, lifeNo, coverageNo, riderNo, status, statusDesc, effectiveFrom, effectiveTo, reason, strErr})
            status = CType(results(1),String)
            statusDesc = CType(results(2),String)
            effectiveFrom = CType(results(3),System.Nullable(Of Date))
            effectiveTo = CType(results(4),System.Nullable(Of Date))
            reason = CType(results(5),String)
            strErr = CType(results(6),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EnquireSpecialEventBenefitAsync(ByVal policyNo As String, ByVal lifeNo As String, ByVal coverageNo As String, ByVal riderNo As String, ByVal status As String, ByVal statusDesc As String, ByVal effectiveFrom As System.Nullable(Of Date), ByVal effectiveTo As System.Nullable(Of Date), ByVal reason As String, ByVal strErr As String)
            Me.EnquireSpecialEventBenefitAsync(policyNo, lifeNo, coverageNo, riderNo, status, statusDesc, effectiveFrom, effectiveTo, reason, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EnquireSpecialEventBenefitAsync(ByVal policyNo As String, ByVal lifeNo As String, ByVal coverageNo As String, ByVal riderNo As String, ByVal status As String, ByVal statusDesc As String, ByVal effectiveFrom As System.Nullable(Of Date), ByVal effectiveTo As System.Nullable(Of Date), ByVal reason As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.EnquireSpecialEventBenefitOperationCompleted Is Nothing) Then
                Me.EnquireSpecialEventBenefitOperationCompleted = AddressOf Me.OnEnquireSpecialEventBenefitOperationCompleted
            End If
            Me.InvokeAsync("EnquireSpecialEventBenefit", New Object() {policyNo, lifeNo, coverageNo, riderNo, status, statusDesc, effectiveFrom, effectiveTo, reason, strErr}, Me.EnquireSpecialEventBenefitOperationCompleted, userState)
        End Sub
        
        Private Sub OnEnquireSpecialEventBenefitOperationCompleted(ByVal arg As Object)
            If (Not (Me.EnquireSpecialEventBenefitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EnquireSpecialEventBenefitCompleted(Me, New EnquireSpecialEventBenefitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SaveSpecialEventApplySyncRcd", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveSpecialEventApplySyncRcd(ByVal policyNo As String, ByVal lifeNo As String, ByVal coverageNo As String, ByVal riderNo As String, ByRef lngTransID As Long, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveSpecialEventApplySyncRcd", New Object() {policyNo, lifeNo, coverageNo, riderNo, lngTransID, strErr})
            lngTransID = CType(results(1),Long)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveSpecialEventApplySyncRcdAsync(ByVal policyNo As String, ByVal lifeNo As String, ByVal coverageNo As String, ByVal riderNo As String, ByVal lngTransID As Long, ByVal strErr As String)
            Me.SaveSpecialEventApplySyncRcdAsync(policyNo, lifeNo, coverageNo, riderNo, lngTransID, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveSpecialEventApplySyncRcdAsync(ByVal policyNo As String, ByVal lifeNo As String, ByVal coverageNo As String, ByVal riderNo As String, ByVal lngTransID As Long, ByVal strErr As String, ByVal userState As Object)
            If (Me.SaveSpecialEventApplySyncRcdOperationCompleted Is Nothing) Then
                Me.SaveSpecialEventApplySyncRcdOperationCompleted = AddressOf Me.OnSaveSpecialEventApplySyncRcdOperationCompleted
            End If
            Me.InvokeAsync("SaveSpecialEventApplySyncRcd", New Object() {policyNo, lifeNo, coverageNo, riderNo, lngTransID, strErr}, Me.SaveSpecialEventApplySyncRcdOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveSpecialEventApplySyncRcdOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveSpecialEventApplySyncRcdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveSpecialEventApplySyncRcdCompleted(Me, New SaveSpecialEventApplySyncRcdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SaveSpecialEventTerminateSyncRcd", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveSpecialEventTerminateSyncRcd(ByVal policyNo As String, ByVal lifeNo As String, ByVal coverageNo As String, ByVal riderNo As String, ByRef reason As String, ByRef lngTransID As Long, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveSpecialEventTerminateSyncRcd", New Object() {policyNo, lifeNo, coverageNo, riderNo, reason, lngTransID, strErr})
            reason = CType(results(1),String)
            lngTransID = CType(results(2),Long)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveSpecialEventTerminateSyncRcdAsync(ByVal policyNo As String, ByVal lifeNo As String, ByVal coverageNo As String, ByVal riderNo As String, ByVal reason As String, ByVal lngTransID As Long, ByVal strErr As String)
            Me.SaveSpecialEventTerminateSyncRcdAsync(policyNo, lifeNo, coverageNo, riderNo, reason, lngTransID, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveSpecialEventTerminateSyncRcdAsync(ByVal policyNo As String, ByVal lifeNo As String, ByVal coverageNo As String, ByVal riderNo As String, ByVal reason As String, ByVal lngTransID As Long, ByVal strErr As String, ByVal userState As Object)
            If (Me.SaveSpecialEventTerminateSyncRcdOperationCompleted Is Nothing) Then
                Me.SaveSpecialEventTerminateSyncRcdOperationCompleted = AddressOf Me.OnSaveSpecialEventTerminateSyncRcdOperationCompleted
            End If
            Me.InvokeAsync("SaveSpecialEventTerminateSyncRcd", New Object() {policyNo, lifeNo, coverageNo, riderNo, reason, lngTransID, strErr}, Me.SaveSpecialEventTerminateSyncRcdOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveSpecialEventTerminateSyncRcdOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveSpecialEventTerminateSyncRcdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveSpecialEventTerminateSyncRcdCompleted(Me, New SaveSpecialEventTerminateSyncRcdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetSpecialEventTrans", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSpecialEventTrans(ByVal lngTransID As Long, ByRef dtTrans As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSpecialEventTrans", New Object() {lngTransID, dtTrans, strErr})
            dtTrans = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSpecialEventTransAsync(ByVal lngTransID As Long, ByVal dtTrans As System.Data.DataTable, ByVal strErr As String)
            Me.GetSpecialEventTransAsync(lngTransID, dtTrans, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSpecialEventTransAsync(ByVal lngTransID As Long, ByVal dtTrans As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetSpecialEventTransOperationCompleted Is Nothing) Then
                Me.GetSpecialEventTransOperationCompleted = AddressOf Me.OnGetSpecialEventTransOperationCompleted
            End If
            Me.InvokeAsync("GetSpecialEventTrans", New Object() {lngTransID, dtTrans, strErr}, Me.GetSpecialEventTransOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSpecialEventTransOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSpecialEventTransCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSpecialEventTransCompleted(Me, New GetSpecialEventTransCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/AddProblemPolicyMessage", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddProblemPolicyMessage(ByVal policyNo As String, ByVal msg As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("AddProblemPolicyMessage", New Object() {policyNo, msg, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddProblemPolicyMessageAsync(ByVal policyNo As String, ByVal msg As String, ByVal strErr As String)
            Me.AddProblemPolicyMessageAsync(policyNo, msg, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddProblemPolicyMessageAsync(ByVal policyNo As String, ByVal msg As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.AddProblemPolicyMessageOperationCompleted Is Nothing) Then
                Me.AddProblemPolicyMessageOperationCompleted = AddressOf Me.OnAddProblemPolicyMessageOperationCompleted
            End If
            Me.InvokeAsync("AddProblemPolicyMessage", New Object() {policyNo, msg, strErr}, Me.AddProblemPolicyMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddProblemPolicyMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddProblemPolicyMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddProblemPolicyMessageCompleted(Me, New AddProblemPolicyMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCRSTranscationLog", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCRSTranscationLog(ByVal pCustomerId As Integer, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCRSTranscationLog", New Object() {pCustomerId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCRSTranscationLogAsync(ByVal pCustomerId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetCRSTranscationLogAsync(pCustomerId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCRSTranscationLogAsync(ByVal pCustomerId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCRSTranscationLogOperationCompleted Is Nothing) Then
                Me.GetCRSTranscationLogOperationCompleted = AddressOf Me.OnGetCRSTranscationLogOperationCompleted
            End If
            Me.InvokeAsync("GetCRSTranscationLog", New Object() {pCustomerId, ds, strErr}, Me.GetCRSTranscationLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCRSTranscationLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCRSTranscationLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCRSTranscationLogCompleted(Me, New GetCRSTranscationLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCRSTranscationLogByTranscationLogId", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCRSTranscationLogByTranscationLogId(ByVal pTranscationLogId As Integer, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCRSTranscationLogByTranscationLogId", New Object() {pTranscationLogId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCRSTranscationLogByTranscationLogIdAsync(ByVal pTranscationLogId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetCRSTranscationLogByTranscationLogIdAsync(pTranscationLogId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCRSTranscationLogByTranscationLogIdAsync(ByVal pTranscationLogId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCRSTranscationLogByTranscationLogIdOperationCompleted Is Nothing) Then
                Me.GetCRSTranscationLogByTranscationLogIdOperationCompleted = AddressOf Me.OnGetCRSTranscationLogByTranscationLogIdOperationCompleted
            End If
            Me.InvokeAsync("GetCRSTranscationLogByTranscationLogId", New Object() {pTranscationLogId, ds, strErr}, Me.GetCRSTranscationLogByTranscationLogIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCRSTranscationLogByTranscationLogIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCRSTranscationLogByTranscationLogIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCRSTranscationLogByTranscationLogIdCompleted(Me, New GetCRSTranscationLogByTranscationLogIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCRSFollowUpLetterTranscationLogByCustomerId", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCRSFollowUpLetterTranscationLogByCustomerId(ByVal pCustomerId As Integer, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCRSFollowUpLetterTranscationLogByCustomerId", New Object() {pCustomerId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCRSFollowUpLetterTranscationLogByCustomerIdAsync(ByVal pCustomerId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetCRSFollowUpLetterTranscationLogByCustomerIdAsync(pCustomerId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCRSFollowUpLetterTranscationLogByCustomerIdAsync(ByVal pCustomerId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCRSFollowUpLetterTranscationLogByCustomerIdOperationCompleted Is Nothing) Then
                Me.GetCRSFollowUpLetterTranscationLogByCustomerIdOperationCompleted = AddressOf Me.OnGetCRSFollowUpLetterTranscationLogByCustomerIdOperationCompleted
            End If
            Me.InvokeAsync("GetCRSFollowUpLetterTranscationLogByCustomerId", New Object() {pCustomerId, ds, strErr}, Me.GetCRSFollowUpLetterTranscationLogByCustomerIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCRSFollowUpLetterTranscationLogByCustomerIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCRSFollowUpLetterTranscationLogByCustomerIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCRSFollowUpLetterTranscationLogByCustomerIdCompleted(Me, New GetCRSFollowUpLetterTranscationLogByCustomerIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCRSFollowUpLetterTranscationLogByTranscationId", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCRSFollowUpLetterTranscationLogByTranscationId(ByVal pTranscationId As Integer, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCRSFollowUpLetterTranscationLogByTranscationId", New Object() {pTranscationId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCRSFollowUpLetterTranscationLogByTranscationIdAsync(ByVal pTranscationId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetCRSFollowUpLetterTranscationLogByTranscationIdAsync(pTranscationId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCRSFollowUpLetterTranscationLogByTranscationIdAsync(ByVal pTranscationId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCRSFollowUpLetterTranscationLogByTranscationIdOperationCompleted Is Nothing) Then
                Me.GetCRSFollowUpLetterTranscationLogByTranscationIdOperationCompleted = AddressOf Me.OnGetCRSFollowUpLetterTranscationLogByTranscationIdOperationCompleted
            End If
            Me.InvokeAsync("GetCRSFollowUpLetterTranscationLogByTranscationId", New Object() {pTranscationId, ds, strErr}, Me.GetCRSFollowUpLetterTranscationLogByTranscationIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCRSFollowUpLetterTranscationLogByTranscationIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCRSFollowUpLetterTranscationLogByTranscationIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCRSFollowUpLetterTranscationLogByTranscationIdCompleted(Me, New GetCRSFollowUpLetterTranscationLogByTranscationIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetDataRetentionOldCustomerId", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDataRetentionOldCustomerId(ByVal pCustomerId As String, ByVal pPolicyNumber As String, ByRef oCustomerID As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetDataRetentionOldCustomerId", New Object() {pCustomerId, pPolicyNumber, oCustomerID, strErr})
            oCustomerID = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDataRetentionOldCustomerIdAsync(ByVal pCustomerId As String, ByVal pPolicyNumber As String, ByVal oCustomerID As String, ByVal strErr As String)
            Me.GetDataRetentionOldCustomerIdAsync(pCustomerId, pPolicyNumber, oCustomerID, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDataRetentionOldCustomerIdAsync(ByVal pCustomerId As String, ByVal pPolicyNumber As String, ByVal oCustomerID As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetDataRetentionOldCustomerIdOperationCompleted Is Nothing) Then
                Me.GetDataRetentionOldCustomerIdOperationCompleted = AddressOf Me.OnGetDataRetentionOldCustomerIdOperationCompleted
            End If
            Me.InvokeAsync("GetDataRetentionOldCustomerId", New Object() {pCustomerId, pPolicyNumber, oCustomerID, strErr}, Me.GetDataRetentionOldCustomerIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDataRetentionOldCustomerIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDataRetentionOldCustomerIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDataRetentionOldCustomerIdCompleted(Me, New GetDataRetentionOldCustomerIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetMediumList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMediumList(ByRef dsMeduim As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetMediumList", New Object() {dsMeduim, strErr})
            dsMeduim = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMediumListAsync(ByVal dsMeduim As System.Data.DataSet, ByVal strErr As String)
            Me.GetMediumListAsync(dsMeduim, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMediumListAsync(ByVal dsMeduim As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetMediumListOperationCompleted Is Nothing) Then
                Me.GetMediumListOperationCompleted = AddressOf Me.OnGetMediumListOperationCompleted
            End If
            Me.InvokeAsync("GetMediumList", New Object() {dsMeduim, strErr}, Me.GetMediumListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMediumListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMediumListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMediumListCompleted(Me, New GetMediumListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetEventCategory", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEventCategory(ByRef dsEventCategory As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetEventCategory", New Object() {dsEventCategory, strErr})
            dsEventCategory = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEventCategoryAsync(ByVal dsEventCategory As System.Data.DataSet, ByVal strErr As String)
            Me.GetEventCategoryAsync(dsEventCategory, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEventCategoryAsync(ByVal dsEventCategory As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetEventCategoryOperationCompleted Is Nothing) Then
                Me.GetEventCategoryOperationCompleted = AddressOf Me.OnGetEventCategoryOperationCompleted
            End If
            Me.InvokeAsync("GetEventCategory", New Object() {dsEventCategory, strErr}, Me.GetEventCategoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEventCategoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEventCategoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEventCategoryCompleted(Me, New GetEventCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetEventDetail", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEventDetail(ByVal strCategoryCode As String, ByRef dsEventDetail As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetEventDetail", New Object() {strCategoryCode, dsEventDetail, strErr})
            dsEventDetail = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEventDetailAsync(ByVal strCategoryCode As String, ByVal dsEventDetail As System.Data.DataSet, ByVal strErr As String)
            Me.GetEventDetailAsync(strCategoryCode, dsEventDetail, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEventDetailAsync(ByVal strCategoryCode As String, ByVal dsEventDetail As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetEventDetailOperationCompleted Is Nothing) Then
                Me.GetEventDetailOperationCompleted = AddressOf Me.OnGetEventDetailOperationCompleted
            End If
            Me.InvokeAsync("GetEventDetail", New Object() {strCategoryCode, dsEventDetail, strErr}, Me.GetEventDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEventDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEventDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEventDetailCompleted(Me, New GetEventDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetEventTypeDetail", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEventTypeDetail(ByVal strCategoryCode As String, ByVal strEventTypeCode As String, ByRef dsEventTypeDetail As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetEventTypeDetail", New Object() {strCategoryCode, strEventTypeCode, dsEventTypeDetail, strErr})
            dsEventTypeDetail = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEventTypeDetailAsync(ByVal strCategoryCode As String, ByVal strEventTypeCode As String, ByVal dsEventTypeDetail As System.Data.DataSet, ByVal strErr As String)
            Me.GetEventTypeDetailAsync(strCategoryCode, strEventTypeCode, dsEventTypeDetail, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEventTypeDetailAsync(ByVal strCategoryCode As String, ByVal strEventTypeCode As String, ByVal dsEventTypeDetail As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetEventTypeDetailOperationCompleted Is Nothing) Then
                Me.GetEventTypeDetailOperationCompleted = AddressOf Me.OnGetEventTypeDetailOperationCompleted
            End If
            Me.InvokeAsync("GetEventTypeDetail", New Object() {strCategoryCode, strEventTypeCode, dsEventTypeDetail, strErr}, Me.GetEventTypeDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEventTypeDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEventTypeDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEventTypeDetailCompleted(Me, New GetEventTypeDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetEventSourceIndicator", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEventSourceIndicator(ByRef dsSourceInitiator As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetEventSourceIndicator", New Object() {dsSourceInitiator, strErr})
            dsSourceInitiator = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEventSourceIndicatorAsync(ByVal dsSourceInitiator As System.Data.DataSet, ByVal strErr As String)
            Me.GetEventSourceIndicatorAsync(dsSourceInitiator, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEventSourceIndicatorAsync(ByVal dsSourceInitiator As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetEventSourceIndicatorOperationCompleted Is Nothing) Then
                Me.GetEventSourceIndicatorOperationCompleted = AddressOf Me.OnGetEventSourceIndicatorOperationCompleted
            End If
            Me.InvokeAsync("GetEventSourceIndicator", New Object() {dsSourceInitiator, strErr}, Me.GetEventSourceIndicatorOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEventSourceIndicatorOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEventSourceIndicatorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEventSourceIndicatorCompleted(Me, New GetEventSourceIndicatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetStatusList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStatusList(ByRef dsStatusList As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetStatusList", New Object() {dsStatusList, strErr})
            dsStatusList = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStatusListAsync(ByVal dsStatusList As System.Data.DataSet, ByVal strErr As String)
            Me.GetStatusListAsync(dsStatusList, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStatusListAsync(ByVal dsStatusList As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetStatusListOperationCompleted Is Nothing) Then
                Me.GetStatusListOperationCompleted = AddressOf Me.OnGetStatusListOperationCompleted
            End If
            Me.InvokeAsync("GetStatusList", New Object() {dsStatusList, strErr}, Me.GetStatusListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStatusListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStatusListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStatusListCompleted(Me, New GetStatusListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetInitiator", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInitiator(ByVal strInitiatorId As String, ByRef strInitiatorName As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetInitiator", New Object() {strInitiatorId, strInitiatorName, strErr})
            strInitiatorName = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInitiatorAsync(ByVal strInitiatorId As String, ByVal strInitiatorName As String, ByVal strErr As String)
            Me.GetInitiatorAsync(strInitiatorId, strInitiatorName, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInitiatorAsync(ByVal strInitiatorId As String, ByVal strInitiatorName As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetInitiatorOperationCompleted Is Nothing) Then
                Me.GetInitiatorOperationCompleted = AddressOf Me.OnGetInitiatorOperationCompleted
            End If
            Me.InvokeAsync("GetInitiator", New Object() {strInitiatorId, strInitiatorName, strErr}, Me.GetInitiatorOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInitiatorOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInitiatorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInitiatorCompleted(Me, New GetInitiatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/Get_MCU_ServiceLog", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get_MCU_ServiceLog(ByVal intYear As Integer, ByVal intMonth As Integer, ByVal strUserID As String, ByVal strPolicy As String, ByVal strStatus As String, ByVal strNeedFollowUp As String, ByRef dsResult As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("Get_MCU_ServiceLog", New Object() {intYear, intMonth, strUserID, strPolicy, strStatus, strNeedFollowUp, dsResult, strErr})
            dsResult = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get_MCU_ServiceLogAsync(ByVal intYear As Integer, ByVal intMonth As Integer, ByVal strUserID As String, ByVal strPolicy As String, ByVal strStatus As String, ByVal strNeedFollowUp As String, ByVal dsResult As System.Data.DataSet, ByVal strErr As String)
            Me.Get_MCU_ServiceLogAsync(intYear, intMonth, strUserID, strPolicy, strStatus, strNeedFollowUp, dsResult, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get_MCU_ServiceLogAsync(ByVal intYear As Integer, ByVal intMonth As Integer, ByVal strUserID As String, ByVal strPolicy As String, ByVal strStatus As String, ByVal strNeedFollowUp As String, ByVal dsResult As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.Get_MCU_ServiceLogOperationCompleted Is Nothing) Then
                Me.Get_MCU_ServiceLogOperationCompleted = AddressOf Me.OnGet_MCU_ServiceLogOperationCompleted
            End If
            Me.InvokeAsync("Get_MCU_ServiceLog", New Object() {intYear, intMonth, strUserID, strPolicy, strStatus, strNeedFollowUp, dsResult, strErr}, Me.Get_MCU_ServiceLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet_MCU_ServiceLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get_MCU_ServiceLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get_MCU_ServiceLogCompleted(Me, New Get_MCU_ServiceLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/Save_MCU_ServiceLog", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Save_MCU_ServiceLog(ByVal strMode As String, ByVal dsResult As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("Save_MCU_ServiceLog", New Object() {strMode, dsResult, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Save_MCU_ServiceLogAsync(ByVal strMode As String, ByVal dsResult As System.Data.DataSet, ByVal strErr As String)
            Me.Save_MCU_ServiceLogAsync(strMode, dsResult, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Save_MCU_ServiceLogAsync(ByVal strMode As String, ByVal dsResult As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.Save_MCU_ServiceLogOperationCompleted Is Nothing) Then
                Me.Save_MCU_ServiceLogOperationCompleted = AddressOf Me.OnSave_MCU_ServiceLogOperationCompleted
            End If
            Me.InvokeAsync("Save_MCU_ServiceLog", New Object() {strMode, dsResult, strErr}, Me.Save_MCU_ServiceLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnSave_MCU_ServiceLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.Save_MCU_ServiceLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Save_MCU_ServiceLogCompleted(Me, New Save_MCU_ServiceLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetBasicPlan", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBasicPlan(ByRef dsBasicPlan As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetBasicPlan", New Object() {dsBasicPlan, strErr})
            dsBasicPlan = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBasicPlanAsync(ByVal dsBasicPlan As System.Data.DataSet, ByVal strErr As String)
            Me.GetBasicPlanAsync(dsBasicPlan, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBasicPlanAsync(ByVal dsBasicPlan As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetBasicPlanOperationCompleted Is Nothing) Then
                Me.GetBasicPlanOperationCompleted = AddressOf Me.OnGetBasicPlanOperationCompleted
            End If
            Me.InvokeAsync("GetBasicPlan", New Object() {dsBasicPlan, strErr}, Me.GetBasicPlanOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBasicPlanOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBasicPlanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBasicPlanCompleted(Me, New GetBasicPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetAccountStatus", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccountStatus(ByRef dsAccountStatus As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAccountStatus", New Object() {dsAccountStatus, strErr})
            dsAccountStatus = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccountStatusAsync(ByVal dsAccountStatus As System.Data.DataSet, ByVal strErr As String)
            Me.GetAccountStatusAsync(dsAccountStatus, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccountStatusAsync(ByVal dsAccountStatus As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetAccountStatusOperationCompleted Is Nothing) Then
                Me.GetAccountStatusOperationCompleted = AddressOf Me.OnGetAccountStatusOperationCompleted
            End If
            Me.InvokeAsync("GetAccountStatus", New Object() {dsAccountStatus, strErr}, Me.GetAccountStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccountStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccountStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccountStatusCompleted(Me, New GetAccountStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetAgentLocation", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAgentLocation(ByRef dsAgentLocation As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAgentLocation", New Object() {dsAgentLocation, strErr})
            dsAgentLocation = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAgentLocationAsync(ByVal dsAgentLocation As System.Data.DataSet, ByVal strErr As String)
            Me.GetAgentLocationAsync(dsAgentLocation, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAgentLocationAsync(ByVal dsAgentLocation As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetAgentLocationOperationCompleted Is Nothing) Then
                Me.GetAgentLocationOperationCompleted = AddressOf Me.OnGetAgentLocationOperationCompleted
            End If
            Me.InvokeAsync("GetAgentLocation", New Object() {dsAgentLocation, strErr}, Me.GetAgentLocationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAgentLocationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAgentLocationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAgentLocationCompleted(Me, New GetAgentLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdateChequeStatus", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateChequeStatus(ByVal lChqID As Long, ByVal strChqStatus As String, ByVal strRemark As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateChequeStatus", New Object() {lChqID, strChqStatus, strRemark, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateChequeStatusAsync(ByVal lChqID As Long, ByVal strChqStatus As String, ByVal strRemark As String, ByVal strErr As String)
            Me.UpdateChequeStatusAsync(lChqID, strChqStatus, strRemark, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateChequeStatusAsync(ByVal lChqID As Long, ByVal strChqStatus As String, ByVal strRemark As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateChequeStatusOperationCompleted Is Nothing) Then
                Me.UpdateChequeStatusOperationCompleted = AddressOf Me.OnUpdateChequeStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateChequeStatus", New Object() {lChqID, strChqStatus, strRemark, strErr}, Me.UpdateChequeStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateChequeStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateChequeStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateChequeStatusCompleted(Me, New UpdateChequeStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetDirectCreditHistory", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDirectCreditHistory(ByVal policyNo As String, ByVal fromDate As Date, ByVal toDate As Date, ByRef dsRece As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetDirectCreditHistory", New Object() {policyNo, fromDate, toDate, dsRece, strErr})
            dsRece = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDirectCreditHistoryAsync(ByVal policyNo As String, ByVal fromDate As Date, ByVal toDate As Date, ByVal dsRece As System.Data.DataSet, ByVal strErr As String)
            Me.GetDirectCreditHistoryAsync(policyNo, fromDate, toDate, dsRece, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDirectCreditHistoryAsync(ByVal policyNo As String, ByVal fromDate As Date, ByVal toDate As Date, ByVal dsRece As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetDirectCreditHistoryOperationCompleted Is Nothing) Then
                Me.GetDirectCreditHistoryOperationCompleted = AddressOf Me.OnGetDirectCreditHistoryOperationCompleted
            End If
            Me.InvokeAsync("GetDirectCreditHistory", New Object() {policyNo, fromDate, toDate, dsRece, strErr}, Me.GetDirectCreditHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDirectCreditHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDirectCreditHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDirectCreditHistoryCompleted(Me, New GetDirectCreditHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetAnnuityPaymentHistory", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAnnuityPaymentHistory(ByVal policyNo As String, ByVal fromDate As Date, ByVal toDate As Date, ByRef dsRece As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAnnuityPaymentHistory", New Object() {policyNo, fromDate, toDate, dsRece, strErr})
            dsRece = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAnnuityPaymentHistoryAsync(ByVal policyNo As String, ByVal fromDate As Date, ByVal toDate As Date, ByVal dsRece As System.Data.DataSet, ByVal strErr As String)
            Me.GetAnnuityPaymentHistoryAsync(policyNo, fromDate, toDate, dsRece, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAnnuityPaymentHistoryAsync(ByVal policyNo As String, ByVal fromDate As Date, ByVal toDate As Date, ByVal dsRece As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetAnnuityPaymentHistoryOperationCompleted Is Nothing) Then
                Me.GetAnnuityPaymentHistoryOperationCompleted = AddressOf Me.OnGetAnnuityPaymentHistoryOperationCompleted
            End If
            Me.InvokeAsync("GetAnnuityPaymentHistory", New Object() {policyNo, fromDate, toDate, dsRece, strErr}, Me.GetAnnuityPaymentHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAnnuityPaymentHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAnnuityPaymentHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAnnuityPaymentHistoryCompleted(Me, New GetAnnuityPaymentHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCouponHistory", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCouponHistory(ByVal policyNo As String, ByVal fromDate As Date, ByVal toDate As Date, ByRef dsRece As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCouponHistory", New Object() {policyNo, fromDate, toDate, dsRece, strErr})
            dsRece = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCouponHistoryAsync(ByVal policyNo As String, ByVal fromDate As Date, ByVal toDate As Date, ByVal dsRece As System.Data.DataSet, ByVal strErr As String)
            Me.GetCouponHistoryAsync(policyNo, fromDate, toDate, dsRece, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCouponHistoryAsync(ByVal policyNo As String, ByVal fromDate As Date, ByVal toDate As Date, ByVal dsRece As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCouponHistoryOperationCompleted Is Nothing) Then
                Me.GetCouponHistoryOperationCompleted = AddressOf Me.OnGetCouponHistoryOperationCompleted
            End If
            Me.InvokeAsync("GetCouponHistory", New Object() {policyNo, fromDate, toDate, dsRece, strErr}, Me.GetCouponHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCouponHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCouponHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCouponHistoryCompleted(Me, New GetCouponHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLoanAndAPLHistory", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLoanAndAPLHistory(ByVal policyNo As String, ByVal fromDate As Date, ByVal toDate As Date, ByRef dsRece As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLoanAndAPLHistory", New Object() {policyNo, fromDate, toDate, dsRece, strErr})
            dsRece = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLoanAndAPLHistoryAsync(ByVal policyNo As String, ByVal fromDate As Date, ByVal toDate As Date, ByVal dsRece As System.Data.DataSet, ByVal strErr As String)
            Me.GetLoanAndAPLHistoryAsync(policyNo, fromDate, toDate, dsRece, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLoanAndAPLHistoryAsync(ByVal policyNo As String, ByVal fromDate As Date, ByVal toDate As Date, ByVal dsRece As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLoanAndAPLHistoryOperationCompleted Is Nothing) Then
                Me.GetLoanAndAPLHistoryOperationCompleted = AddressOf Me.OnGetLoanAndAPLHistoryOperationCompleted
            End If
            Me.InvokeAsync("GetLoanAndAPLHistory", New Object() {policyNo, fromDate, toDate, dsRece, strErr}, Me.GetLoanAndAPLHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLoanAndAPLHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLoanAndAPLHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLoanAndAPLHistoryCompleted(Me, New GetLoanAndAPLHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CNBAFIByPolicyNo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CNBAFIByPolicyNo(ByVal strPolicyNo As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CNBAFIByPolicyNo", New Object() {strPolicyNo, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CNBAFIByPolicyNoAsync(ByVal strPolicyNo As String, ByVal strErr As String)
            Me.CNBAFIByPolicyNoAsync(strPolicyNo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CNBAFIByPolicyNoAsync(ByVal strPolicyNo As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.CNBAFIByPolicyNoOperationCompleted Is Nothing) Then
                Me.CNBAFIByPolicyNoOperationCompleted = AddressOf Me.OnCNBAFIByPolicyNoOperationCompleted
            End If
            Me.InvokeAsync("CNBAFIByPolicyNo", New Object() {strPolicyNo, strErr}, Me.CNBAFIByPolicyNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnCNBAFIByPolicyNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.CNBAFIByPolicyNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CNBAFIByPolicyNoCompleted(Me, New CNBAFIByPolicyNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/FCRenq", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FCRenq(ByVal dsSendData As System.Data.DataSet, ByRef dsRecvData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("FCRenq", New Object() {dsSendData, dsRecvData, strErr})
            dsRecvData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FCRenqAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsRecvData As System.Data.DataSet, ByVal strErr As String)
            Me.FCRenqAsync(dsSendData, dsRecvData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FCRenqAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsRecvData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.FCRenqOperationCompleted Is Nothing) Then
                Me.FCRenqOperationCompleted = AddressOf Me.OnFCRenqOperationCompleted
            End If
            Me.InvokeAsync("FCRenq", New Object() {dsSendData, dsRecvData, strErr}, Me.FCRenqOperationCompleted, userState)
        End Sub
        
        Private Sub OnFCRenqOperationCompleted(ByVal arg As Object)
            If (Not (Me.FCRenqCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FCRenqCompleted(Me, New FCRenqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/FCRupd", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FCRupd(ByVal dsSendData As System.Data.DataSet, ByVal dsRecvData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("FCRupd", New Object() {dsSendData, dsRecvData, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FCRupdAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsRecvData As System.Data.DataSet, ByVal strErr As String)
            Me.FCRupdAsync(dsSendData, dsRecvData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FCRupdAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsRecvData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.FCRupdOperationCompleted Is Nothing) Then
                Me.FCRupdOperationCompleted = AddressOf Me.OnFCRupdOperationCompleted
            End If
            Me.InvokeAsync("FCRupd", New Object() {dsSendData, dsRecvData, strErr}, Me.FCRupdOperationCompleted, userState)
        End Sub
        
        Private Sub OnFCRupdOperationCompleted(ByVal arg As Object)
            If (Not (Me.FCRupdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FCRupdCompleted(Me, New FCRupdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/FSurRev", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FSurRev(ByVal dsSendData As System.Data.DataSet, ByVal dsRecvData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("FSurRev", New Object() {dsSendData, dsRecvData, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FSurRevAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsRecvData As System.Data.DataSet, ByVal strErr As String)
            Me.FSurRevAsync(dsSendData, dsRecvData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FSurRevAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsRecvData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.FSurRevOperationCompleted Is Nothing) Then
                Me.FSurRevOperationCompleted = AddressOf Me.OnFSurRevOperationCompleted
            End If
            Me.InvokeAsync("FSurRev", New Object() {dsSendData, dsRecvData, strErr}, Me.FSurRevOperationCompleted, userState)
        End Sub
        
        Private Sub OnFSurRevOperationCompleted(ByVal arg As Object)
            If (Not (Me.FSurRevCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FSurRevCompleted(Me, New FSurRevCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/BillDateRev", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BillDateRev(ByVal dsSendData As System.Data.DataSet, ByVal dsRecvData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("BillDateRev", New Object() {dsSendData, dsRecvData, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BillDateRevAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsRecvData As System.Data.DataSet, ByVal strErr As String)
            Me.BillDateRevAsync(dsSendData, dsRecvData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BillDateRevAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsRecvData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.BillDateRevOperationCompleted Is Nothing) Then
                Me.BillDateRevOperationCompleted = AddressOf Me.OnBillDateRevOperationCompleted
            End If
            Me.InvokeAsync("BillDateRev", New Object() {dsSendData, dsRecvData, strErr}, Me.BillDateRevOperationCompleted, userState)
        End Sub
        
        Private Sub OnBillDateRevOperationCompleted(ByVal arg As Object)
            If (Not (Me.BillDateRevCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BillDateRevCompleted(Me, New BillDateRevCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/PTDAdv", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PTDAdv(ByVal dsSendData As System.Data.DataSet, ByVal dsRecvData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("PTDAdv", New Object() {dsSendData, dsRecvData, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PTDAdvAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsRecvData As System.Data.DataSet, ByVal strErr As String)
            Me.PTDAdvAsync(dsSendData, dsRecvData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PTDAdvAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsRecvData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.PTDAdvOperationCompleted Is Nothing) Then
                Me.PTDAdvOperationCompleted = AddressOf Me.OnPTDAdvOperationCompleted
            End If
            Me.InvokeAsync("PTDAdv", New Object() {dsSendData, dsRecvData, strErr}, Me.PTDAdvOperationCompleted, userState)
        End Sub
        
        Private Sub OnPTDAdvOperationCompleted(ByVal arg As Object)
            If (Not (Me.PTDAdvCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PTDAdvCompleted(Me, New PTDAdvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/Las2Capsil", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Las2Capsil(ByVal dsSendData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("Las2Capsil", New Object() {dsSendData, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Las2CapsilAsync(ByVal dsSendData As System.Data.DataSet, ByVal strErr As String)
            Me.Las2CapsilAsync(dsSendData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Las2CapsilAsync(ByVal dsSendData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.Las2CapsilOperationCompleted Is Nothing) Then
                Me.Las2CapsilOperationCompleted = AddressOf Me.OnLas2CapsilOperationCompleted
            End If
            Me.InvokeAsync("Las2Capsil", New Object() {dsSendData, strErr}, Me.Las2CapsilOperationCompleted, userState)
        End Sub
        
        Private Sub OnLas2CapsilOperationCompleted(ByVal arg As Object)
            If (Not (Me.Las2CapsilCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Las2CapsilCompleted(Me, New Las2CapsilCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCIWexclusion", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCIWexclusion(ByVal strPolicyNo As String, ByRef dsExclusion As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCIWexclusion", New Object() {strPolicyNo, dsExclusion, strErr})
            dsExclusion = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCIWexclusionAsync(ByVal strPolicyNo As String, ByVal dsExclusion As System.Data.DataSet, ByVal strErr As String)
            Me.GetCIWexclusionAsync(strPolicyNo, dsExclusion, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCIWexclusionAsync(ByVal strPolicyNo As String, ByVal dsExclusion As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCIWexclusionOperationCompleted Is Nothing) Then
                Me.GetCIWexclusionOperationCompleted = AddressOf Me.OnGetCIWexclusionOperationCompleted
            End If
            Me.InvokeAsync("GetCIWexclusion", New Object() {strPolicyNo, dsExclusion, strErr}, Me.GetCIWexclusionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCIWexclusionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCIWexclusionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCIWexclusionCompleted(Me, New GetCIWexclusionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UCIW", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UCIW(ByVal strSQL As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UCIW", New Object() {strSQL, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UCIWAsync(ByVal strSQL As String, ByVal strErr As String)
            Me.UCIWAsync(strSQL, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UCIWAsync(ByVal strSQL As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.UCIWOperationCompleted Is Nothing) Then
                Me.UCIWOperationCompleted = AddressOf Me.OnUCIWOperationCompleted
            End If
            Me.InvokeAsync("UCIW", New Object() {strSQL, strErr}, Me.UCIWOperationCompleted, userState)
        End Sub
        
        Private Sub OnUCIWOperationCompleted(ByVal arg As Object)
            If (Not (Me.UCIWCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UCIWCompleted(Me, New UCIWCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetRiderList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRiderList(ByVal strPolicyNo As String, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetRiderList", New Object() {strPolicyNo, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRiderListAsync(ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetRiderListAsync(strPolicyNo, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRiderListAsync(ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetRiderListOperationCompleted Is Nothing) Then
                Me.GetRiderListOperationCompleted = AddressOf Me.OnGetRiderListOperationCompleted
            End If
            Me.InvokeAsync("GetRiderList", New Object() {strPolicyNo, ds, strErr}, Me.GetRiderListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRiderListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRiderListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRiderListCompleted(Me, New GetRiderListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetAvailFundList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAvailFundList(ByVal dsSend As System.Data.DataSet, ByRef dsReceive As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAvailFundList", New Object() {dsSend, dsReceive, strErr})
            dsReceive = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAvailFundListAsync(ByVal dsSend As System.Data.DataSet, ByVal dsReceive As System.Data.DataSet, ByVal strErr As String)
            Me.GetAvailFundListAsync(dsSend, dsReceive, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAvailFundListAsync(ByVal dsSend As System.Data.DataSet, ByVal dsReceive As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetAvailFundListOperationCompleted Is Nothing) Then
                Me.GetAvailFundListOperationCompleted = AddressOf Me.OnGetAvailFundListOperationCompleted
            End If
            Me.InvokeAsync("GetAvailFundList", New Object() {dsSend, dsReceive, strErr}, Me.GetAvailFundListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAvailFundListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAvailFundListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAvailFundListCompleted(Me, New GetAvailFundListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetUnitJournal", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUnitJournal(ByVal dsSend As System.Data.DataSet, ByRef dsReceive As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUnitJournal", New Object() {dsSend, dsReceive, strErr})
            dsReceive = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUnitJournalAsync(ByVal dsSend As System.Data.DataSet, ByVal dsReceive As System.Data.DataSet, ByVal strErr As String)
            Me.GetUnitJournalAsync(dsSend, dsReceive, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUnitJournalAsync(ByVal dsSend As System.Data.DataSet, ByVal dsReceive As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetUnitJournalOperationCompleted Is Nothing) Then
                Me.GetUnitJournalOperationCompleted = AddressOf Me.OnGetUnitJournalOperationCompleted
            End If
            Me.InvokeAsync("GetUnitJournal", New Object() {dsSend, dsReceive, strErr}, Me.GetUnitJournalOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUnitJournalOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUnitJournalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUnitJournalCompleted(Me, New GetUnitJournalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/DeleteUnitJournal", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteUnitJournal(ByVal pstrId As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("DeleteUnitJournal", New Object() {pstrId, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteUnitJournalAsync(ByVal pstrId As String, ByVal strErr As String)
            Me.DeleteUnitJournalAsync(pstrId, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteUnitJournalAsync(ByVal pstrId As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.DeleteUnitJournalOperationCompleted Is Nothing) Then
                Me.DeleteUnitJournalOperationCompleted = AddressOf Me.OnDeleteUnitJournalOperationCompleted
            End If
            Me.InvokeAsync("DeleteUnitJournal", New Object() {pstrId, strErr}, Me.DeleteUnitJournalOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteUnitJournalOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteUnitJournalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteUnitJournalCompleted(Me, New DeleteUnitJournalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/InsertUnitJournal", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertUnitJournal(ByVal pstrPolicyNo As String, ByVal pstrLife As String, ByVal pstrCoverage As String, ByVal pstrRider As String, ByVal pstrFund As String, ByVal pstrFundType As String, ByVal pstrRealUnit As String, ByVal pstrDeemUnit As String, ByVal pstrRemark As String, ByRef iId As Integer, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("InsertUnitJournal", New Object() {pstrPolicyNo, pstrLife, pstrCoverage, pstrRider, pstrFund, pstrFundType, pstrRealUnit, pstrDeemUnit, pstrRemark, iId, strErr})
            iId = CType(results(1),Integer)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertUnitJournalAsync(ByVal pstrPolicyNo As String, ByVal pstrLife As String, ByVal pstrCoverage As String, ByVal pstrRider As String, ByVal pstrFund As String, ByVal pstrFundType As String, ByVal pstrRealUnit As String, ByVal pstrDeemUnit As String, ByVal pstrRemark As String, ByVal iId As Integer, ByVal strErr As String)
            Me.InsertUnitJournalAsync(pstrPolicyNo, pstrLife, pstrCoverage, pstrRider, pstrFund, pstrFundType, pstrRealUnit, pstrDeemUnit, pstrRemark, iId, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertUnitJournalAsync(ByVal pstrPolicyNo As String, ByVal pstrLife As String, ByVal pstrCoverage As String, ByVal pstrRider As String, ByVal pstrFund As String, ByVal pstrFundType As String, ByVal pstrRealUnit As String, ByVal pstrDeemUnit As String, ByVal pstrRemark As String, ByVal iId As Integer, ByVal strErr As String, ByVal userState As Object)
            If (Me.InsertUnitJournalOperationCompleted Is Nothing) Then
                Me.InsertUnitJournalOperationCompleted = AddressOf Me.OnInsertUnitJournalOperationCompleted
            End If
            Me.InvokeAsync("InsertUnitJournal", New Object() {pstrPolicyNo, pstrLife, pstrCoverage, pstrRider, pstrFund, pstrFundType, pstrRealUnit, pstrDeemUnit, pstrRemark, iId, strErr}, Me.InsertUnitJournalOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertUnitJournalOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertUnitJournalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertUnitJournalCompleted(Me, New InsertUnitJournalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdateUnitJournal", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateUnitJournal(ByVal pstrId As String, ByVal pstrFund As String, ByVal pstrFundType As String, ByVal pstrRealUnit As String, ByVal pstrDeemUnit As String, ByVal pstrRemark As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateUnitJournal", New Object() {pstrId, pstrFund, pstrFundType, pstrRealUnit, pstrDeemUnit, pstrRemark, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateUnitJournalAsync(ByVal pstrId As String, ByVal pstrFund As String, ByVal pstrFundType As String, ByVal pstrRealUnit As String, ByVal pstrDeemUnit As String, ByVal pstrRemark As String, ByVal strErr As String)
            Me.UpdateUnitJournalAsync(pstrId, pstrFund, pstrFundType, pstrRealUnit, pstrDeemUnit, pstrRemark, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUnitJournalAsync(ByVal pstrId As String, ByVal pstrFund As String, ByVal pstrFundType As String, ByVal pstrRealUnit As String, ByVal pstrDeemUnit As String, ByVal pstrRemark As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateUnitJournalOperationCompleted Is Nothing) Then
                Me.UpdateUnitJournalOperationCompleted = AddressOf Me.OnUpdateUnitJournalOperationCompleted
            End If
            Me.InvokeAsync("UpdateUnitJournal", New Object() {pstrId, pstrFund, pstrFundType, pstrRealUnit, pstrDeemUnit, pstrRemark, strErr}, Me.UpdateUnitJournalOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateUnitJournalOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateUnitJournalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateUnitJournalCompleted(Me, New UpdateUnitJournalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/DiffUnitJournalUser", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DiffUnitJournalUser(ByVal dsSendData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("DiffUnitJournalUser", New Object() {dsSendData, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DiffUnitJournalUserAsync(ByVal dsSendData As System.Data.DataSet, ByVal strErr As String)
            Me.DiffUnitJournalUserAsync(dsSendData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DiffUnitJournalUserAsync(ByVal dsSendData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.DiffUnitJournalUserOperationCompleted Is Nothing) Then
                Me.DiffUnitJournalUserOperationCompleted = AddressOf Me.OnDiffUnitJournalUserOperationCompleted
            End If
            Me.InvokeAsync("DiffUnitJournalUser", New Object() {dsSendData, strErr}, Me.DiffUnitJournalUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnDiffUnitJournalUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.DiffUnitJournalUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DiffUnitJournalUserCompleted(Me, New DiffUnitJournalUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdateUnitJournalBackend", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateUnitJournalBackend(ByVal dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateUnitJournalBackend", New Object() {dsSendData, dsReceData, strErr})
            dsReceData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateUnitJournalBackendAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.UpdateUnitJournalBackendAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUnitJournalBackendAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateUnitJournalBackendOperationCompleted Is Nothing) Then
                Me.UpdateUnitJournalBackendOperationCompleted = AddressOf Me.OnUpdateUnitJournalBackendOperationCompleted
            End If
            Me.InvokeAsync("UpdateUnitJournalBackend", New Object() {dsSendData, dsReceData, strErr}, Me.UpdateUnitJournalBackendOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateUnitJournalBackendOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateUnitJournalBackendCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateUnitJournalBackendCompleted(Me, New UpdateUnitJournalBackendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ApproveUnitJournal", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ApproveUnitJournal(ByVal pstrId As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ApproveUnitJournal", New Object() {pstrId, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ApproveUnitJournalAsync(ByVal pstrId As String, ByVal strErr As String)
            Me.ApproveUnitJournalAsync(pstrId, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ApproveUnitJournalAsync(ByVal pstrId As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.ApproveUnitJournalOperationCompleted Is Nothing) Then
                Me.ApproveUnitJournalOperationCompleted = AddressOf Me.OnApproveUnitJournalOperationCompleted
            End If
            Me.InvokeAsync("ApproveUnitJournal", New Object() {pstrId, strErr}, Me.ApproveUnitJournalOperationCompleted, userState)
        End Sub
        
        Private Sub OnApproveUnitJournalOperationCompleted(ByVal arg As Object)
            If (Not (Me.ApproveUnitJournalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ApproveUnitJournalCompleted(Me, New ApproveUnitJournalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SearchUnitJournalHistory", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SearchUnitJournalHistory(ByVal dsSendData As System.Data.DataSet, ByRef dsReceiveData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SearchUnitJournalHistory", New Object() {dsSendData, dsReceiveData, strErr})
            dsReceiveData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SearchUnitJournalHistoryAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceiveData As System.Data.DataSet, ByVal strErr As String)
            Me.SearchUnitJournalHistoryAsync(dsSendData, dsReceiveData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SearchUnitJournalHistoryAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceiveData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.SearchUnitJournalHistoryOperationCompleted Is Nothing) Then
                Me.SearchUnitJournalHistoryOperationCompleted = AddressOf Me.OnSearchUnitJournalHistoryOperationCompleted
            End If
            Me.InvokeAsync("SearchUnitJournalHistory", New Object() {dsSendData, dsReceiveData, strErr}, Me.SearchUnitJournalHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnSearchUnitJournalHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.SearchUnitJournalHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SearchUnitJournalHistoryCompleted(Me, New SearchUnitJournalHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CalVPO", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CalVPO( _
                    ByVal strNTUsr As String,  _
                    ByVal strPolicyNo As String,  _
                    ByVal strLibDTA As String,  _
                    ByRef intBasicVYear As Integer,  _
                    ByRef intWholeVYear As Integer,  _
                    ByRef strMessageEng As String,  _
                    ByRef strMessageChi As String,  _
                    ByRef strIssMon As String,  _
                    ByRef strIssDay As String,  _
                    ByVal flagCheckVPOonly As Boolean,  _
                    ByVal blnUATConfirmed As Boolean,  _
                    ByRef dsPerm As System.Data.DataSet,  _
                    ByRef strVPOType As String,  _
                    ByRef strVanishingPoint As String,  _
                    ByRef dsRece As System.Data.DataSet,  _
                    ByRef strErr As String,  _
                    ByVal strSystem As String) As Boolean
            Dim results() As Object = Me.Invoke("CalVPO", New Object() {strNTUsr, strPolicyNo, strLibDTA, intBasicVYear, intWholeVYear, strMessageEng, strMessageChi, strIssMon, strIssDay, flagCheckVPOonly, blnUATConfirmed, dsPerm, strVPOType, strVanishingPoint, dsRece, strErr, strSystem})
            intBasicVYear = CType(results(1),Integer)
            intWholeVYear = CType(results(2),Integer)
            strMessageEng = CType(results(3),String)
            strMessageChi = CType(results(4),String)
            strIssMon = CType(results(5),String)
            strIssDay = CType(results(6),String)
            dsPerm = CType(results(7),System.Data.DataSet)
            strVPOType = CType(results(8),String)
            strVanishingPoint = CType(results(9),String)
            dsRece = CType(results(10),System.Data.DataSet)
            strErr = CType(results(11),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CalVPOAsync( _
                    ByVal strNTUsr As String,  _
                    ByVal strPolicyNo As String,  _
                    ByVal strLibDTA As String,  _
                    ByVal intBasicVYear As Integer,  _
                    ByVal intWholeVYear As Integer,  _
                    ByVal strMessageEng As String,  _
                    ByVal strMessageChi As String,  _
                    ByVal strIssMon As String,  _
                    ByVal strIssDay As String,  _
                    ByVal flagCheckVPOonly As Boolean,  _
                    ByVal blnUATConfirmed As Boolean,  _
                    ByVal dsPerm As System.Data.DataSet,  _
                    ByVal strVPOType As String,  _
                    ByVal strVanishingPoint As String,  _
                    ByVal dsRece As System.Data.DataSet,  _
                    ByVal strErr As String,  _
                    ByVal strSystem As String)
            Me.CalVPOAsync(strNTUsr, strPolicyNo, strLibDTA, intBasicVYear, intWholeVYear, strMessageEng, strMessageChi, strIssMon, strIssDay, flagCheckVPOonly, blnUATConfirmed, dsPerm, strVPOType, strVanishingPoint, dsRece, strErr, strSystem, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CalVPOAsync( _
                    ByVal strNTUsr As String,  _
                    ByVal strPolicyNo As String,  _
                    ByVal strLibDTA As String,  _
                    ByVal intBasicVYear As Integer,  _
                    ByVal intWholeVYear As Integer,  _
                    ByVal strMessageEng As String,  _
                    ByVal strMessageChi As String,  _
                    ByVal strIssMon As String,  _
                    ByVal strIssDay As String,  _
                    ByVal flagCheckVPOonly As Boolean,  _
                    ByVal blnUATConfirmed As Boolean,  _
                    ByVal dsPerm As System.Data.DataSet,  _
                    ByVal strVPOType As String,  _
                    ByVal strVanishingPoint As String,  _
                    ByVal dsRece As System.Data.DataSet,  _
                    ByVal strErr As String,  _
                    ByVal strSystem As String,  _
                    ByVal userState As Object)
            If (Me.CalVPOOperationCompleted Is Nothing) Then
                Me.CalVPOOperationCompleted = AddressOf Me.OnCalVPOOperationCompleted
            End If
            Me.InvokeAsync("CalVPO", New Object() {strNTUsr, strPolicyNo, strLibDTA, intBasicVYear, intWholeVYear, strMessageEng, strMessageChi, strIssMon, strIssDay, flagCheckVPOonly, blnUATConfirmed, dsPerm, strVPOType, strVanishingPoint, dsRece, strErr, strSystem}, Me.CalVPOOperationCompleted, userState)
        End Sub
        
        Private Sub OnCalVPOOperationCompleted(ByVal arg As Object)
            If (Not (Me.CalVPOCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CalVPOCompleted(Me, New CalVPOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetVPOAgentInfo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetVPOAgentInfo(ByVal strPolicyNo As String, ByRef dsAgent As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetVPOAgentInfo", New Object() {strPolicyNo, dsAgent, strErr})
            dsAgent = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetVPOAgentInfoAsync(ByVal strPolicyNo As String, ByVal dsAgent As System.Data.DataSet, ByVal strErr As String)
            Me.GetVPOAgentInfoAsync(strPolicyNo, dsAgent, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetVPOAgentInfoAsync(ByVal strPolicyNo As String, ByVal dsAgent As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetVPOAgentInfoOperationCompleted Is Nothing) Then
                Me.GetVPOAgentInfoOperationCompleted = AddressOf Me.OnGetVPOAgentInfoOperationCompleted
            End If
            Me.InvokeAsync("GetVPOAgentInfo", New Object() {strPolicyNo, dsAgent, strErr}, Me.GetVPOAgentInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetVPOAgentInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetVPOAgentInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetVPOAgentInfoCompleted(Me, New GetVPOAgentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetVPOPersonalInfo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetVPOPersonalInfo(ByVal strPolicyNo As String, ByRef dsPersonal As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetVPOPersonalInfo", New Object() {strPolicyNo, dsPersonal, strErr})
            dsPersonal = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetVPOPersonalInfoAsync(ByVal strPolicyNo As String, ByVal dsPersonal As System.Data.DataSet, ByVal strErr As String)
            Me.GetVPOPersonalInfoAsync(strPolicyNo, dsPersonal, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetVPOPersonalInfoAsync(ByVal strPolicyNo As String, ByVal dsPersonal As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetVPOPersonalInfoOperationCompleted Is Nothing) Then
                Me.GetVPOPersonalInfoOperationCompleted = AddressOf Me.OnGetVPOPersonalInfoOperationCompleted
            End If
            Me.InvokeAsync("GetVPOPersonalInfo", New Object() {strPolicyNo, dsPersonal, strErr}, Me.GetVPOPersonalInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetVPOPersonalInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetVPOPersonalInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetVPOPersonalInfoCompleted(Me, New GetVPOPersonalInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetVPOAgentCodes", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetVPOAgentCodes(ByVal strAgentNo As String, ByRef dsAgent As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetVPOAgentCodes", New Object() {strAgentNo, dsAgent, strErr})
            dsAgent = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetVPOAgentCodesAsync(ByVal strAgentNo As String, ByVal dsAgent As System.Data.DataSet, ByVal strErr As String)
            Me.GetVPOAgentCodesAsync(strAgentNo, dsAgent, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetVPOAgentCodesAsync(ByVal strAgentNo As String, ByVal dsAgent As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetVPOAgentCodesOperationCompleted Is Nothing) Then
                Me.GetVPOAgentCodesOperationCompleted = AddressOf Me.OnGetVPOAgentCodesOperationCompleted
            End If
            Me.InvokeAsync("GetVPOAgentCodes", New Object() {strAgentNo, dsAgent, strErr}, Me.GetVPOAgentCodesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetVPOAgentCodesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetVPOAgentCodesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetVPOAgentCodesCompleted(Me, New GetVPOAgentCodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetVPOLetterField", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetVPOLetterField(ByVal strType As String, ByRef dsLetter As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetVPOLetterField", New Object() {strType, dsLetter, strErr})
            dsLetter = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetVPOLetterFieldAsync(ByVal strType As String, ByVal dsLetter As System.Data.DataSet, ByVal strErr As String)
            Me.GetVPOLetterFieldAsync(strType, dsLetter, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetVPOLetterFieldAsync(ByVal strType As String, ByVal dsLetter As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetVPOLetterFieldOperationCompleted Is Nothing) Then
                Me.GetVPOLetterFieldOperationCompleted = AddressOf Me.OnGetVPOLetterFieldOperationCompleted
            End If
            Me.InvokeAsync("GetVPOLetterField", New Object() {strType, dsLetter, strErr}, Me.GetVPOLetterFieldOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetVPOLetterFieldOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetVPOLetterFieldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetVPOLetterFieldCompleted(Me, New GetVPOLetterFieldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetVPOBasicInsuredInfo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetVPOBasicInsuredInfo(ByVal strPolicyNo As String, ByRef dsInsured As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetVPOBasicInsuredInfo", New Object() {strPolicyNo, dsInsured, strErr})
            dsInsured = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetVPOBasicInsuredInfoAsync(ByVal strPolicyNo As String, ByVal dsInsured As System.Data.DataSet, ByVal strErr As String)
            Me.GetVPOBasicInsuredInfoAsync(strPolicyNo, dsInsured, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetVPOBasicInsuredInfoAsync(ByVal strPolicyNo As String, ByVal dsInsured As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetVPOBasicInsuredInfoOperationCompleted Is Nothing) Then
                Me.GetVPOBasicInsuredInfoOperationCompleted = AddressOf Me.OnGetVPOBasicInsuredInfoOperationCompleted
            End If
            Me.InvokeAsync("GetVPOBasicInsuredInfo", New Object() {strPolicyNo, dsInsured, strErr}, Me.GetVPOBasicInsuredInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetVPOBasicInsuredInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetVPOBasicInsuredInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetVPOBasicInsuredInfoCompleted(Me, New GetVPOBasicInsuredInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetVPOPolicyAddress", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetVPOPolicyAddress(ByVal strPolicyNo As String, ByRef dsAddress As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetVPOPolicyAddress", New Object() {strPolicyNo, dsAddress, strErr})
            dsAddress = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetVPOPolicyAddressAsync(ByVal strPolicyNo As String, ByVal dsAddress As System.Data.DataSet, ByVal strErr As String)
            Me.GetVPOPolicyAddressAsync(strPolicyNo, dsAddress, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetVPOPolicyAddressAsync(ByVal strPolicyNo As String, ByVal dsAddress As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetVPOPolicyAddressOperationCompleted Is Nothing) Then
                Me.GetVPOPolicyAddressOperationCompleted = AddressOf Me.OnGetVPOPolicyAddressOperationCompleted
            End If
            Me.InvokeAsync("GetVPOPolicyAddress", New Object() {strPolicyNo, dsAddress, strErr}, Me.GetVPOPolicyAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetVPOPolicyAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetVPOPolicyAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetVPOPolicyAddressCompleted(Me, New GetVPOPolicyAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetVPOCompany", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetVPOCompany(ByVal strPolicyNo As String, ByRef dsCompany As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetVPOCompany", New Object() {strPolicyNo, dsCompany, strErr})
            dsCompany = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetVPOCompanyAsync(ByVal strPolicyNo As String, ByVal dsCompany As System.Data.DataSet, ByVal strErr As String)
            Me.GetVPOCompanyAsync(strPolicyNo, dsCompany, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetVPOCompanyAsync(ByVal strPolicyNo As String, ByVal dsCompany As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetVPOCompanyOperationCompleted Is Nothing) Then
                Me.GetVPOCompanyOperationCompleted = AddressOf Me.OnGetVPOCompanyOperationCompleted
            End If
            Me.InvokeAsync("GetVPOCompany", New Object() {strPolicyNo, dsCompany, strErr}, Me.GetVPOCompanyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetVPOCompanyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetVPOCompanyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetVPOCompanyCompleted(Me, New GetVPOCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetNormalCurrencySignCode", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNormalCurrencySignCode(ByVal strCurrency As String, ByRef dsCurr As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetNormalCurrencySignCode", New Object() {strCurrency, dsCurr, strErr})
            dsCurr = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNormalCurrencySignCodeAsync(ByVal strCurrency As String, ByVal dsCurr As System.Data.DataSet, ByVal strErr As String)
            Me.GetNormalCurrencySignCodeAsync(strCurrency, dsCurr, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNormalCurrencySignCodeAsync(ByVal strCurrency As String, ByVal dsCurr As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetNormalCurrencySignCodeOperationCompleted Is Nothing) Then
                Me.GetNormalCurrencySignCodeOperationCompleted = AddressOf Me.OnGetNormalCurrencySignCodeOperationCompleted
            End If
            Me.InvokeAsync("GetNormalCurrencySignCode", New Object() {strCurrency, dsCurr, strErr}, Me.GetNormalCurrencySignCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNormalCurrencySignCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNormalCurrencySignCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNormalCurrencySignCodeCompleted(Me, New GetNormalCurrencySignCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPaidToDateFromCAPSIL", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPaidToDateFromCAPSIL(ByVal strUserId As String, ByVal strPolicyNo As String, ByRef dsPolicyInfo As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPaidToDateFromCAPSIL", New Object() {strUserId, strPolicyNo, dsPolicyInfo, strErr})
            dsPolicyInfo = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPaidToDateFromCAPSILAsync(ByVal strUserId As String, ByVal strPolicyNo As String, ByVal dsPolicyInfo As System.Data.DataSet, ByVal strErr As String)
            Me.GetPaidToDateFromCAPSILAsync(strUserId, strPolicyNo, dsPolicyInfo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPaidToDateFromCAPSILAsync(ByVal strUserId As String, ByVal strPolicyNo As String, ByVal dsPolicyInfo As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPaidToDateFromCAPSILOperationCompleted Is Nothing) Then
                Me.GetPaidToDateFromCAPSILOperationCompleted = AddressOf Me.OnGetPaidToDateFromCAPSILOperationCompleted
            End If
            Me.InvokeAsync("GetPaidToDateFromCAPSIL", New Object() {strUserId, strPolicyNo, dsPolicyInfo, strErr}, Me.GetPaidToDateFromCAPSILOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPaidToDateFromCAPSILOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPaidToDateFromCAPSILCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPaidToDateFromCAPSILCompleted(Me, New GetPaidToDateFromCAPSILCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPremiumModeCapsil", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPremiumModeCapsil(ByVal strUserId As String, ByVal strPolicyNo As String, ByRef dsPolicyInfo As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPremiumModeCapsil", New Object() {strUserId, strPolicyNo, dsPolicyInfo, strErr})
            dsPolicyInfo = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPremiumModeCapsilAsync(ByVal strUserId As String, ByVal strPolicyNo As String, ByVal dsPolicyInfo As System.Data.DataSet, ByVal strErr As String)
            Me.GetPremiumModeCapsilAsync(strUserId, strPolicyNo, dsPolicyInfo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPremiumModeCapsilAsync(ByVal strUserId As String, ByVal strPolicyNo As String, ByVal dsPolicyInfo As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPremiumModeCapsilOperationCompleted Is Nothing) Then
                Me.GetPremiumModeCapsilOperationCompleted = AddressOf Me.OnGetPremiumModeCapsilOperationCompleted
            End If
            Me.InvokeAsync("GetPremiumModeCapsil", New Object() {strUserId, strPolicyNo, dsPolicyInfo, strErr}, Me.GetPremiumModeCapsilOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPremiumModeCapsilOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPremiumModeCapsilCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPremiumModeCapsilCompleted(Me, New GetPremiumModeCapsilCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPolicyPOInfofromCAPSIL", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyPOInfofromCAPSIL(ByVal strUserId As String, ByVal strPolicyNo As String, ByRef dsPolicyInfo As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPolicyPOInfofromCAPSIL", New Object() {strUserId, strPolicyNo, dsPolicyInfo, strErr})
            dsPolicyInfo = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyPOInfofromCAPSILAsync(ByVal strUserId As String, ByVal strPolicyNo As String, ByVal dsPolicyInfo As System.Data.DataSet, ByVal strErr As String)
            Me.GetPolicyPOInfofromCAPSILAsync(strUserId, strPolicyNo, dsPolicyInfo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyPOInfofromCAPSILAsync(ByVal strUserId As String, ByVal strPolicyNo As String, ByVal dsPolicyInfo As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPolicyPOInfofromCAPSILOperationCompleted Is Nothing) Then
                Me.GetPolicyPOInfofromCAPSILOperationCompleted = AddressOf Me.OnGetPolicyPOInfofromCAPSILOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyPOInfofromCAPSIL", New Object() {strUserId, strPolicyNo, dsPolicyInfo, strErr}, Me.GetPolicyPOInfofromCAPSILOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyPOInfofromCAPSILOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyPOInfofromCAPSILCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyPOInfofromCAPSILCompleted(Me, New GetPolicyPOInfofromCAPSILCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetVPOAgentDetail", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetVPOAgentDetail(ByVal strAgentCode As String, ByRef dsAgentDetail As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetVPOAgentDetail", New Object() {strAgentCode, dsAgentDetail, strErr})
            dsAgentDetail = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetVPOAgentDetailAsync(ByVal strAgentCode As String, ByVal dsAgentDetail As System.Data.DataSet, ByVal strErr As String)
            Me.GetVPOAgentDetailAsync(strAgentCode, dsAgentDetail, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetVPOAgentDetailAsync(ByVal strAgentCode As String, ByVal dsAgentDetail As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetVPOAgentDetailOperationCompleted Is Nothing) Then
                Me.GetVPOAgentDetailOperationCompleted = AddressOf Me.OnGetVPOAgentDetailOperationCompleted
            End If
            Me.InvokeAsync("GetVPOAgentDetail", New Object() {strAgentCode, dsAgentDetail, strErr}, Me.GetVPOAgentDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetVPOAgentDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetVPOAgentDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetVPOAgentDetailCompleted(Me, New GetVPOAgentDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetVPOAgentMgr", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetVPOAgentMgr(ByVal strAgentCode As String, ByRef dsAgentMgr As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetVPOAgentMgr", New Object() {strAgentCode, dsAgentMgr, strErr})
            dsAgentMgr = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetVPOAgentMgrAsync(ByVal strAgentCode As String, ByVal dsAgentMgr As System.Data.DataSet, ByVal strErr As String)
            Me.GetVPOAgentMgrAsync(strAgentCode, dsAgentMgr, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetVPOAgentMgrAsync(ByVal strAgentCode As String, ByVal dsAgentMgr As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetVPOAgentMgrOperationCompleted Is Nothing) Then
                Me.GetVPOAgentMgrOperationCompleted = AddressOf Me.OnGetVPOAgentMgrOperationCompleted
            End If
            Me.InvokeAsync("GetVPOAgentMgr", New Object() {strAgentCode, dsAgentMgr, strErr}, Me.GetVPOAgentMgrOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetVPOAgentMgrOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetVPOAgentMgrCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetVPOAgentMgrCompleted(Me, New GetVPOAgentMgrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetVPOMemoDetail", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetVPOMemoDetail(ByVal strMemoType As String, ByRef dsMemo As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetVPOMemoDetail", New Object() {strMemoType, dsMemo, strErr})
            dsMemo = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetVPOMemoDetailAsync(ByVal strMemoType As String, ByVal dsMemo As System.Data.DataSet, ByVal strErr As String)
            Me.GetVPOMemoDetailAsync(strMemoType, dsMemo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetVPOMemoDetailAsync(ByVal strMemoType As String, ByVal dsMemo As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetVPOMemoDetailOperationCompleted Is Nothing) Then
                Me.GetVPOMemoDetailOperationCompleted = AddressOf Me.OnGetVPOMemoDetailOperationCompleted
            End If
            Me.InvokeAsync("GetVPOMemoDetail", New Object() {strMemoType, dsMemo, strErr}, Me.GetVPOMemoDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetVPOMemoDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetVPOMemoDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetVPOMemoDetailCompleted(Me, New GetVPOMemoDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetInsured", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInsured(ByVal strUserId As String, ByVal strPolicyNo As String, ByVal strCoverageNo As String, ByRef dsInsuredInfo As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetInsured", New Object() {strUserId, strPolicyNo, strCoverageNo, dsInsuredInfo, strErr})
            dsInsuredInfo = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInsuredAsync(ByVal strUserId As String, ByVal strPolicyNo As String, ByVal strCoverageNo As String, ByVal dsInsuredInfo As System.Data.DataSet, ByVal strErr As String)
            Me.GetInsuredAsync(strUserId, strPolicyNo, strCoverageNo, dsInsuredInfo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInsuredAsync(ByVal strUserId As String, ByVal strPolicyNo As String, ByVal strCoverageNo As String, ByVal dsInsuredInfo As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetInsuredOperationCompleted Is Nothing) Then
                Me.GetInsuredOperationCompleted = AddressOf Me.OnGetInsuredOperationCompleted
            End If
            Me.InvokeAsync("GetInsured", New Object() {strUserId, strPolicyNo, strCoverageNo, dsInsuredInfo, strErr}, Me.GetInsuredOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInsuredOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInsuredCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInsuredCompleted(Me, New GetInsuredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetDividendOption", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDividendOption(ByVal strPolicyNo As String, ByRef dsDividend As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetDividendOption", New Object() {strPolicyNo, dsDividend, strErr})
            dsDividend = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDividendOptionAsync(ByVal strPolicyNo As String, ByVal dsDividend As System.Data.DataSet, ByVal strErr As String)
            Me.GetDividendOptionAsync(strPolicyNo, dsDividend, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDividendOptionAsync(ByVal strPolicyNo As String, ByVal dsDividend As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetDividendOptionOperationCompleted Is Nothing) Then
                Me.GetDividendOptionOperationCompleted = AddressOf Me.OnGetDividendOptionOperationCompleted
            End If
            Me.InvokeAsync("GetDividendOption", New Object() {strPolicyNo, dsDividend, strErr}, Me.GetDividendOptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDividendOptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDividendOptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDividendOptionCompleted(Me, New GetDividendOptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPolicyCurrency", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyCurrency(ByVal strPolicyNo As String, ByRef strPolicyCurrency As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPolicyCurrency", New Object() {strPolicyNo, strPolicyCurrency, strErr})
            strPolicyCurrency = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyCurrencyAsync(ByVal strPolicyNo As String, ByVal strPolicyCurrency As String, ByVal strErr As String)
            Me.GetPolicyCurrencyAsync(strPolicyNo, strPolicyCurrency, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyCurrencyAsync(ByVal strPolicyNo As String, ByVal strPolicyCurrency As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPolicyCurrencyOperationCompleted Is Nothing) Then
                Me.GetPolicyCurrencyOperationCompleted = AddressOf Me.OnGetPolicyCurrencyOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyCurrency", New Object() {strPolicyNo, strPolicyCurrency, strErr}, Me.GetPolicyCurrencyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyCurrencyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyCurrencyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyCurrencyCompleted(Me, New GetPolicyCurrencyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPolicyStatus", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyStatus(ByVal strPolicyNo As String, ByRef strPolicyStatus As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPolicyStatus", New Object() {strPolicyNo, strPolicyStatus, strErr})
            strPolicyStatus = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyStatusAsync(ByVal strPolicyNo As String, ByVal strPolicyStatus As String, ByVal strErr As String)
            Me.GetPolicyStatusAsync(strPolicyNo, strPolicyStatus, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyStatusAsync(ByVal strPolicyNo As String, ByVal strPolicyStatus As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPolicyStatusOperationCompleted Is Nothing) Then
                Me.GetPolicyStatusOperationCompleted = AddressOf Me.OnGetPolicyStatusOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyStatus", New Object() {strPolicyNo, strPolicyStatus, strErr}, Me.GetPolicyStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyStatusCompleted(Me, New GetPolicyStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetFromCodeTable", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFromCodeTable(ByVal strCode As String, ByRef strValue As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFromCodeTable", New Object() {strCode, strValue, strErr})
            strValue = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFromCodeTableAsync(ByVal strCode As String, ByVal strValue As String, ByVal strErr As String)
            Me.GetFromCodeTableAsync(strCode, strValue, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFromCodeTableAsync(ByVal strCode As String, ByVal strValue As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetFromCodeTableOperationCompleted Is Nothing) Then
                Me.GetFromCodeTableOperationCompleted = AddressOf Me.OnGetFromCodeTableOperationCompleted
            End If
            Me.InvokeAsync("GetFromCodeTable", New Object() {strCode, strValue, strErr}, Me.GetFromCodeTableOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFromCodeTableOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFromCodeTableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFromCodeTableCompleted(Me, New GetFromCodeTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetInterestRate", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInterestRate(ByVal strNTUsr As String, ByVal strLibDTA As String, ByVal strPolicyNo As String, ByRef dblRate As Double, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetInterestRate", New Object() {strNTUsr, strLibDTA, strPolicyNo, dblRate, strErr})
            dblRate = CType(results(1),Double)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInterestRateAsync(ByVal strNTUsr As String, ByVal strLibDTA As String, ByVal strPolicyNo As String, ByVal dblRate As Double, ByVal strErr As String)
            Me.GetInterestRateAsync(strNTUsr, strLibDTA, strPolicyNo, dblRate, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInterestRateAsync(ByVal strNTUsr As String, ByVal strLibDTA As String, ByVal strPolicyNo As String, ByVal dblRate As Double, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetInterestRateOperationCompleted Is Nothing) Then
                Me.GetInterestRateOperationCompleted = AddressOf Me.OnGetInterestRateOperationCompleted
            End If
            Me.InvokeAsync("GetInterestRate", New Object() {strNTUsr, strLibDTA, strPolicyNo, dblRate, strErr}, Me.GetInterestRateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInterestRateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInterestRateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInterestRateCompleted(Me, New GetInterestRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTargetPremium", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTargetPremium(ByVal dsSend As System.Data.DataSet, ByRef dsRece As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTargetPremium", New Object() {dsSend, dsRece, strErr})
            dsRece = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTargetPremiumAsync(ByVal dsSend As System.Data.DataSet, ByVal dsRece As System.Data.DataSet, ByVal strErr As String)
            Me.GetTargetPremiumAsync(dsSend, dsRece, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTargetPremiumAsync(ByVal dsSend As System.Data.DataSet, ByVal dsRece As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTargetPremiumOperationCompleted Is Nothing) Then
                Me.GetTargetPremiumOperationCompleted = AddressOf Me.OnGetTargetPremiumOperationCompleted
            End If
            Me.InvokeAsync("GetTargetPremium", New Object() {dsSend, dsRece, strErr}, Me.GetTargetPremiumOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTargetPremiumOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTargetPremiumCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTargetPremiumCompleted(Me, New GetTargetPremiumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CheckExchangeRate", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckExchangeRate(ByVal dsSendData As System.Data.DataSet, ByRef dsReceiveData As System.Data.DataSet, ByRef errorMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckExchangeRate", New Object() {dsSendData, dsReceiveData, errorMsg})
            dsReceiveData = CType(results(1),System.Data.DataSet)
            errorMsg = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckExchangeRateAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceiveData As System.Data.DataSet, ByVal errorMsg As String)
            Me.CheckExchangeRateAsync(dsSendData, dsReceiveData, errorMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckExchangeRateAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceiveData As System.Data.DataSet, ByVal errorMsg As String, ByVal userState As Object)
            If (Me.CheckExchangeRateOperationCompleted Is Nothing) Then
                Me.CheckExchangeRateOperationCompleted = AddressOf Me.OnCheckExchangeRateOperationCompleted
            End If
            Me.InvokeAsync("CheckExchangeRate", New Object() {dsSendData, dsReceiveData, errorMsg}, Me.CheckExchangeRateOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckExchangeRateOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckExchangeRateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckExchangeRateCompleted(Me, New CheckExchangeRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransLogClaims", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransLogClaims(ByVal strSystem As Object, ByVal intClaimNo As Object, ByVal intClaimOccur As Object) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetTransLogClaims", New Object() {strSystem, intClaimNo, intClaimOccur})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransLogClaimsAsync(ByVal strSystem As Object, ByVal intClaimNo As Object, ByVal intClaimOccur As Object)
            Me.GetTransLogClaimsAsync(strSystem, intClaimNo, intClaimOccur, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransLogClaimsAsync(ByVal strSystem As Object, ByVal intClaimNo As Object, ByVal intClaimOccur As Object, ByVal userState As Object)
            If (Me.GetTransLogClaimsOperationCompleted Is Nothing) Then
                Me.GetTransLogClaimsOperationCompleted = AddressOf Me.OnGetTransLogClaimsOperationCompleted
            End If
            Me.InvokeAsync("GetTransLogClaims", New Object() {strSystem, intClaimNo, intClaimOccur}, Me.GetTransLogClaimsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransLogClaimsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransLogClaimsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransLogClaimsCompleted(Me, New GetTransLogClaimsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CFIWarningForLinkProduct", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CFIWarningForLinkProduct(ByVal strPolicyNo As String, ByRef strWarnMessage As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CFIWarningForLinkProduct", New Object() {strPolicyNo, strWarnMessage, strErr})
            strWarnMessage = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CFIWarningForLinkProductAsync(ByVal strPolicyNo As String, ByVal strWarnMessage As String, ByVal strErr As String)
            Me.CFIWarningForLinkProductAsync(strPolicyNo, strWarnMessage, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CFIWarningForLinkProductAsync(ByVal strPolicyNo As String, ByVal strWarnMessage As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.CFIWarningForLinkProductOperationCompleted Is Nothing) Then
                Me.CFIWarningForLinkProductOperationCompleted = AddressOf Me.OnCFIWarningForLinkProductOperationCompleted
            End If
            Me.InvokeAsync("CFIWarningForLinkProduct", New Object() {strPolicyNo, strWarnMessage, strErr}, Me.CFIWarningForLinkProductOperationCompleted, userState)
        End Sub
        
        Private Sub OnCFIWarningForLinkProductOperationCompleted(ByVal arg As Object)
            If (Not (Me.CFIWarningForLinkProductCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CFIWarningForLinkProductCompleted(Me, New CFIWarningForLinkProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetWarningMessageByPolicyNo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWarningMessageByPolicyNo(ByVal strPolicyNo As String, ByVal strStatus As String, ByRef dsMessage As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetWarningMessageByPolicyNo", New Object() {strPolicyNo, strStatus, dsMessage, strErr})
            dsMessage = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWarningMessageByPolicyNoAsync(ByVal strPolicyNo As String, ByVal strStatus As String, ByVal dsMessage As System.Data.DataSet, ByVal strErr As String)
            Me.GetWarningMessageByPolicyNoAsync(strPolicyNo, strStatus, dsMessage, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWarningMessageByPolicyNoAsync(ByVal strPolicyNo As String, ByVal strStatus As String, ByVal dsMessage As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetWarningMessageByPolicyNoOperationCompleted Is Nothing) Then
                Me.GetWarningMessageByPolicyNoOperationCompleted = AddressOf Me.OnGetWarningMessageByPolicyNoOperationCompleted
            End If
            Me.InvokeAsync("GetWarningMessageByPolicyNo", New Object() {strPolicyNo, strStatus, dsMessage, strErr}, Me.GetWarningMessageByPolicyNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWarningMessageByPolicyNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWarningMessageByPolicyNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWarningMessageByPolicyNoCompleted(Me, New GetWarningMessageByPolicyNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetAgentFaxNo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAgentFaxNo(ByVal strUserId As String, ByVal strAgentLocation As String, ByRef sAgentFaxNo As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAgentFaxNo", New Object() {strUserId, strAgentLocation, sAgentFaxNo, strErr})
            sAgentFaxNo = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAgentFaxNoAsync(ByVal strUserId As String, ByVal strAgentLocation As String, ByVal sAgentFaxNo As String, ByVal strErr As String)
            Me.GetAgentFaxNoAsync(strUserId, strAgentLocation, sAgentFaxNo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAgentFaxNoAsync(ByVal strUserId As String, ByVal strAgentLocation As String, ByVal sAgentFaxNo As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetAgentFaxNoOperationCompleted Is Nothing) Then
                Me.GetAgentFaxNoOperationCompleted = AddressOf Me.OnGetAgentFaxNoOperationCompleted
            End If
            Me.InvokeAsync("GetAgentFaxNo", New Object() {strUserId, strAgentLocation, sAgentFaxNo, strErr}, Me.GetAgentFaxNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAgentFaxNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAgentFaxNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAgentFaxNoCompleted(Me, New GetAgentFaxNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetRequestType", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRequestType(ByRef dsRequestType As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetRequestType", New Object() {dsRequestType, strErr})
            dsRequestType = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRequestTypeAsync(ByVal dsRequestType As System.Data.DataSet, ByVal strErr As String)
            Me.GetRequestTypeAsync(dsRequestType, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRequestTypeAsync(ByVal dsRequestType As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetRequestTypeOperationCompleted Is Nothing) Then
                Me.GetRequestTypeOperationCompleted = AddressOf Me.OnGetRequestTypeOperationCompleted
            End If
            Me.InvokeAsync("GetRequestType", New Object() {dsRequestType, strErr}, Me.GetRequestTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRequestTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRequestTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRequestTypeCompleted(Me, New GetRequestTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPOLCTransLog", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPOLCTransLog(ByVal iTransID As Integer, ByRef dsMessage As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPOLCTransLog", New Object() {iTransID, dsMessage, strErr})
            dsMessage = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPOLCTransLogAsync(ByVal iTransID As Integer, ByVal dsMessage As System.Data.DataSet, ByVal strErr As String)
            Me.GetPOLCTransLogAsync(iTransID, dsMessage, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPOLCTransLogAsync(ByVal iTransID As Integer, ByVal dsMessage As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPOLCTransLogOperationCompleted Is Nothing) Then
                Me.GetPOLCTransLogOperationCompleted = AddressOf Me.OnGetPOLCTransLogOperationCompleted
            End If
            Me.InvokeAsync("GetPOLCTransLog", New Object() {iTransID, dsMessage, strErr}, Me.GetPOLCTransLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPOLCTransLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPOLCTransLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPOLCTransLogCompleted(Me, New GetPOLCTransLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPOLMTransLog", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPOLMTransLog(ByVal iTransID As Integer, ByRef dsMessage As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPOLMTransLog", New Object() {iTransID, dsMessage, strErr})
            dsMessage = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPOLMTransLogAsync(ByVal iTransID As Integer, ByVal dsMessage As System.Data.DataSet, ByVal strErr As String)
            Me.GetPOLMTransLogAsync(iTransID, dsMessage, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPOLMTransLogAsync(ByVal iTransID As Integer, ByVal dsMessage As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPOLMTransLogOperationCompleted Is Nothing) Then
                Me.GetPOLMTransLogOperationCompleted = AddressOf Me.OnGetPOLMTransLogOperationCompleted
            End If
            Me.InvokeAsync("GetPOLMTransLog", New Object() {iTransID, dsMessage, strErr}, Me.GetPOLMTransLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPOLMTransLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPOLMTransLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPOLMTransLogCompleted(Me, New GetPOLMTransLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPCOVTransLog", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPCOVTransLog(ByVal iTransID As Integer, ByRef dsMessage As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPCOVTransLog", New Object() {iTransID, dsMessage, strErr})
            dsMessage = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPCOVTransLogAsync(ByVal iTransID As Integer, ByVal dsMessage As System.Data.DataSet, ByVal strErr As String)
            Me.GetPCOVTransLogAsync(iTransID, dsMessage, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPCOVTransLogAsync(ByVal iTransID As Integer, ByVal dsMessage As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPCOVTransLogOperationCompleted Is Nothing) Then
                Me.GetPCOVTransLogOperationCompleted = AddressOf Me.OnGetPCOVTransLogOperationCompleted
            End If
            Me.InvokeAsync("GetPCOVTransLog", New Object() {iTransID, dsMessage, strErr}, Me.GetPCOVTransLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPCOVTransLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPCOVTransLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPCOVTransLogCompleted(Me, New GetPCOVTransLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPPOLTransLog", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPPOLTransLog(ByVal iTransID As Integer, ByRef dsMessage As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPPOLTransLog", New Object() {iTransID, dsMessage, strErr})
            dsMessage = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPPOLTransLogAsync(ByVal iTransID As Integer, ByVal dsMessage As System.Data.DataSet, ByVal strErr As String)
            Me.GetPPOLTransLogAsync(iTransID, dsMessage, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPPOLTransLogAsync(ByVal iTransID As Integer, ByVal dsMessage As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPPOLTransLogOperationCompleted Is Nothing) Then
                Me.GetPPOLTransLogOperationCompleted = AddressOf Me.OnGetPPOLTransLogOperationCompleted
            End If
            Me.InvokeAsync("GetPPOLTransLog", New Object() {iTransID, dsMessage, strErr}, Me.GetPPOLTransLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPPOLTransLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPPOLTransLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPPOLTransLogCompleted(Me, New GetPPOLTransLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ValidProductTheOne", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidProductTheOne(ByVal strPolicyNo As String, ByVal strPolicyCurrency As String, ByVal strPlanCode As String, ByVal strMortalityClass As String, ByVal lngInsuredCIWID As Double, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ValidProductTheOne", New Object() {strPolicyNo, strPolicyCurrency, strPlanCode, strMortalityClass, lngInsuredCIWID, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidProductTheOneAsync(ByVal strPolicyNo As String, ByVal strPolicyCurrency As String, ByVal strPlanCode As String, ByVal strMortalityClass As String, ByVal lngInsuredCIWID As Double, ByVal strErr As String)
            Me.ValidProductTheOneAsync(strPolicyNo, strPolicyCurrency, strPlanCode, strMortalityClass, lngInsuredCIWID, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidProductTheOneAsync(ByVal strPolicyNo As String, ByVal strPolicyCurrency As String, ByVal strPlanCode As String, ByVal strMortalityClass As String, ByVal lngInsuredCIWID As Double, ByVal strErr As String, ByVal userState As Object)
            If (Me.ValidProductTheOneOperationCompleted Is Nothing) Then
                Me.ValidProductTheOneOperationCompleted = AddressOf Me.OnValidProductTheOneOperationCompleted
            End If
            Me.InvokeAsync("ValidProductTheOne", New Object() {strPolicyNo, strPolicyCurrency, strPlanCode, strMortalityClass, lngInsuredCIWID, strErr}, Me.ValidProductTheOneOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidProductTheOneOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidProductTheOneCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidProductTheOneCompleted(Me, New ValidProductTheOneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/TheOnePlanIsPRC", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TheOnePlanIsPRC(ByVal strPolicyNo As String, ByRef IsPRC As Boolean, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("TheOnePlanIsPRC", New Object() {strPolicyNo, IsPRC, strErr})
            IsPRC = CType(results(1),Boolean)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TheOnePlanIsPRCAsync(ByVal strPolicyNo As String, ByVal IsPRC As Boolean, ByVal strErr As String)
            Me.TheOnePlanIsPRCAsync(strPolicyNo, IsPRC, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TheOnePlanIsPRCAsync(ByVal strPolicyNo As String, ByVal IsPRC As Boolean, ByVal strErr As String, ByVal userState As Object)
            If (Me.TheOnePlanIsPRCOperationCompleted Is Nothing) Then
                Me.TheOnePlanIsPRCOperationCompleted = AddressOf Me.OnTheOnePlanIsPRCOperationCompleted
            End If
            Me.InvokeAsync("TheOnePlanIsPRC", New Object() {strPolicyNo, IsPRC, strErr}, Me.TheOnePlanIsPRCOperationCompleted, userState)
        End Sub
        
        Private Sub OnTheOnePlanIsPRCOperationCompleted(ByVal arg As Object)
            If (Not (Me.TheOnePlanIsPRCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TheOnePlanIsPRCCompleted(Me, New TheOnePlanIsPRCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetFundList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFundList(ByRef dsFundList As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFundList", New Object() {dsFundList, strErr})
            dsFundList = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFundListAsync(ByVal dsFundList As System.Data.DataSet, ByVal strErr As String)
            Me.GetFundListAsync(dsFundList, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFundListAsync(ByVal dsFundList As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetFundListOperationCompleted Is Nothing) Then
                Me.GetFundListOperationCompleted = AddressOf Me.OnGetFundListOperationCompleted
            End If
            Me.InvokeAsync("GetFundList", New Object() {dsFundList, strErr}, Me.GetFundListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFundListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFundListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFundListCompleted(Me, New GetFundListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/EnableFundSwitchInPublicWebsite", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EnableFundSwitchInPublicWebsite(ByVal strFundCode As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("EnableFundSwitchInPublicWebsite", New Object() {strFundCode, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EnableFundSwitchInPublicWebsiteAsync(ByVal strFundCode As String, ByVal strErr As String)
            Me.EnableFundSwitchInPublicWebsiteAsync(strFundCode, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EnableFundSwitchInPublicWebsiteAsync(ByVal strFundCode As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.EnableFundSwitchInPublicWebsiteOperationCompleted Is Nothing) Then
                Me.EnableFundSwitchInPublicWebsiteOperationCompleted = AddressOf Me.OnEnableFundSwitchInPublicWebsiteOperationCompleted
            End If
            Me.InvokeAsync("EnableFundSwitchInPublicWebsite", New Object() {strFundCode, strErr}, Me.EnableFundSwitchInPublicWebsiteOperationCompleted, userState)
        End Sub
        
        Private Sub OnEnableFundSwitchInPublicWebsiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.EnableFundSwitchInPublicWebsiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EnableFundSwitchInPublicWebsiteCompleted(Me, New EnableFundSwitchInPublicWebsiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/DisableFundSwitchInPublicWebsite", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DisableFundSwitchInPublicWebsite(ByVal strFundCode As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("DisableFundSwitchInPublicWebsite", New Object() {strFundCode, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DisableFundSwitchInPublicWebsiteAsync(ByVal strFundCode As String, ByVal strErr As String)
            Me.DisableFundSwitchInPublicWebsiteAsync(strFundCode, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DisableFundSwitchInPublicWebsiteAsync(ByVal strFundCode As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.DisableFundSwitchInPublicWebsiteOperationCompleted Is Nothing) Then
                Me.DisableFundSwitchInPublicWebsiteOperationCompleted = AddressOf Me.OnDisableFundSwitchInPublicWebsiteOperationCompleted
            End If
            Me.InvokeAsync("DisableFundSwitchInPublicWebsite", New Object() {strFundCode, strErr}, Me.DisableFundSwitchInPublicWebsiteOperationCompleted, userState)
        End Sub
        
        Private Sub OnDisableFundSwitchInPublicWebsiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.DisableFundSwitchInPublicWebsiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DisableFundSwitchInPublicWebsiteCompleted(Me, New DisableFundSwitchInPublicWebsiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SuspensionFundSwitchInPublicWebsite", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SuspensionFundSwitchInPublicWebsite(ByVal strFundCode As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SuspensionFundSwitchInPublicWebsite", New Object() {strFundCode, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SuspensionFundSwitchInPublicWebsiteAsync(ByVal strFundCode As String, ByVal strErr As String)
            Me.SuspensionFundSwitchInPublicWebsiteAsync(strFundCode, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SuspensionFundSwitchInPublicWebsiteAsync(ByVal strFundCode As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.SuspensionFundSwitchInPublicWebsiteOperationCompleted Is Nothing) Then
                Me.SuspensionFundSwitchInPublicWebsiteOperationCompleted = AddressOf Me.OnSuspensionFundSwitchInPublicWebsiteOperationCompleted
            End If
            Me.InvokeAsync("SuspensionFundSwitchInPublicWebsite", New Object() {strFundCode, strErr}, Me.SuspensionFundSwitchInPublicWebsiteOperationCompleted, userState)
        End Sub
        
        Private Sub OnSuspensionFundSwitchInPublicWebsiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.SuspensionFundSwitchInPublicWebsiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SuspensionFundSwitchInPublicWebsiteCompleted(Me, New SuspensionFundSwitchInPublicWebsiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/EnableFundSwitchOutPublicWebsite", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EnableFundSwitchOutPublicWebsite(ByVal strFundCode As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("EnableFundSwitchOutPublicWebsite", New Object() {strFundCode, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EnableFundSwitchOutPublicWebsiteAsync(ByVal strFundCode As String, ByVal strErr As String)
            Me.EnableFundSwitchOutPublicWebsiteAsync(strFundCode, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EnableFundSwitchOutPublicWebsiteAsync(ByVal strFundCode As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.EnableFundSwitchOutPublicWebsiteOperationCompleted Is Nothing) Then
                Me.EnableFundSwitchOutPublicWebsiteOperationCompleted = AddressOf Me.OnEnableFundSwitchOutPublicWebsiteOperationCompleted
            End If
            Me.InvokeAsync("EnableFundSwitchOutPublicWebsite", New Object() {strFundCode, strErr}, Me.EnableFundSwitchOutPublicWebsiteOperationCompleted, userState)
        End Sub
        
        Private Sub OnEnableFundSwitchOutPublicWebsiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.EnableFundSwitchOutPublicWebsiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EnableFundSwitchOutPublicWebsiteCompleted(Me, New EnableFundSwitchOutPublicWebsiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/DisableFundSwitchOutPublicWebsite", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DisableFundSwitchOutPublicWebsite(ByVal strFundCode As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("DisableFundSwitchOutPublicWebsite", New Object() {strFundCode, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DisableFundSwitchOutPublicWebsiteAsync(ByVal strFundCode As String, ByVal strErr As String)
            Me.DisableFundSwitchOutPublicWebsiteAsync(strFundCode, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DisableFundSwitchOutPublicWebsiteAsync(ByVal strFundCode As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.DisableFundSwitchOutPublicWebsiteOperationCompleted Is Nothing) Then
                Me.DisableFundSwitchOutPublicWebsiteOperationCompleted = AddressOf Me.OnDisableFundSwitchOutPublicWebsiteOperationCompleted
            End If
            Me.InvokeAsync("DisableFundSwitchOutPublicWebsite", New Object() {strFundCode, strErr}, Me.DisableFundSwitchOutPublicWebsiteOperationCompleted, userState)
        End Sub
        
        Private Sub OnDisableFundSwitchOutPublicWebsiteOperationCompleted(ByVal arg As Object)
            If (Not (Me.DisableFundSwitchOutPublicWebsiteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DisableFundSwitchOutPublicWebsiteCompleted(Me, New DisableFundSwitchOutPublicWebsiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/EnableFundAllocationLAS", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EnableFundAllocationLAS(ByVal strFundCode As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("EnableFundAllocationLAS", New Object() {strFundCode, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EnableFundAllocationLASAsync(ByVal strFundCode As String, ByVal strErr As String)
            Me.EnableFundAllocationLASAsync(strFundCode, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EnableFundAllocationLASAsync(ByVal strFundCode As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.EnableFundAllocationLASOperationCompleted Is Nothing) Then
                Me.EnableFundAllocationLASOperationCompleted = AddressOf Me.OnEnableFundAllocationLASOperationCompleted
            End If
            Me.InvokeAsync("EnableFundAllocationLAS", New Object() {strFundCode, strErr}, Me.EnableFundAllocationLASOperationCompleted, userState)
        End Sub
        
        Private Sub OnEnableFundAllocationLASOperationCompleted(ByVal arg As Object)
            If (Not (Me.EnableFundAllocationLASCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EnableFundAllocationLASCompleted(Me, New EnableFundAllocationLASCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/DisableFundAllocationLAS", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DisableFundAllocationLAS(ByVal strFundCode As String, ByVal EffectiveDate As Date, ByRef strErr As String, ByVal DeAuthAllUser As String) As Boolean
            Dim results() As Object = Me.Invoke("DisableFundAllocationLAS", New Object() {strFundCode, EffectiveDate, strErr, DeAuthAllUser})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DisableFundAllocationLASAsync(ByVal strFundCode As String, ByVal EffectiveDate As Date, ByVal strErr As String, ByVal DeAuthAllUser As String)
            Me.DisableFundAllocationLASAsync(strFundCode, EffectiveDate, strErr, DeAuthAllUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DisableFundAllocationLASAsync(ByVal strFundCode As String, ByVal EffectiveDate As Date, ByVal strErr As String, ByVal DeAuthAllUser As String, ByVal userState As Object)
            If (Me.DisableFundAllocationLASOperationCompleted Is Nothing) Then
                Me.DisableFundAllocationLASOperationCompleted = AddressOf Me.OnDisableFundAllocationLASOperationCompleted
            End If
            Me.InvokeAsync("DisableFundAllocationLAS", New Object() {strFundCode, EffectiveDate, strErr, DeAuthAllUser}, Me.DisableFundAllocationLASOperationCompleted, userState)
        End Sub
        
        Private Sub OnDisableFundAllocationLASOperationCompleted(ByVal arg As Object)
            If (Not (Me.DisableFundAllocationLASCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DisableFundAllocationLASCompleted(Me, New DisableFundAllocationLASCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/DeAuthCapsilFund", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeAuthCapsilFund(ByVal strFundCode As String, ByVal EffectiveDate As Date, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("DeAuthCapsilFund", New Object() {strFundCode, EffectiveDate, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeAuthCapsilFundAsync(ByVal strFundCode As String, ByVal EffectiveDate As Date, ByVal strErr As String)
            Me.DeAuthCapsilFundAsync(strFundCode, EffectiveDate, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeAuthCapsilFundAsync(ByVal strFundCode As String, ByVal EffectiveDate As Date, ByVal strErr As String, ByVal userState As Object)
            If (Me.DeAuthCapsilFundOperationCompleted Is Nothing) Then
                Me.DeAuthCapsilFundOperationCompleted = AddressOf Me.OnDeAuthCapsilFundOperationCompleted
            End If
            Me.InvokeAsync("DeAuthCapsilFund", New Object() {strFundCode, EffectiveDate, strErr}, Me.DeAuthCapsilFundOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeAuthCapsilFundOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeAuthCapsilFundCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeAuthCapsilFundCompleted(Me, New DeAuthCapsilFundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/AuthCapsilFund", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AuthCapsilFund(ByVal strFundCode As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("AuthCapsilFund", New Object() {strFundCode, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AuthCapsilFundAsync(ByVal strFundCode As String, ByVal strErr As String)
            Me.AuthCapsilFundAsync(strFundCode, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AuthCapsilFundAsync(ByVal strFundCode As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.AuthCapsilFundOperationCompleted Is Nothing) Then
                Me.AuthCapsilFundOperationCompleted = AddressOf Me.OnAuthCapsilFundOperationCompleted
            End If
            Me.InvokeAsync("AuthCapsilFund", New Object() {strFundCode, strErr}, Me.AuthCapsilFundOperationCompleted, userState)
        End Sub
        
        Private Sub OnAuthCapsilFundOperationCompleted(ByVal arg As Object)
            If (Not (Me.AuthCapsilFundCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AuthCapsilFundCompleted(Me, New AuthCapsilFundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/EnableFundClosing", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EnableFundClosing(ByVal strFundCode As String, ByVal EffectiveDate As Date, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("EnableFundClosing", New Object() {strFundCode, EffectiveDate, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EnableFundClosingAsync(ByVal strFundCode As String, ByVal EffectiveDate As Date, ByVal strErr As String)
            Me.EnableFundClosingAsync(strFundCode, EffectiveDate, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EnableFundClosingAsync(ByVal strFundCode As String, ByVal EffectiveDate As Date, ByVal strErr As String, ByVal userState As Object)
            If (Me.EnableFundClosingOperationCompleted Is Nothing) Then
                Me.EnableFundClosingOperationCompleted = AddressOf Me.OnEnableFundClosingOperationCompleted
            End If
            Me.InvokeAsync("EnableFundClosing", New Object() {strFundCode, EffectiveDate, strErr}, Me.EnableFundClosingOperationCompleted, userState)
        End Sub
        
        Private Sub OnEnableFundClosingOperationCompleted(ByVal arg As Object)
            If (Not (Me.EnableFundClosingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EnableFundClosingCompleted(Me, New EnableFundClosingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/DisableFundClosing", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DisableFundClosing(ByVal strFundCode As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("DisableFundClosing", New Object() {strFundCode, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DisableFundClosingAsync(ByVal strFundCode As String, ByVal strErr As String)
            Me.DisableFundClosingAsync(strFundCode, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DisableFundClosingAsync(ByVal strFundCode As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.DisableFundClosingOperationCompleted Is Nothing) Then
                Me.DisableFundClosingOperationCompleted = AddressOf Me.OnDisableFundClosingOperationCompleted
            End If
            Me.InvokeAsync("DisableFundClosing", New Object() {strFundCode, strErr}, Me.DisableFundClosingOperationCompleted, userState)
        End Sub
        
        Private Sub OnDisableFundClosingOperationCompleted(ByVal arg As Object)
            If (Not (Me.DisableFundClosingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DisableFundClosingCompleted(Me, New DisableFundClosingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CloseCapsilFund", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CloseCapsilFund(ByVal strFundCode As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CloseCapsilFund", New Object() {strFundCode, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CloseCapsilFundAsync(ByVal strFundCode As String, ByVal strErr As String)
            Me.CloseCapsilFundAsync(strFundCode, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CloseCapsilFundAsync(ByVal strFundCode As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.CloseCapsilFundOperationCompleted Is Nothing) Then
                Me.CloseCapsilFundOperationCompleted = AddressOf Me.OnCloseCapsilFundOperationCompleted
            End If
            Me.InvokeAsync("CloseCapsilFund", New Object() {strFundCode, strErr}, Me.CloseCapsilFundOperationCompleted, userState)
        End Sub
        
        Private Sub OnCloseCapsilFundOperationCompleted(ByVal arg As Object)
            If (Not (Me.CloseCapsilFundCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CloseCapsilFundCompleted(Me, New CloseCapsilFundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/OpenCapsilFund", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OpenCapsilFund(ByVal strFundCode As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("OpenCapsilFund", New Object() {strFundCode, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OpenCapsilFundAsync(ByVal strFundCode As String, ByVal strErr As String)
            Me.OpenCapsilFundAsync(strFundCode, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OpenCapsilFundAsync(ByVal strFundCode As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.OpenCapsilFundOperationCompleted Is Nothing) Then
                Me.OpenCapsilFundOperationCompleted = AddressOf Me.OnOpenCapsilFundOperationCompleted
            End If
            Me.InvokeAsync("OpenCapsilFund", New Object() {strFundCode, strErr}, Me.OpenCapsilFundOperationCompleted, userState)
        End Sub
        
        Private Sub OnOpenCapsilFundOperationCompleted(ByVal arg As Object)
            If (Not (Me.OpenCapsilFundCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OpenCapsilFundCompleted(Me, New OpenCapsilFundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ReleaseFundSwitchOutMinReq", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReleaseFundSwitchOutMinReq(ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ReleaseFundSwitchOutMinReq", New Object() {strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReleaseFundSwitchOutMinReqAsync(ByVal strErr As String)
            Me.ReleaseFundSwitchOutMinReqAsync(strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReleaseFundSwitchOutMinReqAsync(ByVal strErr As String, ByVal userState As Object)
            If (Me.ReleaseFundSwitchOutMinReqOperationCompleted Is Nothing) Then
                Me.ReleaseFundSwitchOutMinReqOperationCompleted = AddressOf Me.OnReleaseFundSwitchOutMinReqOperationCompleted
            End If
            Me.InvokeAsync("ReleaseFundSwitchOutMinReq", New Object() {strErr}, Me.ReleaseFundSwitchOutMinReqOperationCompleted, userState)
        End Sub
        
        Private Sub OnReleaseFundSwitchOutMinReqOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReleaseFundSwitchOutMinReqCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReleaseFundSwitchOutMinReqCompleted(Me, New ReleaseFundSwitchOutMinReqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ResumeFundSwitchOutMinReq", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ResumeFundSwitchOutMinReq(ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ResumeFundSwitchOutMinReq", New Object() {strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ResumeFundSwitchOutMinReqAsync(ByVal strErr As String)
            Me.ResumeFundSwitchOutMinReqAsync(strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ResumeFundSwitchOutMinReqAsync(ByVal strErr As String, ByVal userState As Object)
            If (Me.ResumeFundSwitchOutMinReqOperationCompleted Is Nothing) Then
                Me.ResumeFundSwitchOutMinReqOperationCompleted = AddressOf Me.OnResumeFundSwitchOutMinReqOperationCompleted
            End If
            Me.InvokeAsync("ResumeFundSwitchOutMinReq", New Object() {strErr}, Me.ResumeFundSwitchOutMinReqOperationCompleted, userState)
        End Sub
        
        Private Sub OnResumeFundSwitchOutMinReqOperationCompleted(ByVal arg As Object)
            If (Not (Me.ResumeFundSwitchOutMinReqCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ResumeFundSwitchOutMinReqCompleted(Me, New ResumeFundSwitchOutMinReqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CheckFundSwitchOutMinReq", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckFundSwitchOutMinReq(ByRef strLockedBy As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckFundSwitchOutMinReq", New Object() {strLockedBy, strErr})
            strLockedBy = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckFundSwitchOutMinReqAsync(ByVal strLockedBy As String, ByVal strErr As String)
            Me.CheckFundSwitchOutMinReqAsync(strLockedBy, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckFundSwitchOutMinReqAsync(ByVal strLockedBy As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.CheckFundSwitchOutMinReqOperationCompleted Is Nothing) Then
                Me.CheckFundSwitchOutMinReqOperationCompleted = AddressOf Me.OnCheckFundSwitchOutMinReqOperationCompleted
            End If
            Me.InvokeAsync("CheckFundSwitchOutMinReq", New Object() {strLockedBy, strErr}, Me.CheckFundSwitchOutMinReqOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckFundSwitchOutMinReqOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckFundSwitchOutMinReqCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckFundSwitchOutMinReqCompleted(Me, New CheckFundSwitchOutMinReqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetFundPolicyList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFundPolicyList(ByVal fundList() As String, ByVal strListType As String, ByVal blCondensedList As Boolean, ByRef dtData As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFundPolicyList", New Object() {fundList, strListType, blCondensedList, dtData, strErr})
            dtData = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFundPolicyListAsync(ByVal fundList() As String, ByVal strListType As String, ByVal blCondensedList As Boolean, ByVal dtData As System.Data.DataTable, ByVal strErr As String)
            Me.GetFundPolicyListAsync(fundList, strListType, blCondensedList, dtData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFundPolicyListAsync(ByVal fundList() As String, ByVal strListType As String, ByVal blCondensedList As Boolean, ByVal dtData As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetFundPolicyListOperationCompleted Is Nothing) Then
                Me.GetFundPolicyListOperationCompleted = AddressOf Me.OnGetFundPolicyListOperationCompleted
            End If
            Me.InvokeAsync("GetFundPolicyList", New Object() {fundList, strListType, blCondensedList, dtData, strErr}, Me.GetFundPolicyListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFundPolicyListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFundPolicyListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFundPolicyListCompleted(Me, New GetFundPolicyListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CreateMarkin", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateMarkin(ByVal intMarkinReqId As Integer, ByVal strPolicyNo As String, ByVal strTransType As String, ByVal strRemark As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CreateMarkin", New Object() {intMarkinReqId, strPolicyNo, strTransType, strRemark, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateMarkinAsync(ByVal intMarkinReqId As Integer, ByVal strPolicyNo As String, ByVal strTransType As String, ByVal strRemark As String, ByVal strErr As String)
            Me.CreateMarkinAsync(intMarkinReqId, strPolicyNo, strTransType, strRemark, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateMarkinAsync(ByVal intMarkinReqId As Integer, ByVal strPolicyNo As String, ByVal strTransType As String, ByVal strRemark As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.CreateMarkinOperationCompleted Is Nothing) Then
                Me.CreateMarkinOperationCompleted = AddressOf Me.OnCreateMarkinOperationCompleted
            End If
            Me.InvokeAsync("CreateMarkin", New Object() {intMarkinReqId, strPolicyNo, strTransType, strRemark, strErr}, Me.CreateMarkinOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateMarkinOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateMarkinCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateMarkinCompleted(Me, New CreateMarkinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCapsilFundName", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCapsilFundName(ByVal strFundCode As String, ByRef strFundName As String, ByRef strFundNameChi As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCapsilFundName", New Object() {strFundCode, strFundName, strFundNameChi, strErr})
            strFundName = CType(results(1),String)
            strFundNameChi = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCapsilFundNameAsync(ByVal strFundCode As String, ByVal strFundName As String, ByVal strFundNameChi As String, ByVal strErr As String)
            Me.GetCapsilFundNameAsync(strFundCode, strFundName, strFundNameChi, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCapsilFundNameAsync(ByVal strFundCode As String, ByVal strFundName As String, ByVal strFundNameChi As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCapsilFundNameOperationCompleted Is Nothing) Then
                Me.GetCapsilFundNameOperationCompleted = AddressOf Me.OnGetCapsilFundNameOperationCompleted
            End If
            Me.InvokeAsync("GetCapsilFundName", New Object() {strFundCode, strFundName, strFundNameChi, strErr}, Me.GetCapsilFundNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCapsilFundNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCapsilFundNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCapsilFundNameCompleted(Me, New GetCapsilFundNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdateCapsilFundName", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCapsilFundName(ByVal strFundCode As String, ByVal strFundName As String, ByVal strFundNameChi As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateCapsilFundName", New Object() {strFundCode, strFundName, strFundNameChi, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCapsilFundNameAsync(ByVal strFundCode As String, ByVal strFundName As String, ByVal strFundNameChi As String, ByVal strErr As String)
            Me.UpdateCapsilFundNameAsync(strFundCode, strFundName, strFundNameChi, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCapsilFundNameAsync(ByVal strFundCode As String, ByVal strFundName As String, ByVal strFundNameChi As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateCapsilFundNameOperationCompleted Is Nothing) Then
                Me.UpdateCapsilFundNameOperationCompleted = AddressOf Me.OnUpdateCapsilFundNameOperationCompleted
            End If
            Me.InvokeAsync("UpdateCapsilFundName", New Object() {strFundCode, strFundName, strFundNameChi, strErr}, Me.UpdateCapsilFundNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCapsilFundNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCapsilFundNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCapsilFundNameCompleted(Me, New UpdateCapsilFundNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLifeAsiaFundName", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLifeAsiaFundName(ByVal strFundCode As String, ByRef strFundName As String, ByRef strFundNameChi As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLifeAsiaFundName", New Object() {strFundCode, strFundName, strFundNameChi, strErr})
            strFundName = CType(results(1),String)
            strFundNameChi = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLifeAsiaFundNameAsync(ByVal strFundCode As String, ByVal strFundName As String, ByVal strFundNameChi As String, ByVal strErr As String)
            Me.GetLifeAsiaFundNameAsync(strFundCode, strFundName, strFundNameChi, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLifeAsiaFundNameAsync(ByVal strFundCode As String, ByVal strFundName As String, ByVal strFundNameChi As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLifeAsiaFundNameOperationCompleted Is Nothing) Then
                Me.GetLifeAsiaFundNameOperationCompleted = AddressOf Me.OnGetLifeAsiaFundNameOperationCompleted
            End If
            Me.InvokeAsync("GetLifeAsiaFundName", New Object() {strFundCode, strFundName, strFundNameChi, strErr}, Me.GetLifeAsiaFundNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLifeAsiaFundNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLifeAsiaFundNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLifeAsiaFundNameCompleted(Me, New GetLifeAsiaFundNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdateLifeAsiaFundName", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateLifeAsiaFundName(ByVal strFundCode As String, ByRef strFundName As String, ByRef strFundNameChi As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateLifeAsiaFundName", New Object() {strFundCode, strFundName, strFundNameChi, strErr})
            strFundName = CType(results(1),String)
            strFundNameChi = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateLifeAsiaFundNameAsync(ByVal strFundCode As String, ByVal strFundName As String, ByVal strFundNameChi As String, ByVal strErr As String)
            Me.UpdateLifeAsiaFundNameAsync(strFundCode, strFundName, strFundNameChi, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateLifeAsiaFundNameAsync(ByVal strFundCode As String, ByVal strFundName As String, ByVal strFundNameChi As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateLifeAsiaFundNameOperationCompleted Is Nothing) Then
                Me.UpdateLifeAsiaFundNameOperationCompleted = AddressOf Me.OnUpdateLifeAsiaFundNameOperationCompleted
            End If
            Me.InvokeAsync("UpdateLifeAsiaFundName", New Object() {strFundCode, strFundName, strFundNameChi, strErr}, Me.UpdateLifeAsiaFundNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateLifeAsiaFundNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateLifeAsiaFundNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateLifeAsiaFundNameCompleted(Me, New UpdateLifeAsiaFundNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdateFundName", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateFundName(ByVal strFundCode As String, ByVal strFundName As String, ByVal strFundNameChi As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateFundName", New Object() {strFundCode, strFundName, strFundNameChi, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateFundNameAsync(ByVal strFundCode As String, ByVal strFundName As String, ByVal strFundNameChi As String, ByVal strErr As String)
            Me.UpdateFundNameAsync(strFundCode, strFundName, strFundNameChi, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateFundNameAsync(ByVal strFundCode As String, ByVal strFundName As String, ByVal strFundNameChi As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateFundNameOperationCompleted Is Nothing) Then
                Me.UpdateFundNameOperationCompleted = AddressOf Me.OnUpdateFundNameOperationCompleted
            End If
            Me.InvokeAsync("UpdateFundName", New Object() {strFundCode, strFundName, strFundNameChi, strErr}, Me.UpdateFundNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateFundNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateFundNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateFundNameCompleted(Me, New UpdateFundNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/AddMarkinReq", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddMarkinReq(ByVal strPolicyNo As String, ByVal intTransId As Integer, ByVal strMarkinType As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("AddMarkinReq", New Object() {strPolicyNo, intTransId, strMarkinType, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddMarkinReqAsync(ByVal strPolicyNo As String, ByVal intTransId As Integer, ByVal strMarkinType As String, ByVal strErr As String)
            Me.AddMarkinReqAsync(strPolicyNo, intTransId, strMarkinType, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddMarkinReqAsync(ByVal strPolicyNo As String, ByVal intTransId As Integer, ByVal strMarkinType As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.AddMarkinReqOperationCompleted Is Nothing) Then
                Me.AddMarkinReqOperationCompleted = AddressOf Me.OnAddMarkinReqOperationCompleted
            End If
            Me.InvokeAsync("AddMarkinReq", New Object() {strPolicyNo, intTransId, strMarkinType, strErr}, Me.AddMarkinReqOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddMarkinReqOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddMarkinReqCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddMarkinReqCompleted(Me, New AddMarkinReqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPendingMarkinReqList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPendingMarkinReqList(ByVal strMarkinType As String, ByVal strStatus As String, ByRef dtMarkinReq As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPendingMarkinReqList", New Object() {strMarkinType, strStatus, dtMarkinReq, strErr})
            dtMarkinReq = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPendingMarkinReqListAsync(ByVal strMarkinType As String, ByVal strStatus As String, ByVal dtMarkinReq As System.Data.DataTable, ByVal strErr As String)
            Me.GetPendingMarkinReqListAsync(strMarkinType, strStatus, dtMarkinReq, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPendingMarkinReqListAsync(ByVal strMarkinType As String, ByVal strStatus As String, ByVal dtMarkinReq As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPendingMarkinReqListOperationCompleted Is Nothing) Then
                Me.GetPendingMarkinReqListOperationCompleted = AddressOf Me.OnGetPendingMarkinReqListOperationCompleted
            End If
            Me.InvokeAsync("GetPendingMarkinReqList", New Object() {strMarkinType, strStatus, dtMarkinReq, strErr}, Me.GetPendingMarkinReqListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPendingMarkinReqListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPendingMarkinReqListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPendingMarkinReqListCompleted(Me, New GetPendingMarkinReqListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdateMarkinReqStatus", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMarkinReqStatus(ByVal intMarkinReqId As Integer, ByVal strStatus As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateMarkinReqStatus", New Object() {intMarkinReqId, strStatus, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMarkinReqStatusAsync(ByVal intMarkinReqId As Integer, ByVal strStatus As String, ByVal strErr As String)
            Me.UpdateMarkinReqStatusAsync(intMarkinReqId, strStatus, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMarkinReqStatusAsync(ByVal intMarkinReqId As Integer, ByVal strStatus As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateMarkinReqStatusOperationCompleted Is Nothing) Then
                Me.UpdateMarkinReqStatusOperationCompleted = AddressOf Me.OnUpdateMarkinReqStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateMarkinReqStatus", New Object() {intMarkinReqId, strStatus, strErr}, Me.UpdateMarkinReqStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMarkinReqStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMarkinReqStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMarkinReqStatusCompleted(Me, New UpdateMarkinReqStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SurByAmount", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SurByAmount(ByVal strProductType As String, ByRef IsSurByAmount As Boolean, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SurByAmount", New Object() {strProductType, IsSurByAmount, strErr})
            IsSurByAmount = CType(results(1),Boolean)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SurByAmountAsync(ByVal strProductType As String, ByVal IsSurByAmount As Boolean, ByVal strErr As String)
            Me.SurByAmountAsync(strProductType, IsSurByAmount, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SurByAmountAsync(ByVal strProductType As String, ByVal IsSurByAmount As Boolean, ByVal strErr As String, ByVal userState As Object)
            If (Me.SurByAmountOperationCompleted Is Nothing) Then
                Me.SurByAmountOperationCompleted = AddressOf Me.OnSurByAmountOperationCompleted
            End If
            Me.InvokeAsync("SurByAmount", New Object() {strProductType, IsSurByAmount, strErr}, Me.SurByAmountOperationCompleted, userState)
        End Sub
        
        Private Sub OnSurByAmountOperationCompleted(ByVal arg As Object)
            If (Not (Me.SurByAmountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SurByAmountCompleted(Me, New SurByAmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SurEnableEffDate", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SurEnableEffDate(ByVal strProductType As String, ByRef IsSurEnableEffDate As Boolean, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SurEnableEffDate", New Object() {strProductType, IsSurEnableEffDate, strErr})
            IsSurEnableEffDate = CType(results(1),Boolean)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SurEnableEffDateAsync(ByVal strProductType As String, ByVal IsSurEnableEffDate As Boolean, ByVal strErr As String)
            Me.SurEnableEffDateAsync(strProductType, IsSurEnableEffDate, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SurEnableEffDateAsync(ByVal strProductType As String, ByVal IsSurEnableEffDate As Boolean, ByVal strErr As String, ByVal userState As Object)
            If (Me.SurEnableEffDateOperationCompleted Is Nothing) Then
                Me.SurEnableEffDateOperationCompleted = AddressOf Me.OnSurEnableEffDateOperationCompleted
            End If
            Me.InvokeAsync("SurEnableEffDate", New Object() {strProductType, IsSurEnableEffDate, strErr}, Me.SurEnableEffDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnSurEnableEffDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.SurEnableEffDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SurEnableEffDateCompleted(Me, New SurEnableEffDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetBoosterPlanByBoosterRider", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBoosterPlanByBoosterRider(ByVal strBoosterRider As String, ByRef strBoosterPlan As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetBoosterPlanByBoosterRider", New Object() {strBoosterRider, strBoosterPlan, strErr})
            strBoosterPlan = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBoosterPlanByBoosterRiderAsync(ByVal strBoosterRider As String, ByVal strBoosterPlan As String, ByVal strErr As String)
            Me.GetBoosterPlanByBoosterRiderAsync(strBoosterRider, strBoosterPlan, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBoosterPlanByBoosterRiderAsync(ByVal strBoosterRider As String, ByVal strBoosterPlan As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetBoosterPlanByBoosterRiderOperationCompleted Is Nothing) Then
                Me.GetBoosterPlanByBoosterRiderOperationCompleted = AddressOf Me.OnGetBoosterPlanByBoosterRiderOperationCompleted
            End If
            Me.InvokeAsync("GetBoosterPlanByBoosterRider", New Object() {strBoosterRider, strBoosterPlan, strErr}, Me.GetBoosterPlanByBoosterRiderOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBoosterPlanByBoosterRiderOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBoosterPlanByBoosterRiderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBoosterPlanByBoosterRiderCompleted(Me, New GetBoosterPlanByBoosterRiderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetMarkInRequestTypeList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMarkInRequestTypeList(ByRef dsMarkIn As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetMarkInRequestTypeList", New Object() {dsMarkIn, strErr})
            dsMarkIn = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMarkInRequestTypeListAsync(ByVal dsMarkIn As System.Data.DataSet, ByVal strErr As String)
            Me.GetMarkInRequestTypeListAsync(dsMarkIn, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMarkInRequestTypeListAsync(ByVal dsMarkIn As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetMarkInRequestTypeListOperationCompleted Is Nothing) Then
                Me.GetMarkInRequestTypeListOperationCompleted = AddressOf Me.OnGetMarkInRequestTypeListOperationCompleted
            End If
            Me.InvokeAsync("GetMarkInRequestTypeList", New Object() {dsMarkIn, strErr}, Me.GetMarkInRequestTypeListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMarkInRequestTypeListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMarkInRequestTypeListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMarkInRequestTypeListCompleted(Me, New GetMarkInRequestTypeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetMarkInStatusList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMarkInStatusList(ByRef dsMarkIn As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetMarkInStatusList", New Object() {dsMarkIn, strErr})
            dsMarkIn = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMarkInStatusListAsync(ByVal dsMarkIn As System.Data.DataSet, ByVal strErr As String)
            Me.GetMarkInStatusListAsync(dsMarkIn, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMarkInStatusListAsync(ByVal dsMarkIn As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetMarkInStatusListOperationCompleted Is Nothing) Then
                Me.GetMarkInStatusListOperationCompleted = AddressOf Me.OnGetMarkInStatusListOperationCompleted
            End If
            Me.InvokeAsync("GetMarkInStatusList", New Object() {dsMarkIn, strErr}, Me.GetMarkInStatusListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMarkInStatusListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMarkInStatusListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMarkInStatusListCompleted(Me, New GetMarkInStatusListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetMarkInInfo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMarkInInfo(ByRef dsMarkIn As System.Data.DataSet, ByVal dteMarkInDateFrom As Date, ByVal dteMarkInDateTo As Date, ByVal aryStatusCode() As String, ByRef strErr As String, ByVal strUserId As String, ByVal strRequestType As String) As Boolean
            Dim results() As Object = Me.Invoke("GetMarkInInfo", New Object() {dsMarkIn, dteMarkInDateFrom, dteMarkInDateTo, aryStatusCode, strErr, strUserId, strRequestType})
            dsMarkIn = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMarkInInfoAsync(ByVal dsMarkIn As System.Data.DataSet, ByVal dteMarkInDateFrom As Date, ByVal dteMarkInDateTo As Date, ByVal aryStatusCode() As String, ByVal strErr As String, ByVal strUserId As String, ByVal strRequestType As String)
            Me.GetMarkInInfoAsync(dsMarkIn, dteMarkInDateFrom, dteMarkInDateTo, aryStatusCode, strErr, strUserId, strRequestType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMarkInInfoAsync(ByVal dsMarkIn As System.Data.DataSet, ByVal dteMarkInDateFrom As Date, ByVal dteMarkInDateTo As Date, ByVal aryStatusCode() As String, ByVal strErr As String, ByVal strUserId As String, ByVal strRequestType As String, ByVal userState As Object)
            If (Me.GetMarkInInfoOperationCompleted Is Nothing) Then
                Me.GetMarkInInfoOperationCompleted = AddressOf Me.OnGetMarkInInfoOperationCompleted
            End If
            Me.InvokeAsync("GetMarkInInfo", New Object() {dsMarkIn, dteMarkInDateFrom, dteMarkInDateTo, aryStatusCode, strErr, strUserId, strRequestType}, Me.GetMarkInInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMarkInInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMarkInInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMarkInInfoCompleted(Me, New GetMarkInInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCompanyName", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCompanyName(ByVal strCompanyCd As String, ByRef strCompanyName As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCompanyName", New Object() {strCompanyCd, strCompanyName, strErr})
            strCompanyName = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCompanyNameAsync(ByVal strCompanyCd As String, ByVal strCompanyName As String, ByVal strErr As String)
            Me.GetCompanyNameAsync(strCompanyCd, strCompanyName, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCompanyNameAsync(ByVal strCompanyCd As String, ByVal strCompanyName As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCompanyNameOperationCompleted Is Nothing) Then
                Me.GetCompanyNameOperationCompleted = AddressOf Me.OnGetCompanyNameOperationCompleted
            End If
            Me.InvokeAsync("GetCompanyName", New Object() {strCompanyCd, strCompanyName, strErr}, Me.GetCompanyNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCompanyNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCompanyNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCompanyNameCompleted(Me, New GetCompanyNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPolicyInfoList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyInfoList(ByVal dsPolicyNoList As System.Data.DataSet, ByRef dsPolicyInfoList As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPolicyInfoList", New Object() {dsPolicyNoList, dsPolicyInfoList, strErr})
            dsPolicyInfoList = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyInfoListAsync(ByVal dsPolicyNoList As System.Data.DataSet, ByVal dsPolicyInfoList As System.Data.DataSet, ByVal strErr As String)
            Me.GetPolicyInfoListAsync(dsPolicyNoList, dsPolicyInfoList, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyInfoListAsync(ByVal dsPolicyNoList As System.Data.DataSet, ByVal dsPolicyInfoList As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPolicyInfoListOperationCompleted Is Nothing) Then
                Me.GetPolicyInfoListOperationCompleted = AddressOf Me.OnGetPolicyInfoListOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyInfoList", New Object() {dsPolicyNoList, dsPolicyInfoList, strErr}, Me.GetPolicyInfoListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyInfoListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyInfoListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyInfoListCompleted(Me, New GetPolicyInfoListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ResumeCapsilTrans", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ResumeCapsilTrans(ByVal strTransType As String, ByVal lngTransId As Long, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ResumeCapsilTrans", New Object() {strTransType, lngTransId, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ResumeCapsilTransAsync(ByVal strTransType As String, ByVal lngTransId As Long, ByVal strErr As String)
            Me.ResumeCapsilTransAsync(strTransType, lngTransId, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ResumeCapsilTransAsync(ByVal strTransType As String, ByVal lngTransId As Long, ByVal strErr As String, ByVal userState As Object)
            If (Me.ResumeCapsilTransOperationCompleted Is Nothing) Then
                Me.ResumeCapsilTransOperationCompleted = AddressOf Me.OnResumeCapsilTransOperationCompleted
            End If
            Me.InvokeAsync("ResumeCapsilTrans", New Object() {strTransType, lngTransId, strErr}, Me.ResumeCapsilTransOperationCompleted, userState)
        End Sub
        
        Private Sub OnResumeCapsilTransOperationCompleted(ByVal arg As Object)
            If (Not (Me.ResumeCapsilTransCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ResumeCapsilTransCompleted(Me, New ResumeCapsilTransCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getPaymentSource", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPaymentSource(ByVal strPolicyNo As String, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("getPaymentSource", New Object() {strPolicyNo, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPaymentSourceAsync(ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.getPaymentSourceAsync(strPolicyNo, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPaymentSourceAsync(ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.getPaymentSourceOperationCompleted Is Nothing) Then
                Me.getPaymentSourceOperationCompleted = AddressOf Me.OngetPaymentSourceOperationCompleted
            End If
            Me.InvokeAsync("getPaymentSource", New Object() {strPolicyNo, ds, strErr}, Me.getPaymentSourceOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPaymentSourceOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPaymentSourceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPaymentSourceCompleted(Me, New getPaymentSourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getIsExRateExist", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getIsExRateExist(ByVal strFrCurr As String, ByVal strToCurr As String, ByVal Ex_Rate As Double, ByRef Is_HasExRate As Boolean, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("getIsExRateExist", New Object() {strFrCurr, strToCurr, Ex_Rate, Is_HasExRate, strErr})
            Is_HasExRate = CType(results(1),Boolean)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getIsExRateExistAsync(ByVal strFrCurr As String, ByVal strToCurr As String, ByVal Ex_Rate As Double, ByVal Is_HasExRate As Boolean, ByVal strErr As String)
            Me.getIsExRateExistAsync(strFrCurr, strToCurr, Ex_Rate, Is_HasExRate, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getIsExRateExistAsync(ByVal strFrCurr As String, ByVal strToCurr As String, ByVal Ex_Rate As Double, ByVal Is_HasExRate As Boolean, ByVal strErr As String, ByVal userState As Object)
            If (Me.getIsExRateExistOperationCompleted Is Nothing) Then
                Me.getIsExRateExistOperationCompleted = AddressOf Me.OngetIsExRateExistOperationCompleted
            End If
            Me.InvokeAsync("getIsExRateExist", New Object() {strFrCurr, strToCurr, Ex_Rate, Is_HasExRate, strErr}, Me.getIsExRateExistOperationCompleted, userState)
        End Sub
        
        Private Sub OngetIsExRateExistOperationCompleted(ByVal arg As Object)
            If (Not (Me.getIsExRateExistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getIsExRateExistCompleted(Me, New getIsExRateExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdateMoneyAdjRec", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMoneyAdjRec(ByVal strActType As String, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateMoneyAdjRec", New Object() {strActType, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMoneyAdjRecAsync(ByVal strActType As String, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.UpdateMoneyAdjRecAsync(strActType, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMoneyAdjRecAsync(ByVal strActType As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateMoneyAdjRecOperationCompleted Is Nothing) Then
                Me.UpdateMoneyAdjRecOperationCompleted = AddressOf Me.OnUpdateMoneyAdjRecOperationCompleted
            End If
            Me.InvokeAsync("UpdateMoneyAdjRec", New Object() {strActType, ds, strErr}, Me.UpdateMoneyAdjRecOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMoneyAdjRecOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMoneyAdjRecCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMoneyAdjRecCompleted(Me, New UpdateMoneyAdjRecCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetAcctMapping", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAcctMapping(ByVal strAcctCate As String, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAcctMapping", New Object() {strAcctCate, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAcctMappingAsync(ByVal strAcctCate As String, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetAcctMappingAsync(strAcctCate, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAcctMappingAsync(ByVal strAcctCate As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetAcctMappingOperationCompleted Is Nothing) Then
                Me.GetAcctMappingOperationCompleted = AddressOf Me.OnGetAcctMappingOperationCompleted
            End If
            Me.InvokeAsync("GetAcctMapping", New Object() {strAcctCate, ds, strErr}, Me.GetAcctMappingOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAcctMappingOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAcctMappingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAcctMappingCompleted(Me, New GetAcctMappingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetMoneyAdjEnquire", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMoneyAdjEnquire(ByVal strPolicyNo As String, ByVal dtp_frdate As Date, ByVal dtp_todate As Date, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetMoneyAdjEnquire", New Object() {strPolicyNo, dtp_frdate, dtp_todate, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMoneyAdjEnquireAsync(ByVal strPolicyNo As String, ByVal dtp_frdate As Date, ByVal dtp_todate As Date, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetMoneyAdjEnquireAsync(strPolicyNo, dtp_frdate, dtp_todate, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMoneyAdjEnquireAsync(ByVal strPolicyNo As String, ByVal dtp_frdate As Date, ByVal dtp_todate As Date, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetMoneyAdjEnquireOperationCompleted Is Nothing) Then
                Me.GetMoneyAdjEnquireOperationCompleted = AddressOf Me.OnGetMoneyAdjEnquireOperationCompleted
            End If
            Me.InvokeAsync("GetMoneyAdjEnquire", New Object() {strPolicyNo, dtp_frdate, dtp_todate, ds, strErr}, Me.GetMoneyAdjEnquireOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMoneyAdjEnquireOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMoneyAdjEnquireCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMoneyAdjEnquireCompleted(Me, New GetMoneyAdjEnquireCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetUWTransHist", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUWTransHist(ByVal PolicyNo As String, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUWTransHist", New Object() {PolicyNo, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUWTransHistAsync(ByVal PolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetUWTransHistAsync(PolicyNo, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUWTransHistAsync(ByVal PolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetUWTransHistOperationCompleted Is Nothing) Then
                Me.GetUWTransHistOperationCompleted = AddressOf Me.OnGetUWTransHistOperationCompleted
            End If
            Me.InvokeAsync("GetUWTransHist", New Object() {PolicyNo, ds, strErr}, Me.GetUWTransHistOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUWTransHistOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUWTransHistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUWTransHistCompleted(Me, New GetUWTransHistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetUWTransType", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUWTransType(ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUWTransType", New Object() {ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUWTransTypeAsync(ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetUWTransTypeAsync(ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUWTransTypeAsync(ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetUWTransTypeOperationCompleted Is Nothing) Then
                Me.GetUWTransTypeOperationCompleted = AddressOf Me.OnGetUWTransTypeOperationCompleted
            End If
            Me.InvokeAsync("GetUWTransType", New Object() {ds, strErr}, Me.GetUWTransTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUWTransTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUWTransTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUWTransTypeCompleted(Me, New GetUWTransTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetUWRider", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUWRider(ByVal PolicyNo As String, ByVal TransId As Integer, ByRef dsCov As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUWRider", New Object() {PolicyNo, TransId, dsCov, strErr})
            dsCov = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUWRiderAsync(ByVal PolicyNo As String, ByVal TransId As Integer, ByVal dsCov As System.Data.DataSet, ByVal strErr As String)
            Me.GetUWRiderAsync(PolicyNo, TransId, dsCov, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUWRiderAsync(ByVal PolicyNo As String, ByVal TransId As Integer, ByVal dsCov As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetUWRiderOperationCompleted Is Nothing) Then
                Me.GetUWRiderOperationCompleted = AddressOf Me.OnGetUWRiderOperationCompleted
            End If
            Me.InvokeAsync("GetUWRider", New Object() {PolicyNo, TransId, dsCov, strErr}, Me.GetUWRiderOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUWRiderOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUWRiderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUWRiderCompleted(Me, New GetUWRiderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetUWCapsilRider", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUWCapsilRider(ByVal RiderType As String, ByVal PolicyCurr As String, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUWCapsilRider", New Object() {RiderType, PolicyCurr, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUWCapsilRiderAsync(ByVal RiderType As String, ByVal PolicyCurr As String, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetUWCapsilRiderAsync(RiderType, PolicyCurr, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUWCapsilRiderAsync(ByVal RiderType As String, ByVal PolicyCurr As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetUWCapsilRiderOperationCompleted Is Nothing) Then
                Me.GetUWCapsilRiderOperationCompleted = AddressOf Me.OnGetUWCapsilRiderOperationCompleted
            End If
            Me.InvokeAsync("GetUWCapsilRider", New Object() {RiderType, PolicyCurr, ds, strErr}, Me.GetUWCapsilRiderOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUWCapsilRiderOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUWCapsilRiderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUWCapsilRiderCompleted(Me, New GetUWCapsilRiderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetRiderStatusDesc", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRiderStatusDesc(ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetRiderStatusDesc", New Object() {ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRiderStatusDescAsync(ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetRiderStatusDescAsync(ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRiderStatusDescAsync(ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetRiderStatusDescOperationCompleted Is Nothing) Then
                Me.GetRiderStatusDescOperationCompleted = AddressOf Me.OnGetRiderStatusDescOperationCompleted
            End If
            Me.InvokeAsync("GetRiderStatusDesc", New Object() {ds, strErr}, Me.GetRiderStatusDescOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRiderStatusDescOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRiderStatusDescCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRiderStatusDescCompleted(Me, New GetRiderStatusDescCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SaveUWTransHist", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveUWTransHist(ByRef dsTrans As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveUWTransHist", New Object() {dsTrans, strErr})
            dsTrans = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveUWTransHistAsync(ByVal dsTrans As System.Data.DataSet, ByVal strErr As String)
            Me.SaveUWTransHistAsync(dsTrans, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveUWTransHistAsync(ByVal dsTrans As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.SaveUWTransHistOperationCompleted Is Nothing) Then
                Me.SaveUWTransHistOperationCompleted = AddressOf Me.OnSaveUWTransHistOperationCompleted
            End If
            Me.InvokeAsync("SaveUWTransHist", New Object() {dsTrans, strErr}, Me.SaveUWTransHistOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveUWTransHistOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveUWTransHistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveUWTransHistCompleted(Me, New SaveUWTransHistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetUWInfo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUWInfo(ByVal TransId As Integer, ByVal strPolicyNo As String, ByVal InsuredId As String, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUWInfo", New Object() {TransId, strPolicyNo, InsuredId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUWInfoAsync(ByVal TransId As Integer, ByVal strPolicyNo As String, ByVal InsuredId As String, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetUWInfoAsync(TransId, strPolicyNo, InsuredId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUWInfoAsync(ByVal TransId As Integer, ByVal strPolicyNo As String, ByVal InsuredId As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetUWInfoOperationCompleted Is Nothing) Then
                Me.GetUWInfoOperationCompleted = AddressOf Me.OnGetUWInfoOperationCompleted
            End If
            Me.InvokeAsync("GetUWInfo", New Object() {TransId, strPolicyNo, InsuredId, ds, strErr}, Me.GetUWInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUWInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUWInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUWInfoCompleted(Me, New GetUWInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetUWInfoForCalc", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUWInfoForCalc(ByVal TransId As Integer, ByVal strPolicyNo As String, ByVal InsuredId As String, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUWInfoForCalc", New Object() {TransId, strPolicyNo, InsuredId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUWInfoForCalcAsync(ByVal TransId As Integer, ByVal strPolicyNo As String, ByVal InsuredId As String, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetUWInfoForCalcAsync(TransId, strPolicyNo, InsuredId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUWInfoForCalcAsync(ByVal TransId As Integer, ByVal strPolicyNo As String, ByVal InsuredId As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetUWInfoForCalcOperationCompleted Is Nothing) Then
                Me.GetUWInfoForCalcOperationCompleted = AddressOf Me.OnGetUWInfoForCalcOperationCompleted
            End If
            Me.InvokeAsync("GetUWInfoForCalc", New Object() {TransId, strPolicyNo, InsuredId, ds, strErr}, Me.GetUWInfoForCalcOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUWInfoForCalcOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUWInfoForCalcCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUWInfoForCalcCompleted(Me, New GetUWInfoForCalcCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SaveUWInfo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveUWInfo(ByVal transId As Integer, ByVal strPolicyNo As String, ByVal InsuredId As Integer, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveUWInfo", New Object() {transId, strPolicyNo, InsuredId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveUWInfoAsync(ByVal transId As Integer, ByVal strPolicyNo As String, ByVal InsuredId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.SaveUWInfoAsync(transId, strPolicyNo, InsuredId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveUWInfoAsync(ByVal transId As Integer, ByVal strPolicyNo As String, ByVal InsuredId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.SaveUWInfoOperationCompleted Is Nothing) Then
                Me.SaveUWInfoOperationCompleted = AddressOf Me.OnSaveUWInfoOperationCompleted
            End If
            Me.InvokeAsync("SaveUWInfo", New Object() {transId, strPolicyNo, InsuredId, ds, strErr}, Me.SaveUWInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveUWInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveUWInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveUWInfoCompleted(Me, New SaveUWInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetUWSysInfo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUWSysInfo(ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUWSysInfo", New Object() {ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUWSysInfoAsync(ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetUWSysInfoAsync(ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUWSysInfoAsync(ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetUWSysInfoOperationCompleted Is Nothing) Then
                Me.GetUWSysInfoOperationCompleted = AddressOf Me.OnGetUWSysInfoOperationCompleted
            End If
            Me.InvokeAsync("GetUWSysInfo", New Object() {ds, strError}, Me.GetUWSysInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUWSysInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUWSysInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUWSysInfoCompleted(Me, New GetUWSysInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetUwWorksheetPrtInfo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUwWorksheetPrtInfo(ByVal TransId As Integer, ByVal strPolicyNo As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUwWorksheetPrtInfo", New Object() {TransId, strPolicyNo, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUwWorksheetPrtInfoAsync(ByVal TransId As Integer, ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetUwWorksheetPrtInfoAsync(TransId, strPolicyNo, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUwWorksheetPrtInfoAsync(ByVal TransId As Integer, ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetUwWorksheetPrtInfoOperationCompleted Is Nothing) Then
                Me.GetUwWorksheetPrtInfoOperationCompleted = AddressOf Me.OnGetUwWorksheetPrtInfoOperationCompleted
            End If
            Me.InvokeAsync("GetUwWorksheetPrtInfo", New Object() {TransId, strPolicyNo, ds, strError}, Me.GetUwWorksheetPrtInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUwWorksheetPrtInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUwWorksheetPrtInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUwWorksheetPrtInfoCompleted(Me, New GetUwWorksheetPrtInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLoadingExclusionPrtInfo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLoadingExclusionPrtInfo(ByVal transId As Integer, ByVal strPolicyNo As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLoadingExclusionPrtInfo", New Object() {transId, strPolicyNo, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLoadingExclusionPrtInfoAsync(ByVal transId As Integer, ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetLoadingExclusionPrtInfoAsync(transId, strPolicyNo, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLoadingExclusionPrtInfoAsync(ByVal transId As Integer, ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetLoadingExclusionPrtInfoOperationCompleted Is Nothing) Then
                Me.GetLoadingExclusionPrtInfoOperationCompleted = AddressOf Me.OnGetLoadingExclusionPrtInfoOperationCompleted
            End If
            Me.InvokeAsync("GetLoadingExclusionPrtInfo", New Object() {transId, strPolicyNo, ds, strError}, Me.GetLoadingExclusionPrtInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLoadingExclusionPrtInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLoadingExclusionPrtInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLoadingExclusionPrtInfoCompleted(Me, New GetLoadingExclusionPrtInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetUWMessage", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUWMessage(ByVal TransId As Integer, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUWMessage", New Object() {TransId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUWMessageAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetUWMessageAsync(TransId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUWMessageAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetUWMessageOperationCompleted Is Nothing) Then
                Me.GetUWMessageOperationCompleted = AddressOf Me.OnGetUWMessageOperationCompleted
            End If
            Me.InvokeAsync("GetUWMessage", New Object() {TransId, ds, strErr}, Me.GetUWMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUWMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUWMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUWMessageCompleted(Me, New GetUWMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SaveUWMessage", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveUWMessage(ByVal TransId As Integer, ByVal PolicyNo As String, ByVal Message As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveUWMessage", New Object() {TransId, PolicyNo, Message, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveUWMessageAsync(ByVal TransId As Integer, ByVal PolicyNo As String, ByVal Message As String, ByVal strErr As String)
            Me.SaveUWMessageAsync(TransId, PolicyNo, Message, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveUWMessageAsync(ByVal TransId As Integer, ByVal PolicyNo As String, ByVal Message As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.SaveUWMessageOperationCompleted Is Nothing) Then
                Me.SaveUWMessageOperationCompleted = AddressOf Me.OnSaveUWMessageOperationCompleted
            End If
            Me.InvokeAsync("SaveUWMessage", New Object() {TransId, PolicyNo, Message, strErr}, Me.SaveUWMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveUWMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveUWMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveUWMessageCompleted(Me, New SaveUWMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPoilcyStatus", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPoilcyStatus(ByVal strPolicyNo As String, ByRef strErr As String) As String
            Dim results() As Object = Me.Invoke("GetPoilcyStatus", New Object() {strPolicyNo, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPoilcyStatusAsync(ByVal strPolicyNo As String, ByVal strErr As String)
            Me.GetPoilcyStatusAsync(strPolicyNo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPoilcyStatusAsync(ByVal strPolicyNo As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPoilcyStatusOperationCompleted Is Nothing) Then
                Me.GetPoilcyStatusOperationCompleted = AddressOf Me.OnGetPoilcyStatusOperationCompleted
            End If
            Me.InvokeAsync("GetPoilcyStatus", New Object() {strPolicyNo, strErr}, Me.GetPoilcyStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPoilcyStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPoilcyStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPoilcyStatusCompleted(Me, New GetPoilcyStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransQueSummaryVal", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransQueSummaryVal(ByVal TransId As Integer, ByRef dsData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransQueSummaryVal", New Object() {TransId, dsData, strErr})
            dsData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransQueSummaryValAsync(ByVal TransId As Integer, ByVal dsData As System.Data.DataSet, ByVal strErr As String)
            Me.GetTransQueSummaryValAsync(TransId, dsData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransQueSummaryValAsync(ByVal TransId As Integer, ByVal dsData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransQueSummaryValOperationCompleted Is Nothing) Then
                Me.GetTransQueSummaryValOperationCompleted = AddressOf Me.OnGetTransQueSummaryValOperationCompleted
            End If
            Me.InvokeAsync("GetTransQueSummaryVal", New Object() {TransId, dsData, strErr}, Me.GetTransQueSummaryValOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransQueSummaryValOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransQueSummaryValCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransQueSummaryValCompleted(Me, New GetTransQueSummaryValCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransSummaryBouncedCheque", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransSummaryBouncedCheque(ByVal TransId As Integer, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransSummaryBouncedCheque", New Object() {TransId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryBouncedChequeAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetTransSummaryBouncedChequeAsync(TransId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryBouncedChequeAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransSummaryBouncedChequeOperationCompleted Is Nothing) Then
                Me.GetTransSummaryBouncedChequeOperationCompleted = AddressOf Me.OnGetTransSummaryBouncedChequeOperationCompleted
            End If
            Me.InvokeAsync("GetTransSummaryBouncedCheque", New Object() {TransId, ds, strErr}, Me.GetTransSummaryBouncedChequeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransSummaryBouncedChequeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransSummaryBouncedChequeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransSummaryBouncedChequeCompleted(Me, New GetTransSummaryBouncedChequeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransSummaryClientRole", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransSummaryClientRole(ByVal TransId As Integer, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransSummaryClientRole", New Object() {TransId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryClientRoleAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetTransSummaryClientRoleAsync(TransId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryClientRoleAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransSummaryClientRoleOperationCompleted Is Nothing) Then
                Me.GetTransSummaryClientRoleOperationCompleted = AddressOf Me.OnGetTransSummaryClientRoleOperationCompleted
            End If
            Me.InvokeAsync("GetTransSummaryClientRole", New Object() {TransId, ds, strErr}, Me.GetTransSummaryClientRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransSummaryClientRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransSummaryClientRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransSummaryClientRoleCompleted(Me, New GetTransSummaryClientRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransQueSummaryRIHist", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransQueSummaryRIHist(ByVal TransId As Integer, ByRef dsData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransQueSummaryRIHist", New Object() {TransId, dsData, strErr})
            dsData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransQueSummaryRIHistAsync(ByVal TransId As Integer, ByVal dsData As System.Data.DataSet, ByVal strErr As String)
            Me.GetTransQueSummaryRIHistAsync(TransId, dsData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransQueSummaryRIHistAsync(ByVal TransId As Integer, ByVal dsData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransQueSummaryRIHistOperationCompleted Is Nothing) Then
                Me.GetTransQueSummaryRIHistOperationCompleted = AddressOf Me.OnGetTransQueSummaryRIHistOperationCompleted
            End If
            Me.InvokeAsync("GetTransQueSummaryRIHist", New Object() {TransId, dsData, strErr}, Me.GetTransQueSummaryRIHistOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransQueSummaryRIHistOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransQueSummaryRIHistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransQueSummaryRIHistCompleted(Me, New GetTransQueSummaryRIHistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransSummaryPolicyAddressLog", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransSummaryPolicyAddressLog(ByVal TransId As Integer, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransSummaryPolicyAddressLog", New Object() {TransId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryPolicyAddressLogAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetTransSummaryPolicyAddressLogAsync(TransId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryPolicyAddressLogAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransSummaryPolicyAddressLogOperationCompleted Is Nothing) Then
                Me.GetTransSummaryPolicyAddressLogOperationCompleted = AddressOf Me.OnGetTransSummaryPolicyAddressLogOperationCompleted
            End If
            Me.InvokeAsync("GetTransSummaryPolicyAddressLog", New Object() {TransId, ds, strErr}, Me.GetTransSummaryPolicyAddressLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransSummaryPolicyAddressLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransSummaryPolicyAddressLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransSummaryPolicyAddressLogCompleted(Me, New GetTransSummaryPolicyAddressLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransSummaryChangeServiceAgent", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransSummaryChangeServiceAgent(ByVal TransId As Integer, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransSummaryChangeServiceAgent", New Object() {TransId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryChangeServiceAgentAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetTransSummaryChangeServiceAgentAsync(TransId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryChangeServiceAgentAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransSummaryChangeServiceAgentOperationCompleted Is Nothing) Then
                Me.GetTransSummaryChangeServiceAgentOperationCompleted = AddressOf Me.OnGetTransSummaryChangeServiceAgentOperationCompleted
            End If
            Me.InvokeAsync("GetTransSummaryChangeServiceAgent", New Object() {TransId, ds, strErr}, Me.GetTransSummaryChangeServiceAgentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransSummaryChangeServiceAgentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransSummaryChangeServiceAgentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransSummaryChangeServiceAgentCompleted(Me, New GetTransSummaryChangeServiceAgentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransSummaryChangeDOB", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransSummaryChangeDOB(ByVal TransId As Integer, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransSummaryChangeDOB", New Object() {TransId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryChangeDOBAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetTransSummaryChangeDOBAsync(TransId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryChangeDOBAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransSummaryChangeDOBOperationCompleted Is Nothing) Then
                Me.GetTransSummaryChangeDOBOperationCompleted = AddressOf Me.OnGetTransSummaryChangeDOBOperationCompleted
            End If
            Me.InvokeAsync("GetTransSummaryChangeDOB", New Object() {TransId, ds, strErr}, Me.GetTransSummaryChangeDOBOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransSummaryChangeDOBOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransSummaryChangeDOBCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransSummaryChangeDOBCompleted(Me, New GetTransSummaryChangeDOBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransSummaryPremHoliday", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransSummaryPremHoliday(ByVal TransId As Integer, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransSummaryPremHoliday", New Object() {TransId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryPremHolidayAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetTransSummaryPremHolidayAsync(TransId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryPremHolidayAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransSummaryPremHolidayOperationCompleted Is Nothing) Then
                Me.GetTransSummaryPremHolidayOperationCompleted = AddressOf Me.OnGetTransSummaryPremHolidayOperationCompleted
            End If
            Me.InvokeAsync("GetTransSummaryPremHoliday", New Object() {TransId, ds, strErr}, Me.GetTransSummaryPremHolidayOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransSummaryPremHolidayOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransSummaryPremHolidayCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransSummaryPremHolidayCompleted(Me, New GetTransSummaryPremHolidayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransSummaryCovHist", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransSummaryCovHist(ByVal TransId As Integer, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransSummaryCovHist", New Object() {TransId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryCovHistAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetTransSummaryCovHistAsync(TransId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryCovHistAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransSummaryCovHistOperationCompleted Is Nothing) Then
                Me.GetTransSummaryCovHistOperationCompleted = AddressOf Me.OnGetTransSummaryCovHistOperationCompleted
            End If
            Me.InvokeAsync("GetTransSummaryCovHist", New Object() {TransId, ds, strErr}, Me.GetTransSummaryCovHistOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransSummaryCovHistOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransSummaryCovHistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransSummaryCovHistCompleted(Me, New GetTransSummaryCovHistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransSummaryRPU", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransSummaryRPU(ByVal TransId As Integer, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransSummaryRPU", New Object() {TransId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryRPUAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetTransSummaryRPUAsync(TransId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryRPUAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransSummaryRPUOperationCompleted Is Nothing) Then
                Me.GetTransSummaryRPUOperationCompleted = AddressOf Me.OnGetTransSummaryRPUOperationCompleted
            End If
            Me.InvokeAsync("GetTransSummaryRPU", New Object() {TransId, ds, strErr}, Me.GetTransSummaryRPUOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransSummaryRPUOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransSummaryRPUCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransSummaryRPUCompleted(Me, New GetTransSummaryRPUCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransRemarkType", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransRemarkType(ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransRemarkType", New Object() {ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransRemarkTypeAsync(ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetTransRemarkTypeAsync(ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransRemarkTypeAsync(ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransRemarkTypeOperationCompleted Is Nothing) Then
                Me.GetTransRemarkTypeOperationCompleted = AddressOf Me.OnGetTransRemarkTypeOperationCompleted
            End If
            Me.InvokeAsync("GetTransRemarkType", New Object() {ds, strErr}, Me.GetTransRemarkTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransRemarkTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransRemarkTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransRemarkTypeCompleted(Me, New GetTransRemarkTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransRemark", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransRemark(ByVal transId As Decimal, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransRemark", New Object() {transId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransRemarkAsync(ByVal transId As Decimal, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetTransRemarkAsync(transId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransRemarkAsync(ByVal transId As Decimal, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransRemarkOperationCompleted Is Nothing) Then
                Me.GetTransRemarkOperationCompleted = AddressOf Me.OnGetTransRemarkOperationCompleted
            End If
            Me.InvokeAsync("GetTransRemark", New Object() {transId, ds, strErr}, Me.GetTransRemarkOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransRemarkOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransRemarkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransRemarkCompleted(Me, New GetTransRemarkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SaveTransRemark", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveTransRemark(ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveTransRemark", New Object() {ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveTransRemarkAsync(ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.SaveTransRemarkAsync(ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveTransRemarkAsync(ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.SaveTransRemarkOperationCompleted Is Nothing) Then
                Me.SaveTransRemarkOperationCompleted = AddressOf Me.OnSaveTransRemarkOperationCompleted
            End If
            Me.InvokeAsync("SaveTransRemark", New Object() {ds, strErr}, Me.SaveTransRemarkOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveTransRemarkOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveTransRemarkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveTransRemarkCompleted(Me, New SaveTransRemarkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransSummaryPOH", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransSummaryPOH(ByVal TransId As Integer, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransSummaryPOH", New Object() {TransId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryPOHAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetTransSummaryPOHAsync(TransId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryPOHAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransSummaryPOHOperationCompleted Is Nothing) Then
                Me.GetTransSummaryPOHOperationCompleted = AddressOf Me.OnGetTransSummaryPOHOperationCompleted
            End If
            Me.InvokeAsync("GetTransSummaryPOH", New Object() {TransId, ds, strErr}, Me.GetTransSummaryPOHOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransSummaryPOHOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransSummaryPOHCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransSummaryPOHCompleted(Me, New GetTransSummaryPOHCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransSummaryAddBooster", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransSummaryAddBooster(ByVal TransId As Integer, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransSummaryAddBooster", New Object() {TransId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryAddBoosterAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetTransSummaryAddBoosterAsync(TransId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryAddBoosterAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransSummaryAddBoosterOperationCompleted Is Nothing) Then
                Me.GetTransSummaryAddBoosterOperationCompleted = AddressOf Me.OnGetTransSummaryAddBoosterOperationCompleted
            End If
            Me.InvokeAsync("GetTransSummaryAddBooster", New Object() {TransId, ds, strErr}, Me.GetTransSummaryAddBoosterOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransSummaryAddBoosterOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransSummaryAddBoosterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransSummaryAddBoosterCompleted(Me, New GetTransSummaryAddBoosterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransSummaryFundAllo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransSummaryFundAllo(ByVal TransId As Integer, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransSummaryFundAllo", New Object() {TransId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryFundAlloAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetTransSummaryFundAlloAsync(TransId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryFundAlloAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransSummaryFundAlloOperationCompleted Is Nothing) Then
                Me.GetTransSummaryFundAlloOperationCompleted = AddressOf Me.OnGetTransSummaryFundAlloOperationCompleted
            End If
            Me.InvokeAsync("GetTransSummaryFundAllo", New Object() {TransId, ds, strErr}, Me.GetTransSummaryFundAlloOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransSummaryFundAlloOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransSummaryFundAlloCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransSummaryFundAlloCompleted(Me, New GetTransSummaryFundAlloCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransSummaryChgCurr", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransSummaryChgCurr(ByVal TransId As Integer, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransSummaryChgCurr", New Object() {TransId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryChgCurrAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetTransSummaryChgCurrAsync(TransId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryChgCurrAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransSummaryChgCurrOperationCompleted Is Nothing) Then
                Me.GetTransSummaryChgCurrOperationCompleted = AddressOf Me.OnGetTransSummaryChgCurrOperationCompleted
            End If
            Me.InvokeAsync("GetTransSummaryChgCurr", New Object() {TransId, ds, strErr}, Me.GetTransSummaryChgCurrOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransSummaryChgCurrOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransSummaryChgCurrCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransSummaryChgCurrCompleted(Me, New GetTransSummaryChgCurrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransSummary", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransSummary(ByVal TransId As Integer, ByVal TableName As String, ByVal IdName As String, ByVal dbName As String, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransSummary", New Object() {TransId, TableName, IdName, dbName, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryAsync(ByVal TransId As Integer, ByVal TableName As String, ByVal IdName As String, ByVal dbName As String, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetTransSummaryAsync(TransId, TableName, IdName, dbName, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryAsync(ByVal TransId As Integer, ByVal TableName As String, ByVal IdName As String, ByVal dbName As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransSummaryOperationCompleted Is Nothing) Then
                Me.GetTransSummaryOperationCompleted = AddressOf Me.OnGetTransSummaryOperationCompleted
            End If
            Me.InvokeAsync("GetTransSummary", New Object() {TransId, TableName, IdName, dbName, ds, strErr}, Me.GetTransSummaryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransSummaryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransSummaryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransSummaryCompleted(Me, New GetTransSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransSummaryLAS", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransSummaryLAS(ByVal TransId As Integer, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransSummaryLAS", New Object() {TransId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryLASAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetTransSummaryLASAsync(TransId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransSummaryLASAsync(ByVal TransId As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransSummaryLASOperationCompleted Is Nothing) Then
                Me.GetTransSummaryLASOperationCompleted = AddressOf Me.OnGetTransSummaryLASOperationCompleted
            End If
            Me.InvokeAsync("GetTransSummaryLAS", New Object() {TransId, ds, strErr}, Me.GetTransSummaryLASOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransSummaryLASOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransSummaryLASCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransSummaryLASCompleted(Me, New GetTransSummaryLASCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetAutoMaturityRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAutoMaturityRecord(ByVal transId As Decimal, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAutoMaturityRecord", New Object() {transId, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAutoMaturityRecordAsync(ByVal transId As Decimal, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetAutoMaturityRecordAsync(transId, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAutoMaturityRecordAsync(ByVal transId As Decimal, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetAutoMaturityRecordOperationCompleted Is Nothing) Then
                Me.GetAutoMaturityRecordOperationCompleted = AddressOf Me.OnGetAutoMaturityRecordOperationCompleted
            End If
            Me.InvokeAsync("GetAutoMaturityRecord", New Object() {transId, ds, strErr}, Me.GetAutoMaturityRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAutoMaturityRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAutoMaturityRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAutoMaturityRecordCompleted(Me, New GetAutoMaturityRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPolicyNote", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyNote(ByVal strWhere As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByRef data() As Byte, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPolicyNote", New Object() {strWhere, data, strErr})
            data = CType(results(1),Byte())
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyNoteAsync(ByVal strWhere As String, ByVal data() As Byte, ByVal strErr As String)
            Me.GetPolicyNoteAsync(strWhere, data, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyNoteAsync(ByVal strWhere As String, ByVal data() As Byte, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPolicyNoteOperationCompleted Is Nothing) Then
                Me.GetPolicyNoteOperationCompleted = AddressOf Me.OnGetPolicyNoteOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyNote", New Object() {strWhere, data, strErr}, Me.GetPolicyNoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyNoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyNoteCompleted(Me, New GetPolicyNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPolicyNoteByPolicy", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyNoteByPolicy(ByVal strPolicyNo As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByRef data() As Byte, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPolicyNoteByPolicy", New Object() {strPolicyNo, data, strErr})
            data = CType(results(1),Byte())
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyNoteByPolicyAsync(ByVal strPolicyNo As String, ByVal data() As Byte, ByVal strErr As String)
            Me.GetPolicyNoteByPolicyAsync(strPolicyNo, data, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyNoteByPolicyAsync(ByVal strPolicyNo As String, ByVal data() As Byte, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPolicyNoteByPolicyOperationCompleted Is Nothing) Then
                Me.GetPolicyNoteByPolicyOperationCompleted = AddressOf Me.OnGetPolicyNoteByPolicyOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyNoteByPolicy", New Object() {strPolicyNo, data, strErr}, Me.GetPolicyNoteByPolicyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyNoteByPolicyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyNoteByPolicyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyNoteByPolicyCompleted(Me, New GetPolicyNoteByPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPolicyNoteByPage", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyNoteByPage(ByVal strWhere As String, ByVal pageSize As Integer, ByVal pageIndex As Integer, ByRef count As Long, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPolicyNoteByPage", New Object() {strWhere, pageSize, pageIndex, count, ds, strErr})
            count = CType(results(1),Long)
            ds = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyNoteByPageAsync(ByVal strWhere As String, ByVal pageSize As Integer, ByVal pageIndex As Integer, ByVal count As Long, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetPolicyNoteByPageAsync(strWhere, pageSize, pageIndex, count, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyNoteByPageAsync(ByVal strWhere As String, ByVal pageSize As Integer, ByVal pageIndex As Integer, ByVal count As Long, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPolicyNoteByPageOperationCompleted Is Nothing) Then
                Me.GetPolicyNoteByPageOperationCompleted = AddressOf Me.OnGetPolicyNoteByPageOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyNoteByPage", New Object() {strWhere, pageSize, pageIndex, count, ds, strErr}, Me.GetPolicyNoteByPageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyNoteByPageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyNoteByPageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyNoteByPageCompleted(Me, New GetPolicyNoteByPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SavePolicyNote", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SavePolicyNote(ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SavePolicyNote", New Object() {ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SavePolicyNoteAsync(ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.SavePolicyNoteAsync(ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SavePolicyNoteAsync(ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.SavePolicyNoteOperationCompleted Is Nothing) Then
                Me.SavePolicyNoteOperationCompleted = AddressOf Me.OnSavePolicyNoteOperationCompleted
            End If
            Me.InvokeAsync("SavePolicyNote", New Object() {ds, strErr}, Me.SavePolicyNoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnSavePolicyNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.SavePolicyNoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SavePolicyNoteCompleted(Me, New SavePolicyNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCustomer", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomer(ByVal strCustomerID As String, ByRef dsCust As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCustomer", New Object() {strCustomerID, dsCust, strErr})
            dsCust = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerAsync(ByVal strCustomerID As String, ByVal dsCust As System.Data.DataSet, ByVal strErr As String)
            Me.GetCustomerAsync(strCustomerID, dsCust, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerAsync(ByVal strCustomerID As String, ByVal dsCust As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCustomerOperationCompleted Is Nothing) Then
                Me.GetCustomerOperationCompleted = AddressOf Me.OnGetCustomerOperationCompleted
            End If
            Me.InvokeAsync("GetCustomer", New Object() {strCustomerID, dsCust, strErr}, Me.GetCustomerOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerCompleted(Me, New GetCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCustomerCoverageDetail", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerCoverageDetail(ByVal strCustomerID As String, ByRef dsCoverage As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCustomerCoverageDetail", New Object() {strCustomerID, dsCoverage, strErr})
            dsCoverage = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerCoverageDetailAsync(ByVal strCustomerID As String, ByVal dsCoverage As System.Data.DataSet, ByVal strErr As String)
            Me.GetCustomerCoverageDetailAsync(strCustomerID, dsCoverage, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerCoverageDetailAsync(ByVal strCustomerID As String, ByVal dsCoverage As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCustomerCoverageDetailOperationCompleted Is Nothing) Then
                Me.GetCustomerCoverageDetailOperationCompleted = AddressOf Me.OnGetCustomerCoverageDetailOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerCoverageDetail", New Object() {strCustomerID, dsCoverage, strErr}, Me.GetCustomerCoverageDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerCoverageDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerCoverageDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerCoverageDetailCompleted(Me, New GetCustomerCoverageDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetBenefitPlanCodeInfo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBenefitPlanCodeInfo(ByVal strCoverageCode As String, ByRef dsBenefitPlanCode As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetBenefitPlanCodeInfo", New Object() {strCoverageCode, dsBenefitPlanCode, strErr})
            dsBenefitPlanCode = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBenefitPlanCodeInfoAsync(ByVal strCoverageCode As String, ByVal dsBenefitPlanCode As System.Data.DataSet, ByVal strErr As String)
            Me.GetBenefitPlanCodeInfoAsync(strCoverageCode, dsBenefitPlanCode, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBenefitPlanCodeInfoAsync(ByVal strCoverageCode As String, ByVal dsBenefitPlanCode As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetBenefitPlanCodeInfoOperationCompleted Is Nothing) Then
                Me.GetBenefitPlanCodeInfoOperationCompleted = AddressOf Me.OnGetBenefitPlanCodeInfoOperationCompleted
            End If
            Me.InvokeAsync("GetBenefitPlanCodeInfo", New Object() {strCoverageCode, dsBenefitPlanCode, strErr}, Me.GetBenefitPlanCodeInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBenefitPlanCodeInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBenefitPlanCodeInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBenefitPlanCodeInfoCompleted(Me, New GetBenefitPlanCodeInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCustomerInfoByPolicyNo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerInfoByPolicyNo(ByVal strPolicyNo As String, ByRef dsCust As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCustomerInfoByPolicyNo", New Object() {strPolicyNo, dsCust, strErr})
            dsCust = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerInfoByPolicyNoAsync(ByVal strPolicyNo As String, ByVal dsCust As System.Data.DataSet, ByVal strErr As String)
            Me.GetCustomerInfoByPolicyNoAsync(strPolicyNo, dsCust, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerInfoByPolicyNoAsync(ByVal strPolicyNo As String, ByVal dsCust As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCustomerInfoByPolicyNoOperationCompleted Is Nothing) Then
                Me.GetCustomerInfoByPolicyNoOperationCompleted = AddressOf Me.OnGetCustomerInfoByPolicyNoOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerInfoByPolicyNo", New Object() {strPolicyNo, dsCust, strErr}, Me.GetCustomerInfoByPolicyNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerInfoByPolicyNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerInfoByPolicyNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerInfoByPolicyNoCompleted(Me, New GetCustomerInfoByPolicyNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetAgingInfo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAgingInfo(ByVal number As Integer, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAgingInfo", New Object() {number, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAgingInfoAsync(ByVal number As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetAgingInfoAsync(number, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAgingInfoAsync(ByVal number As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetAgingInfoOperationCompleted Is Nothing) Then
                Me.GetAgingInfoOperationCompleted = AddressOf Me.OnGetAgingInfoOperationCompleted
            End If
            Me.InvokeAsync("GetAgingInfo", New Object() {number, ds, strErr}, Me.GetAgingInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAgingInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAgingInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAgingInfoCompleted(Me, New GetAgingInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCCSInfo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCCSInfo(ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCCSInfo", New Object() {ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCCSInfoAsync(ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetCCSInfoAsync(ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCCSInfoAsync(ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCCSInfoOperationCompleted Is Nothing) Then
                Me.GetCCSInfoOperationCompleted = AddressOf Me.OnGetCCSInfoOperationCompleted
            End If
            Me.InvokeAsync("GetCCSInfo", New Object() {ds, strErr}, Me.GetCCSInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCCSInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCCSInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCCSInfoCompleted(Me, New GetCCSInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetAgentInfoByPolicyNo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAgentInfoByPolicyNo(ByVal strPolicyNo As String, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAgentInfoByPolicyNo", New Object() {strPolicyNo, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAgentInfoByPolicyNoAsync(ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetAgentInfoByPolicyNoAsync(strPolicyNo, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAgentInfoByPolicyNoAsync(ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetAgentInfoByPolicyNoOperationCompleted Is Nothing) Then
                Me.GetAgentInfoByPolicyNoOperationCompleted = AddressOf Me.OnGetAgentInfoByPolicyNoOperationCompleted
            End If
            Me.InvokeAsync("GetAgentInfoByPolicyNo", New Object() {strPolicyNo, ds, strErr}, Me.GetAgentInfoByPolicyNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAgentInfoByPolicyNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAgentInfoByPolicyNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAgentInfoByPolicyNoCompleted(Me, New GetAgentInfoByPolicyNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetRemarkType", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRemarkType(ByVal parentType As String, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetRemarkType", New Object() {parentType, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRemarkTypeAsync(ByVal parentType As String, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetRemarkTypeAsync(parentType, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRemarkTypeAsync(ByVal parentType As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetRemarkTypeOperationCompleted Is Nothing) Then
                Me.GetRemarkTypeOperationCompleted = AddressOf Me.OnGetRemarkTypeOperationCompleted
            End If
            Me.InvokeAsync("GetRemarkType", New Object() {parentType, ds, strErr}, Me.GetRemarkTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRemarkTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRemarkTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRemarkTypeCompleted(Me, New GetRemarkTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/TraditionalParSur", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TraditionalParSur(ByVal mode As Integer, ByVal dsSend As System.Data.DataSet, ByRef dsRece As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("TraditionalParSur", New Object() {mode, dsSend, dsRece, strErr})
            dsRece = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TraditionalParSurAsync(ByVal mode As Integer, ByVal dsSend As System.Data.DataSet, ByVal dsRece As System.Data.DataSet, ByVal strErr As String)
            Me.TraditionalParSurAsync(mode, dsSend, dsRece, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TraditionalParSurAsync(ByVal mode As Integer, ByVal dsSend As System.Data.DataSet, ByVal dsRece As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.TraditionalParSurOperationCompleted Is Nothing) Then
                Me.TraditionalParSurOperationCompleted = AddressOf Me.OnTraditionalParSurOperationCompleted
            End If
            Me.InvokeAsync("TraditionalParSur", New Object() {mode, dsSend, dsRece, strErr}, Me.TraditionalParSurOperationCompleted, userState)
        End Sub
        
        Private Sub OnTraditionalParSurOperationCompleted(ByVal arg As Object)
            If (Not (Me.TraditionalParSurCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TraditionalParSurCompleted(Me, New TraditionalParSurCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/PolicyValueEnq", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PolicyValueEnq(ByVal dsSend As System.Data.DataSet, ByRef dsRece As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("PolicyValueEnq", New Object() {dsSend, dsRece, strErr})
            dsRece = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PolicyValueEnqAsync(ByVal dsSend As System.Data.DataSet, ByVal dsRece As System.Data.DataSet, ByVal strErr As String)
            Me.PolicyValueEnqAsync(dsSend, dsRece, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PolicyValueEnqAsync(ByVal dsSend As System.Data.DataSet, ByVal dsRece As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.PolicyValueEnqOperationCompleted Is Nothing) Then
                Me.PolicyValueEnqOperationCompleted = AddressOf Me.OnPolicyValueEnqOperationCompleted
            End If
            Me.InvokeAsync("PolicyValueEnq", New Object() {dsSend, dsRece, strErr}, Me.PolicyValueEnqOperationCompleted, userState)
        End Sub
        
        Private Sub OnPolicyValueEnqOperationCompleted(ByVal arg As Object)
            If (Not (Me.PolicyValueEnqCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PolicyValueEnqCompleted(Me, New PolicyValueEnqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPolicyProjection", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyProjection(ByVal policyNo As String, ByVal prjDate As Date, ByVal noOfYear As Integer, ByRef dsRece As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPolicyProjection", New Object() {policyNo, prjDate, noOfYear, dsRece, strErr})
            dsRece = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyProjectionAsync(ByVal policyNo As String, ByVal prjDate As Date, ByVal noOfYear As Integer, ByVal dsRece As System.Data.DataSet, ByVal strErr As String)
            Me.GetPolicyProjectionAsync(policyNo, prjDate, noOfYear, dsRece, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyProjectionAsync(ByVal policyNo As String, ByVal prjDate As Date, ByVal noOfYear As Integer, ByVal dsRece As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPolicyProjectionOperationCompleted Is Nothing) Then
                Me.GetPolicyProjectionOperationCompleted = AddressOf Me.OnGetPolicyProjectionOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyProjection", New Object() {policyNo, prjDate, noOfYear, dsRece, strErr}, Me.GetPolicyProjectionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyProjectionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyProjectionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyProjectionCompleted(Me, New GetPolicyProjectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/InvokeBOMethod", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InvokeBOMethod(ByVal BOClassName As String, ByVal BOMethodName As String, ByVal dsSend As System.Data.DataSet, ByRef dsRece As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("InvokeBOMethod", New Object() {BOClassName, BOMethodName, dsSend, dsRece, strErr})
            dsRece = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InvokeBOMethodAsync(ByVal BOClassName As String, ByVal BOMethodName As String, ByVal dsSend As System.Data.DataSet, ByVal dsRece As System.Data.DataSet, ByVal strErr As String)
            Me.InvokeBOMethodAsync(BOClassName, BOMethodName, dsSend, dsRece, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InvokeBOMethodAsync(ByVal BOClassName As String, ByVal BOMethodName As String, ByVal dsSend As System.Data.DataSet, ByVal dsRece As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.InvokeBOMethodOperationCompleted Is Nothing) Then
                Me.InvokeBOMethodOperationCompleted = AddressOf Me.OnInvokeBOMethodOperationCompleted
            End If
            Me.InvokeAsync("InvokeBOMethod", New Object() {BOClassName, BOMethodName, dsSend, dsRece, strErr}, Me.InvokeBOMethodOperationCompleted, userState)
        End Sub
        
        Private Sub OnInvokeBOMethodOperationCompleted(ByVal arg As Object)
            If (Not (Me.InvokeBOMethodCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InvokeBOMethodCompleted(Me, New InvokeBOMethodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetDividendAdjustTransaction", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDividendAdjustTransaction(ByVal policyNo As String, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetDividendAdjustTransaction", New Object() {policyNo, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDividendAdjustTransactionAsync(ByVal policyNo As String, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetDividendAdjustTransactionAsync(policyNo, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDividendAdjustTransactionAsync(ByVal policyNo As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetDividendAdjustTransactionOperationCompleted Is Nothing) Then
                Me.GetDividendAdjustTransactionOperationCompleted = AddressOf Me.OnGetDividendAdjustTransactionOperationCompleted
            End If
            Me.InvokeAsync("GetDividendAdjustTransaction", New Object() {policyNo, ds, strErr}, Me.GetDividendAdjustTransactionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDividendAdjustTransactionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDividendAdjustTransactionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDividendAdjustTransactionCompleted(Me, New GetDividendAdjustTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/DividendAdjustInput", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DividendAdjustInput(ByRef dsSend As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("DividendAdjustInput", New Object() {dsSend, strErr})
            dsSend = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DividendAdjustInputAsync(ByVal dsSend As System.Data.DataSet, ByVal strErr As String)
            Me.DividendAdjustInputAsync(dsSend, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DividendAdjustInputAsync(ByVal dsSend As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.DividendAdjustInputOperationCompleted Is Nothing) Then
                Me.DividendAdjustInputOperationCompleted = AddressOf Me.OnDividendAdjustInputOperationCompleted
            End If
            Me.InvokeAsync("DividendAdjustInput", New Object() {dsSend, strErr}, Me.DividendAdjustInputOperationCompleted, userState)
        End Sub
        
        Private Sub OnDividendAdjustInputOperationCompleted(ByVal arg As Object)
            If (Not (Me.DividendAdjustInputCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DividendAdjustInputCompleted(Me, New DividendAdjustInputCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/DividendAdjustApprove", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DividendAdjustApprove(ByVal transId As Integer, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("DividendAdjustApprove", New Object() {transId, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DividendAdjustApproveAsync(ByVal transId As Integer, ByVal strErr As String)
            Me.DividendAdjustApproveAsync(transId, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DividendAdjustApproveAsync(ByVal transId As Integer, ByVal strErr As String, ByVal userState As Object)
            If (Me.DividendAdjustApproveOperationCompleted Is Nothing) Then
                Me.DividendAdjustApproveOperationCompleted = AddressOf Me.OnDividendAdjustApproveOperationCompleted
            End If
            Me.InvokeAsync("DividendAdjustApprove", New Object() {transId, strErr}, Me.DividendAdjustApproveOperationCompleted, userState)
        End Sub
        
        Private Sub OnDividendAdjustApproveOperationCompleted(ByVal arg As Object)
            If (Not (Me.DividendAdjustApproveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DividendAdjustApproveCompleted(Me, New DividendAdjustApproveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ValueWithdraw", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValueWithdraw(ByVal ds As System.Data.DataSet, ByVal transType As String, ByVal BoMethod As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ValueWithdraw", New Object() {ds, transType, BoMethod, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValueWithdrawAsync(ByVal ds As System.Data.DataSet, ByVal transType As String, ByVal BoMethod As String, ByVal strErr As String)
            Me.ValueWithdrawAsync(ds, transType, BoMethod, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValueWithdrawAsync(ByVal ds As System.Data.DataSet, ByVal transType As String, ByVal BoMethod As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.ValueWithdrawOperationCompleted Is Nothing) Then
                Me.ValueWithdrawOperationCompleted = AddressOf Me.OnValueWithdrawOperationCompleted
            End If
            Me.InvokeAsync("ValueWithdraw", New Object() {ds, transType, BoMethod, strErr}, Me.ValueWithdrawOperationCompleted, userState)
        End Sub
        
        Private Sub OnValueWithdrawOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValueWithdrawCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValueWithdrawCompleted(Me, New ValueWithdrawCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCashValueRider", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCashValueRider(ByVal planCode As String, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCashValueRider", New Object() {planCode, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCashValueRiderAsync(ByVal planCode As String, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetCashValueRiderAsync(planCode, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCashValueRiderAsync(ByVal planCode As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCashValueRiderOperationCompleted Is Nothing) Then
                Me.GetCashValueRiderOperationCompleted = AddressOf Me.OnGetCashValueRiderOperationCompleted
            End If
            Me.InvokeAsync("GetCashValueRider", New Object() {planCode, ds, strErr}, Me.GetCashValueRiderOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCashValueRiderOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCashValueRiderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCashValueRiderCompleted(Me, New GetCashValueRiderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/DownloadCashValueRider", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownloadCashValueRider(ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("DownloadCashValueRider", New Object() {strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownloadCashValueRiderAsync(ByVal strErr As String)
            Me.DownloadCashValueRiderAsync(strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownloadCashValueRiderAsync(ByVal strErr As String, ByVal userState As Object)
            If (Me.DownloadCashValueRiderOperationCompleted Is Nothing) Then
                Me.DownloadCashValueRiderOperationCompleted = AddressOf Me.OnDownloadCashValueRiderOperationCompleted
            End If
            Me.InvokeAsync("DownloadCashValueRider", New Object() {strErr}, Me.DownloadCashValueRiderOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownloadCashValueRiderOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownloadCashValueRiderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownloadCashValueRiderCompleted(Me, New DownloadCashValueRiderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/RejectDDA", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RejectDDA(ByVal strActType As String, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("RejectDDA", New Object() {strActType, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RejectDDAAsync(ByVal strActType As String, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.RejectDDAAsync(strActType, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RejectDDAAsync(ByVal strActType As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.RejectDDAOperationCompleted Is Nothing) Then
                Me.RejectDDAOperationCompleted = AddressOf Me.OnRejectDDAOperationCompleted
            End If
            Me.InvokeAsync("RejectDDA", New Object() {strActType, ds, strErr}, Me.RejectDDAOperationCompleted, userState)
        End Sub
        
        Private Sub OnRejectDDAOperationCompleted(ByVal arg As Object)
            If (Not (Me.RejectDDACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RejectDDACompleted(Me, New RejectDDACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetDDARefEnquiry", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDDARefEnquiry(ByVal dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetDDARefEnquiry", New Object() {dsSendData, dsReceData, strErr})
            dsReceData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDDARefEnquiryAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetDDARefEnquiryAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDDARefEnquiryAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetDDARefEnquiryOperationCompleted Is Nothing) Then
                Me.GetDDARefEnquiryOperationCompleted = AddressOf Me.OnGetDDARefEnquiryOperationCompleted
            End If
            Me.InvokeAsync("GetDDARefEnquiry", New Object() {dsSendData, dsReceData, strErr}, Me.GetDDARefEnquiryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDDARefEnquiryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDDARefEnquiryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDDARefEnquiryCompleted(Me, New GetDDARefEnquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdateAPLStatus", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAPLStatus(ByVal ds As System.Data.DataSet, ByVal strNewAPLStatus As String, ByVal bPrint As Boolean, ByVal strStatus As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateAPLStatus", New Object() {ds, strNewAPLStatus, bPrint, strStatus, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAPLStatusAsync(ByVal ds As System.Data.DataSet, ByVal strNewAPLStatus As String, ByVal bPrint As Boolean, ByVal strStatus As String, ByVal strErr As String)
            Me.UpdateAPLStatusAsync(ds, strNewAPLStatus, bPrint, strStatus, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAPLStatusAsync(ByVal ds As System.Data.DataSet, ByVal strNewAPLStatus As String, ByVal bPrint As Boolean, ByVal strStatus As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateAPLStatusOperationCompleted Is Nothing) Then
                Me.UpdateAPLStatusOperationCompleted = AddressOf Me.OnUpdateAPLStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateAPLStatus", New Object() {ds, strNewAPLStatus, bPrint, strStatus, strErr}, Me.UpdateAPLStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAPLStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAPLStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAPLStatusCompleted(Me, New UpdateAPLStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ProcessVpo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessVpo(ByVal processType As String, ByVal policyNum As String, ByVal effectiveDate As Date, ByVal businessDate As Date, ByVal dsPolicyHead As System.Data.DataSet, ByRef errorMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ProcessVpo", New Object() {processType, policyNum, effectiveDate, businessDate, dsPolicyHead, errorMsg})
            errorMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessVpoAsync(ByVal processType As String, ByVal policyNum As String, ByVal effectiveDate As Date, ByVal businessDate As Date, ByVal dsPolicyHead As System.Data.DataSet, ByVal errorMsg As String)
            Me.ProcessVpoAsync(processType, policyNum, effectiveDate, businessDate, dsPolicyHead, errorMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessVpoAsync(ByVal processType As String, ByVal policyNum As String, ByVal effectiveDate As Date, ByVal businessDate As Date, ByVal dsPolicyHead As System.Data.DataSet, ByVal errorMsg As String, ByVal userState As Object)
            If (Me.ProcessVpoOperationCompleted Is Nothing) Then
                Me.ProcessVpoOperationCompleted = AddressOf Me.OnProcessVpoOperationCompleted
            End If
            Me.InvokeAsync("ProcessVpo", New Object() {processType, policyNum, effectiveDate, businessDate, dsPolicyHead, errorMsg}, Me.ProcessVpoOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessVpoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessVpoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessVpoCompleted(Me, New ProcessVpoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLCPPaymentByPaymentNo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLCPPaymentByPaymentNo(ByVal paymentNo As Integer, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLCPPaymentByPaymentNo", New Object() {paymentNo, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLCPPaymentByPaymentNoAsync(ByVal paymentNo As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetLCPPaymentByPaymentNoAsync(paymentNo, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLCPPaymentByPaymentNoAsync(ByVal paymentNo As Integer, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLCPPaymentByPaymentNoOperationCompleted Is Nothing) Then
                Me.GetLCPPaymentByPaymentNoOperationCompleted = AddressOf Me.OnGetLCPPaymentByPaymentNoOperationCompleted
            End If
            Me.InvokeAsync("GetLCPPaymentByPaymentNo", New Object() {paymentNo, ds, strErr}, Me.GetLCPPaymentByPaymentNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLCPPaymentByPaymentNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLCPPaymentByPaymentNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLCPPaymentByPaymentNoCompleted(Me, New GetLCPPaymentByPaymentNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ProcessRpu", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessRpu(ByVal processType As String, ByVal policyNum As String, ByVal paidToDate As Date, ByVal quoteAmt As Double, ByVal refundVal As Double, ByVal adjustSi As Double, ByVal originalSi As Double, ByRef errorMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ProcessRpu", New Object() {processType, policyNum, paidToDate, quoteAmt, refundVal, adjustSi, originalSi, errorMsg})
            errorMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessRpuAsync(ByVal processType As String, ByVal policyNum As String, ByVal paidToDate As Date, ByVal quoteAmt As Double, ByVal refundVal As Double, ByVal adjustSi As Double, ByVal originalSi As Double, ByVal errorMsg As String)
            Me.ProcessRpuAsync(processType, policyNum, paidToDate, quoteAmt, refundVal, adjustSi, originalSi, errorMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessRpuAsync(ByVal processType As String, ByVal policyNum As String, ByVal paidToDate As Date, ByVal quoteAmt As Double, ByVal refundVal As Double, ByVal adjustSi As Double, ByVal originalSi As Double, ByVal errorMsg As String, ByVal userState As Object)
            If (Me.ProcessRpuOperationCompleted Is Nothing) Then
                Me.ProcessRpuOperationCompleted = AddressOf Me.OnProcessRpuOperationCompleted
            End If
            Me.InvokeAsync("ProcessRpu", New Object() {processType, policyNum, paidToDate, quoteAmt, refundVal, adjustSi, originalSi, errorMsg}, Me.ProcessRpuOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessRpuOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessRpuCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessRpuCompleted(Me, New ProcessRpuCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/QuoteRpu", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function QuoteRpu(ByVal policyNum As String, ByVal issueQuoteLetter As Boolean, ByRef dsQuoteRpu As System.Data.DataSet, ByRef errorMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("QuoteRpu", New Object() {policyNum, issueQuoteLetter, dsQuoteRpu, errorMsg})
            dsQuoteRpu = CType(results(1),System.Data.DataSet)
            errorMsg = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub QuoteRpuAsync(ByVal policyNum As String, ByVal issueQuoteLetter As Boolean, ByVal dsQuoteRpu As System.Data.DataSet, ByVal errorMsg As String)
            Me.QuoteRpuAsync(policyNum, issueQuoteLetter, dsQuoteRpu, errorMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub QuoteRpuAsync(ByVal policyNum As String, ByVal issueQuoteLetter As Boolean, ByVal dsQuoteRpu As System.Data.DataSet, ByVal errorMsg As String, ByVal userState As Object)
            If (Me.QuoteRpuOperationCompleted Is Nothing) Then
                Me.QuoteRpuOperationCompleted = AddressOf Me.OnQuoteRpuOperationCompleted
            End If
            Me.InvokeAsync("QuoteRpu", New Object() {policyNum, issueQuoteLetter, dsQuoteRpu, errorMsg}, Me.QuoteRpuOperationCompleted, userState)
        End Sub
        
        Private Sub OnQuoteRpuOperationCompleted(ByVal arg As Object)
            If (Not (Me.QuoteRpuCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent QuoteRpuCompleted(Me, New QuoteRpuCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLCPPaymentByCaseNo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLCPPaymentByCaseNo(ByVal sys As String, ByVal paymentType As String, ByVal caseNo As String, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLCPPaymentByCaseNo", New Object() {sys, paymentType, caseNo, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLCPPaymentByCaseNoAsync(ByVal sys As String, ByVal paymentType As String, ByVal caseNo As String, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetLCPPaymentByCaseNoAsync(sys, paymentType, caseNo, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLCPPaymentByCaseNoAsync(ByVal sys As String, ByVal paymentType As String, ByVal caseNo As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLCPPaymentByCaseNoOperationCompleted Is Nothing) Then
                Me.GetLCPPaymentByCaseNoOperationCompleted = AddressOf Me.OnGetLCPPaymentByCaseNoOperationCompleted
            End If
            Me.InvokeAsync("GetLCPPaymentByCaseNo", New Object() {sys, paymentType, caseNo, ds, strErr}, Me.GetLCPPaymentByCaseNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLCPPaymentByCaseNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLCPPaymentByCaseNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLCPPaymentByCaseNoCompleted(Me, New GetLCPPaymentByCaseNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CheckLCPPayment", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckLCPPayment(ByVal sys As String, ByVal pstrPolicyNo As String, ByVal pstrCaseNo As String, ByVal pstrType As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckLCPPayment", New Object() {sys, pstrPolicyNo, pstrCaseNo, pstrType, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckLCPPaymentAsync(ByVal sys As String, ByVal pstrPolicyNo As String, ByVal pstrCaseNo As String, ByVal pstrType As String, ByVal strErr As String)
            Me.CheckLCPPaymentAsync(sys, pstrPolicyNo, pstrCaseNo, pstrType, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckLCPPaymentAsync(ByVal sys As String, ByVal pstrPolicyNo As String, ByVal pstrCaseNo As String, ByVal pstrType As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.CheckLCPPaymentOperationCompleted Is Nothing) Then
                Me.CheckLCPPaymentOperationCompleted = AddressOf Me.OnCheckLCPPaymentOperationCompleted
            End If
            Me.InvokeAsync("CheckLCPPayment", New Object() {sys, pstrPolicyNo, pstrCaseNo, pstrType, strErr}, Me.CheckLCPPaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckLCPPaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckLCPPaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckLCPPaymentCompleted(Me, New CheckLCPPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/AddLcpPayment", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddLcpPayment(ByVal dsPay As System.Data.DataSet, ByVal printMode As String, ByVal sys As String, ByRef paymentNo As Integer, ByRef refNo As Integer, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("AddLcpPayment", New Object() {dsPay, printMode, sys, paymentNo, refNo, strErr})
            paymentNo = CType(results(1),Integer)
            refNo = CType(results(2),Integer)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddLcpPaymentAsync(ByVal dsPay As System.Data.DataSet, ByVal printMode As String, ByVal sys As String, ByVal paymentNo As Integer, ByVal refNo As Integer, ByVal strErr As String)
            Me.AddLcpPaymentAsync(dsPay, printMode, sys, paymentNo, refNo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddLcpPaymentAsync(ByVal dsPay As System.Data.DataSet, ByVal printMode As String, ByVal sys As String, ByVal paymentNo As Integer, ByVal refNo As Integer, ByVal strErr As String, ByVal userState As Object)
            If (Me.AddLcpPaymentOperationCompleted Is Nothing) Then
                Me.AddLcpPaymentOperationCompleted = AddressOf Me.OnAddLcpPaymentOperationCompleted
            End If
            Me.InvokeAsync("AddLcpPayment", New Object() {dsPay, printMode, sys, paymentNo, refNo, strErr}, Me.AddLcpPaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddLcpPaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddLcpPaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddLcpPaymentCompleted(Me, New AddLcpPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLCPChequeDetail", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLCPChequeDetail(ByVal paymentNo As Integer, ByRef dsChqDetail As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLCPChequeDetail", New Object() {paymentNo, dsChqDetail, strErr})
            dsChqDetail = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLCPChequeDetailAsync(ByVal paymentNo As Integer, ByVal dsChqDetail As System.Data.DataSet, ByVal strErr As String)
            Me.GetLCPChequeDetailAsync(paymentNo, dsChqDetail, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLCPChequeDetailAsync(ByVal paymentNo As Integer, ByVal dsChqDetail As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLCPChequeDetailOperationCompleted Is Nothing) Then
                Me.GetLCPChequeDetailOperationCompleted = AddressOf Me.OnGetLCPChequeDetailOperationCompleted
            End If
            Me.InvokeAsync("GetLCPChequeDetail", New Object() {paymentNo, dsChqDetail, strErr}, Me.GetLCPChequeDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLCPChequeDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLCPChequeDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLCPChequeDetailCompleted(Me, New GetLCPChequeDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetChequeHist", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetChequeHist(ByVal TransID As Long, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetChequeHist", New Object() {TransID, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetChequeHistAsync(ByVal TransID As Long, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetChequeHistAsync(TransID, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetChequeHistAsync(ByVal TransID As Long, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetChequeHistOperationCompleted Is Nothing) Then
                Me.GetChequeHistOperationCompleted = AddressOf Me.OnGetChequeHistOperationCompleted
            End If
            Me.InvokeAsync("GetChequeHist", New Object() {TransID, ds, strErr}, Me.GetChequeHistOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetChequeHistOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetChequeHistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetChequeHistCompleted(Me, New GetChequeHistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ValidateCheque", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidateCheque(ByVal m_sUser As String, ByVal lngPaymentNo As Long, ByVal lngChqNo As Long, ByVal strBSB As String, ByVal strSystem As String, ByRef lngChqID As Long, ByRef dsCheque As System.Data.DataSet, ByRef strErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ValidateCheque", New Object() {m_sUser, lngPaymentNo, lngChqNo, strBSB, strSystem, lngChqID, dsCheque, strErrMsg})
            lngChqID = CType(results(1),Long)
            dsCheque = CType(results(2),System.Data.DataSet)
            strErrMsg = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidateChequeAsync(ByVal m_sUser As String, ByVal lngPaymentNo As Long, ByVal lngChqNo As Long, ByVal strBSB As String, ByVal strSystem As String, ByVal lngChqID As Long, ByVal dsCheque As System.Data.DataSet, ByVal strErrMsg As String)
            Me.ValidateChequeAsync(m_sUser, lngPaymentNo, lngChqNo, strBSB, strSystem, lngChqID, dsCheque, strErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidateChequeAsync(ByVal m_sUser As String, ByVal lngPaymentNo As Long, ByVal lngChqNo As Long, ByVal strBSB As String, ByVal strSystem As String, ByVal lngChqID As Long, ByVal dsCheque As System.Data.DataSet, ByVal strErrMsg As String, ByVal userState As Object)
            If (Me.ValidateChequeOperationCompleted Is Nothing) Then
                Me.ValidateChequeOperationCompleted = AddressOf Me.OnValidateChequeOperationCompleted
            End If
            Me.InvokeAsync("ValidateCheque", New Object() {m_sUser, lngPaymentNo, lngChqNo, strBSB, strSystem, lngChqID, dsCheque, strErrMsg}, Me.ValidateChequeOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidateChequeOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidateChequeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidateChequeCompleted(Me, New ValidateChequeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetChqDS", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetChqDS(ByVal lChqID As Long, ByRef ds As System.Data.DataSet, ByVal strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetChqDS", New Object() {lChqID, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetChqDSAsync(ByVal lChqID As Long, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetChqDSAsync(lChqID, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetChqDSAsync(ByVal lChqID As Long, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetChqDSOperationCompleted Is Nothing) Then
                Me.GetChqDSOperationCompleted = AddressOf Me.OnGetChqDSOperationCompleted
            End If
            Me.InvokeAsync("GetChqDS", New Object() {lChqID, ds, strErr}, Me.GetChqDSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetChqDSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetChqDSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetChqDSCompleted(Me, New GetChqDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdateUser", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateUser(ByVal strUserId As String, ByVal strUserName As String, ByVal strDeptCode As String, ByVal strPost As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateUser", New Object() {strUserId, strUserName, strDeptCode, strPost, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateUserAsync(ByVal strUserId As String, ByVal strUserName As String, ByVal strDeptCode As String, ByVal strPost As String, ByVal strErr As String)
            Me.UpdateUserAsync(strUserId, strUserName, strDeptCode, strPost, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUserAsync(ByVal strUserId As String, ByVal strUserName As String, ByVal strDeptCode As String, ByVal strPost As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateUserOperationCompleted Is Nothing) Then
                Me.UpdateUserOperationCompleted = AddressOf Me.OnUpdateUserOperationCompleted
            End If
            Me.InvokeAsync("UpdateUser", New Object() {strUserId, strUserName, strDeptCode, strPost, strErr}, Me.UpdateUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateUserCompleted(Me, New UpdateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/DeleteUser", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteUser(ByVal strUserId As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("DeleteUser", New Object() {strUserId, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteUserAsync(ByVal strUserId As String, ByVal strErr As String)
            Me.DeleteUserAsync(strUserId, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteUserAsync(ByVal strUserId As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.DeleteUserOperationCompleted Is Nothing) Then
                Me.DeleteUserOperationCompleted = AddressOf Me.OnDeleteUserOperationCompleted
            End If
            Me.InvokeAsync("DeleteUser", New Object() {strUserId, strErr}, Me.DeleteUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteUserCompleted(Me, New DeleteUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPositionInfo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPositionInfo(ByVal strDeptCode As String, ByRef dsData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPositionInfo", New Object() {strDeptCode, dsData, strErr})
            dsData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPositionInfoAsync(ByVal strDeptCode As String, ByVal dsData As System.Data.DataSet, ByVal strErr As String)
            Me.GetPositionInfoAsync(strDeptCode, dsData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPositionInfoAsync(ByVal strDeptCode As String, ByVal dsData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPositionInfoOperationCompleted Is Nothing) Then
                Me.GetPositionInfoOperationCompleted = AddressOf Me.OnGetPositionInfoOperationCompleted
            End If
            Me.InvokeAsync("GetPositionInfo", New Object() {strDeptCode, dsData, strErr}, Me.GetPositionInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPositionInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPositionInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPositionInfoCompleted(Me, New GetPositionInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/AddPosition", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddPosition(ByVal strPOSTID As String, ByVal strPOSTDesc As String, ByVal strDeptCode As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("AddPosition", New Object() {strPOSTID, strPOSTDesc, strDeptCode, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddPositionAsync(ByVal strPOSTID As String, ByVal strPOSTDesc As String, ByVal strDeptCode As String, ByVal strErr As String)
            Me.AddPositionAsync(strPOSTID, strPOSTDesc, strDeptCode, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddPositionAsync(ByVal strPOSTID As String, ByVal strPOSTDesc As String, ByVal strDeptCode As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.AddPositionOperationCompleted Is Nothing) Then
                Me.AddPositionOperationCompleted = AddressOf Me.OnAddPositionOperationCompleted
            End If
            Me.InvokeAsync("AddPosition", New Object() {strPOSTID, strPOSTDesc, strDeptCode, strErr}, Me.AddPositionOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddPositionOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddPositionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddPositionCompleted(Me, New AddPositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdatePosition", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdatePosition(ByVal strDeptCode As String, ByVal strPositionID As String, ByVal strPostDesp As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdatePosition", New Object() {strDeptCode, strPositionID, strPostDesp, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdatePositionAsync(ByVal strDeptCode As String, ByVal strPositionID As String, ByVal strPostDesp As String, ByVal strErr As String)
            Me.UpdatePositionAsync(strDeptCode, strPositionID, strPostDesp, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdatePositionAsync(ByVal strDeptCode As String, ByVal strPositionID As String, ByVal strPostDesp As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdatePositionOperationCompleted Is Nothing) Then
                Me.UpdatePositionOperationCompleted = AddressOf Me.OnUpdatePositionOperationCompleted
            End If
            Me.InvokeAsync("UpdatePosition", New Object() {strDeptCode, strPositionID, strPostDesp, strErr}, Me.UpdatePositionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdatePositionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdatePositionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdatePositionCompleted(Me, New UpdatePositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/DeletePosition", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeletePosition(ByVal strDeptCode As String, ByVal strPOSTID As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("DeletePosition", New Object() {strDeptCode, strPOSTID, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeletePositionAsync(ByVal strDeptCode As String, ByVal strPOSTID As String, ByVal strErr As String)
            Me.DeletePositionAsync(strDeptCode, strPOSTID, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeletePositionAsync(ByVal strDeptCode As String, ByVal strPOSTID As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.DeletePositionOperationCompleted Is Nothing) Then
                Me.DeletePositionOperationCompleted = AddressOf Me.OnDeletePositionOperationCompleted
            End If
            Me.InvokeAsync("DeletePosition", New Object() {strDeptCode, strPOSTID, strErr}, Me.DeletePositionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeletePositionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeletePositionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeletePositionCompleted(Me, New DeletePositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetChequeLimitInfo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetChequeLimitInfo(ByVal strDeptCode As String, ByRef dsData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetChequeLimitInfo", New Object() {strDeptCode, dsData, strErr})
            dsData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetChequeLimitInfoAsync(ByVal strDeptCode As String, ByVal dsData As System.Data.DataSet, ByVal strErr As String)
            Me.GetChequeLimitInfoAsync(strDeptCode, dsData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetChequeLimitInfoAsync(ByVal strDeptCode As String, ByVal dsData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetChequeLimitInfoOperationCompleted Is Nothing) Then
                Me.GetChequeLimitInfoOperationCompleted = AddressOf Me.OnGetChequeLimitInfoOperationCompleted
            End If
            Me.InvokeAsync("GetChequeLimitInfo", New Object() {strDeptCode, dsData, strErr}, Me.GetChequeLimitInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetChequeLimitInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetChequeLimitInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetChequeLimitInfoCompleted(Me, New GetChequeLimitInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/AddChequeLimit", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddChequeLimit(ByVal strChqLimit As String, ByVal strDeptCode As String, ByVal strCategory As String, ByVal strPositionID As String, ByVal strCurrency As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("AddChequeLimit", New Object() {strChqLimit, strDeptCode, strCategory, strPositionID, strCurrency, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddChequeLimitAsync(ByVal strChqLimit As String, ByVal strDeptCode As String, ByVal strCategory As String, ByVal strPositionID As String, ByVal strCurrency As String, ByVal strErr As String)
            Me.AddChequeLimitAsync(strChqLimit, strDeptCode, strCategory, strPositionID, strCurrency, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddChequeLimitAsync(ByVal strChqLimit As String, ByVal strDeptCode As String, ByVal strCategory As String, ByVal strPositionID As String, ByVal strCurrency As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.AddChequeLimitOperationCompleted Is Nothing) Then
                Me.AddChequeLimitOperationCompleted = AddressOf Me.OnAddChequeLimitOperationCompleted
            End If
            Me.InvokeAsync("AddChequeLimit", New Object() {strChqLimit, strDeptCode, strCategory, strPositionID, strCurrency, strErr}, Me.AddChequeLimitOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddChequeLimitOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddChequeLimitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddChequeLimitCompleted(Me, New AddChequeLimitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdateChequeLimit", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateChequeLimit(ByVal strChqLimit As String, ByVal strDeptCode As String, ByVal strCategory As String, ByVal strPositionID As String, ByVal strCurrency As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateChequeLimit", New Object() {strChqLimit, strDeptCode, strCategory, strPositionID, strCurrency, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateChequeLimitAsync(ByVal strChqLimit As String, ByVal strDeptCode As String, ByVal strCategory As String, ByVal strPositionID As String, ByVal strCurrency As String, ByVal strErr As String)
            Me.UpdateChequeLimitAsync(strChqLimit, strDeptCode, strCategory, strPositionID, strCurrency, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateChequeLimitAsync(ByVal strChqLimit As String, ByVal strDeptCode As String, ByVal strCategory As String, ByVal strPositionID As String, ByVal strCurrency As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateChequeLimitOperationCompleted Is Nothing) Then
                Me.UpdateChequeLimitOperationCompleted = AddressOf Me.OnUpdateChequeLimitOperationCompleted
            End If
            Me.InvokeAsync("UpdateChequeLimit", New Object() {strChqLimit, strDeptCode, strCategory, strPositionID, strCurrency, strErr}, Me.UpdateChequeLimitOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateChequeLimitOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateChequeLimitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateChequeLimitCompleted(Me, New UpdateChequeLimitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/DeleteChequeLimit", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteChequeLimit(ByVal strDeptCode As String, ByVal strCategory As String, ByVal strPositionID As String, ByVal strCurrency As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("DeleteChequeLimit", New Object() {strDeptCode, strCategory, strPositionID, strCurrency, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteChequeLimitAsync(ByVal strDeptCode As String, ByVal strCategory As String, ByVal strPositionID As String, ByVal strCurrency As String, ByVal strErr As String)
            Me.DeleteChequeLimitAsync(strDeptCode, strCategory, strPositionID, strCurrency, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteChequeLimitAsync(ByVal strDeptCode As String, ByVal strCategory As String, ByVal strPositionID As String, ByVal strCurrency As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.DeleteChequeLimitOperationCompleted Is Nothing) Then
                Me.DeleteChequeLimitOperationCompleted = AddressOf Me.OnDeleteChequeLimitOperationCompleted
            End If
            Me.InvokeAsync("DeleteChequeLimit", New Object() {strDeptCode, strCategory, strPositionID, strCurrency, strErr}, Me.DeleteChequeLimitOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteChequeLimitOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteChequeLimitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteChequeLimitCompleted(Me, New DeleteChequeLimitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CheckIsPositionInUse", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckIsPositionInUse(ByVal strDeptCode As String, ByVal strPostID As String, ByRef bIsInUse As Boolean, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckIsPositionInUse", New Object() {strDeptCode, strPostID, bIsInUse, strErr})
            bIsInUse = CType(results(1),Boolean)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckIsPositionInUseAsync(ByVal strDeptCode As String, ByVal strPostID As String, ByVal bIsInUse As Boolean, ByVal strErr As String)
            Me.CheckIsPositionInUseAsync(strDeptCode, strPostID, bIsInUse, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckIsPositionInUseAsync(ByVal strDeptCode As String, ByVal strPostID As String, ByVal bIsInUse As Boolean, ByVal strErr As String, ByVal userState As Object)
            If (Me.CheckIsPositionInUseOperationCompleted Is Nothing) Then
                Me.CheckIsPositionInUseOperationCompleted = AddressOf Me.OnCheckIsPositionInUseOperationCompleted
            End If
            Me.InvokeAsync("CheckIsPositionInUse", New Object() {strDeptCode, strPostID, bIsInUse, strErr}, Me.CheckIsPositionInUseOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckIsPositionInUseOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckIsPositionInUseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckIsPositionInUseCompleted(Me, New CheckIsPositionInUseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetMultiCur", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMultiCur(ByRef dsData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetMultiCur", New Object() {dsData, strErr})
            dsData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMultiCurAsync(ByVal dsData As System.Data.DataSet, ByVal strErr As String)
            Me.GetMultiCurAsync(dsData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMultiCurAsync(ByVal dsData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetMultiCurOperationCompleted Is Nothing) Then
                Me.GetMultiCurOperationCompleted = AddressOf Me.OnGetMultiCurOperationCompleted
            End If
            Me.InvokeAsync("GetMultiCur", New Object() {dsData, strErr}, Me.GetMultiCurOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMultiCurOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMultiCurCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMultiCurCompleted(Me, New GetMultiCurCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetExchangeRate", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetExchangeRate(ByVal strUser As String, ByRef strFromCurr As String, ByRef strToCurr As String, ByRef dsRate As System.Data.DataSet, ByRef strErr As String, ByRef dteEffectiveDate As Date, ByRef strRateType As String, ByRef strFixedFunc As String) As Boolean
            Dim results() As Object = Me.Invoke("GetExchangeRate", New Object() {strUser, strFromCurr, strToCurr, dsRate, strErr, dteEffectiveDate, strRateType, strFixedFunc})
            strFromCurr = CType(results(1),String)
            strToCurr = CType(results(2),String)
            dsRate = CType(results(3),System.Data.DataSet)
            strErr = CType(results(4),String)
            dteEffectiveDate = CType(results(5),Date)
            strRateType = CType(results(6),String)
            strFixedFunc = CType(results(7),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetExchangeRateAsync(ByVal strUser As String, ByVal strFromCurr As String, ByVal strToCurr As String, ByVal dsRate As System.Data.DataSet, ByVal strErr As String, ByVal dteEffectiveDate As Date, ByVal strRateType As String, ByVal strFixedFunc As String)
            Me.GetExchangeRateAsync(strUser, strFromCurr, strToCurr, dsRate, strErr, dteEffectiveDate, strRateType, strFixedFunc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetExchangeRateAsync(ByVal strUser As String, ByVal strFromCurr As String, ByVal strToCurr As String, ByVal dsRate As System.Data.DataSet, ByVal strErr As String, ByVal dteEffectiveDate As Date, ByVal strRateType As String, ByVal strFixedFunc As String, ByVal userState As Object)
            If (Me.GetExchangeRateOperationCompleted Is Nothing) Then
                Me.GetExchangeRateOperationCompleted = AddressOf Me.OnGetExchangeRateOperationCompleted
            End If
            Me.InvokeAsync("GetExchangeRate", New Object() {strUser, strFromCurr, strToCurr, dsRate, strErr, dteEffectiveDate, strRateType, strFixedFunc}, Me.GetExchangeRateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetExchangeRateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetExchangeRateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetExchangeRateCompleted(Me, New GetExchangeRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetExchangeRateWithPolicyNo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetExchangeRateWithPolicyNo(ByVal strUser As String, ByRef strFromCurr As String, ByRef strToCurr As String, ByRef dsRate As System.Data.DataSet, ByRef strErr As String, ByRef dteEffectiveDate As Date, ByRef strRateType As String, ByRef strFixedFunc As String, ByVal strPolicyNo As String) As Boolean
            Dim results() As Object = Me.Invoke("GetExchangeRateWithPolicyNo", New Object() {strUser, strFromCurr, strToCurr, dsRate, strErr, dteEffectiveDate, strRateType, strFixedFunc, strPolicyNo})
            strFromCurr = CType(results(1),String)
            strToCurr = CType(results(2),String)
            dsRate = CType(results(3),System.Data.DataSet)
            strErr = CType(results(4),String)
            dteEffectiveDate = CType(results(5),Date)
            strRateType = CType(results(6),String)
            strFixedFunc = CType(results(7),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetExchangeRateWithPolicyNoAsync(ByVal strUser As String, ByVal strFromCurr As String, ByVal strToCurr As String, ByVal dsRate As System.Data.DataSet, ByVal strErr As String, ByVal dteEffectiveDate As Date, ByVal strRateType As String, ByVal strFixedFunc As String, ByVal strPolicyNo As String)
            Me.GetExchangeRateWithPolicyNoAsync(strUser, strFromCurr, strToCurr, dsRate, strErr, dteEffectiveDate, strRateType, strFixedFunc, strPolicyNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetExchangeRateWithPolicyNoAsync(ByVal strUser As String, ByVal strFromCurr As String, ByVal strToCurr As String, ByVal dsRate As System.Data.DataSet, ByVal strErr As String, ByVal dteEffectiveDate As Date, ByVal strRateType As String, ByVal strFixedFunc As String, ByVal strPolicyNo As String, ByVal userState As Object)
            If (Me.GetExchangeRateWithPolicyNoOperationCompleted Is Nothing) Then
                Me.GetExchangeRateWithPolicyNoOperationCompleted = AddressOf Me.OnGetExchangeRateWithPolicyNoOperationCompleted
            End If
            Me.InvokeAsync("GetExchangeRateWithPolicyNo", New Object() {strUser, strFromCurr, strToCurr, dsRate, strErr, dteEffectiveDate, strRateType, strFixedFunc, strPolicyNo}, Me.GetExchangeRateWithPolicyNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetExchangeRateWithPolicyNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetExchangeRateWithPolicyNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetExchangeRateWithPolicyNoCompleted(Me, New GetExchangeRateWithPolicyNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCurrencyCode", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCurrencyCode(ByVal strUser As String, ByRef dsCurr As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCurrencyCode", New Object() {strUser, dsCurr, strErr})
            dsCurr = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCurrencyCodeAsync(ByVal strUser As String, ByVal dsCurr As System.Data.DataSet, ByVal strErr As String)
            Me.GetCurrencyCodeAsync(strUser, dsCurr, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCurrencyCodeAsync(ByVal strUser As String, ByVal dsCurr As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCurrencyCodeOperationCompleted Is Nothing) Then
                Me.GetCurrencyCodeOperationCompleted = AddressOf Me.OnGetCurrencyCodeOperationCompleted
            End If
            Me.InvokeAsync("GetCurrencyCode", New Object() {strUser, dsCurr, strErr}, Me.GetCurrencyCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCurrencyCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCurrencyCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCurrencyCodeCompleted(Me, New GetCurrencyCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ChkChqAuthPos", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChkChqAuthPos(ByVal strUser As String, ByVal strWithdrawFrom As String, ByVal strCurrency As String, ByVal dblChqAmount As Double, ByRef strPosDesc As String, ByRef ChqAuthPos As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ChkChqAuthPos", New Object() {strUser, strWithdrawFrom, strCurrency, dblChqAmount, strPosDesc, ChqAuthPos, strErr})
            strPosDesc = CType(results(1),String)
            ChqAuthPos = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChkChqAuthPosAsync(ByVal strUser As String, ByVal strWithdrawFrom As String, ByVal strCurrency As String, ByVal dblChqAmount As Double, ByVal strPosDesc As String, ByVal ChqAuthPos As String, ByVal strErr As String)
            Me.ChkChqAuthPosAsync(strUser, strWithdrawFrom, strCurrency, dblChqAmount, strPosDesc, ChqAuthPos, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChkChqAuthPosAsync(ByVal strUser As String, ByVal strWithdrawFrom As String, ByVal strCurrency As String, ByVal dblChqAmount As Double, ByVal strPosDesc As String, ByVal ChqAuthPos As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.ChkChqAuthPosOperationCompleted Is Nothing) Then
                Me.ChkChqAuthPosOperationCompleted = AddressOf Me.OnChkChqAuthPosOperationCompleted
            End If
            Me.InvokeAsync("ChkChqAuthPos", New Object() {strUser, strWithdrawFrom, strCurrency, dblChqAmount, strPosDesc, ChqAuthPos, strErr}, Me.ChkChqAuthPosOperationCompleted, userState)
        End Sub
        
        Private Sub OnChkChqAuthPosOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChkChqAuthPosCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChkChqAuthPosCompleted(Me, New ChkChqAuthPosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetFuncCategory", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFuncCategory(ByVal strUser As String, ByRef strCat As String, ByVal strFunction As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFuncCategory", New Object() {strUser, strCat, strFunction, strErr})
            strCat = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFuncCategoryAsync(ByVal strUser As String, ByVal strCat As String, ByVal strFunction As String, ByVal strErr As String)
            Me.GetFuncCategoryAsync(strUser, strCat, strFunction, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFuncCategoryAsync(ByVal strUser As String, ByVal strCat As String, ByVal strFunction As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetFuncCategoryOperationCompleted Is Nothing) Then
                Me.GetFuncCategoryOperationCompleted = AddressOf Me.OnGetFuncCategoryOperationCompleted
            End If
            Me.InvokeAsync("GetFuncCategory", New Object() {strUser, strCat, strFunction, strErr}, Me.GetFuncCategoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFuncCategoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFuncCategoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFuncCategoryCompleted(Me, New GetFuncCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/MinContribValidation", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MinContribValidation(ByVal strCoverageCode As String, ByVal strMode As String, ByVal decContribAmt As Decimal, ByVal sPOCurr As String, ByRef strOverMinCAmt As String, ByRef decMinContribAmt As Decimal, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("MinContribValidation", New Object() {strCoverageCode, strMode, decContribAmt, sPOCurr, strOverMinCAmt, decMinContribAmt, strErr})
            strOverMinCAmt = CType(results(1),String)
            decMinContribAmt = CType(results(2),Decimal)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MinContribValidationAsync(ByVal strCoverageCode As String, ByVal strMode As String, ByVal decContribAmt As Decimal, ByVal sPOCurr As String, ByVal strOverMinCAmt As String, ByVal decMinContribAmt As Decimal, ByVal strErr As String)
            Me.MinContribValidationAsync(strCoverageCode, strMode, decContribAmt, sPOCurr, strOverMinCAmt, decMinContribAmt, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MinContribValidationAsync(ByVal strCoverageCode As String, ByVal strMode As String, ByVal decContribAmt As Decimal, ByVal sPOCurr As String, ByVal strOverMinCAmt As String, ByVal decMinContribAmt As Decimal, ByVal strErr As String, ByVal userState As Object)
            If (Me.MinContribValidationOperationCompleted Is Nothing) Then
                Me.MinContribValidationOperationCompleted = AddressOf Me.OnMinContribValidationOperationCompleted
            End If
            Me.InvokeAsync("MinContribValidation", New Object() {strCoverageCode, strMode, decContribAmt, sPOCurr, strOverMinCAmt, decMinContribAmt, strErr}, Me.MinContribValidationOperationCompleted, userState)
        End Sub
        
        Private Sub OnMinContribValidationOperationCompleted(ByVal arg As Object)
            If (Not (Me.MinContribValidationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MinContribValidationCompleted(Me, New MinContribValidationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/AllowParSurMinBal", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AllowParSurMinBal(ByVal strChklist() As String, ByRef strReplyMsg As String, ByRef decAllPerc As Decimal, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("AllowParSurMinBal", New Object() {strChklist, strReplyMsg, decAllPerc, strErr})
            strReplyMsg = CType(results(1),String)
            decAllPerc = CType(results(2),Decimal)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AllowParSurMinBalAsync(ByVal strChklist() As String, ByVal strReplyMsg As String, ByVal decAllPerc As Decimal, ByVal strErr As String)
            Me.AllowParSurMinBalAsync(strChklist, strReplyMsg, decAllPerc, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AllowParSurMinBalAsync(ByVal strChklist() As String, ByVal strReplyMsg As String, ByVal decAllPerc As Decimal, ByVal strErr As String, ByVal userState As Object)
            If (Me.AllowParSurMinBalOperationCompleted Is Nothing) Then
                Me.AllowParSurMinBalOperationCompleted = AddressOf Me.OnAllowParSurMinBalOperationCompleted
            End If
            Me.InvokeAsync("AllowParSurMinBal", New Object() {strChklist, strReplyMsg, decAllPerc, strErr}, Me.AllowParSurMinBalOperationCompleted, userState)
        End Sub
        
        Private Sub OnAllowParSurMinBalOperationCompleted(ByVal arg As Object)
            If (Not (Me.AllowParSurMinBalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AllowParSurMinBalCompleted(Me, New AllowParSurMinBalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/AllowParSurrValidation", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AllowParSurrValidation(ByVal strChklist() As String, ByRef strReplyMsg As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("AllowParSurrValidation", New Object() {strChklist, strReplyMsg, strErr})
            strReplyMsg = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AllowParSurrValidationAsync(ByVal strChklist() As String, ByVal strReplyMsg As String, ByVal strErr As String)
            Me.AllowParSurrValidationAsync(strChklist, strReplyMsg, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AllowParSurrValidationAsync(ByVal strChklist() As String, ByVal strReplyMsg As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.AllowParSurrValidationOperationCompleted Is Nothing) Then
                Me.AllowParSurrValidationOperationCompleted = AddressOf Me.OnAllowParSurrValidationOperationCompleted
            End If
            Me.InvokeAsync("AllowParSurrValidation", New Object() {strChklist, strReplyMsg, strErr}, Me.AllowParSurrValidationOperationCompleted, userState)
        End Sub
        
        Private Sub OnAllowParSurrValidationOperationCompleted(ByVal arg As Object)
            If (Not (Me.AllowParSurrValidationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AllowParSurrValidationCompleted(Me, New AllowParSurrValidationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ParSurMinAmtValidation", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParSurMinAmtValidation(ByVal strChklist() As String, ByRef strReplyMsg As String, ByRef decMinSurAmt As Decimal, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ParSurMinAmtValidation", New Object() {strChklist, strReplyMsg, decMinSurAmt, strErr})
            strReplyMsg = CType(results(1),String)
            decMinSurAmt = CType(results(2),Decimal)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParSurMinAmtValidationAsync(ByVal strChklist() As String, ByVal strReplyMsg As String, ByVal decMinSurAmt As Decimal, ByVal strErr As String)
            Me.ParSurMinAmtValidationAsync(strChklist, strReplyMsg, decMinSurAmt, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParSurMinAmtValidationAsync(ByVal strChklist() As String, ByVal strReplyMsg As String, ByVal decMinSurAmt As Decimal, ByVal strErr As String, ByVal userState As Object)
            If (Me.ParSurMinAmtValidationOperationCompleted Is Nothing) Then
                Me.ParSurMinAmtValidationOperationCompleted = AddressOf Me.OnParSurMinAmtValidationOperationCompleted
            End If
            Me.InvokeAsync("ParSurMinAmtValidation", New Object() {strChklist, strReplyMsg, decMinSurAmt, strErr}, Me.ParSurMinAmtValidationOperationCompleted, userState)
        End Sub
        
        Private Sub OnParSurMinAmtValidationOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParSurMinAmtValidationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParSurMinAmtValidationCompleted(Me, New ParSurMinAmtValidationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ParSurMaxPercValidation", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ParSurMaxPercValidation(ByVal strChklist() As String, ByRef strReplyMsg As String, ByRef decAllowPerc As Decimal, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ParSurMaxPercValidation", New Object() {strChklist, strReplyMsg, decAllowPerc, strErr})
            strReplyMsg = CType(results(1),String)
            decAllowPerc = CType(results(2),Decimal)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ParSurMaxPercValidationAsync(ByVal strChklist() As String, ByVal strReplyMsg As String, ByVal decAllowPerc As Decimal, ByVal strErr As String)
            Me.ParSurMaxPercValidationAsync(strChklist, strReplyMsg, decAllowPerc, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ParSurMaxPercValidationAsync(ByVal strChklist() As String, ByVal strReplyMsg As String, ByVal decAllowPerc As Decimal, ByVal strErr As String, ByVal userState As Object)
            If (Me.ParSurMaxPercValidationOperationCompleted Is Nothing) Then
                Me.ParSurMaxPercValidationOperationCompleted = AddressOf Me.OnParSurMaxPercValidationOperationCompleted
            End If
            Me.InvokeAsync("ParSurMaxPercValidation", New Object() {strChklist, strReplyMsg, decAllowPerc, strErr}, Me.ParSurMaxPercValidationOperationCompleted, userState)
        End Sub
        
        Private Sub OnParSurMaxPercValidationOperationCompleted(ByVal arg As Object)
            If (Not (Me.ParSurMaxPercValidationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ParSurMaxPercValidationCompleted(Me, New ParSurMaxPercValidationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/FundSWMinSwitchAmtValidation", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FundSWMinSwitchAmtValidation(ByVal strChklist() As String, ByRef strReplyMsg As String, ByRef strErrType As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("FundSWMinSwitchAmtValidation", New Object() {strChklist, strReplyMsg, strErrType, strErr})
            strReplyMsg = CType(results(1),String)
            strErrType = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FundSWMinSwitchAmtValidationAsync(ByVal strChklist() As String, ByVal strReplyMsg As String, ByVal strErrType As String, ByVal strErr As String)
            Me.FundSWMinSwitchAmtValidationAsync(strChklist, strReplyMsg, strErrType, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FundSWMinSwitchAmtValidationAsync(ByVal strChklist() As String, ByVal strReplyMsg As String, ByVal strErrType As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.FundSWMinSwitchAmtValidationOperationCompleted Is Nothing) Then
                Me.FundSWMinSwitchAmtValidationOperationCompleted = AddressOf Me.OnFundSWMinSwitchAmtValidationOperationCompleted
            End If
            Me.InvokeAsync("FundSWMinSwitchAmtValidation", New Object() {strChklist, strReplyMsg, strErrType, strErr}, Me.FundSWMinSwitchAmtValidationOperationCompleted, userState)
        End Sub
        
        Private Sub OnFundSWMinSwitchAmtValidationOperationCompleted(ByVal arg As Object)
            If (Not (Me.FundSWMinSwitchAmtValidationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FundSWMinSwitchAmtValidationCompleted(Me, New FundSWMinSwitchAmtValidationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/FundSWAllowSwitchingValidation", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FundSWAllowSwitchingValidation(ByVal strChklist() As String, ByRef strReplyMsg As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("FundSWAllowSwitchingValidation", New Object() {strChklist, strReplyMsg, strErr})
            strReplyMsg = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FundSWAllowSwitchingValidationAsync(ByVal strChklist() As String, ByVal strReplyMsg As String, ByVal strErr As String)
            Me.FundSWAllowSwitchingValidationAsync(strChklist, strReplyMsg, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FundSWAllowSwitchingValidationAsync(ByVal strChklist() As String, ByVal strReplyMsg As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.FundSWAllowSwitchingValidationOperationCompleted Is Nothing) Then
                Me.FundSWAllowSwitchingValidationOperationCompleted = AddressOf Me.OnFundSWAllowSwitchingValidationOperationCompleted
            End If
            Me.InvokeAsync("FundSWAllowSwitchingValidation", New Object() {strChklist, strReplyMsg, strErr}, Me.FundSWAllowSwitchingValidationOperationCompleted, userState)
        End Sub
        
        Private Sub OnFundSWAllowSwitchingValidationOperationCompleted(ByVal arg As Object)
            If (Not (Me.FundSWAllowSwitchingValidationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FundSWAllowSwitchingValidationCompleted(Me, New FundSWAllowSwitchingValidationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ReinstateValidation", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReinstateValidation(ByVal dsCoSel As System.Data.DataSet, ByVal strPolicyNo As String, ByRef strReplyIndicator As String, ByRef strReplyMsg As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ReinstateValidation", New Object() {dsCoSel, strPolicyNo, strReplyIndicator, strReplyMsg, strErr})
            strReplyIndicator = CType(results(1),String)
            strReplyMsg = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReinstateValidationAsync(ByVal dsCoSel As System.Data.DataSet, ByVal strPolicyNo As String, ByVal strReplyIndicator As String, ByVal strReplyMsg As String, ByVal strErr As String)
            Me.ReinstateValidationAsync(dsCoSel, strPolicyNo, strReplyIndicator, strReplyMsg, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReinstateValidationAsync(ByVal dsCoSel As System.Data.DataSet, ByVal strPolicyNo As String, ByVal strReplyIndicator As String, ByVal strReplyMsg As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.ReinstateValidationOperationCompleted Is Nothing) Then
                Me.ReinstateValidationOperationCompleted = AddressOf Me.OnReinstateValidationOperationCompleted
            End If
            Me.InvokeAsync("ReinstateValidation", New Object() {dsCoSel, strPolicyNo, strReplyIndicator, strReplyMsg, strErr}, Me.ReinstateValidationOperationCompleted, userState)
        End Sub
        
        Private Sub OnReinstateValidationOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReinstateValidationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReinstateValidationCompleted(Me, New ReinstateValidationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/AllowChgOwnerValidation", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AllowChgOwnerValidation(ByVal strPolicyNo As String, ByRef strReplyIndic As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("AllowChgOwnerValidation", New Object() {strPolicyNo, strReplyIndic, strErr})
            strReplyIndic = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AllowChgOwnerValidationAsync(ByVal strPolicyNo As String, ByVal strReplyIndic As String, ByVal strErr As String)
            Me.AllowChgOwnerValidationAsync(strPolicyNo, strReplyIndic, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AllowChgOwnerValidationAsync(ByVal strPolicyNo As String, ByVal strReplyIndic As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.AllowChgOwnerValidationOperationCompleted Is Nothing) Then
                Me.AllowChgOwnerValidationOperationCompleted = AddressOf Me.OnAllowChgOwnerValidationOperationCompleted
            End If
            Me.InvokeAsync("AllowChgOwnerValidation", New Object() {strPolicyNo, strReplyIndic, strErr}, Me.AllowChgOwnerValidationOperationCompleted, userState)
        End Sub
        
        Private Sub OnAllowChgOwnerValidationOperationCompleted(ByVal arg As Object)
            If (Not (Me.AllowChgOwnerValidationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AllowChgOwnerValidationCompleted(Me, New AllowChgOwnerValidationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/AllowChgModeValidation", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AllowChgModeValidation(ByVal strPlanCode As String, ByRef strReplyMsg As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("AllowChgModeValidation", New Object() {strPlanCode, strReplyMsg, strErr})
            strReplyMsg = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AllowChgModeValidationAsync(ByVal strPlanCode As String, ByVal strReplyMsg As String, ByVal strErr As String)
            Me.AllowChgModeValidationAsync(strPlanCode, strReplyMsg, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AllowChgModeValidationAsync(ByVal strPlanCode As String, ByVal strReplyMsg As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.AllowChgModeValidationOperationCompleted Is Nothing) Then
                Me.AllowChgModeValidationOperationCompleted = AddressOf Me.OnAllowChgModeValidationOperationCompleted
            End If
            Me.InvokeAsync("AllowChgModeValidation", New Object() {strPlanCode, strReplyMsg, strErr}, Me.AllowChgModeValidationOperationCompleted, userState)
        End Sub
        
        Private Sub OnAllowChgModeValidationOperationCompleted(ByVal arg As Object)
            If (Not (Me.AllowChgModeValidationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AllowChgModeValidationCompleted(Me, New AllowChgModeValidationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/AllowChgBTValidation", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AllowChgBTValidation(ByVal strPlanCode As String, ByRef strReplyMsg As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("AllowChgBTValidation", New Object() {strPlanCode, strReplyMsg, strErr})
            strReplyMsg = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AllowChgBTValidationAsync(ByVal strPlanCode As String, ByVal strReplyMsg As String, ByVal strErr As String)
            Me.AllowChgBTValidationAsync(strPlanCode, strReplyMsg, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AllowChgBTValidationAsync(ByVal strPlanCode As String, ByVal strReplyMsg As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.AllowChgBTValidationOperationCompleted Is Nothing) Then
                Me.AllowChgBTValidationOperationCompleted = AddressOf Me.OnAllowChgBTValidationOperationCompleted
            End If
            Me.InvokeAsync("AllowChgBTValidation", New Object() {strPlanCode, strReplyMsg, strErr}, Me.AllowChgBTValidationOperationCompleted, userState)
        End Sub
        
        Private Sub OnAllowChgBTValidationOperationCompleted(ByVal arg As Object)
            If (Not (Me.AllowChgBTValidationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AllowChgBTValidationCompleted(Me, New AllowChgBTValidationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ChkPolicyInforce", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChkPolicyInforce(ByVal strPolicyNo As String, ByRef strReplyMsg As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ChkPolicyInforce", New Object() {strPolicyNo, strReplyMsg, strErr})
            strReplyMsg = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChkPolicyInforceAsync(ByVal strPolicyNo As String, ByVal strReplyMsg As String, ByVal strErr As String)
            Me.ChkPolicyInforceAsync(strPolicyNo, strReplyMsg, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChkPolicyInforceAsync(ByVal strPolicyNo As String, ByVal strReplyMsg As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.ChkPolicyInforceOperationCompleted Is Nothing) Then
                Me.ChkPolicyInforceOperationCompleted = AddressOf Me.OnChkPolicyInforceOperationCompleted
            End If
            Me.InvokeAsync("ChkPolicyInforce", New Object() {strPolicyNo, strReplyMsg, strErr}, Me.ChkPolicyInforceOperationCompleted, userState)
        End Sub
        
        Private Sub OnChkPolicyInforceOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChkPolicyInforceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChkPolicyInforceCompleted(Me, New ChkPolicyInforceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransQStatus", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransQStatus(ByVal lngTransID As Long, ByVal strTransType As String, ByRef strTransQSts As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransQStatus", New Object() {lngTransID, strTransType, strTransQSts, strErr})
            strTransQSts = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransQStatusAsync(ByVal lngTransID As Long, ByVal strTransType As String, ByVal strTransQSts As String, ByVal strErr As String)
            Me.GetTransQStatusAsync(lngTransID, strTransType, strTransQSts, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransQStatusAsync(ByVal lngTransID As Long, ByVal strTransType As String, ByVal strTransQSts As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransQStatusOperationCompleted Is Nothing) Then
                Me.GetTransQStatusOperationCompleted = AddressOf Me.OnGetTransQStatusOperationCompleted
            End If
            Me.InvokeAsync("GetTransQStatus", New Object() {lngTransID, strTransType, strTransQSts, strErr}, Me.GetTransQStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransQStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransQStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransQStatusCompleted(Me, New GetTransQStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/saveAddBoosterSynRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function saveAddBoosterSynRecord(ByVal dsSynDetail As System.Data.DataSet, ByRef TransID As Long, ByRef TransType As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("saveAddBoosterSynRecord", New Object() {dsSynDetail, TransID, TransType, strErr})
            TransID = CType(results(1),Long)
            TransType = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub saveAddBoosterSynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String)
            Me.saveAddBoosterSynRecordAsync(dsSynDetail, TransID, TransType, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub saveAddBoosterSynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.saveAddBoosterSynRecordOperationCompleted Is Nothing) Then
                Me.saveAddBoosterSynRecordOperationCompleted = AddressOf Me.OnsaveAddBoosterSynRecordOperationCompleted
            End If
            Me.InvokeAsync("saveAddBoosterSynRecord", New Object() {dsSynDetail, TransID, TransType, strErr}, Me.saveAddBoosterSynRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnsaveAddBoosterSynRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.saveAddBoosterSynRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent saveAddBoosterSynRecordCompleted(Me, New saveAddBoosterSynRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/saveAddPDFSynRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function saveAddPDFSynRecord(ByVal dsSynDetail As System.Data.DataSet, ByRef TransID As Long, ByRef TransType As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("saveAddPDFSynRecord", New Object() {dsSynDetail, TransID, TransType, strErr})
            TransID = CType(results(1),Long)
            TransType = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub saveAddPDFSynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String)
            Me.saveAddPDFSynRecordAsync(dsSynDetail, TransID, TransType, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub saveAddPDFSynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.saveAddPDFSynRecordOperationCompleted Is Nothing) Then
                Me.saveAddPDFSynRecordOperationCompleted = AddressOf Me.OnsaveAddPDFSynRecordOperationCompleted
            End If
            Me.InvokeAsync("saveAddPDFSynRecord", New Object() {dsSynDetail, TransID, TransType, strErr}, Me.saveAddPDFSynRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnsaveAddPDFSynRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.saveAddPDFSynRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent saveAddPDFSynRecordCompleted(Me, New saveAddPDFSynRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/checkAddPDFSynRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function checkAddPDFSynRecord(ByVal dsSynDetail As System.Data.DataSet, ByRef TransID As Long, ByRef TransType As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("checkAddPDFSynRecord", New Object() {dsSynDetail, TransID, TransType, strErr})
            TransID = CType(results(1),Long)
            TransType = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub checkAddPDFSynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String)
            Me.checkAddPDFSynRecordAsync(dsSynDetail, TransID, TransType, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub checkAddPDFSynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.checkAddPDFSynRecordOperationCompleted Is Nothing) Then
                Me.checkAddPDFSynRecordOperationCompleted = AddressOf Me.OncheckAddPDFSynRecordOperationCompleted
            End If
            Me.InvokeAsync("checkAddPDFSynRecord", New Object() {dsSynDetail, TransID, TransType, strErr}, Me.checkAddPDFSynRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OncheckAddPDFSynRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.checkAddPDFSynRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent checkAddPDFSynRecordCompleted(Me, New checkAddPDFSynRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/saveWithdrawPDFRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function saveWithdrawPDFRecord(ByVal dsSynDetail As System.Data.DataSet, ByRef TransID As Long, ByRef TransType As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("saveWithdrawPDFRecord", New Object() {dsSynDetail, TransID, TransType, strErr})
            TransID = CType(results(1),Long)
            TransType = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub saveWithdrawPDFRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String)
            Me.saveWithdrawPDFRecordAsync(dsSynDetail, TransID, TransType, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub saveWithdrawPDFRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.saveWithdrawPDFRecordOperationCompleted Is Nothing) Then
                Me.saveWithdrawPDFRecordOperationCompleted = AddressOf Me.OnsaveWithdrawPDFRecordOperationCompleted
            End If
            Me.InvokeAsync("saveWithdrawPDFRecord", New Object() {dsSynDetail, TransID, TransType, strErr}, Me.saveWithdrawPDFRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnsaveWithdrawPDFRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.saveWithdrawPDFRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent saveWithdrawPDFRecordCompleted(Me, New saveWithdrawPDFRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPDFEnquiry", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPDFEnquiry(ByVal dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPDFEnquiry", New Object() {dsSendData, dsReceData, strErr})
            dsReceData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPDFEnquiryAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetPDFEnquiryAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPDFEnquiryAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPDFEnquiryOperationCompleted Is Nothing) Then
                Me.GetPDFEnquiryOperationCompleted = AddressOf Me.OnGetPDFEnquiryOperationCompleted
            End If
            Me.InvokeAsync("GetPDFEnquiry", New Object() {dsSendData, dsReceData, strErr}, Me.GetPDFEnquiryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPDFEnquiryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPDFEnquiryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPDFEnquiryCompleted(Me, New GetPDFEnquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetSWInMainRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSWInMainRecord(ByRef dsSWInMain As System.Data.DataSet, ByRef TransID As Long, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSWInMainRecord", New Object() {dsSWInMain, TransID, strErr})
            dsSWInMain = CType(results(1),System.Data.DataSet)
            TransID = CType(results(2),Long)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSWInMainRecordAsync(ByVal dsSWInMain As System.Data.DataSet, ByVal TransID As Long, ByVal strErr As String)
            Me.GetSWInMainRecordAsync(dsSWInMain, TransID, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSWInMainRecordAsync(ByVal dsSWInMain As System.Data.DataSet, ByVal TransID As Long, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetSWInMainRecordOperationCompleted Is Nothing) Then
                Me.GetSWInMainRecordOperationCompleted = AddressOf Me.OnGetSWInMainRecordOperationCompleted
            End If
            Me.InvokeAsync("GetSWInMainRecord", New Object() {dsSWInMain, TransID, strErr}, Me.GetSWInMainRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSWInMainRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSWInMainRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSWInMainRecordCompleted(Me, New GetSWInMainRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/saveFundAllocSynRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function saveFundAllocSynRecord(ByVal dsSynDetail As System.Data.DataSet, ByRef TransID As Long, ByRef TransType As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("saveFundAllocSynRecord", New Object() {dsSynDetail, TransID, TransType, strErr})
            TransID = CType(results(1),Long)
            TransType = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub saveFundAllocSynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String)
            Me.saveFundAllocSynRecordAsync(dsSynDetail, TransID, TransType, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub saveFundAllocSynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.saveFundAllocSynRecordOperationCompleted Is Nothing) Then
                Me.saveFundAllocSynRecordOperationCompleted = AddressOf Me.OnsaveFundAllocSynRecordOperationCompleted
            End If
            Me.InvokeAsync("saveFundAllocSynRecord", New Object() {dsSynDetail, TransID, TransType, strErr}, Me.saveFundAllocSynRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnsaveFundAllocSynRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.saveFundAllocSynRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent saveFundAllocSynRecordCompleted(Me, New saveFundAllocSynRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetFundAllocRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFundAllocRecord(ByRef dsSWInMain As System.Data.DataSet, ByRef TransID As Long, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFundAllocRecord", New Object() {dsSWInMain, TransID, strErr})
            dsSWInMain = CType(results(1),System.Data.DataSet)
            TransID = CType(results(2),Long)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFundAllocRecordAsync(ByVal dsSWInMain As System.Data.DataSet, ByVal TransID As Long, ByVal strErr As String)
            Me.GetFundAllocRecordAsync(dsSWInMain, TransID, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFundAllocRecordAsync(ByVal dsSWInMain As System.Data.DataSet, ByVal TransID As Long, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetFundAllocRecordOperationCompleted Is Nothing) Then
                Me.GetFundAllocRecordOperationCompleted = AddressOf Me.OnGetFundAllocRecordOperationCompleted
            End If
            Me.InvokeAsync("GetFundAllocRecord", New Object() {dsSWInMain, TransID, strErr}, Me.GetFundAllocRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFundAllocRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFundAllocRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFundAllocRecordCompleted(Me, New GetFundAllocRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SaveParSurrSynRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveParSurrSynRecord(ByVal dsSynDetail As System.Data.DataSet, ByRef TransID As Long, ByRef TransType As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveParSurrSynRecord", New Object() {dsSynDetail, TransID, TransType, strErr})
            TransID = CType(results(1),Long)
            TransType = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveParSurrSynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String)
            Me.SaveParSurrSynRecordAsync(dsSynDetail, TransID, TransType, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveParSurrSynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.SaveParSurrSynRecordOperationCompleted Is Nothing) Then
                Me.SaveParSurrSynRecordOperationCompleted = AddressOf Me.OnSaveParSurrSynRecordOperationCompleted
            End If
            Me.InvokeAsync("SaveParSurrSynRecord", New Object() {dsSynDetail, TransID, TransType, strErr}, Me.SaveParSurrSynRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveParSurrSynRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveParSurrSynRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveParSurrSynRecordCompleted(Me, New SaveParSurrSynRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetAllParSurrRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllParSurrRecord(ByRef dsParSurr As System.Data.DataSet, ByRef TransID As Long, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAllParSurrRecord", New Object() {dsParSurr, TransID, strErr})
            dsParSurr = CType(results(1),System.Data.DataSet)
            TransID = CType(results(2),Long)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllParSurrRecordAsync(ByVal dsParSurr As System.Data.DataSet, ByVal TransID As Long, ByVal strErr As String)
            Me.GetAllParSurrRecordAsync(dsParSurr, TransID, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllParSurrRecordAsync(ByVal dsParSurr As System.Data.DataSet, ByVal TransID As Long, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetAllParSurrRecordOperationCompleted Is Nothing) Then
                Me.GetAllParSurrRecordOperationCompleted = AddressOf Me.OnGetAllParSurrRecordOperationCompleted
            End If
            Me.InvokeAsync("GetAllParSurrRecord", New Object() {dsParSurr, TransID, strErr}, Me.GetAllParSurrRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllParSurrRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllParSurrRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllParSurrRecordCompleted(Me, New GetAllParSurrRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/saveFSSynRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function saveFSSynRecord(ByVal dsSynDetail As System.Data.DataSet, ByRef TransID As Long, ByRef TransType As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("saveFSSynRecord", New Object() {dsSynDetail, TransID, TransType, strErr})
            TransID = CType(results(1),Long)
            TransType = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub saveFSSynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String)
            Me.saveFSSynRecordAsync(dsSynDetail, TransID, TransType, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub saveFSSynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.saveFSSynRecordOperationCompleted Is Nothing) Then
                Me.saveFSSynRecordOperationCompleted = AddressOf Me.OnsaveFSSynRecordOperationCompleted
            End If
            Me.InvokeAsync("saveFSSynRecord", New Object() {dsSynDetail, TransID, TransType, strErr}, Me.saveFSSynRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnsaveFSSynRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.saveFSSynRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent saveFSSynRecordCompleted(Me, New saveFSSynRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/saveReInstateSynRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function saveReInstateSynRecord(ByVal dsSynDetail As System.Data.DataSet, ByRef TransID As Long, ByRef TransType As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("saveReInstateSynRecord", New Object() {dsSynDetail, TransID, TransType, strErr})
            TransID = CType(results(1),Long)
            TransType = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub saveReInstateSynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String)
            Me.saveReInstateSynRecordAsync(dsSynDetail, TransID, TransType, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub saveReInstateSynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.saveReInstateSynRecordOperationCompleted Is Nothing) Then
                Me.saveReInstateSynRecordOperationCompleted = AddressOf Me.OnsaveReInstateSynRecordOperationCompleted
            End If
            Me.InvokeAsync("saveReInstateSynRecord", New Object() {dsSynDetail, TransID, TransType, strErr}, Me.saveReInstateSynRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnsaveReInstateSynRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.saveReInstateSynRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent saveReInstateSynRecordCompleted(Me, New saveReInstateSynRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetReinstateEnquiry", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReinstateEnquiry(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetReinstateEnquiry", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReinstateEnquiryAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetReinstateEnquiryAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReinstateEnquiryAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetReinstateEnquiryOperationCompleted Is Nothing) Then
                Me.GetReinstateEnquiryOperationCompleted = AddressOf Me.OnGetReinstateEnquiryOperationCompleted
            End If
            Me.InvokeAsync("GetReinstateEnquiry", New Object() {dsSendData, dsReceData, strErr}, Me.GetReinstateEnquiryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReinstateEnquiryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReinstateEnquiryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReinstateEnquiryCompleted(Me, New GetReinstateEnquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetReinstateRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReinstateRecord(ByRef dsReinstate As System.Data.DataSet, ByRef TransID As Long, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetReinstateRecord", New Object() {dsReinstate, TransID, strErr})
            dsReinstate = CType(results(1),System.Data.DataSet)
            TransID = CType(results(2),Long)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReinstateRecordAsync(ByVal dsReinstate As System.Data.DataSet, ByVal TransID As Long, ByVal strErr As String)
            Me.GetReinstateRecordAsync(dsReinstate, TransID, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReinstateRecordAsync(ByVal dsReinstate As System.Data.DataSet, ByVal TransID As Long, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetReinstateRecordOperationCompleted Is Nothing) Then
                Me.GetReinstateRecordOperationCompleted = AddressOf Me.OnGetReinstateRecordOperationCompleted
            End If
            Me.InvokeAsync("GetReinstateRecord", New Object() {dsReinstate, TransID, strErr}, Me.GetReinstateRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReinstateRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReinstateRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReinstateRecordCompleted(Me, New GetReinstateRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CheckReinstateTheOneMedical", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckReinstateTheOneMedical(ByVal strPolicyNo As String, ByRef IsTheOneProduct As Boolean, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckReinstateTheOneMedical", New Object() {strPolicyNo, IsTheOneProduct, strErr})
            IsTheOneProduct = CType(results(1),Boolean)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckReinstateTheOneMedicalAsync(ByVal strPolicyNo As String, ByVal IsTheOneProduct As Boolean, ByVal strErr As String)
            Me.CheckReinstateTheOneMedicalAsync(strPolicyNo, IsTheOneProduct, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckReinstateTheOneMedicalAsync(ByVal strPolicyNo As String, ByVal IsTheOneProduct As Boolean, ByVal strErr As String, ByVal userState As Object)
            If (Me.CheckReinstateTheOneMedicalOperationCompleted Is Nothing) Then
                Me.CheckReinstateTheOneMedicalOperationCompleted = AddressOf Me.OnCheckReinstateTheOneMedicalOperationCompleted
            End If
            Me.InvokeAsync("CheckReinstateTheOneMedical", New Object() {strPolicyNo, IsTheOneProduct, strErr}, Me.CheckReinstateTheOneMedicalOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckReinstateTheOneMedicalOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckReinstateTheOneMedicalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckReinstateTheOneMedicalCompleted(Me, New CheckReinstateTheOneMedicalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetBeneShareRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBeneShareRecord(ByVal strPolicyNo As String, ByVal intClientNo As Integer, ByRef dsBeneShare As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetBeneShareRecord", New Object() {strPolicyNo, intClientNo, dsBeneShare, strErr})
            dsBeneShare = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBeneShareRecordAsync(ByVal strPolicyNo As String, ByVal intClientNo As Integer, ByVal dsBeneShare As System.Data.DataSet, ByVal strErr As String)
            Me.GetBeneShareRecordAsync(strPolicyNo, intClientNo, dsBeneShare, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBeneShareRecordAsync(ByVal strPolicyNo As String, ByVal intClientNo As Integer, ByVal dsBeneShare As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetBeneShareRecordOperationCompleted Is Nothing) Then
                Me.GetBeneShareRecordOperationCompleted = AddressOf Me.OnGetBeneShareRecordOperationCompleted
            End If
            Me.InvokeAsync("GetBeneShareRecord", New Object() {strPolicyNo, intClientNo, dsBeneShare, strErr}, Me.GetBeneShareRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBeneShareRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBeneShareRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBeneShareRecordCompleted(Me, New GetBeneShareRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/saveCltRelationSynRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function saveCltRelationSynRecord(ByVal dsSynDetail As System.Data.DataSet, ByVal dsBefore As System.Data.DataSet, ByVal dsAfter As System.Data.DataSet, ByRef lngTransID As Long, ByRef strTransType As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("saveCltRelationSynRecord", New Object() {dsSynDetail, dsBefore, dsAfter, lngTransID, strTransType, strErr})
            lngTransID = CType(results(1),Long)
            strTransType = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub saveCltRelationSynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal dsBefore As System.Data.DataSet, ByVal dsAfter As System.Data.DataSet, ByVal lngTransID As Long, ByVal strTransType As String, ByVal strErr As String)
            Me.saveCltRelationSynRecordAsync(dsSynDetail, dsBefore, dsAfter, lngTransID, strTransType, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub saveCltRelationSynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal dsBefore As System.Data.DataSet, ByVal dsAfter As System.Data.DataSet, ByVal lngTransID As Long, ByVal strTransType As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.saveCltRelationSynRecordOperationCompleted Is Nothing) Then
                Me.saveCltRelationSynRecordOperationCompleted = AddressOf Me.OnsaveCltRelationSynRecordOperationCompleted
            End If
            Me.InvokeAsync("saveCltRelationSynRecord", New Object() {dsSynDetail, dsBefore, dsAfter, lngTransID, strTransType, strErr}, Me.saveCltRelationSynRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnsaveCltRelationSynRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.saveCltRelationSynRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent saveCltRelationSynRecordCompleted(Me, New saveCltRelationSynRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetContAssign", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetContAssign(ByVal lngTransID As Long, ByRef dsContAssign As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetContAssign", New Object() {lngTransID, dsContAssign, strErr})
            dsContAssign = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetContAssignAsync(ByVal lngTransID As Long, ByVal dsContAssign As System.Data.DataSet, ByVal strErr As String)
            Me.GetContAssignAsync(lngTransID, dsContAssign, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetContAssignAsync(ByVal lngTransID As Long, ByVal dsContAssign As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetContAssignOperationCompleted Is Nothing) Then
                Me.GetContAssignOperationCompleted = AddressOf Me.OnGetContAssignOperationCompleted
            End If
            Me.InvokeAsync("GetContAssign", New Object() {lngTransID, dsContAssign, strErr}, Me.GetContAssignOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetContAssignOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetContAssignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetContAssignCompleted(Me, New GetContAssignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetContBene", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetContBene(ByVal lngTransID As Long, ByRef dsContBene As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetContBene", New Object() {lngTransID, dsContBene, strErr})
            dsContBene = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetContBeneAsync(ByVal lngTransID As Long, ByVal dsContBene As System.Data.DataSet, ByVal strErr As String)
            Me.GetContBeneAsync(lngTransID, dsContBene, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetContBeneAsync(ByVal lngTransID As Long, ByVal dsContBene As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetContBeneOperationCompleted Is Nothing) Then
                Me.GetContBeneOperationCompleted = AddressOf Me.OnGetContBeneOperationCompleted
            End If
            Me.InvokeAsync("GetContBene", New Object() {lngTransID, dsContBene, strErr}, Me.GetContBeneOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetContBeneOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetContBeneCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetContBeneCompleted(Me, New GetContBeneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCIWPolicyaccount", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCIWPolicyaccount(ByVal sPolicy As String, ByRef dsPolicy As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCIWPolicyaccount", New Object() {sPolicy, dsPolicy, strErr})
            dsPolicy = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCIWPolicyaccountAsync(ByVal sPolicy As String, ByVal dsPolicy As System.Data.DataSet, ByVal strErr As String)
            Me.GetCIWPolicyaccountAsync(sPolicy, dsPolicy, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCIWPolicyaccountAsync(ByVal sPolicy As String, ByVal dsPolicy As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCIWPolicyaccountOperationCompleted Is Nothing) Then
                Me.GetCIWPolicyaccountOperationCompleted = AddressOf Me.OnGetCIWPolicyaccountOperationCompleted
            End If
            Me.InvokeAsync("GetCIWPolicyaccount", New Object() {sPolicy, dsPolicy, strErr}, Me.GetCIWPolicyaccountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCIWPolicyaccountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCIWPolicyaccountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCIWPolicyaccountCompleted(Me, New GetCIWPolicyaccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetContOwner", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetContOwner(ByVal lngTransID As Long, ByRef dsContOwner As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetContOwner", New Object() {lngTransID, dsContOwner, strErr})
            dsContOwner = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetContOwnerAsync(ByVal lngTransID As Long, ByVal dsContOwner As System.Data.DataSet, ByVal strErr As String)
            Me.GetContOwnerAsync(lngTransID, dsContOwner, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetContOwnerAsync(ByVal lngTransID As Long, ByVal dsContOwner As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetContOwnerOperationCompleted Is Nothing) Then
                Me.GetContOwnerOperationCompleted = AddressOf Me.OnGetContOwnerOperationCompleted
            End If
            Me.InvokeAsync("GetContOwner", New Object() {lngTransID, dsContOwner, strErr}, Me.GetContOwnerOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetContOwnerOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetContOwnerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetContOwnerCompleted(Me, New GetContOwnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPayor", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPayor(ByVal lngTransID As Long, ByRef dsPayor As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPayor", New Object() {lngTransID, dsPayor, strErr})
            dsPayor = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPayorAsync(ByVal lngTransID As Long, ByVal dsPayor As System.Data.DataSet, ByVal strErr As String)
            Me.GetPayorAsync(lngTransID, dsPayor, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPayorAsync(ByVal lngTransID As Long, ByVal dsPayor As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPayorOperationCompleted Is Nothing) Then
                Me.GetPayorOperationCompleted = AddressOf Me.OnGetPayorOperationCompleted
            End If
            Me.InvokeAsync("GetPayor", New Object() {lngTransID, dsPayor, strErr}, Me.GetPayorOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPayorOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPayorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPayorCompleted(Me, New GetPayorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetBillingChgRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBillingChgRecord(ByRef dsBillingChg As System.Data.DataSet, ByRef lngTransID As Long, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetBillingChgRecord", New Object() {dsBillingChg, lngTransID, strErr})
            dsBillingChg = CType(results(1),System.Data.DataSet)
            lngTransID = CType(results(2),Long)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBillingChgRecordAsync(ByVal dsBillingChg As System.Data.DataSet, ByVal lngTransID As Long, ByVal strErr As String)
            Me.GetBillingChgRecordAsync(dsBillingChg, lngTransID, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBillingChgRecordAsync(ByVal dsBillingChg As System.Data.DataSet, ByVal lngTransID As Long, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetBillingChgRecordOperationCompleted Is Nothing) Then
                Me.GetBillingChgRecordOperationCompleted = AddressOf Me.OnGetBillingChgRecordOperationCompleted
            End If
            Me.InvokeAsync("GetBillingChgRecord", New Object() {dsBillingChg, lngTransID, strErr}, Me.GetBillingChgRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBillingChgRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBillingChgRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBillingChgRecordCompleted(Me, New GetBillingChgRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPaymentMethEnq", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPaymentMethEnq(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPaymentMethEnq", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPaymentMethEnqAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetPaymentMethEnqAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPaymentMethEnqAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPaymentMethEnqOperationCompleted Is Nothing) Then
                Me.GetPaymentMethEnqOperationCompleted = AddressOf Me.OnGetPaymentMethEnqOperationCompleted
            End If
            Me.InvokeAsync("GetPaymentMethEnq", New Object() {dsSendData, dsReceData, strErr}, Me.GetPaymentMethEnqOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPaymentMethEnqOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPaymentMethEnqCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPaymentMethEnqCompleted(Me, New GetPaymentMethEnqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetModeCode", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetModeCode(ByRef dsRece As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetModeCode", New Object() {dsRece, strErr})
            dsRece = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetModeCodeAsync(ByVal dsRece As System.Data.DataSet, ByVal strErr As String)
            Me.GetModeCodeAsync(dsRece, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetModeCodeAsync(ByVal dsRece As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetModeCodeOperationCompleted Is Nothing) Then
                Me.GetModeCodeOperationCompleted = AddressOf Me.OnGetModeCodeOperationCompleted
            End If
            Me.InvokeAsync("GetModeCode", New Object() {dsRece, strErr}, Me.GetModeCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetModeCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetModeCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetModeCodeCompleted(Me, New GetModeCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetBillingChgQuot", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBillingChgQuot(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetBillingChgQuot", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBillingChgQuotAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetBillingChgQuotAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBillingChgQuotAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetBillingChgQuotOperationCompleted Is Nothing) Then
                Me.GetBillingChgQuotOperationCompleted = AddressOf Me.OnGetBillingChgQuotOperationCompleted
            End If
            Me.InvokeAsync("GetBillingChgQuot", New Object() {dsSendData, dsReceData, strErr}, Me.GetBillingChgQuotOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBillingChgQuotOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBillingChgQuotCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBillingChgQuotCompleted(Me, New GetBillingChgQuotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/saveBCSynRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function saveBCSynRecord(ByVal dsSynDetail As System.Data.DataSet, ByRef TransID As Long, ByRef TransType As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("saveBCSynRecord", New Object() {dsSynDetail, TransID, TransType, strErr})
            TransID = CType(results(1),Long)
            TransType = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub saveBCSynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String)
            Me.saveBCSynRecordAsync(dsSynDetail, TransID, TransType, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub saveBCSynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.saveBCSynRecordOperationCompleted Is Nothing) Then
                Me.saveBCSynRecordOperationCompleted = AddressOf Me.OnsaveBCSynRecordOperationCompleted
            End If
            Me.InvokeAsync("saveBCSynRecord", New Object() {dsSynDetail, TransID, TransType, strErr}, Me.saveBCSynRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnsaveBCSynRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.saveBCSynRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent saveBCSynRecordCompleted(Me, New saveBCSynRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ProcEventLog", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcEventLog(ByVal dsCIW As System.Data.DataSet, ByRef strRtnMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("ProcEventLog", New Object() {dsCIW, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcEventLogAsync(ByVal dsCIW As System.Data.DataSet, ByVal strRtnMsg As String)
            Me.ProcEventLogAsync(dsCIW, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcEventLogAsync(ByVal dsCIW As System.Data.DataSet, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.ProcEventLogOperationCompleted Is Nothing) Then
                Me.ProcEventLogOperationCompleted = AddressOf Me.OnProcEventLogOperationCompleted
            End If
            Me.InvokeAsync("ProcEventLog", New Object() {dsCIW, strRtnMsg}, Me.ProcEventLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcEventLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcEventLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcEventLogCompleted(Me, New ProcEventLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/PrepareTransQDT", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrepareTransQDT(ByVal sActMode As String, ByVal strTransType As String, ByVal strTransID As Long, ByVal strPolicyNo As String, ByVal sStatus As String, ByVal sSubStatus As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("PrepareTransQDT", New Object() {sActMode, strTransType, strTransID, strPolicyNo, sStatus, sSubStatus, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrepareTransQDTAsync(ByVal sActMode As String, ByVal strTransType As String, ByVal strTransID As Long, ByVal strPolicyNo As String, ByVal sStatus As String, ByVal sSubStatus As String, ByVal strErr As String)
            Me.PrepareTransQDTAsync(sActMode, strTransType, strTransID, strPolicyNo, sStatus, sSubStatus, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrepareTransQDTAsync(ByVal sActMode As String, ByVal strTransType As String, ByVal strTransID As Long, ByVal strPolicyNo As String, ByVal sStatus As String, ByVal sSubStatus As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.PrepareTransQDTOperationCompleted Is Nothing) Then
                Me.PrepareTransQDTOperationCompleted = AddressOf Me.OnPrepareTransQDTOperationCompleted
            End If
            Me.InvokeAsync("PrepareTransQDT", New Object() {sActMode, strTransType, strTransID, strPolicyNo, sStatus, sSubStatus, strErr}, Me.PrepareTransQDTOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrepareTransQDTOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrepareTransQDTCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrepareTransQDTCompleted(Me, New PrepareTransQDTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransQueRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransQueRecord(ByVal dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransQueRecord", New Object() {dsSendData, dsReceData, strErr})
            dsReceData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransQueRecordAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetTransQueRecordAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransQueRecordAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransQueRecordOperationCompleted Is Nothing) Then
                Me.GetTransQueRecordOperationCompleted = AddressOf Me.OnGetTransQueRecordOperationCompleted
            End If
            Me.InvokeAsync("GetTransQueRecord", New Object() {dsSendData, dsReceData, strErr}, Me.GetTransQueRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransQueRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransQueRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransQueRecordCompleted(Me, New GetTransQueRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransQueRecordBetterVersion", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransQueRecordBetterVersion(ByVal dsSendData As System.Data.DataSet, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByRef data() As Byte, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransQueRecordBetterVersion", New Object() {dsSendData, data, strErr})
            data = CType(results(1),Byte())
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransQueRecordBetterVersionAsync(ByVal dsSendData As System.Data.DataSet, ByVal data() As Byte, ByVal strErr As String)
            Me.GetTransQueRecordBetterVersionAsync(dsSendData, data, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransQueRecordBetterVersionAsync(ByVal dsSendData As System.Data.DataSet, ByVal data() As Byte, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransQueRecordBetterVersionOperationCompleted Is Nothing) Then
                Me.GetTransQueRecordBetterVersionOperationCompleted = AddressOf Me.OnGetTransQueRecordBetterVersionOperationCompleted
            End If
            Me.InvokeAsync("GetTransQueRecordBetterVersion", New Object() {dsSendData, data, strErr}, Me.GetTransQueRecordBetterVersionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransQueRecordBetterVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransQueRecordBetterVersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransQueRecordBetterVersionCompleted(Me, New GetTransQueRecordBetterVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransHeadType", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransHeadType(ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransHeadType", New Object() {dsReceData, strErr})
            dsReceData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransHeadTypeAsync(ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetTransHeadTypeAsync(dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransHeadTypeAsync(ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransHeadTypeOperationCompleted Is Nothing) Then
                Me.GetTransHeadTypeOperationCompleted = AddressOf Me.OnGetTransHeadTypeOperationCompleted
            End If
            Me.InvokeAsync("GetTransHeadType", New Object() {dsReceData, strErr}, Me.GetTransHeadTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransHeadTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransHeadTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransHeadTypeCompleted(Me, New GetTransHeadTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLogonDB", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLogonDB(ByVal strCompany As String, ByVal strUserID As String, ByRef dsLogon As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLogonDB", New Object() {strCompany, strUserID, dsLogon, strErr})
            dsLogon = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLogonDBAsync(ByVal strCompany As String, ByVal strUserID As String, ByVal dsLogon As System.Data.DataSet, ByVal strErr As String)
            Me.GetLogonDBAsync(strCompany, strUserID, dsLogon, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLogonDBAsync(ByVal strCompany As String, ByVal strUserID As String, ByVal dsLogon As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLogonDBOperationCompleted Is Nothing) Then
                Me.GetLogonDBOperationCompleted = AddressOf Me.OnGetLogonDBOperationCompleted
            End If
            Me.InvokeAsync("GetLogonDB", New Object() {strCompany, strUserID, dsLogon, strErr}, Me.GetLogonDBOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLogonDBOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLogonDBCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLogonDBCompleted(Me, New GetLogonDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetMenuItem", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMenuItem(ByVal strCompany As String, ByVal strUserID As String, ByRef dsMenuItem As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetMenuItem", New Object() {strCompany, strUserID, dsMenuItem, strErr})
            dsMenuItem = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMenuItemAsync(ByVal strCompany As String, ByVal strUserID As String, ByVal dsMenuItem As System.Data.DataSet, ByVal strErr As String)
            Me.GetMenuItemAsync(strCompany, strUserID, dsMenuItem, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMenuItemAsync(ByVal strCompany As String, ByVal strUserID As String, ByVal dsMenuItem As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetMenuItemOperationCompleted Is Nothing) Then
                Me.GetMenuItemOperationCompleted = AddressOf Me.OnGetMenuItemOperationCompleted
            End If
            Me.InvokeAsync("GetMenuItem", New Object() {strCompany, strUserID, dsMenuItem, strErr}, Me.GetMenuItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMenuItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMenuItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMenuItemCompleted(Me, New GetMenuItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getPayment_Freq", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPayment_Freq(ByVal filterItem As String) As String
            Dim results() As Object = Me.Invoke("getPayment_Freq", New Object() {filterItem})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPayment_FreqAsync(ByVal filterItem As String)
            Me.getPayment_FreqAsync(filterItem, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPayment_FreqAsync(ByVal filterItem As String, ByVal userState As Object)
            If (Me.getPayment_FreqOperationCompleted Is Nothing) Then
                Me.getPayment_FreqOperationCompleted = AddressOf Me.OngetPayment_FreqOperationCompleted
            End If
            Me.InvokeAsync("getPayment_Freq", New Object() {filterItem}, Me.getPayment_FreqOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPayment_FreqOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPayment_FreqCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPayment_FreqCompleted(Me, New getPayment_FreqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getPayment_Meth", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPayment_Meth(ByVal filterItem As String) As String
            Dim results() As Object = Me.Invoke("getPayment_Meth", New Object() {filterItem})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPayment_MethAsync(ByVal filterItem As String)
            Me.getPayment_MethAsync(filterItem, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPayment_MethAsync(ByVal filterItem As String, ByVal userState As Object)
            If (Me.getPayment_MethOperationCompleted Is Nothing) Then
                Me.getPayment_MethOperationCompleted = AddressOf Me.OngetPayment_MethOperationCompleted
            End If
            Me.InvokeAsync("getPayment_Meth", New Object() {filterItem}, Me.getPayment_MethOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPayment_MethOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPayment_MethCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPayment_MethCompleted(Me, New getPayment_MethCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetBillingNo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBillingNo(ByVal strPolicyNo As String, ByRef billNo As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetBillingNo", New Object() {strPolicyNo, billNo, strErr})
            billNo = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBillingNoAsync(ByVal strPolicyNo As String, ByVal billNo As String, ByVal strErr As String)
            Me.GetBillingNoAsync(strPolicyNo, billNo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBillingNoAsync(ByVal strPolicyNo As String, ByVal billNo As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetBillingNoOperationCompleted Is Nothing) Then
                Me.GetBillingNoOperationCompleted = AddressOf Me.OnGetBillingNoOperationCompleted
            End If
            Me.InvokeAsync("GetBillingNo", New Object() {strPolicyNo, billNo, strErr}, Me.GetBillingNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBillingNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBillingNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBillingNoCompleted(Me, New GetBillingNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCIWOwnerInsured", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCIWOwnerInsured(ByVal strPolicyNo As String, ByRef dsData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCIWOwnerInsured", New Object() {strPolicyNo, dsData, strErr})
            dsData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCIWOwnerInsuredAsync(ByVal strPolicyNo As String, ByVal dsData As System.Data.DataSet, ByVal strErr As String)
            Me.GetCIWOwnerInsuredAsync(strPolicyNo, dsData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCIWOwnerInsuredAsync(ByVal strPolicyNo As String, ByVal dsData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCIWOwnerInsuredOperationCompleted Is Nothing) Then
                Me.GetCIWOwnerInsuredOperationCompleted = AddressOf Me.OnGetCIWOwnerInsuredOperationCompleted
            End If
            Me.InvokeAsync("GetCIWOwnerInsured", New Object() {strPolicyNo, dsData, strErr}, Me.GetCIWOwnerInsuredOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCIWOwnerInsuredOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCIWOwnerInsuredCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCIWOwnerInsuredCompleted(Me, New GetCIWOwnerInsuredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SendNoClaimDiscReq", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendNoClaimDiscReq(ByVal dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SendNoClaimDiscReq", New Object() {dsSendData, dsReceData, strErr})
            dsReceData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendNoClaimDiscReqAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.SendNoClaimDiscReqAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendNoClaimDiscReqAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.SendNoClaimDiscReqOperationCompleted Is Nothing) Then
                Me.SendNoClaimDiscReqOperationCompleted = AddressOf Me.OnSendNoClaimDiscReqOperationCompleted
            End If
            Me.InvokeAsync("SendNoClaimDiscReq", New Object() {dsSendData, dsReceData, strErr}, Me.SendNoClaimDiscReqOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendNoClaimDiscReqOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendNoClaimDiscReqCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendNoClaimDiscReqCompleted(Me, New SendNoClaimDiscReqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/savePremiumHolidaySynRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function savePremiumHolidaySynRecord(ByVal dsSynDetail As System.Data.DataSet, ByRef TransID As Long, ByRef TransType As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("savePremiumHolidaySynRecord", New Object() {dsSynDetail, TransID, TransType, strErr})
            TransID = CType(results(1),Long)
            TransType = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub savePremiumHolidaySynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String)
            Me.savePremiumHolidaySynRecordAsync(dsSynDetail, TransID, TransType, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub savePremiumHolidaySynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.savePremiumHolidaySynRecordOperationCompleted Is Nothing) Then
                Me.savePremiumHolidaySynRecordOperationCompleted = AddressOf Me.OnsavePremiumHolidaySynRecordOperationCompleted
            End If
            Me.InvokeAsync("savePremiumHolidaySynRecord", New Object() {dsSynDetail, TransID, TransType, strErr}, Me.savePremiumHolidaySynRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnsavePremiumHolidaySynRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.savePremiumHolidaySynRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent savePremiumHolidaySynRecordCompleted(Me, New savePremiumHolidaySynRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPremiumHolidayMainRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPremiumHolidayMainRecord(ByVal lngTransID As Long, ByRef dsTrans As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPremiumHolidayMainRecord", New Object() {lngTransID, dsTrans, strErr})
            dsTrans = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPremiumHolidayMainRecordAsync(ByVal lngTransID As Long, ByVal dsTrans As System.Data.DataSet, ByVal strErr As String)
            Me.GetPremiumHolidayMainRecordAsync(lngTransID, dsTrans, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPremiumHolidayMainRecordAsync(ByVal lngTransID As Long, ByVal dsTrans As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPremiumHolidayMainRecordOperationCompleted Is Nothing) Then
                Me.GetPremiumHolidayMainRecordOperationCompleted = AddressOf Me.OnGetPremiumHolidayMainRecordOperationCompleted
            End If
            Me.InvokeAsync("GetPremiumHolidayMainRecord", New Object() {lngTransID, dsTrans, strErr}, Me.GetPremiumHolidayMainRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPremiumHolidayMainRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPremiumHolidayMainRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPremiumHolidayMainRecordCompleted(Me, New GetPremiumHolidayMainRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPremiumHolidayMainRecordByPolicy", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPremiumHolidayMainRecordByPolicy(ByVal strPolicyNo As String, ByRef dsTrans As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPremiumHolidayMainRecordByPolicy", New Object() {strPolicyNo, dsTrans, strErr})
            dsTrans = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPremiumHolidayMainRecordByPolicyAsync(ByVal strPolicyNo As String, ByVal dsTrans As System.Data.DataSet, ByVal strErr As String)
            Me.GetPremiumHolidayMainRecordByPolicyAsync(strPolicyNo, dsTrans, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPremiumHolidayMainRecordByPolicyAsync(ByVal strPolicyNo As String, ByVal dsTrans As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPremiumHolidayMainRecordByPolicyOperationCompleted Is Nothing) Then
                Me.GetPremiumHolidayMainRecordByPolicyOperationCompleted = AddressOf Me.OnGetPremiumHolidayMainRecordByPolicyOperationCompleted
            End If
            Me.InvokeAsync("GetPremiumHolidayMainRecordByPolicy", New Object() {strPolicyNo, dsTrans, strErr}, Me.GetPremiumHolidayMainRecordByPolicyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPremiumHolidayMainRecordByPolicyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPremiumHolidayMainRecordByPolicyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPremiumHolidayMainRecordByPolicyCompleted(Me, New GetPremiumHolidayMainRecordByPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetAvailableFundList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAvailableFundList(ByVal dteEffDate As Date, ByVal strToCurrency As String, ByRef dsFundList As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAvailableFundList", New Object() {dteEffDate, strToCurrency, dsFundList, strErr})
            dsFundList = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAvailableFundListAsync(ByVal dteEffDate As Date, ByVal strToCurrency As String, ByVal dsFundList As System.Data.DataSet, ByVal strErr As String)
            Me.GetAvailableFundListAsync(dteEffDate, strToCurrency, dsFundList, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAvailableFundListAsync(ByVal dteEffDate As Date, ByVal strToCurrency As String, ByVal dsFundList As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetAvailableFundListOperationCompleted Is Nothing) Then
                Me.GetAvailableFundListOperationCompleted = AddressOf Me.OnGetAvailableFundListOperationCompleted
            End If
            Me.InvokeAsync("GetAvailableFundList", New Object() {dteEffDate, strToCurrency, dsFundList, strErr}, Me.GetAvailableFundListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAvailableFundListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAvailableFundListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAvailableFundListCompleted(Me, New GetAvailableFundListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/PlanNotAllowAECard", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PlanNotAllowAECard(ByVal strPlanCode As String, ByRef IsNotAllowAECard As Boolean, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("PlanNotAllowAECard", New Object() {strPlanCode, IsNotAllowAECard, strErr})
            IsNotAllowAECard = CType(results(1),Boolean)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PlanNotAllowAECardAsync(ByVal strPlanCode As String, ByVal IsNotAllowAECard As Boolean, ByVal strErr As String)
            Me.PlanNotAllowAECardAsync(strPlanCode, IsNotAllowAECard, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PlanNotAllowAECardAsync(ByVal strPlanCode As String, ByVal IsNotAllowAECard As Boolean, ByVal strErr As String, ByVal userState As Object)
            If (Me.PlanNotAllowAECardOperationCompleted Is Nothing) Then
                Me.PlanNotAllowAECardOperationCompleted = AddressOf Me.OnPlanNotAllowAECardOperationCompleted
            End If
            Me.InvokeAsync("PlanNotAllowAECard", New Object() {strPlanCode, IsNotAllowAECard, strErr}, Me.PlanNotAllowAECardOperationCompleted, userState)
        End Sub
        
        Private Sub OnPlanNotAllowAECardOperationCompleted(ByVal arg As Object)
            If (Not (Me.PlanNotAllowAECardCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PlanNotAllowAECardCompleted(Me, New PlanNotAllowAECardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UFProductChecking", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UFProductChecking(ByVal strBasicPlan As String, ByRef IsShowMessage As Boolean, ByRef strWarnMessage As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UFProductChecking", New Object() {strBasicPlan, IsShowMessage, strWarnMessage, strErr})
            IsShowMessage = CType(results(1),Boolean)
            strWarnMessage = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UFProductCheckingAsync(ByVal strBasicPlan As String, ByVal IsShowMessage As Boolean, ByVal strWarnMessage As String, ByVal strErr As String)
            Me.UFProductCheckingAsync(strBasicPlan, IsShowMessage, strWarnMessage, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UFProductCheckingAsync(ByVal strBasicPlan As String, ByVal IsShowMessage As Boolean, ByVal strWarnMessage As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.UFProductCheckingOperationCompleted Is Nothing) Then
                Me.UFProductCheckingOperationCompleted = AddressOf Me.OnUFProductCheckingOperationCompleted
            End If
            Me.InvokeAsync("UFProductChecking", New Object() {strBasicPlan, IsShowMessage, strWarnMessage, strErr}, Me.UFProductCheckingOperationCompleted, userState)
        End Sub
        
        Private Sub OnUFProductCheckingOperationCompleted(ByVal arg As Object)
            If (Not (Me.UFProductCheckingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UFProductCheckingCompleted(Me, New UFProductCheckingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/FreeWithdrawalPeriodChecking", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FreeWithdrawalPeriodChecking(ByVal strBasicPlan As String, ByRef IsShowMessage As Boolean, ByRef IsWarn As Boolean, ByRef strWarnMessage As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("FreeWithdrawalPeriodChecking", New Object() {strBasicPlan, IsShowMessage, IsWarn, strWarnMessage, strErr})
            IsShowMessage = CType(results(1),Boolean)
            IsWarn = CType(results(2),Boolean)
            strWarnMessage = CType(results(3),String)
            strErr = CType(results(4),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FreeWithdrawalPeriodCheckingAsync(ByVal strBasicPlan As String, ByVal IsShowMessage As Boolean, ByVal IsWarn As Boolean, ByVal strWarnMessage As String, ByVal strErr As String)
            Me.FreeWithdrawalPeriodCheckingAsync(strBasicPlan, IsShowMessage, IsWarn, strWarnMessage, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FreeWithdrawalPeriodCheckingAsync(ByVal strBasicPlan As String, ByVal IsShowMessage As Boolean, ByVal IsWarn As Boolean, ByVal strWarnMessage As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.FreeWithdrawalPeriodCheckingOperationCompleted Is Nothing) Then
                Me.FreeWithdrawalPeriodCheckingOperationCompleted = AddressOf Me.OnFreeWithdrawalPeriodCheckingOperationCompleted
            End If
            Me.InvokeAsync("FreeWithdrawalPeriodChecking", New Object() {strBasicPlan, IsShowMessage, IsWarn, strWarnMessage, strErr}, Me.FreeWithdrawalPeriodCheckingOperationCompleted, userState)
        End Sub
        
        Private Sub OnFreeWithdrawalPeriodCheckingOperationCompleted(ByVal arg As Object)
            If (Not (Me.FreeWithdrawalPeriodCheckingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FreeWithdrawalPeriodCheckingCompleted(Me, New FreeWithdrawalPeriodCheckingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CommissionClawbackChecking", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CommissionClawbackChecking(ByVal strBasicPlan As String, ByRef IsShowMessage As Boolean, ByRef strWarnMessage As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CommissionClawbackChecking", New Object() {strBasicPlan, IsShowMessage, strWarnMessage, strErr})
            IsShowMessage = CType(results(1),Boolean)
            strWarnMessage = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CommissionClawbackCheckingAsync(ByVal strBasicPlan As String, ByVal IsShowMessage As Boolean, ByVal strWarnMessage As String, ByVal strErr As String)
            Me.CommissionClawbackCheckingAsync(strBasicPlan, IsShowMessage, strWarnMessage, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CommissionClawbackCheckingAsync(ByVal strBasicPlan As String, ByVal IsShowMessage As Boolean, ByVal strWarnMessage As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.CommissionClawbackCheckingOperationCompleted Is Nothing) Then
                Me.CommissionClawbackCheckingOperationCompleted = AddressOf Me.OnCommissionClawbackCheckingOperationCompleted
            End If
            Me.InvokeAsync("CommissionClawbackChecking", New Object() {strBasicPlan, IsShowMessage, strWarnMessage, strErr}, Me.CommissionClawbackCheckingOperationCompleted, userState)
        End Sub
        
        Private Sub OnCommissionClawbackCheckingOperationCompleted(ByVal arg As Object)
            If (Not (Me.CommissionClawbackCheckingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CommissionClawbackCheckingCompleted(Me, New CommissionClawbackCheckingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/PlanWarningMessageGeneric", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PlanWarningMessageGeneric(ByVal strBasicPlan As String, ByRef dtPlanWarnMsg As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("PlanWarningMessageGeneric", New Object() {strBasicPlan, dtPlanWarnMsg, strErr})
            dtPlanWarnMsg = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PlanWarningMessageGenericAsync(ByVal strBasicPlan As String, ByVal dtPlanWarnMsg As System.Data.DataTable, ByVal strErr As String)
            Me.PlanWarningMessageGenericAsync(strBasicPlan, dtPlanWarnMsg, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PlanWarningMessageGenericAsync(ByVal strBasicPlan As String, ByVal dtPlanWarnMsg As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.PlanWarningMessageGenericOperationCompleted Is Nothing) Then
                Me.PlanWarningMessageGenericOperationCompleted = AddressOf Me.OnPlanWarningMessageGenericOperationCompleted
            End If
            Me.InvokeAsync("PlanWarningMessageGeneric", New Object() {strBasicPlan, dtPlanWarnMsg, strErr}, Me.PlanWarningMessageGenericOperationCompleted, userState)
        End Sub
        
        Private Sub OnPlanWarningMessageGenericOperationCompleted(ByVal arg As Object)
            If (Not (Me.PlanWarningMessageGenericCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PlanWarningMessageGenericCompleted(Me, New PlanWarningMessageGenericCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCashFlowList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCashFlowList(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCashFlowList", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCashFlowListAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetCashFlowListAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCashFlowListAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCashFlowListOperationCompleted Is Nothing) Then
                Me.GetCashFlowListOperationCompleted = AddressOf Me.OnGetCashFlowListOperationCompleted
            End If
            Me.InvokeAsync("GetCashFlowList", New Object() {dsSendData, dsReceData, strErr}, Me.GetCashFlowListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCashFlowListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCashFlowListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCashFlowListCompleted(Me, New GetCashFlowListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPremiumRoutine", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPremiumRoutine(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPremiumRoutine", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPremiumRoutineAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetPremiumRoutineAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPremiumRoutineAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPremiumRoutineOperationCompleted Is Nothing) Then
                Me.GetPremiumRoutineOperationCompleted = AddressOf Me.OnGetPremiumRoutineOperationCompleted
            End If
            Me.InvokeAsync("GetPremiumRoutine", New Object() {dsSendData, dsReceData, strErr}, Me.GetPremiumRoutineOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPremiumRoutineOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPremiumRoutineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPremiumRoutineCompleted(Me, New GetPremiumRoutineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetRiderPremium", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRiderPremium(ByVal strPolicyNo As String, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetRiderPremium", New Object() {strPolicyNo, dsReceData, strErr})
            dsReceData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRiderPremiumAsync(ByVal strPolicyNo As String, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetRiderPremiumAsync(strPolicyNo, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRiderPremiumAsync(ByVal strPolicyNo As String, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetRiderPremiumOperationCompleted Is Nothing) Then
                Me.GetRiderPremiumOperationCompleted = AddressOf Me.OnGetRiderPremiumOperationCompleted
            End If
            Me.InvokeAsync("GetRiderPremium", New Object() {strPolicyNo, dsReceData, strErr}, Me.GetRiderPremiumOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRiderPremiumOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRiderPremiumCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRiderPremiumCompleted(Me, New GetRiderPremiumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetContractDetail", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetContractDetail(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetContractDetail", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetContractDetailAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetContractDetailAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetContractDetailAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetContractDetailOperationCompleted Is Nothing) Then
                Me.GetContractDetailOperationCompleted = AddressOf Me.OnGetContractDetailOperationCompleted
            End If
            Me.InvokeAsync("GetContractDetail", New Object() {dsSendData, dsReceData, strErr}, Me.GetContractDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetContractDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetContractDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetContractDetailCompleted(Me, New GetContractDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetInterestQuotation", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInterestQuotation(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetInterestQuotation", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInterestQuotationAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetInterestQuotationAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInterestQuotationAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetInterestQuotationOperationCompleted Is Nothing) Then
                Me.GetInterestQuotationOperationCompleted = AddressOf Me.OnGetInterestQuotationOperationCompleted
            End If
            Me.InvokeAsync("GetInterestQuotation", New Object() {dsSendData, dsReceData, strErr}, Me.GetInterestQuotationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInterestQuotationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInterestQuotationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInterestQuotationCompleted(Me, New GetInterestQuotationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/EnqSurByCashflowBO", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EnqSurByCashflowBO(ByVal strProductType As String, ByRef IsEnqSurByCashflowBO As Boolean, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("EnqSurByCashflowBO", New Object() {strProductType, IsEnqSurByCashflowBO, strErr})
            IsEnqSurByCashflowBO = CType(results(1),Boolean)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EnqSurByCashflowBOAsync(ByVal strProductType As String, ByVal IsEnqSurByCashflowBO As Boolean, ByVal strErr As String)
            Me.EnqSurByCashflowBOAsync(strProductType, IsEnqSurByCashflowBO, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EnqSurByCashflowBOAsync(ByVal strProductType As String, ByVal IsEnqSurByCashflowBO As Boolean, ByVal strErr As String, ByVal userState As Object)
            If (Me.EnqSurByCashflowBOOperationCompleted Is Nothing) Then
                Me.EnqSurByCashflowBOOperationCompleted = AddressOf Me.OnEnqSurByCashflowBOOperationCompleted
            End If
            Me.InvokeAsync("EnqSurByCashflowBO", New Object() {strProductType, IsEnqSurByCashflowBO, strErr}, Me.EnqSurByCashflowBOOperationCompleted, userState)
        End Sub
        
        Private Sub OnEnqSurByCashflowBOOperationCompleted(ByVal arg As Object)
            If (Not (Me.EnqSurByCashflowBOCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EnqSurByCashflowBOCompleted(Me, New EnqSurByCashflowBOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ValidAgentByProductType", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidAgentByProductType(ByVal strPolicyChannel As String, ByVal strProductType As String, ByVal dteRCDDate As Date, ByVal strAgentCode As String, ByRef strAgentName As String, ByRef IsShowMessage As Boolean, ByRef IsWarn As Boolean, ByRef strWarnMessage As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ValidAgentByProductType", New Object() {strPolicyChannel, strProductType, dteRCDDate, strAgentCode, strAgentName, IsShowMessage, IsWarn, strWarnMessage, strErr})
            strAgentName = CType(results(1),String)
            IsShowMessage = CType(results(2),Boolean)
            IsWarn = CType(results(3),Boolean)
            strWarnMessage = CType(results(4),String)
            strErr = CType(results(5),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidAgentByProductTypeAsync(ByVal strPolicyChannel As String, ByVal strProductType As String, ByVal dteRCDDate As Date, ByVal strAgentCode As String, ByVal strAgentName As String, ByVal IsShowMessage As Boolean, ByVal IsWarn As Boolean, ByVal strWarnMessage As String, ByVal strErr As String)
            Me.ValidAgentByProductTypeAsync(strPolicyChannel, strProductType, dteRCDDate, strAgentCode, strAgentName, IsShowMessage, IsWarn, strWarnMessage, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidAgentByProductTypeAsync(ByVal strPolicyChannel As String, ByVal strProductType As String, ByVal dteRCDDate As Date, ByVal strAgentCode As String, ByVal strAgentName As String, ByVal IsShowMessage As Boolean, ByVal IsWarn As Boolean, ByVal strWarnMessage As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.ValidAgentByProductTypeOperationCompleted Is Nothing) Then
                Me.ValidAgentByProductTypeOperationCompleted = AddressOf Me.OnValidAgentByProductTypeOperationCompleted
            End If
            Me.InvokeAsync("ValidAgentByProductType", New Object() {strPolicyChannel, strProductType, dteRCDDate, strAgentCode, strAgentName, IsShowMessage, IsWarn, strWarnMessage, strErr}, Me.ValidAgentByProductTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidAgentByProductTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidAgentByProductTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidAgentByProductTypeCompleted(Me, New ValidAgentByProductTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPolicyRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyRecord(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPolicyRecord", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyRecordAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetPolicyRecordAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyRecordAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPolicyRecordOperationCompleted Is Nothing) Then
                Me.GetPolicyRecordOperationCompleted = AddressOf Me.OnGetPolicyRecordOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyRecord", New Object() {dsSendData, dsReceData, strErr}, Me.GetPolicyRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyRecordCompleted(Me, New GetPolicyRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetBECustomer", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBECustomer(ByVal policyNo As String, ByRef dsCustData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetBECustomer", New Object() {policyNo, dsCustData, strErr})
            dsCustData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBECustomerAsync(ByVal policyNo As String, ByVal dsCustData As System.Data.DataSet, ByVal strErr As String)
            Me.GetBECustomerAsync(policyNo, dsCustData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBECustomerAsync(ByVal policyNo As String, ByVal dsCustData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetBECustomerOperationCompleted Is Nothing) Then
                Me.GetBECustomerOperationCompleted = AddressOf Me.OnGetBECustomerOperationCompleted
            End If
            Me.InvokeAsync("GetBECustomer", New Object() {policyNo, dsCustData, strErr}, Me.GetBECustomerOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBECustomerOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBECustomerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBECustomerCompleted(Me, New GetBECustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SaveExchangeRate", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveExchangeRate(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveExchangeRate", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveExchangeRateAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.SaveExchangeRateAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveExchangeRateAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.SaveExchangeRateOperationCompleted Is Nothing) Then
                Me.SaveExchangeRateOperationCompleted = AddressOf Me.OnSaveExchangeRateOperationCompleted
            End If
            Me.InvokeAsync("SaveExchangeRate", New Object() {dsSendData, dsReceData, strErr}, Me.SaveExchangeRateOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveExchangeRateOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveExchangeRateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveExchangeRateCompleted(Me, New SaveExchangeRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetInforceIllustration", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInforceIllustration(ByVal strPolicy As String, ByVal quoteDate As String, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetInforceIllustration", New Object() {strPolicy, quoteDate, dsReceData, strErr})
            dsReceData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInforceIllustrationAsync(ByVal strPolicy As String, ByVal quoteDate As String, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetInforceIllustrationAsync(strPolicy, quoteDate, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInforceIllustrationAsync(ByVal strPolicy As String, ByVal quoteDate As String, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetInforceIllustrationOperationCompleted Is Nothing) Then
                Me.GetInforceIllustrationOperationCompleted = AddressOf Me.OnGetInforceIllustrationOperationCompleted
            End If
            Me.InvokeAsync("GetInforceIllustration", New Object() {strPolicy, quoteDate, dsReceData, strErr}, Me.GetInforceIllustrationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInforceIllustrationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInforceIllustrationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInforceIllustrationCompleted(Me, New GetInforceIllustrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetInforceIllustrationPhaseII", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInforceIllustrationPhaseII(ByVal strPolicy As String, ByVal quoteDate As String, ByVal queryID As String, ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetInforceIllustrationPhaseII", New Object() {strPolicy, quoteDate, queryID, dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInforceIllustrationPhaseIIAsync(ByVal strPolicy As String, ByVal quoteDate As String, ByVal queryID As String, ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetInforceIllustrationPhaseIIAsync(strPolicy, quoteDate, queryID, dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInforceIllustrationPhaseIIAsync(ByVal strPolicy As String, ByVal quoteDate As String, ByVal queryID As String, ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetInforceIllustrationPhaseIIOperationCompleted Is Nothing) Then
                Me.GetInforceIllustrationPhaseIIOperationCompleted = AddressOf Me.OnGetInforceIllustrationPhaseIIOperationCompleted
            End If
            Me.InvokeAsync("GetInforceIllustrationPhaseII", New Object() {strPolicy, quoteDate, queryID, dsSendData, dsReceData, strErr}, Me.GetInforceIllustrationPhaseIIOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInforceIllustrationPhaseIIOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInforceIllustrationPhaseIICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInforceIllustrationPhaseIICompleted(Me, New GetInforceIllustrationPhaseIICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SaveFundPrice", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveFundPrice(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveFundPrice", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveFundPriceAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.SaveFundPriceAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveFundPriceAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.SaveFundPriceOperationCompleted Is Nothing) Then
                Me.SaveFundPriceOperationCompleted = AddressOf Me.OnSaveFundPriceOperationCompleted
            End If
            Me.InvokeAsync("SaveFundPrice", New Object() {dsSendData, dsReceData, strErr}, Me.SaveFundPriceOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveFundPriceOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveFundPriceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveFundPriceCompleted(Me, New SaveFundPriceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCapsilPolicyRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCapsilPolicyRecord(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCapsilPolicyRecord", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCapsilPolicyRecordAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetCapsilPolicyRecordAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCapsilPolicyRecordAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCapsilPolicyRecordOperationCompleted Is Nothing) Then
                Me.GetCapsilPolicyRecordOperationCompleted = AddressOf Me.OnGetCapsilPolicyRecordOperationCompleted
            End If
            Me.InvokeAsync("GetCapsilPolicyRecord", New Object() {dsSendData, dsReceData, strErr}, Me.GetCapsilPolicyRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCapsilPolicyRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCapsilPolicyRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCapsilPolicyRecordCompleted(Me, New GetCapsilPolicyRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPolicyType", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyType(ByVal strPolicyNo As String, ByRef strErr As String) As Integer
            Dim results() As Object = Me.Invoke("GetPolicyType", New Object() {strPolicyNo, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyTypeAsync(ByVal strPolicyNo As String, ByVal strErr As String)
            Me.GetPolicyTypeAsync(strPolicyNo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyTypeAsync(ByVal strPolicyNo As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPolicyTypeOperationCompleted Is Nothing) Then
                Me.GetPolicyTypeOperationCompleted = AddressOf Me.OnGetPolicyTypeOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyType", New Object() {strPolicyNo, strErr}, Me.GetPolicyTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyTypeCompleted(Me, New GetPolicyTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/RequiredAddrProofWarning", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RequiredAddrProofWarning(ByVal strPolicyNo As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("RequiredAddrProofWarning", New Object() {strPolicyNo, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RequiredAddrProofWarningAsync(ByVal strPolicyNo As String, ByVal strErr As String)
            Me.RequiredAddrProofWarningAsync(strPolicyNo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RequiredAddrProofWarningAsync(ByVal strPolicyNo As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.RequiredAddrProofWarningOperationCompleted Is Nothing) Then
                Me.RequiredAddrProofWarningOperationCompleted = AddressOf Me.OnRequiredAddrProofWarningOperationCompleted
            End If
            Me.InvokeAsync("RequiredAddrProofWarning", New Object() {strPolicyNo, strErr}, Me.RequiredAddrProofWarningOperationCompleted, userState)
        End Sub
        
        Private Sub OnRequiredAddrProofWarningOperationCompleted(ByVal arg As Object)
            If (Not (Me.RequiredAddrProofWarningCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RequiredAddrProofWarningCompleted(Me, New RequiredAddrProofWarningCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetAgentRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAgentRecord(ByVal dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAgentRecord", New Object() {dsSendData, dsReceData, strErr})
            dsReceData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAgentRecordAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetAgentRecordAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAgentRecordAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetAgentRecordOperationCompleted Is Nothing) Then
                Me.GetAgentRecordOperationCompleted = AddressOf Me.OnGetAgentRecordOperationCompleted
            End If
            Me.InvokeAsync("GetAgentRecord", New Object() {dsSendData, dsReceData, strErr}, Me.GetAgentRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAgentRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAgentRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAgentRecordCompleted(Me, New GetAgentRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCapsilPolicyNo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCapsilPolicyNo(ByVal strLifeAsiaPolicy As String, ByRef strCapsilPolicy As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCapsilPolicyNo", New Object() {strLifeAsiaPolicy, strCapsilPolicy, strErr})
            strCapsilPolicy = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCapsilPolicyNoAsync(ByVal strLifeAsiaPolicy As String, ByVal strCapsilPolicy As String, ByVal strErr As String)
            Me.GetCapsilPolicyNoAsync(strLifeAsiaPolicy, strCapsilPolicy, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCapsilPolicyNoAsync(ByVal strLifeAsiaPolicy As String, ByVal strCapsilPolicy As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCapsilPolicyNoOperationCompleted Is Nothing) Then
                Me.GetCapsilPolicyNoOperationCompleted = AddressOf Me.OnGetCapsilPolicyNoOperationCompleted
            End If
            Me.InvokeAsync("GetCapsilPolicyNo", New Object() {strLifeAsiaPolicy, strCapsilPolicy, strErr}, Me.GetCapsilPolicyNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCapsilPolicyNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCapsilPolicyNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCapsilPolicyNoCompleted(Me, New GetCapsilPolicyNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLifeAsiaPolicyNo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLifeAsiaPolicyNo(ByRef strLifeAsiaPolicy As String, ByVal strCapsilPolicy As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLifeAsiaPolicyNo", New Object() {strLifeAsiaPolicy, strCapsilPolicy, strErr})
            strLifeAsiaPolicy = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLifeAsiaPolicyNoAsync(ByVal strLifeAsiaPolicy As String, ByVal strCapsilPolicy As String, ByVal strErr As String)
            Me.GetLifeAsiaPolicyNoAsync(strLifeAsiaPolicy, strCapsilPolicy, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLifeAsiaPolicyNoAsync(ByVal strLifeAsiaPolicy As String, ByVal strCapsilPolicy As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLifeAsiaPolicyNoOperationCompleted Is Nothing) Then
                Me.GetLifeAsiaPolicyNoOperationCompleted = AddressOf Me.OnGetLifeAsiaPolicyNoOperationCompleted
            End If
            Me.InvokeAsync("GetLifeAsiaPolicyNo", New Object() {strLifeAsiaPolicy, strCapsilPolicy, strErr}, Me.GetLifeAsiaPolicyNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLifeAsiaPolicyNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLifeAsiaPolicyNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLifeAsiaPolicyNoCompleted(Me, New GetLifeAsiaPolicyNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPaymentHistory", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPaymentHistory(ByVal dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPaymentHistory", New Object() {dsSendData, dsReceData, strErr})
            dsReceData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPaymentHistoryAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetPaymentHistoryAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPaymentHistoryAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPaymentHistoryOperationCompleted Is Nothing) Then
                Me.GetPaymentHistoryOperationCompleted = AddressOf Me.OnGetPaymentHistoryOperationCompleted
            End If
            Me.InvokeAsync("GetPaymentHistory", New Object() {dsSendData, dsReceData, strErr}, Me.GetPaymentHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPaymentHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPaymentHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPaymentHistoryCompleted(Me, New GetPaymentHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ReprintPolicySchedule", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReprintPolicySchedule(ByVal dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ReprintPolicySchedule", New Object() {dsSendData, dsReceData, strErr})
            dsReceData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReprintPolicyScheduleAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.ReprintPolicyScheduleAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReprintPolicyScheduleAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.ReprintPolicyScheduleOperationCompleted Is Nothing) Then
                Me.ReprintPolicyScheduleOperationCompleted = AddressOf Me.OnReprintPolicyScheduleOperationCompleted
            End If
            Me.InvokeAsync("ReprintPolicySchedule", New Object() {dsSendData, dsReceData, strErr}, Me.ReprintPolicyScheduleOperationCompleted, userState)
        End Sub
        
        Private Sub OnReprintPolicyScheduleOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReprintPolicyScheduleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReprintPolicyScheduleCompleted(Me, New ReprintPolicyScheduleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CancelReceipt", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelReceipt(ByVal strPolicyNo As String, ByVal strCurr As String, ByVal dsPayHist As System.Data.DataSet, ByVal dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CancelReceipt", New Object() {strPolicyNo, strCurr, dsPayHist, dsSendData, dsReceData, strErr})
            dsReceData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelReceiptAsync(ByVal strPolicyNo As String, ByVal strCurr As String, ByVal dsPayHist As System.Data.DataSet, ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.CancelReceiptAsync(strPolicyNo, strCurr, dsPayHist, dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelReceiptAsync(ByVal strPolicyNo As String, ByVal strCurr As String, ByVal dsPayHist As System.Data.DataSet, ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.CancelReceiptOperationCompleted Is Nothing) Then
                Me.CancelReceiptOperationCompleted = AddressOf Me.OnCancelReceiptOperationCompleted
            End If
            Me.InvokeAsync("CancelReceipt", New Object() {strPolicyNo, strCurr, dsPayHist, dsSendData, dsReceData, strErr}, Me.CancelReceiptOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelReceiptOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelReceiptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelReceiptCompleted(Me, New CancelReceiptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetReceipCancellationLogById", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReceipCancellationLogById(ByVal strTransId As String, ByRef dsLog As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetReceipCancellationLogById", New Object() {strTransId, dsLog, strErr})
            dsLog = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReceipCancellationLogByIdAsync(ByVal strTransId As String, ByVal dsLog As System.Data.DataSet, ByVal strErr As String)
            Me.GetReceipCancellationLogByIdAsync(strTransId, dsLog, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReceipCancellationLogByIdAsync(ByVal strTransId As String, ByVal dsLog As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetReceipCancellationLogByIdOperationCompleted Is Nothing) Then
                Me.GetReceipCancellationLogByIdOperationCompleted = AddressOf Me.OnGetReceipCancellationLogByIdOperationCompleted
            End If
            Me.InvokeAsync("GetReceipCancellationLogById", New Object() {strTransId, dsLog, strErr}, Me.GetReceipCancellationLogByIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReceipCancellationLogByIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReceipCancellationLogByIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReceipCancellationLogByIdCompleted(Me, New GetReceipCancellationLogByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetBounceChequeReasonList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBounceChequeReasonList(ByRef dsList As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetBounceChequeReasonList", New Object() {dsList, strErr})
            dsList = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBounceChequeReasonListAsync(ByVal dsList As System.Data.DataSet, ByVal strErr As String)
            Me.GetBounceChequeReasonListAsync(dsList, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBounceChequeReasonListAsync(ByVal dsList As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetBounceChequeReasonListOperationCompleted Is Nothing) Then
                Me.GetBounceChequeReasonListOperationCompleted = AddressOf Me.OnGetBounceChequeReasonListOperationCompleted
            End If
            Me.InvokeAsync("GetBounceChequeReasonList", New Object() {dsList, strErr}, Me.GetBounceChequeReasonListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBounceChequeReasonListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBounceChequeReasonListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBounceChequeReasonListCompleted(Me, New GetBounceChequeReasonListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetRpuPendingMemo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRpuPendingMemo(ByVal strPolicyNo As String, ByVal rpuSI As Decimal, ByVal paidToDate As Date, ByVal refundValue As Decimal, ByRef dsPend As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetRpuPendingMemo", New Object() {strPolicyNo, rpuSI, paidToDate, refundValue, dsPend, strErr})
            dsPend = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRpuPendingMemoAsync(ByVal strPolicyNo As String, ByVal rpuSI As Decimal, ByVal paidToDate As Date, ByVal refundValue As Decimal, ByVal dsPend As System.Data.DataSet, ByVal strErr As String)
            Me.GetRpuPendingMemoAsync(strPolicyNo, rpuSI, paidToDate, refundValue, dsPend, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRpuPendingMemoAsync(ByVal strPolicyNo As String, ByVal rpuSI As Decimal, ByVal paidToDate As Date, ByVal refundValue As Decimal, ByVal dsPend As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetRpuPendingMemoOperationCompleted Is Nothing) Then
                Me.GetRpuPendingMemoOperationCompleted = AddressOf Me.OnGetRpuPendingMemoOperationCompleted
            End If
            Me.InvokeAsync("GetRpuPendingMemo", New Object() {strPolicyNo, rpuSI, paidToDate, refundValue, dsPend, strErr}, Me.GetRpuPendingMemoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRpuPendingMemoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRpuPendingMemoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRpuPendingMemoCompleted(Me, New GetRpuPendingMemoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetRpuProjectionLetter", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRpuProjectionLetter(ByVal strPolicyNo As String, ByVal projectionType As String, ByVal dsQuoteBoRece As System.Data.DataSet, ByRef dsProjection As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetRpuProjectionLetter", New Object() {strPolicyNo, projectionType, dsQuoteBoRece, dsProjection, strErr})
            dsProjection = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRpuProjectionLetterAsync(ByVal strPolicyNo As String, ByVal projectionType As String, ByVal dsQuoteBoRece As System.Data.DataSet, ByVal dsProjection As System.Data.DataSet, ByVal strErr As String)
            Me.GetRpuProjectionLetterAsync(strPolicyNo, projectionType, dsQuoteBoRece, dsProjection, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRpuProjectionLetterAsync(ByVal strPolicyNo As String, ByVal projectionType As String, ByVal dsQuoteBoRece As System.Data.DataSet, ByVal dsProjection As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetRpuProjectionLetterOperationCompleted Is Nothing) Then
                Me.GetRpuProjectionLetterOperationCompleted = AddressOf Me.OnGetRpuProjectionLetterOperationCompleted
            End If
            Me.InvokeAsync("GetRpuProjectionLetter", New Object() {strPolicyNo, projectionType, dsQuoteBoRece, dsProjection, strErr}, Me.GetRpuProjectionLetterOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRpuProjectionLetterOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRpuProjectionLetterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRpuProjectionLetterCompleted(Me, New GetRpuProjectionLetterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetBounceChequePendingMemo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBounceChequePendingMemo(ByVal strPolicyNo As String, ByRef dsPend As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetBounceChequePendingMemo", New Object() {strPolicyNo, dsPend, strErr})
            dsPend = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBounceChequePendingMemoAsync(ByVal strPolicyNo As String, ByVal dsPend As System.Data.DataSet, ByVal strErr As String)
            Me.GetBounceChequePendingMemoAsync(strPolicyNo, dsPend, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBounceChequePendingMemoAsync(ByVal strPolicyNo As String, ByVal dsPend As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetBounceChequePendingMemoOperationCompleted Is Nothing) Then
                Me.GetBounceChequePendingMemoOperationCompleted = AddressOf Me.OnGetBounceChequePendingMemoOperationCompleted
            End If
            Me.InvokeAsync("GetBounceChequePendingMemo", New Object() {strPolicyNo, dsPend, strErr}, Me.GetBounceChequePendingMemoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBounceChequePendingMemoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBounceChequePendingMemoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBounceChequePendingMemoCompleted(Me, New GetBounceChequePendingMemoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SubmitBounceChequeLetterRequest", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SubmitBounceChequeLetterRequest(ByVal ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SubmitBounceChequeLetterRequest", New Object() {ds, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SubmitBounceChequeLetterRequestAsync(ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.SubmitBounceChequeLetterRequestAsync(ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SubmitBounceChequeLetterRequestAsync(ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.SubmitBounceChequeLetterRequestOperationCompleted Is Nothing) Then
                Me.SubmitBounceChequeLetterRequestOperationCompleted = AddressOf Me.OnSubmitBounceChequeLetterRequestOperationCompleted
            End If
            Me.InvokeAsync("SubmitBounceChequeLetterRequest", New Object() {ds, strErr}, Me.SubmitBounceChequeLetterRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnSubmitBounceChequeLetterRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.SubmitBounceChequeLetterRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SubmitBounceChequeLetterRequestCompleted(Me, New SubmitBounceChequeLetterRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetSoftCode", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSoftCode(ByVal funcName As String, ByRef dsKeyVal As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSoftCode", New Object() {funcName, dsKeyVal, strErr})
            dsKeyVal = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSoftCodeAsync(ByVal funcName As String, ByVal dsKeyVal As System.Data.DataSet, ByVal strErr As String)
            Me.GetSoftCodeAsync(funcName, dsKeyVal, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSoftCodeAsync(ByVal funcName As String, ByVal dsKeyVal As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetSoftCodeOperationCompleted Is Nothing) Then
                Me.GetSoftCodeOperationCompleted = AddressOf Me.OnGetSoftCodeOperationCompleted
            End If
            Me.InvokeAsync("GetSoftCode", New Object() {funcName, dsKeyVal, strErr}, Me.GetSoftCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSoftCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSoftCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSoftCodeCompleted(Me, New GetSoftCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCompSelectionRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCompSelectionRecord(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCompSelectionRecord", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCompSelectionRecordAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetCompSelectionRecordAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCompSelectionRecordAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCompSelectionRecordOperationCompleted Is Nothing) Then
                Me.GetCompSelectionRecordOperationCompleted = AddressOf Me.OnGetCompSelectionRecordOperationCompleted
            End If
            Me.InvokeAsync("GetCompSelectionRecord", New Object() {dsSendData, dsReceData, strErr}, Me.GetCompSelectionRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCompSelectionRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCompSelectionRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCompSelectionRecordCompleted(Me, New GetCompSelectionRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCompSelectionWithCustNo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCompSelectionWithCustNo(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCompSelectionWithCustNo", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCompSelectionWithCustNoAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetCompSelectionWithCustNoAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCompSelectionWithCustNoAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCompSelectionWithCustNoOperationCompleted Is Nothing) Then
                Me.GetCompSelectionWithCustNoOperationCompleted = AddressOf Me.OnGetCompSelectionWithCustNoOperationCompleted
            End If
            Me.InvokeAsync("GetCompSelectionWithCustNo", New Object() {dsSendData, dsReceData, strErr}, Me.GetCompSelectionWithCustNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCompSelectionWithCustNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCompSelectionWithCustNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCompSelectionWithCustNoCompleted(Me, New GetCompSelectionWithCustNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetAvailComponent", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAvailComponent(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAvailComponent", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAvailComponentAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetAvailComponentAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAvailComponentAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetAvailComponentOperationCompleted Is Nothing) Then
                Me.GetAvailComponentOperationCompleted = AddressOf Me.OnGetAvailComponentOperationCompleted
            End If
            Me.InvokeAsync("GetAvailComponent", New Object() {dsSendData, dsReceData, strErr}, Me.GetAvailComponentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAvailComponentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAvailComponentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAvailComponentCompleted(Me, New GetAvailComponentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCovMaintHist", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCovMaintHist(ByVal strTranID As String, ByVal strPolicyNo As String, ByVal strTranDate As String, ByRef dsData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCovMaintHist", New Object() {strTranID, strPolicyNo, strTranDate, dsData, strErr})
            dsData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCovMaintHistAsync(ByVal strTranID As String, ByVal strPolicyNo As String, ByVal strTranDate As String, ByVal dsData As System.Data.DataSet, ByVal strErr As String)
            Me.GetCovMaintHistAsync(strTranID, strPolicyNo, strTranDate, dsData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCovMaintHistAsync(ByVal strTranID As String, ByVal strPolicyNo As String, ByVal strTranDate As String, ByVal dsData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCovMaintHistOperationCompleted Is Nothing) Then
                Me.GetCovMaintHistOperationCompleted = AddressOf Me.OnGetCovMaintHistOperationCompleted
            End If
            Me.InvokeAsync("GetCovMaintHist", New Object() {strTranID, strPolicyNo, strTranDate, dsData, strErr}, Me.GetCovMaintHistOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCovMaintHistOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCovMaintHistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCovMaintHistCompleted(Me, New GetCovMaintHistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetComponentSysTable", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetComponentSysTable(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByVal sContType As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetComponentSysTable", New Object() {dsSendData, dsReceData, sContType, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetComponentSysTableAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal sContType As String, ByVal strErr As String)
            Me.GetComponentSysTableAsync(dsSendData, dsReceData, sContType, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetComponentSysTableAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal sContType As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetComponentSysTableOperationCompleted Is Nothing) Then
                Me.GetComponentSysTableOperationCompleted = AddressOf Me.OnGetComponentSysTableOperationCompleted
            End If
            Me.InvokeAsync("GetComponentSysTable", New Object() {dsSendData, dsReceData, sContType, strErr}, Me.GetComponentSysTableOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetComponentSysTableOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetComponentSysTableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetComponentSysTableCompleted(Me, New GetComponentSysTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetDistChannel", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDistChannel(ByVal strPolicyNo As String, ByRef strDistChannel As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetDistChannel", New Object() {strPolicyNo, strDistChannel, strErr})
            strDistChannel = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDistChannelAsync(ByVal strPolicyNo As String, ByVal strDistChannel As String, ByVal strErr As String)
            Me.GetDistChannelAsync(strPolicyNo, strDistChannel, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDistChannelAsync(ByVal strPolicyNo As String, ByVal strDistChannel As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetDistChannelOperationCompleted Is Nothing) Then
                Me.GetDistChannelOperationCompleted = AddressOf Me.OnGetDistChannelOperationCompleted
            End If
            Me.InvokeAsync("GetDistChannel", New Object() {strPolicyNo, strDistChannel, strErr}, Me.GetDistChannelOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDistChannelOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDistChannelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDistChannelCompleted(Me, New GetDistChannelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetSpecPayOpt", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSpecPayOpt(ByRef dsPayOption As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSpecPayOpt", New Object() {dsPayOption, strErr})
            dsPayOption = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSpecPayOptAsync(ByVal dsPayOption As System.Data.DataSet, ByVal strErr As String)
            Me.GetSpecPayOptAsync(dsPayOption, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSpecPayOptAsync(ByVal dsPayOption As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetSpecPayOptOperationCompleted Is Nothing) Then
                Me.GetSpecPayOptOperationCompleted = AddressOf Me.OnGetSpecPayOptOperationCompleted
            End If
            Me.InvokeAsync("GetSpecPayOpt", New Object() {dsPayOption, strErr}, Me.GetSpecPayOptOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSpecPayOptOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSpecPayOptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSpecPayOptCompleted(Me, New GetSpecPayOptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPolicyClientSysTable", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyClientSysTable(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByVal sType As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPolicyClientSysTable", New Object() {dsSendData, dsReceData, sType, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyClientSysTableAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal sType As String, ByVal strErr As String)
            Me.GetPolicyClientSysTableAsync(dsSendData, dsReceData, sType, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyClientSysTableAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal sType As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPolicyClientSysTableOperationCompleted Is Nothing) Then
                Me.GetPolicyClientSysTableOperationCompleted = AddressOf Me.OnGetPolicyClientSysTableOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyClientSysTable", New Object() {dsSendData, dsReceData, sType, strErr}, Me.GetPolicyClientSysTableOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyClientSysTableOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyClientSysTableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyClientSysTableCompleted(Me, New GetPolicyClientSysTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetFundAllocSysTable", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFundAllocSysTable(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFundAllocSysTable", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFundAllocSysTableAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetFundAllocSysTableAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFundAllocSysTableAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetFundAllocSysTableOperationCompleted Is Nothing) Then
                Me.GetFundAllocSysTableOperationCompleted = AddressOf Me.OnGetFundAllocSysTableOperationCompleted
            End If
            Me.InvokeAsync("GetFundAllocSysTable", New Object() {dsSendData, dsReceData, strErr}, Me.GetFundAllocSysTableOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFundAllocSysTableOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFundAllocSysTableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFundAllocSysTableCompleted(Me, New GetFundAllocSysTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetContExDetail", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetContExDetail(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetContExDetail", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetContExDetailAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetContExDetailAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetContExDetailAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetContExDetailOperationCompleted Is Nothing) Then
                Me.GetContExDetailOperationCompleted = AddressOf Me.OnGetContExDetailOperationCompleted
            End If
            Me.InvokeAsync("GetContExDetail", New Object() {dsSendData, dsReceData, strErr}, Me.GetContExDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetContExDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetContExDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetContExDetailCompleted(Me, New GetContExDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCompDetailRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCompDetailRecord(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCompDetailRecord", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCompDetailRecordAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetCompDetailRecordAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCompDetailRecordAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCompDetailRecordOperationCompleted Is Nothing) Then
                Me.GetCompDetailRecordOperationCompleted = AddressOf Me.OnGetCompDetailRecordOperationCompleted
            End If
            Me.InvokeAsync("GetCompDetailRecord", New Object() {dsSendData, dsReceData, strErr}, Me.GetCompDetailRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCompDetailRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCompDetailRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCompDetailRecordCompleted(Me, New GetCompDetailRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetFundDirectRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFundDirectRecord(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFundDirectRecord", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFundDirectRecordAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetFundDirectRecordAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFundDirectRecordAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetFundDirectRecordOperationCompleted Is Nothing) Then
                Me.GetFundDirectRecordOperationCompleted = AddressOf Me.OnGetFundDirectRecordOperationCompleted
            End If
            Me.InvokeAsync("GetFundDirectRecord", New Object() {dsSendData, dsReceData, strErr}, Me.GetFundDirectRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFundDirectRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFundDirectRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFundDirectRecordCompleted(Me, New GetFundDirectRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPoInfo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPoInfo(ByVal strPolicyNo As String, ByRef dsPoInfo As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPoInfo", New Object() {strPolicyNo, dsPoInfo, strErr})
            dsPoInfo = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPoInfoAsync(ByVal strPolicyNo As String, ByVal dsPoInfo As System.Data.DataSet, ByVal strErr As String)
            Me.GetPoInfoAsync(strPolicyNo, dsPoInfo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPoInfoAsync(ByVal strPolicyNo As String, ByVal dsPoInfo As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPoInfoOperationCompleted Is Nothing) Then
                Me.GetPoInfoOperationCompleted = AddressOf Me.OnGetPoInfoOperationCompleted
            End If
            Me.InvokeAsync("GetPoInfo", New Object() {strPolicyNo, dsPoInfo, strErr}, Me.GetPoInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPoInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPoInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPoInfoCompleted(Me, New GetPoInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetFundInfo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFundInfo(ByVal strFundCode As String, ByRef dsFundInfo As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFundInfo", New Object() {strFundCode, dsFundInfo, strErr})
            dsFundInfo = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFundInfoAsync(ByVal strFundCode As String, ByVal dsFundInfo As System.Data.DataSet, ByVal strErr As String)
            Me.GetFundInfoAsync(strFundCode, dsFundInfo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFundInfoAsync(ByVal strFundCode As String, ByVal dsFundInfo As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetFundInfoOperationCompleted Is Nothing) Then
                Me.GetFundInfoOperationCompleted = AddressOf Me.OnGetFundInfoOperationCompleted
            End If
            Me.InvokeAsync("GetFundInfo", New Object() {strFundCode, dsFundInfo, strErr}, Me.GetFundInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFundInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFundInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFundInfoCompleted(Me, New GetFundInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetIAAccountTableSchema", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIAAccountTableSchema(ByRef dsSchema As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetIAAccountTableSchema", New Object() {dsSchema, strErr})
            dsSchema = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIAAccountTableSchemaAsync(ByVal dsSchema As System.Data.DataSet, ByVal strErr As String)
            Me.GetIAAccountTableSchemaAsync(dsSchema, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIAAccountTableSchemaAsync(ByVal dsSchema As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetIAAccountTableSchemaOperationCompleted Is Nothing) Then
                Me.GetIAAccountTableSchemaOperationCompleted = AddressOf Me.OnGetIAAccountTableSchemaOperationCompleted
            End If
            Me.InvokeAsync("GetIAAccountTableSchema", New Object() {dsSchema, strErr}, Me.GetIAAccountTableSchemaOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIAAccountTableSchemaOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIAAccountTableSchemaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIAAccountTableSchemaCompleted(Me, New GetIAAccountTableSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPolicyFundDetail", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyFundDetail(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPolicyFundDetail", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyFundDetailAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetPolicyFundDetailAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyFundDetailAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPolicyFundDetailOperationCompleted Is Nothing) Then
                Me.GetPolicyFundDetailOperationCompleted = AddressOf Me.OnGetPolicyFundDetailOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyFundDetail", New Object() {dsSendData, dsReceData, strErr}, Me.GetPolicyFundDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyFundDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyFundDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyFundDetailCompleted(Me, New GetPolicyFundDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTrailerMap", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTrailerMap(ByVal strPolicyNo As String, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTrailerMap", New Object() {strPolicyNo, dsReceData, strErr})
            dsReceData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTrailerMapAsync(ByVal strPolicyNo As String, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetTrailerMapAsync(strPolicyNo, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTrailerMapAsync(ByVal strPolicyNo As String, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTrailerMapOperationCompleted Is Nothing) Then
                Me.GetTrailerMapOperationCompleted = AddressOf Me.OnGetTrailerMapOperationCompleted
            End If
            Me.InvokeAsync("GetTrailerMap", New Object() {strPolicyNo, dsReceData, strErr}, Me.GetTrailerMapOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTrailerMapOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTrailerMapCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTrailerMapCompleted(Me, New GetTrailerMapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetUFPolicyFundDetail", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUFPolicyFundDetail(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUFPolicyFundDetail", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUFPolicyFundDetailAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetUFPolicyFundDetailAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUFPolicyFundDetailAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetUFPolicyFundDetailOperationCompleted Is Nothing) Then
                Me.GetUFPolicyFundDetailOperationCompleted = AddressOf Me.OnGetUFPolicyFundDetailOperationCompleted
            End If
            Me.InvokeAsync("GetUFPolicyFundDetail", New Object() {dsSendData, dsReceData, strErr}, Me.GetUFPolicyFundDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUFPolicyFundDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUFPolicyFundDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUFPolicyFundDetailCompleted(Me, New GetUFPolicyFundDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetSurValue", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSurValue(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSurValue", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSurValueAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetSurValueAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSurValueAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetSurValueOperationCompleted Is Nothing) Then
                Me.GetSurValueOperationCompleted = AddressOf Me.OnGetSurValueOperationCompleted
            End If
            Me.InvokeAsync("GetSurValue", New Object() {dsSendData, dsReceData, strErr}, Me.GetSurValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSurValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSurValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSurValueCompleted(Me, New GetSurValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetSurrCharge", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSurrCharge(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSurrCharge", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSurrChargeAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetSurrChargeAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSurrChargeAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetSurrChargeOperationCompleted Is Nothing) Then
                Me.GetSurrChargeOperationCompleted = AddressOf Me.OnGetSurrChargeOperationCompleted
            End If
            Me.InvokeAsync("GetSurrCharge", New Object() {dsSendData, dsReceData, strErr}, Me.GetSurrChargeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSurrChargeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSurrChargeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSurrChargeCompleted(Me, New GetSurrChargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPolicyAccountBalance", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyAccountBalance(ByRef dsSendData As System.Data.DataSet, ByRef dblAcctBalance As Double, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPolicyAccountBalance", New Object() {dsSendData, dblAcctBalance, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dblAcctBalance = CType(results(2),Double)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyAccountBalanceAsync(ByVal dsSendData As System.Data.DataSet, ByVal dblAcctBalance As Double, ByVal strErr As String)
            Me.GetPolicyAccountBalanceAsync(dsSendData, dblAcctBalance, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyAccountBalanceAsync(ByVal dsSendData As System.Data.DataSet, ByVal dblAcctBalance As Double, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPolicyAccountBalanceOperationCompleted Is Nothing) Then
                Me.GetPolicyAccountBalanceOperationCompleted = AddressOf Me.OnGetPolicyAccountBalanceOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyAccountBalance", New Object() {dsSendData, dblAcctBalance, strErr}, Me.GetPolicyAccountBalanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyAccountBalanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyAccountBalanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyAccountBalanceCompleted(Me, New GetPolicyAccountBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetClientRole", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientRole(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetClientRole", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClientRoleAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetClientRoleAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClientRoleAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetClientRoleOperationCompleted Is Nothing) Then
                Me.GetClientRoleOperationCompleted = AddressOf Me.OnGetClientRoleOperationCompleted
            End If
            Me.InvokeAsync("GetClientRole", New Object() {dsSendData, dsReceData, strErr}, Me.GetClientRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClientRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClientRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClientRoleCompleted(Me, New GetClientRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetClientRoleExtend", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientRoleExtend(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetClientRoleExtend", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClientRoleExtendAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetClientRoleExtendAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClientRoleExtendAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetClientRoleExtendOperationCompleted Is Nothing) Then
                Me.GetClientRoleExtendOperationCompleted = AddressOf Me.OnGetClientRoleExtendOperationCompleted
            End If
            Me.InvokeAsync("GetClientRoleExtend", New Object() {dsSendData, dsReceData, strErr}, Me.GetClientRoleExtendOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClientRoleExtendOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClientRoleExtendCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClientRoleExtendCompleted(Me, New GetClientRoleExtendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/PolicyAssigned", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PolicyAssigned(ByVal strPolicyNo As String, ByVal strClientNo As String, ByRef strPolicyAssigned As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("PolicyAssigned", New Object() {strPolicyNo, strClientNo, strPolicyAssigned, strErr})
            strPolicyAssigned = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PolicyAssignedAsync(ByVal strPolicyNo As String, ByVal strClientNo As String, ByVal strPolicyAssigned As String, ByVal strErr As String)
            Me.PolicyAssignedAsync(strPolicyNo, strClientNo, strPolicyAssigned, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PolicyAssignedAsync(ByVal strPolicyNo As String, ByVal strClientNo As String, ByVal strPolicyAssigned As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.PolicyAssignedOperationCompleted Is Nothing) Then
                Me.PolicyAssignedOperationCompleted = AddressOf Me.OnPolicyAssignedOperationCompleted
            End If
            Me.InvokeAsync("PolicyAssigned", New Object() {strPolicyNo, strClientNo, strPolicyAssigned, strErr}, Me.PolicyAssignedOperationCompleted, userState)
        End Sub
        
        Private Sub OnPolicyAssignedOperationCompleted(ByVal arg As Object)
            If (Not (Me.PolicyAssignedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PolicyAssignedCompleted(Me, New PolicyAssignedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetSubAcctBal", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSubAcctBal(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strMsg As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSubAcctBal", New Object() {dsSendData, dsReceData, strMsg, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strMsg = CType(results(3),String)
            strErr = CType(results(4),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSubAcctBalAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strMsg As String, ByVal strErr As String)
            Me.GetSubAcctBalAsync(dsSendData, dsReceData, strMsg, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSubAcctBalAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strMsg As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetSubAcctBalOperationCompleted Is Nothing) Then
                Me.GetSubAcctBalOperationCompleted = AddressOf Me.OnGetSubAcctBalOperationCompleted
            End If
            Me.InvokeAsync("GetSubAcctBal", New Object() {dsSendData, dsReceData, strMsg, strErr}, Me.GetSubAcctBalOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSubAcctBalOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSubAcctBalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSubAcctBalCompleted(Me, New GetSubAcctBalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetSubAcctPost", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSubAcctPost(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strMsg As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSubAcctPost", New Object() {dsSendData, dsReceData, strMsg, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strMsg = CType(results(3),String)
            strErr = CType(results(4),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSubAcctPostAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strMsg As String, ByVal strErr As String)
            Me.GetSubAcctPostAsync(dsSendData, dsReceData, strMsg, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSubAcctPostAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strMsg As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetSubAcctPostOperationCompleted Is Nothing) Then
                Me.GetSubAcctPostOperationCompleted = AddressOf Me.OnGetSubAcctPostOperationCompleted
            End If
            Me.InvokeAsync("GetSubAcctPost", New Object() {dsSendData, dsReceData, strMsg, strErr}, Me.GetSubAcctPostOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSubAcctPostOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSubAcctPostCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSubAcctPostCompleted(Me, New GetSubAcctPostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetAgentCommDetail", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAgentCommDetail(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strTime As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAgentCommDetail", New Object() {dsSendData, dsReceData, strTime, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strTime = CType(results(3),String)
            strErr = CType(results(4),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAgentCommDetailAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strTime As String, ByVal strErr As String)
            Me.GetAgentCommDetailAsync(dsSendData, dsReceData, strTime, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAgentCommDetailAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strTime As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetAgentCommDetailOperationCompleted Is Nothing) Then
                Me.GetAgentCommDetailOperationCompleted = AddressOf Me.OnGetAgentCommDetailOperationCompleted
            End If
            Me.InvokeAsync("GetAgentCommDetail", New Object() {dsSendData, dsReceData, strTime, strErr}, Me.GetAgentCommDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAgentCommDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAgentCommDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAgentCommDetailCompleted(Me, New GetAgentCommDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetAgentSplit", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAgentSplit(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strTime As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAgentSplit", New Object() {dsSendData, dsReceData, strTime, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strTime = CType(results(3),String)
            strErr = CType(results(4),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAgentSplitAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strTime As String, ByVal strErr As String)
            Me.GetAgentSplitAsync(dsSendData, dsReceData, strTime, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAgentSplitAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strTime As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetAgentSplitOperationCompleted Is Nothing) Then
                Me.GetAgentSplitOperationCompleted = AddressOf Me.OnGetAgentSplitOperationCompleted
            End If
            Me.InvokeAsync("GetAgentSplit", New Object() {dsSendData, dsReceData, strTime, strErr}, Me.GetAgentSplitOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAgentSplitOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAgentSplitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAgentSplitCompleted(Me, New GetAgentSplitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetSpecialTermsDetails", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSpecialTermsDetails(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSpecialTermsDetails", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSpecialTermsDetailsAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetSpecialTermsDetailsAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSpecialTermsDetailsAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetSpecialTermsDetailsOperationCompleted Is Nothing) Then
                Me.GetSpecialTermsDetailsOperationCompleted = AddressOf Me.OnGetSpecialTermsDetailsOperationCompleted
            End If
            Me.InvokeAsync("GetSpecialTermsDetails", New Object() {dsSendData, dsReceData, strErr}, Me.GetSpecialTermsDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSpecialTermsDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSpecialTermsDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSpecialTermsDetailsCompleted(Me, New GetSpecialTermsDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetSpecialTermsByTrailer", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSpecialTermsByTrailer(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSpecialTermsByTrailer", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSpecialTermsByTrailerAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetSpecialTermsByTrailerAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSpecialTermsByTrailerAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetSpecialTermsByTrailerOperationCompleted Is Nothing) Then
                Me.GetSpecialTermsByTrailerOperationCompleted = AddressOf Me.OnGetSpecialTermsByTrailerOperationCompleted
            End If
            Me.InvokeAsync("GetSpecialTermsByTrailer", New Object() {dsSendData, dsReceData, strErr}, Me.GetSpecialTermsByTrailerOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSpecialTermsByTrailerOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSpecialTermsByTrailerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSpecialTermsByTrailerCompleted(Me, New GetSpecialTermsByTrailerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCoveredLife", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCoveredLife(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCoveredLife", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCoveredLifeAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetCoveredLifeAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCoveredLifeAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCoveredLifeOperationCompleted Is Nothing) Then
                Me.GetCoveredLifeOperationCompleted = AddressOf Me.OnGetCoveredLifeOperationCompleted
            End If
            Me.InvokeAsync("GetCoveredLife", New Object() {dsSendData, dsReceData, strErr}, Me.GetCoveredLifeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCoveredLifeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCoveredLifeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCoveredLifeCompleted(Me, New GetCoveredLifeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetFundHolding", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFundHolding(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFundHolding", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFundHoldingAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetFundHoldingAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFundHoldingAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetFundHoldingOperationCompleted Is Nothing) Then
                Me.GetFundHoldingOperationCompleted = AddressOf Me.OnGetFundHoldingOperationCompleted
            End If
            Me.InvokeAsync("GetFundHolding", New Object() {dsSendData, dsReceData, strErr}, Me.GetFundHoldingOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFundHoldingOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFundHoldingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFundHoldingCompleted(Me, New GetFundHoldingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTotalInvestPremPaidFromCAPSIL", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTotalInvestPremPaidFromCAPSIL(ByVal strUserId As String, ByVal strPolicyNo As String, ByVal filterTranType As String, ByRef dsResult As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTotalInvestPremPaidFromCAPSIL", New Object() {strUserId, strPolicyNo, filterTranType, dsResult, strErr})
            dsResult = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTotalInvestPremPaidFromCAPSILAsync(ByVal strUserId As String, ByVal strPolicyNo As String, ByVal filterTranType As String, ByVal dsResult As System.Data.DataSet, ByVal strErr As String)
            Me.GetTotalInvestPremPaidFromCAPSILAsync(strUserId, strPolicyNo, filterTranType, dsResult, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTotalInvestPremPaidFromCAPSILAsync(ByVal strUserId As String, ByVal strPolicyNo As String, ByVal filterTranType As String, ByVal dsResult As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTotalInvestPremPaidFromCAPSILOperationCompleted Is Nothing) Then
                Me.GetTotalInvestPremPaidFromCAPSILOperationCompleted = AddressOf Me.OnGetTotalInvestPremPaidFromCAPSILOperationCompleted
            End If
            Me.InvokeAsync("GetTotalInvestPremPaidFromCAPSIL", New Object() {strUserId, strPolicyNo, filterTranType, dsResult, strErr}, Me.GetTotalInvestPremPaidFromCAPSILOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTotalInvestPremPaidFromCAPSILOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTotalInvestPremPaidFromCAPSILCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTotalInvestPremPaidFromCAPSILCompleted(Me, New GetTotalInvestPremPaidFromCAPSILCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTranHist", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTranHist(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTranHist", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTranHistAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetTranHistAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTranHistAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTranHistOperationCompleted Is Nothing) Then
                Me.GetTranHistOperationCompleted = AddressOf Me.OnGetTranHistOperationCompleted
            End If
            Me.InvokeAsync("GetTranHist", New Object() {dsSendData, dsReceData, strErr}, Me.GetTranHistOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTranHistOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTranHistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTranHistCompleted(Me, New GetTranHistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetTransactionHistory", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransactionHistory(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransactionHistory", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransactionHistoryAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetTransactionHistoryAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransactionHistoryAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetTransactionHistoryOperationCompleted Is Nothing) Then
                Me.GetTransactionHistoryOperationCompleted = AddressOf Me.OnGetTransactionHistoryOperationCompleted
            End If
            Me.InvokeAsync("GetTransactionHistory", New Object() {dsSendData, dsReceData, strErr}, Me.GetTransactionHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransactionHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransactionHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransactionHistoryCompleted(Me, New GetTransactionHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/AddAnotherLifeRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddAnotherLifeRecord(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("AddAnotherLifeRecord", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddAnotherLifeRecordAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.AddAnotherLifeRecordAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddAnotherLifeRecordAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.AddAnotherLifeRecordOperationCompleted Is Nothing) Then
                Me.AddAnotherLifeRecordOperationCompleted = AddressOf Me.OnAddAnotherLifeRecordOperationCompleted
            End If
            Me.InvokeAsync("AddAnotherLifeRecord", New Object() {dsSendData, dsReceData, strErr}, Me.AddAnotherLifeRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddAnotherLifeRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddAnotherLifeRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddAnotherLifeRecordCompleted(Me, New AddAnotherLifeRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ChangeComponentRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeComponentRecord(ByVal dsMain As System.Data.DataSet, ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String, ByRef bBOSuccess As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("ChangeComponentRecord", New Object() {dsMain, dsSendData, dsReceData, strErr, bBOSuccess})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            bBOSuccess = CType(results(4),Boolean)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeComponentRecordAsync(ByVal dsMain As System.Data.DataSet, ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal bBOSuccess As Boolean)
            Me.ChangeComponentRecordAsync(dsMain, dsSendData, dsReceData, strErr, bBOSuccess, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeComponentRecordAsync(ByVal dsMain As System.Data.DataSet, ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal bBOSuccess As Boolean, ByVal userState As Object)
            If (Me.ChangeComponentRecordOperationCompleted Is Nothing) Then
                Me.ChangeComponentRecordOperationCompleted = AddressOf Me.OnChangeComponentRecordOperationCompleted
            End If
            Me.InvokeAsync("ChangeComponentRecord", New Object() {dsMain, dsSendData, dsReceData, strErr, bBOSuccess}, Me.ChangeComponentRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeComponentRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeComponentRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeComponentRecordCompleted(Me, New ChangeComponentRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ChangeComponentRecordThroughBackEnd", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeComponentRecordThroughBackEnd(ByVal dsMain As System.Data.DataSet, ByRef strErr As String, ByRef bBOSuccess As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("ChangeComponentRecordThroughBackEnd", New Object() {dsMain, strErr, bBOSuccess})
            strErr = CType(results(1),String)
            bBOSuccess = CType(results(2),Boolean)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeComponentRecordThroughBackEndAsync(ByVal dsMain As System.Data.DataSet, ByVal strErr As String, ByVal bBOSuccess As Boolean)
            Me.ChangeComponentRecordThroughBackEndAsync(dsMain, strErr, bBOSuccess, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeComponentRecordThroughBackEndAsync(ByVal dsMain As System.Data.DataSet, ByVal strErr As String, ByVal bBOSuccess As Boolean, ByVal userState As Object)
            If (Me.ChangeComponentRecordThroughBackEndOperationCompleted Is Nothing) Then
                Me.ChangeComponentRecordThroughBackEndOperationCompleted = AddressOf Me.OnChangeComponentRecordThroughBackEndOperationCompleted
            End If
            Me.InvokeAsync("ChangeComponentRecordThroughBackEnd", New Object() {dsMain, strErr, bBOSuccess}, Me.ChangeComponentRecordThroughBackEndOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeComponentRecordThroughBackEndOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeComponentRecordThroughBackEndCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeComponentRecordThroughBackEndCompleted(Me, New ChangeComponentRecordThroughBackEndCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetSubAccountBalance", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSubAccountBalance(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSubAccountBalance", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSubAccountBalanceAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetSubAccountBalanceAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSubAccountBalanceAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetSubAccountBalanceOperationCompleted Is Nothing) Then
                Me.GetSubAccountBalanceOperationCompleted = AddressOf Me.OnGetSubAccountBalanceOperationCompleted
            End If
            Me.InvokeAsync("GetSubAccountBalance", New Object() {dsSendData, dsReceData, strErr}, Me.GetSubAccountBalanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSubAccountBalanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSubAccountBalanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSubAccountBalanceCompleted(Me, New GetSubAccountBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/OverCoolOffPeriod", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OverCoolOffPeriod(ByVal datIssueDate As Date, ByRef strOverCoolOff As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("OverCoolOffPeriod", New Object() {datIssueDate, strOverCoolOff, strErr})
            strOverCoolOff = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OverCoolOffPeriodAsync(ByVal datIssueDate As Date, ByVal strOverCoolOff As String, ByVal strErr As String)
            Me.OverCoolOffPeriodAsync(datIssueDate, strOverCoolOff, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OverCoolOffPeriodAsync(ByVal datIssueDate As Date, ByVal strOverCoolOff As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.OverCoolOffPeriodOperationCompleted Is Nothing) Then
                Me.OverCoolOffPeriodOperationCompleted = AddressOf Me.OnOverCoolOffPeriodOperationCompleted
            End If
            Me.InvokeAsync("OverCoolOffPeriod", New Object() {datIssueDate, strOverCoolOff, strErr}, Me.OverCoolOffPeriodOperationCompleted, userState)
        End Sub
        
        Private Sub OnOverCoolOffPeriodOperationCompleted(ByVal arg As Object)
            If (Not (Me.OverCoolOffPeriodCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OverCoolOffPeriodCompleted(Me, New OverCoolOffPeriodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/LapseDateValidation", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LapseDateValidation(ByVal strPolicyNo As String, ByVal datEffDate As Date, ByVal datPaidToDate As Date, ByRef strLapseDateValid As String, ByRef strMsg As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("LapseDateValidation", New Object() {strPolicyNo, datEffDate, datPaidToDate, strLapseDateValid, strMsg, strErr})
            strLapseDateValid = CType(results(1),String)
            strMsg = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LapseDateValidationAsync(ByVal strPolicyNo As String, ByVal datEffDate As Date, ByVal datPaidToDate As Date, ByVal strLapseDateValid As String, ByVal strMsg As String, ByVal strErr As String)
            Me.LapseDateValidationAsync(strPolicyNo, datEffDate, datPaidToDate, strLapseDateValid, strMsg, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LapseDateValidationAsync(ByVal strPolicyNo As String, ByVal datEffDate As Date, ByVal datPaidToDate As Date, ByVal strLapseDateValid As String, ByVal strMsg As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.LapseDateValidationOperationCompleted Is Nothing) Then
                Me.LapseDateValidationOperationCompleted = AddressOf Me.OnLapseDateValidationOperationCompleted
            End If
            Me.InvokeAsync("LapseDateValidation", New Object() {strPolicyNo, datEffDate, datPaidToDate, strLapseDateValid, strMsg, strErr}, Me.LapseDateValidationOperationCompleted, userState)
        End Sub
        
        Private Sub OnLapseDateValidationOperationCompleted(ByVal arg As Object)
            If (Not (Me.LapseDateValidationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LapseDateValidationCompleted(Me, New LapseDateValidationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/TransTypeValidation", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TransTypeValidation(ByVal strPolStatus As String, ByVal strTransType As String, ByRef strPolStatusValid As String, ByRef strMsg As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("TransTypeValidation", New Object() {strPolStatus, strTransType, strPolStatusValid, strMsg, strErr})
            strPolStatusValid = CType(results(1),String)
            strMsg = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TransTypeValidationAsync(ByVal strPolStatus As String, ByVal strTransType As String, ByVal strPolStatusValid As String, ByVal strMsg As String, ByVal strErr As String)
            Me.TransTypeValidationAsync(strPolStatus, strTransType, strPolStatusValid, strMsg, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TransTypeValidationAsync(ByVal strPolStatus As String, ByVal strTransType As String, ByVal strPolStatusValid As String, ByVal strMsg As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.TransTypeValidationOperationCompleted Is Nothing) Then
                Me.TransTypeValidationOperationCompleted = AddressOf Me.OnTransTypeValidationOperationCompleted
            End If
            Me.InvokeAsync("TransTypeValidation", New Object() {strPolStatus, strTransType, strPolStatusValid, strMsg, strErr}, Me.TransTypeValidationOperationCompleted, userState)
        End Sub
        
        Private Sub OnTransTypeValidationOperationCompleted(ByVal arg As Object)
            If (Not (Me.TransTypeValidationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TransTypeValidationCompleted(Me, New TransTypeValidationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLetterHeader", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLetterHeader(ByVal strPolicyNo As String, ByVal strLetterType As String, ByRef dsData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLetterHeader", New Object() {strPolicyNo, strLetterType, dsData, strErr})
            dsData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLetterHeaderAsync(ByVal strPolicyNo As String, ByVal strLetterType As String, ByVal dsData As System.Data.DataSet, ByVal strErr As String)
            Me.GetLetterHeaderAsync(strPolicyNo, strLetterType, dsData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLetterHeaderAsync(ByVal strPolicyNo As String, ByVal strLetterType As String, ByVal dsData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLetterHeaderOperationCompleted Is Nothing) Then
                Me.GetLetterHeaderOperationCompleted = AddressOf Me.OnGetLetterHeaderOperationCompleted
            End If
            Me.InvokeAsync("GetLetterHeader", New Object() {strPolicyNo, strLetterType, dsData, strErr}, Me.GetLetterHeaderOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLetterHeaderOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLetterHeaderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLetterHeaderCompleted(Me, New GetLetterHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SavePolSurrSynRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SavePolSurrSynRecord(ByVal dsSynDetail As System.Data.DataSet, ByRef TransID As Long, ByRef TransType As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SavePolSurrSynRecord", New Object() {dsSynDetail, TransID, TransType, strErr})
            TransID = CType(results(1),Long)
            TransType = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SavePolSurrSynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String)
            Me.SavePolSurrSynRecordAsync(dsSynDetail, TransID, TransType, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SavePolSurrSynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.SavePolSurrSynRecordOperationCompleted Is Nothing) Then
                Me.SavePolSurrSynRecordOperationCompleted = AddressOf Me.OnSavePolSurrSynRecordOperationCompleted
            End If
            Me.InvokeAsync("SavePolSurrSynRecord", New Object() {dsSynDetail, TransID, TransType, strErr}, Me.SavePolSurrSynRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnSavePolSurrSynRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.SavePolSurrSynRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SavePolSurrSynRecordCompleted(Me, New SavePolSurrSynRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPolSurrRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolSurrRecord(ByRef dsParSurr As System.Data.DataSet, ByRef TransID As Long, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPolSurrRecord", New Object() {dsParSurr, TransID, strErr})
            dsParSurr = CType(results(1),System.Data.DataSet)
            TransID = CType(results(2),Long)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolSurrRecordAsync(ByVal dsParSurr As System.Data.DataSet, ByVal TransID As Long, ByVal strErr As String)
            Me.GetPolSurrRecordAsync(dsParSurr, TransID, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolSurrRecordAsync(ByVal dsParSurr As System.Data.DataSet, ByVal TransID As Long, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPolSurrRecordOperationCompleted Is Nothing) Then
                Me.GetPolSurrRecordOperationCompleted = AddressOf Me.OnGetPolSurrRecordOperationCompleted
            End If
            Me.InvokeAsync("GetPolSurrRecord", New Object() {dsParSurr, TransID, strErr}, Me.GetPolSurrRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolSurrRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolSurrRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolSurrRecordCompleted(Me, New GetPolSurrRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLastSurrReq", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLastSurrReq(ByVal policyNo As String, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLastSurrReq", New Object() {policyNo, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLastSurrReqAsync(ByVal policyNo As String, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.GetLastSurrReqAsync(policyNo, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLastSurrReqAsync(ByVal policyNo As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLastSurrReqOperationCompleted Is Nothing) Then
                Me.GetLastSurrReqOperationCompleted = AddressOf Me.OnGetLastSurrReqOperationCompleted
            End If
            Me.InvokeAsync("GetLastSurrReq", New Object() {policyNo, ds, strErr}, Me.GetLastSurrReqOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLastSurrReqOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLastSurrReqCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLastSurrReqCompleted(Me, New GetLastSurrReqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/SaveValTransSynRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveValTransSynRecord(ByVal dsSynDetail As System.Data.DataSet, ByRef TransID As Long, ByRef TransType As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveValTransSynRecord", New Object() {dsSynDetail, TransID, TransType, strErr})
            TransID = CType(results(1),Long)
            TransType = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveValTransSynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String)
            Me.SaveValTransSynRecordAsync(dsSynDetail, TransID, TransType, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveValTransSynRecordAsync(ByVal dsSynDetail As System.Data.DataSet, ByVal TransID As Long, ByVal TransType As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.SaveValTransSynRecordOperationCompleted Is Nothing) Then
                Me.SaveValTransSynRecordOperationCompleted = AddressOf Me.OnSaveValTransSynRecordOperationCompleted
            End If
            Me.InvokeAsync("SaveValTransSynRecord", New Object() {dsSynDetail, TransID, TransType, strErr}, Me.SaveValTransSynRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveValTransSynRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveValTransSynRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveValTransSynRecordCompleted(Me, New SaveValTransSynRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetValTransRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetValTransRecord(ByRef dsParSurr As System.Data.DataSet, ByRef TransID As Long, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetValTransRecord", New Object() {dsParSurr, TransID, strErr})
            dsParSurr = CType(results(1),System.Data.DataSet)
            TransID = CType(results(2),Long)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetValTransRecordAsync(ByVal dsParSurr As System.Data.DataSet, ByVal TransID As Long, ByVal strErr As String)
            Me.GetValTransRecordAsync(dsParSurr, TransID, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetValTransRecordAsync(ByVal dsParSurr As System.Data.DataSet, ByVal TransID As Long, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetValTransRecordOperationCompleted Is Nothing) Then
                Me.GetValTransRecordOperationCompleted = AddressOf Me.OnGetValTransRecordOperationCompleted
            End If
            Me.InvokeAsync("GetValTransRecord", New Object() {dsParSurr, TransID, strErr}, Me.GetValTransRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetValTransRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetValTransRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetValTransRecordCompleted(Me, New GetValTransRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetUnitTran", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUnitTran(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strMsg As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUnitTran", New Object() {dsSendData, dsReceData, strMsg, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strMsg = CType(results(3),String)
            strErr = CType(results(4),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUnitTranAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strMsg As String, ByVal strErr As String)
            Me.GetUnitTranAsync(dsSendData, dsReceData, strMsg, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUnitTranAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strMsg As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetUnitTranOperationCompleted Is Nothing) Then
                Me.GetUnitTranOperationCompleted = AddressOf Me.OnGetUnitTranOperationCompleted
            End If
            Me.InvokeAsync("GetUnitTran", New Object() {dsSendData, dsReceData, strMsg, strErr}, Me.GetUnitTranOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUnitTranOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUnitTranCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUnitTranCompleted(Me, New GetUnitTranCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPOSValHistory", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPOSValHistory(ByVal strPolicyNo As String, ByVal strWithdrawFrom As String, ByVal strStatus As String, ByRef dsData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPOSValHistory", New Object() {strPolicyNo, strWithdrawFrom, strStatus, dsData, strErr})
            dsData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPOSValHistoryAsync(ByVal strPolicyNo As String, ByVal strWithdrawFrom As String, ByVal strStatus As String, ByVal dsData As System.Data.DataSet, ByVal strErr As String)
            Me.GetPOSValHistoryAsync(strPolicyNo, strWithdrawFrom, strStatus, dsData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPOSValHistoryAsync(ByVal strPolicyNo As String, ByVal strWithdrawFrom As String, ByVal strStatus As String, ByVal dsData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPOSValHistoryOperationCompleted Is Nothing) Then
                Me.GetPOSValHistoryOperationCompleted = AddressOf Me.OnGetPOSValHistoryOperationCompleted
            End If
            Me.InvokeAsync("GetPOSValHistory", New Object() {strPolicyNo, strWithdrawFrom, strStatus, dsData, strErr}, Me.GetPOSValHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPOSValHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPOSValHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPOSValHistoryCompleted(Me, New GetPOSValHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPOSValHistory2", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPOSValHistory2(ByVal lngTranID As Long, ByRef dsData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPOSValHistory2", New Object() {lngTranID, dsData, strErr})
            dsData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPOSValHistory2Async(ByVal lngTranID As Long, ByVal dsData As System.Data.DataSet, ByVal strErr As String)
            Me.GetPOSValHistory2Async(lngTranID, dsData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPOSValHistory2Async(ByVal lngTranID As Long, ByVal dsData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPOSValHistory2OperationCompleted Is Nothing) Then
                Me.GetPOSValHistory2OperationCompleted = AddressOf Me.OnGetPOSValHistory2OperationCompleted
            End If
            Me.InvokeAsync("GetPOSValHistory2", New Object() {lngTranID, dsData, strErr}, Me.GetPOSValHistory2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPOSValHistory2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPOSValHistory2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPOSValHistory2Completed(Me, New GetPOSValHistory2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetChqLimit", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetChqLimit(ByVal strUserID As String, ByVal strCategory As String, ByRef dsData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetChqLimit", New Object() {strUserID, strCategory, dsData, strErr})
            dsData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetChqLimitAsync(ByVal strUserID As String, ByVal strCategory As String, ByVal dsData As System.Data.DataSet, ByVal strErr As String)
            Me.GetChqLimitAsync(strUserID, strCategory, dsData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetChqLimitAsync(ByVal strUserID As String, ByVal strCategory As String, ByVal dsData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetChqLimitOperationCompleted Is Nothing) Then
                Me.GetChqLimitOperationCompleted = AddressOf Me.OnGetChqLimitOperationCompleted
            End If
            Me.InvokeAsync("GetChqLimit", New Object() {strUserID, strCategory, dsData, strErr}, Me.GetChqLimitOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetChqLimitOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetChqLimitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetChqLimitCompleted(Me, New GetChqLimitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetNewChqLimit", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNewChqLimit(ByVal strUserID As String, ByVal strCategory As String, ByVal strCurr As String, ByRef dsData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetNewChqLimit", New Object() {strUserID, strCategory, strCurr, dsData, strErr})
            dsData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNewChqLimitAsync(ByVal strUserID As String, ByVal strCategory As String, ByVal strCurr As String, ByVal dsData As System.Data.DataSet, ByVal strErr As String)
            Me.GetNewChqLimitAsync(strUserID, strCategory, strCurr, dsData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNewChqLimitAsync(ByVal strUserID As String, ByVal strCategory As String, ByVal strCurr As String, ByVal dsData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetNewChqLimitOperationCompleted Is Nothing) Then
                Me.GetNewChqLimitOperationCompleted = AddressOf Me.OnGetNewChqLimitOperationCompleted
            End If
            Me.InvokeAsync("GetNewChqLimit", New Object() {strUserID, strCategory, strCurr, dsData, strErr}, Me.GetNewChqLimitOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNewChqLimitOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNewChqLimitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNewChqLimitCompleted(Me, New GetNewChqLimitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetUserInfo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserInfo(ByVal strUserID As String, ByRef dsData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUserInfo", New Object() {strUserID, dsData, strErr})
            dsData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserInfoAsync(ByVal strUserID As String, ByVal dsData As System.Data.DataSet, ByVal strErr As String)
            Me.GetUserInfoAsync(strUserID, dsData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserInfoAsync(ByVal strUserID As String, ByVal dsData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetUserInfoOperationCompleted Is Nothing) Then
                Me.GetUserInfoOperationCompleted = AddressOf Me.OnGetUserInfoOperationCompleted
            End If
            Me.InvokeAsync("GetUserInfo", New Object() {strUserID, dsData, strErr}, Me.GetUserInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserInfoCompleted(Me, New GetUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCategoryID", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCategoryID(ByRef dsData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCategoryID", New Object() {dsData, strErr})
            dsData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCategoryIDAsync(ByVal dsData As System.Data.DataSet, ByVal strErr As String)
            Me.GetCategoryIDAsync(dsData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCategoryIDAsync(ByVal dsData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCategoryIDOperationCompleted Is Nothing) Then
                Me.GetCategoryIDOperationCompleted = AddressOf Me.OnGetCategoryIDOperationCompleted
            End If
            Me.InvokeAsync("GetCategoryID", New Object() {dsData, strErr}, Me.GetCategoryIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCategoryIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCategoryIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCategoryIDCompleted(Me, New GetCategoryIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCurrencyID", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCurrencyID(ByRef dsData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCurrencyID", New Object() {dsData, strErr})
            dsData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCurrencyIDAsync(ByVal dsData As System.Data.DataSet, ByVal strErr As String)
            Me.GetCurrencyIDAsync(dsData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCurrencyIDAsync(ByVal dsData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCurrencyIDOperationCompleted Is Nothing) Then
                Me.GetCurrencyIDOperationCompleted = AddressOf Me.OnGetCurrencyIDOperationCompleted
            End If
            Me.InvokeAsync("GetCurrencyID", New Object() {dsData, strErr}, Me.GetCurrencyIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCurrencyIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCurrencyIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCurrencyIDCompleted(Me, New GetCurrencyIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPositionAndDept", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPositionAndDept(ByVal strDeptCode As String, ByRef dsData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPositionAndDept", New Object() {strDeptCode, dsData, strErr})
            dsData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPositionAndDeptAsync(ByVal strDeptCode As String, ByVal dsData As System.Data.DataSet, ByVal strErr As String)
            Me.GetPositionAndDeptAsync(strDeptCode, dsData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPositionAndDeptAsync(ByVal strDeptCode As String, ByVal dsData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPositionAndDeptOperationCompleted Is Nothing) Then
                Me.GetPositionAndDeptOperationCompleted = AddressOf Me.OnGetPositionAndDeptOperationCompleted
            End If
            Me.InvokeAsync("GetPositionAndDept", New Object() {strDeptCode, dsData, strErr}, Me.GetPositionAndDeptOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPositionAndDeptOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPositionAndDeptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPositionAndDeptCompleted(Me, New GetPositionAndDeptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/AddNewUser", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddNewUser(ByVal strUserID As String, ByVal strUserNm As String, ByVal strDeptCode As String, ByVal strChqAuth As String, ByVal strPOST As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("AddNewUser", New Object() {strUserID, strUserNm, strDeptCode, strChqAuth, strPOST, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddNewUserAsync(ByVal strUserID As String, ByVal strUserNm As String, ByVal strDeptCode As String, ByVal strChqAuth As String, ByVal strPOST As String, ByVal strErr As String)
            Me.AddNewUserAsync(strUserID, strUserNm, strDeptCode, strChqAuth, strPOST, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddNewUserAsync(ByVal strUserID As String, ByVal strUserNm As String, ByVal strDeptCode As String, ByVal strChqAuth As String, ByVal strPOST As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.AddNewUserOperationCompleted Is Nothing) Then
                Me.AddNewUserOperationCompleted = AddressOf Me.OnAddNewUserOperationCompleted
            End If
            Me.InvokeAsync("AddNewUser", New Object() {strUserID, strUserNm, strDeptCode, strChqAuth, strPOST, strErr}, Me.AddNewUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddNewUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddNewUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddNewUserCompleted(Me, New AddNewUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://inglife.com.hk/"),  _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="http://inglife.com.hk/", IsNullable:=false)>  _
    Partial Public Class DBSOAPHeader
        Inherits System.Web.Services.Protocols.SoapHeader
        
        Private projectField As String
        
        Private connectionAliasField As String
        
        Private userField As String
        
        Private userTypeField As String
        
        Private envField As String
        
        Private compField As String
        
        Private cIWProjectField As String
        
        Private cIWConnectionAliasField As String
        
        Private cIWUserField As String
        
        Private cIWEnvField As String
        
        Private cIWCompField As String
        
        Private anyAttrField() As System.Xml.XmlAttribute
        
        '''<remarks/>
        Public Property Project() As String
            Get
                Return Me.projectField
            End Get
            Set
                Me.projectField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ConnectionAlias() As String
            Get
                Return Me.connectionAliasField
            End Get
            Set
                Me.connectionAliasField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property User() As String
            Get
                Return Me.userField
            End Get
            Set
                Me.userField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserType() As String
            Get
                Return Me.userTypeField
            End Get
            Set
                Me.userTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Env() As String
            Get
                Return Me.envField
            End Get
            Set
                Me.envField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Comp() As String
            Get
                Return Me.compField
            End Get
            Set
                Me.compField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CIWProject() As String
            Get
                Return Me.cIWProjectField
            End Get
            Set
                Me.cIWProjectField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CIWConnectionAlias() As String
            Get
                Return Me.cIWConnectionAliasField
            End Get
            Set
                Me.cIWConnectionAliasField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CIWUser() As String
            Get
                Return Me.cIWUserField
            End Get
            Set
                Me.cIWUserField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CIWEnv() As String
            Get
                Return Me.cIWEnvField
            End Get
            Set
                Me.cIWEnvField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CIWComp() As String
            Get
                Return Me.cIWCompField
            End Get
            Set
                Me.cIWCompField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyAttributeAttribute()>  _
        Public Property AnyAttr() As System.Xml.XmlAttribute()
            Get
                Return Me.anyAttrField
            End Get
            Set
                Me.anyAttrField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://inglife.com.hk/"),  _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="http://inglife.com.hk/", IsNullable:=false)>  _
    Partial Public Class MQSOAPHeader
        Inherits System.Web.Services.Protocols.SoapHeader
        
        Private queueManagerField As String
        
        Private remoteQueueField As String
        
        Private replyToQueueField As String
        
        Private localQueueField As String
        
        Private timeoutField As Integer
        
        Private projectAliasField As String
        
        Private connectionAliasField As String
        
        Private userTypeField As String
        
        Private environmentUseField As String
        
        Private companyIDField As String
        
        Private userIDField As String
        
        Private machineIDField As String
        
        Private versionNoField As String
        
        Private libraryNameField As String
        
        Private anyAttrField() As System.Xml.XmlAttribute
        
        '''<remarks/>
        Public Property QueueManager() As String
            Get
                Return Me.queueManagerField
            End Get
            Set
                Me.queueManagerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RemoteQueue() As String
            Get
                Return Me.remoteQueueField
            End Get
            Set
                Me.remoteQueueField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ReplyToQueue() As String
            Get
                Return Me.replyToQueueField
            End Get
            Set
                Me.replyToQueueField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LocalQueue() As String
            Get
                Return Me.localQueueField
            End Get
            Set
                Me.localQueueField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Timeout() As Integer
            Get
                Return Me.timeoutField
            End Get
            Set
                Me.timeoutField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectAlias() As String
            Get
                Return Me.projectAliasField
            End Get
            Set
                Me.projectAliasField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ConnectionAlias() As String
            Get
                Return Me.connectionAliasField
            End Get
            Set
                Me.connectionAliasField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserType() As String
            Get
                Return Me.userTypeField
            End Get
            Set
                Me.userTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EnvironmentUse() As String
            Get
                Return Me.environmentUseField
            End Get
            Set
                Me.environmentUseField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompanyID() As String
            Get
                Return Me.companyIDField
            End Get
            Set
                Me.companyIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As String
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MachineID() As String
            Get
                Return Me.machineIDField
            End Get
            Set
                Me.machineIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property VersionNo() As String
            Get
                Return Me.versionNoField
            End Get
            Set
                Me.versionNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LibraryName() As String
            Get
                Return Me.libraryNameField
            End Get
            Set
                Me.libraryNameField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyAttributeAttribute()>  _
        Public Property AnyAttr() As System.Xml.XmlAttribute()
            Get
                Return Me.anyAttrField
            End Get
            Set
                Me.anyAttrField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://inglife.com.hk/"),  _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="http://inglife.com.hk/", IsNullable:=false)>  _
    Partial Public Class ING_SOAPHeader
        Inherits System.Web.Services.Protocols.SoapHeader
        
        Private userField As String
        
        Private machineIDField As String
        
        Private anyAttrField() As System.Xml.XmlAttribute
        
        '''<remarks/>
        Public Property User() As String
            Get
                Return Me.userField
            End Get
            Set
                Me.userField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MachineID() As String
            Get
                Return Me.machineIDField
            End Get
            Set
                Me.machineIDField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyAttributeAttribute()>  _
        Public Property AnyAttr() As System.Xml.XmlAttribute()
            Get
                Return Me.anyAttrField
            End Get
            Set
                Me.anyAttrField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SearchPolicy_MCUCompletedEventHandler(ByVal sender As Object, ByVal e As SearchPolicy_MCUCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SearchPolicy_MCUCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsPolicy() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetRiderDefaultSISettingCompletedEventHandler(ByVal sender As Object, ByVal e As GetRiderDefaultSISettingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRiderDefaultSISettingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtSetting() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPolicyLastEffectiveDateCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyLastEffectiveDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyLastEffectiveDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property effDate() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Date)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckNoReinstatementRiderCompletedEventHandler(ByVal sender As Object, ByVal e As CheckNoReinstatementRiderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckNoReinstatementRiderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtRider() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPolicyAdminFNARecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyAdminFNARecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyAdminFNARecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsFNAInfo() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub addPolicyAdminFNARecordCompletedEventHandler(ByVal sender As Object, ByVal e As addPolicyAdminFNARecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class addPolicyAdminFNARecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dt() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub deletePolicyAdminFNARecordCompletedEventHandler(ByVal sender As Object, ByVal e As deletePolicyAdminFNARecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class deletePolicyAdminFNARecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub changePolicyAdminFNARecordCompletedEventHandler(ByVal sender As Object, ByVal e As changePolicyAdminFNARecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class changePolicyAdminFNARecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dt() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SendMailCompletedEventHandler(ByVal sender As Object, ByVal e As SendMailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendMailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransSummaryChangeInsuredCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransSummaryChangeInsuredCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransSummaryChangeInsuredCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub HasOutstandingClaimCompletedEventHandler(ByVal sender As Object, ByVal e As HasOutstandingClaimCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HasOutstandingClaimCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property blnHasOutstandingClaim() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AllowChangeInsuredCompletedEventHandler(ByVal sender As Object, ByVal e As AllowChangeInsuredCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AllowChangeInsuredCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property blnAllow() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub IsPolicyChangeInsuredCompletedEventHandler(ByVal sender As Object, ByVal e As IsPolicyChangeInsuredCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsPolicyChangeInsuredCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property blnInsuredChanged() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetInforceCoverageCompletedEventHandler(ByVal sender As Object, ByVal e As GetInforceCoverageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInforceCoverageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtCov() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClawbackCampaignQuotationCompletedEventHandler(ByVal sender As Object, ByVal e As GetClawbackCampaignQuotationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClawbackCampaignQuotationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtEffectiveDate() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Date)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dblAvailablePremiumSusp() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dblClawbackFromPremiumSusp() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dblAvailablePaymentSusp() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dblClawbackFromPaymentSusp() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ClawbackCampaignDiscountCompletedEventHandler(ByVal sender As Object, ByVal e As ClawbackCampaignDiscountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ClawbackCampaignDiscountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtEffectiveDate() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Date)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransactionRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransactionRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransactionRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransactionRecordDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransactionRecordDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransactionRecordDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAllClientTransactionRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllClientTransactionRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllClientTransactionRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtResult() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClientTransactionRrcordCompletedEventHandler(ByVal sender As Object, ByVal e As GetClientTransactionRrcordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClientTransactionRrcordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtResult() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveManualLetterCompletedEventHandler(ByVal sender As Object, ByVal e As SaveManualLetterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveManualLetterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveManualLetterByPolicyCompletedEventHandler(ByVal sender As Object, ByVal e As SaveManualLetterByPolicyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveManualLetterByPolicyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckReprintRecordCompletedEventHandler(ByVal sender As Object, ByVal e As CheckReprintRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckReprintRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckReprintRecordByPolicyNoCompletedEventHandler(ByVal sender As Object, ByVal e As CheckReprintRecordByPolicyNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckReprintRecordByPolicyNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPolicyReceivedDateCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyReceivedDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyReceivedDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property receivedDate() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Date)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SavePolicyReceivedDateCompletedEventHandler(ByVal sender As Object, ByVal e As SavePolicyReceivedDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SavePolicyReceivedDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPostFundAllocationChecklistCompletedEventHandler(ByVal sender As Object, ByVal e As GetPostFundAllocationChecklistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPostFundAllocationChecklistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtData() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFundAllocationLetterCompletedEventHandler(ByVal sender As Object, ByVal e As GetFundAllocationLetterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFundAllocationLetterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtData() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAllPolicyFundAllocationLetterCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllPolicyFundAllocationLetterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllPolicyFundAllocationLetterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtData() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFundBalanceLetterCompletedEventHandler(ByVal sender As Object, ByVal e As GetFundBalanceLetterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFundBalanceLetterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtData() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFundSwitchPublicWebsiteAllowStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetFundSwitchPublicWebsiteAllowStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFundSwitchPublicWebsiteAllowStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strBuyStatus() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strSellStatus() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFundAllocationLASAllowStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetFundAllocationLASAllowStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFundAllocationLASAllowStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strStatus() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCapsilFundAuthStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetCapsilFundAuthStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCapsilFundAuthStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strStatus() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFundCloseStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetFundCloseStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFundCloseStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strNbrStatus() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strFprStatus() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCapsilFundCloseStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetCapsilFundCloseStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCapsilFundCloseStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strStatus() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFundLetterProductsCompletedEventHandler(ByVal sender As Object, ByVal e As GetFundLetterProductsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFundLetterProductsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dt() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFundMaintReuquestCompletedEventHandler(ByVal sender As Object, ByVal e As GetFundMaintReuquestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFundMaintReuquestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtRequest() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub FundSubmitRequestCompletedEventHandler(ByVal sender As Object, ByVal e As FundSubmitRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FundSubmitRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFundMandatDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetFundMandatDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFundMandatDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds_FundIn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds_FundOut() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub FundMandatSubmitRequestCompletedEventHandler(ByVal sender As Object, ByVal e As FundMandatSubmitRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FundMandatSubmitRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CancelFundRequestCompletedEventHandler(ByVal sender As Object, ByVal e As CancelFundRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelFundRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ApproveFundRequestCompletedEventHandler(ByVal sender As Object, ByVal e As ApproveFundRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ApproveFundRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetLifeAsiaFundStatCompletedEventHandler(ByVal sender As Object, ByVal e As GetLifeAsiaFundStatCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLifeAsiaFundStatCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsFundStat() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdLifeAsiaFundStatCompletedEventHandler(ByVal sender As Object, ByVal e As UpdLifeAsiaFundStatCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdLifeAsiaFundStatCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsFundStat() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetComplusoryFundSwitchTransLogCompletedEventHandler(ByVal sender As Object, ByVal e As GetComplusoryFundSwitchTransLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetComplusoryFundSwitchTransLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dt() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SubmitFundChangeLetterRequestCompletedEventHandler(ByVal sender As Object, ByVal e As SubmitFundChangeLetterRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubmitFundChangeLetterRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property intId() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFundChangeLetterRequestCompletedEventHandler(ByVal sender As Object, ByVal e As GetFundChangeLetterRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFundChangeLetterRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRequest() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFundChangeLetterRequestHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As GetFundChangeLetterRequestHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFundChangeLetterRequestHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtHistory() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateFundChangeLetterRequestCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateFundChangeLetterRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateFundChangeLetterRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFundChangeRequestNewPolicyListCompletedEventHandler(ByVal sender As Object, ByVal e As GetFundChangeRequestNewPolicyListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFundChangeRequestNewPolicyListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtPolicyList() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckFundChangePolicyListCompletedEventHandler(ByVal sender As Object, ByVal e As CheckFundChangePolicyListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckFundChangePolicyListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtPolicyList() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFundChangeLetterLogCompletedEventHandler(ByVal sender As Object, ByVal e As GetFundChangeLetterLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFundChangeLetterLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtLetterLog() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateFundChangeRequestStatusCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateFundChangeRequestStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateFundChangeRequestStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub isNBUSIndiciaCompletedEventHandler(ByVal sender As Object, ByVal e As isNBUSIndiciaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isNBUSIndiciaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property isUS() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub isPOSUSIndiciaCompletedEventHandler(ByVal sender As Object, ByVal e As isPOSUSIndiciaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isPOSUSIndiciaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property isUS() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCodeTableCompletedEventHandler(ByVal sender As Object, ByVal e As GetCodeTableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCodeTableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtReturn() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetServiceFeeEnquiryCompletedEventHandler(ByVal sender As Object, ByVal e As GetServiceFeeEnquiryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetServiceFeeEnquiryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsServiceFee() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ServiceFeeRegistrationCompletedEventHandler(ByVal sender As Object, ByVal e As ServiceFeeRegistrationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ServiceFeeRegistrationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ServiceFeeTerminationCompletedEventHandler(ByVal sender As Object, ByVal e As ServiceFeeTerminationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ServiceFeeTerminationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DpmsServiceFeeRegistrationCompletedEventHandler(ByVal sender As Object, ByVal e As DpmsServiceFeeRegistrationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DpmsServiceFeeRegistrationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DpmsServiceFeeTerminationCompletedEventHandler(ByVal sender As Object, ByVal e As DpmsServiceFeeTerminationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DpmsServiceFeeTerminationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetRequestFromCodeByRefNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetRequestFromCodeByRefNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRequestFromCodeByRefNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckBrokerValidForDPMSCompletedEventHandler(ByVal sender As Object, ByVal e As CheckBrokerValidForDPMSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckBrokerValidForDPMSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub strmsgreqCompletedEventHandler(ByVal sender As Object, ByVal e As strmsgreqCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class strmsgreqCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property PstrRefNo() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SendSMS2CustomerCompletedEventHandler(ByVal sender As Object, ByVal e As SendSMS2CustomerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendSMS2CustomerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property PstrRefNo() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property PstrErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SendPolicySMSCompletedEventHandler(ByVal sender As Object, ByVal e As SendPolicySMSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendPolicySMSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pstrSMSType() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pstrSmsid() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pstrErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCapsilNegativeCashValueReminderCompletedEventHandler(ByVal sender As Object, ByVal e As GetCapsilNegativeCashValueReminderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCapsilNegativeCashValueReminderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds1() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateCapsilNegativeCashValueReminderFlagCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCapsilNegativeCashValueReminderFlagCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCapsilNegativeCashValueReminderFlagCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub isAnnuityPlanCompletedEventHandler(ByVal sender As Object, ByVal e As isAnnuityPlanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isAnnuityPlanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DirectCreditCompletedEventHandler(ByVal sender As Object, ByVal e As DirectCreditCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DirectCreditCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsResult() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub isAnnuityPolicyCompletedEventHandler(ByVal sender As Object, ByVal e As isAnnuityPolicyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isAnnuityPolicyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub HasULRegularContributionCompletedEventHandler(ByVal sender As Object, ByVal e As HasULRegularContributionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HasULRegularContributionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMinimumRequiredPremiumCompletedEventHandler(ByVal sender As Object, ByVal e As GetMinimumRequiredPremiumCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMinimumRequiredPremiumCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRece() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveDpmsMailRequestCompletedEventHandler(ByVal sender As Object, ByVal e As SaveDpmsMailRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveDpmsMailRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetDpmsImportFileCompletedEventHandler(ByVal sender As Object, ByVal e As GetDpmsImportFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDpmsImportFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsResult() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateDpmsMailStatusCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateDpmsMailStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateDpmsMailStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetDpmsDailyStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetDpmsDailyStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDpmsDailyStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveDpmsMailLogCompletedEventHandler(ByVal sender As Object, ByVal e As SaveDpmsMailLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveDpmsMailLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckCNHolderWithPolicyNoteIFSCompletedEventHandler(ByVal sender As Object, ByVal e As CheckCNHolderWithPolicyNoteIFSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckCNHolderWithPolicyNoteIFSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMortalityClassRankCAPCompletedEventHandler(ByVal sender As Object, ByVal e As GetMortalityClassRankCAPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMortalityClassRankCAPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMortalityClassRankLACompletedEventHandler(ByVal sender As Object, ByVal e As GetMortalityClassRankLACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMortalityClassRankLACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CUPDDAtoCashConversionCompletedEventHandler(ByVal sender As Object, ByVal e As CUPDDAtoCashConversionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CUPDDAtoCashConversionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPosSoftCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetPosSoftCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPosSoftCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtValue() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property code() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub EnquireEGPCompletedEventHandler(ByVal sender As Object, ByVal e As EnquireEGPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EnquireEGPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property status() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property effectiveFrom() As System.Nullable(Of Date)
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Nullable(Of Date))
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property effectiveTo() As System.Nullable(Of Date)
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),System.Nullable(Of Date))
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property suppressFrom() As System.Nullable(Of Date)
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),System.Nullable(Of Date))
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property suppressTo() As System.Nullable(Of Date)
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),System.Nullable(Of Date))
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property os_premium() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),Decimal)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property os_levy() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(7),Decimal)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property isEligible() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(8),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(9),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveEGPApplySyncRcdCompletedEventHandler(ByVal sender As Object, ByVal e As SaveEGPApplySyncRcdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveEGPApplySyncRcdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property lngTransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveEGPReleaseSyncRcdCompletedEventHandler(ByVal sender As Object, ByVal e As SaveEGPReleaseSyncRcdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveEGPReleaseSyncRcdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property lngTransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveEGPSuppressBillinfSyncRcdCompletedEventHandler(ByVal sender As Object, ByVal e As SaveEGPSuppressBillinfSyncRcdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveEGPSuppressBillinfSyncRcdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property lngTransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetEGPRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetEGPRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEGPRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtTrans() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub EnquireSpecialEventBenefitCompletedEventHandler(ByVal sender As Object, ByVal e As EnquireSpecialEventBenefitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EnquireSpecialEventBenefitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property status() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property statusDesc() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property effectiveFrom() As System.Nullable(Of Date)
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),System.Nullable(Of Date))
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property effectiveTo() As System.Nullable(Of Date)
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),System.Nullable(Of Date))
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property reason() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveSpecialEventApplySyncRcdCompletedEventHandler(ByVal sender As Object, ByVal e As SaveSpecialEventApplySyncRcdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveSpecialEventApplySyncRcdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property lngTransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveSpecialEventTerminateSyncRcdCompletedEventHandler(ByVal sender As Object, ByVal e As SaveSpecialEventTerminateSyncRcdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveSpecialEventTerminateSyncRcdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property reason() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property lngTransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetSpecialEventTransCompletedEventHandler(ByVal sender As Object, ByVal e As GetSpecialEventTransCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSpecialEventTransCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtTrans() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddProblemPolicyMessageCompletedEventHandler(ByVal sender As Object, ByVal e As AddProblemPolicyMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddProblemPolicyMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCRSTranscationLogCompletedEventHandler(ByVal sender As Object, ByVal e As GetCRSTranscationLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCRSTranscationLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCRSTranscationLogByTranscationLogIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetCRSTranscationLogByTranscationLogIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCRSTranscationLogByTranscationLogIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCRSFollowUpLetterTranscationLogByCustomerIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetCRSFollowUpLetterTranscationLogByCustomerIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCRSFollowUpLetterTranscationLogByCustomerIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCRSFollowUpLetterTranscationLogByTranscationIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetCRSFollowUpLetterTranscationLogByTranscationIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCRSFollowUpLetterTranscationLogByTranscationIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetDataRetentionOldCustomerIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetDataRetentionOldCustomerIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDataRetentionOldCustomerIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property oCustomerID() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMediumListCompletedEventHandler(ByVal sender As Object, ByVal e As GetMediumListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMediumListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMeduim() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetEventCategoryCompletedEventHandler(ByVal sender As Object, ByVal e As GetEventCategoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEventCategoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsEventCategory() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetEventDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetEventDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEventDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsEventDetail() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetEventTypeDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetEventTypeDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEventTypeDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsEventTypeDetail() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetEventSourceIndicatorCompletedEventHandler(ByVal sender As Object, ByVal e As GetEventSourceIndicatorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEventSourceIndicatorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSourceInitiator() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetStatusListCompletedEventHandler(ByVal sender As Object, ByVal e As GetStatusListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStatusListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsStatusList() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetInitiatorCompletedEventHandler(ByVal sender As Object, ByVal e As GetInitiatorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInitiatorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strInitiatorName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Get_MCU_ServiceLogCompletedEventHandler(ByVal sender As Object, ByVal e As Get_MCU_ServiceLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get_MCU_ServiceLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsResult() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Save_MCU_ServiceLogCompletedEventHandler(ByVal sender As Object, ByVal e As Save_MCU_ServiceLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Save_MCU_ServiceLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetBasicPlanCompletedEventHandler(ByVal sender As Object, ByVal e As GetBasicPlanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBasicPlanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsBasicPlan() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAccountStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccountStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccountStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsAccountStatus() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAgentLocationCompletedEventHandler(ByVal sender As Object, ByVal e As GetAgentLocationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAgentLocationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsAgentLocation() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateChequeStatusCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateChequeStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateChequeStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetDirectCreditHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As GetDirectCreditHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDirectCreditHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRece() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAnnuityPaymentHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As GetAnnuityPaymentHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAnnuityPaymentHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRece() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCouponHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As GetCouponHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCouponHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRece() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetLoanAndAPLHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As GetLoanAndAPLHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLoanAndAPLHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRece() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CNBAFIByPolicyNoCompletedEventHandler(ByVal sender As Object, ByVal e As CNBAFIByPolicyNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CNBAFIByPolicyNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub FCRenqCompletedEventHandler(ByVal sender As Object, ByVal e As FCRenqCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FCRenqCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRecvData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub FCRupdCompletedEventHandler(ByVal sender As Object, ByVal e As FCRupdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FCRupdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub FSurRevCompletedEventHandler(ByVal sender As Object, ByVal e As FSurRevCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FSurRevCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub BillDateRevCompletedEventHandler(ByVal sender As Object, ByVal e As BillDateRevCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BillDateRevCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub PTDAdvCompletedEventHandler(ByVal sender As Object, ByVal e As PTDAdvCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PTDAdvCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Las2CapsilCompletedEventHandler(ByVal sender As Object, ByVal e As Las2CapsilCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Las2CapsilCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCIWexclusionCompletedEventHandler(ByVal sender As Object, ByVal e As GetCIWexclusionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCIWexclusionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsExclusion() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UCIWCompletedEventHandler(ByVal sender As Object, ByVal e As UCIWCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UCIWCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetRiderListCompletedEventHandler(ByVal sender As Object, ByVal e As GetRiderListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRiderListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAvailFundListCompletedEventHandler(ByVal sender As Object, ByVal e As GetAvailFundListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAvailFundListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceive() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetUnitJournalCompletedEventHandler(ByVal sender As Object, ByVal e As GetUnitJournalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUnitJournalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceive() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DeleteUnitJournalCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteUnitJournalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteUnitJournalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub InsertUnitJournalCompletedEventHandler(ByVal sender As Object, ByVal e As InsertUnitJournalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertUnitJournalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property iId() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateUnitJournalCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateUnitJournalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateUnitJournalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DiffUnitJournalUserCompletedEventHandler(ByVal sender As Object, ByVal e As DiffUnitJournalUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DiffUnitJournalUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateUnitJournalBackendCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateUnitJournalBackendCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateUnitJournalBackendCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ApproveUnitJournalCompletedEventHandler(ByVal sender As Object, ByVal e As ApproveUnitJournalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ApproveUnitJournalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SearchUnitJournalHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As SearchUnitJournalHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SearchUnitJournalHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceiveData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CalVPOCompletedEventHandler(ByVal sender As Object, ByVal e As CalVPOCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CalVPOCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property intBasicVYear() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property intWholeVYear() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessageEng() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessageChi() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strIssMon() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strIssDay() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsPerm() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(7),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strVPOType() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(8),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strVanishingPoint() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(9),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRece() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(10),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(11),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetVPOAgentInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetVPOAgentInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetVPOAgentInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsAgent() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetVPOPersonalInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetVPOPersonalInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetVPOPersonalInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsPersonal() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetVPOAgentCodesCompletedEventHandler(ByVal sender As Object, ByVal e As GetVPOAgentCodesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetVPOAgentCodesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsAgent() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetVPOLetterFieldCompletedEventHandler(ByVal sender As Object, ByVal e As GetVPOLetterFieldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetVPOLetterFieldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsLetter() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetVPOBasicInsuredInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetVPOBasicInsuredInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetVPOBasicInsuredInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsInsured() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetVPOPolicyAddressCompletedEventHandler(ByVal sender As Object, ByVal e As GetVPOPolicyAddressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetVPOPolicyAddressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsAddress() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetVPOCompanyCompletedEventHandler(ByVal sender As Object, ByVal e As GetVPOCompanyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetVPOCompanyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsCompany() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetNormalCurrencySignCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetNormalCurrencySignCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNormalCurrencySignCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsCurr() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPaidToDateFromCAPSILCompletedEventHandler(ByVal sender As Object, ByVal e As GetPaidToDateFromCAPSILCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPaidToDateFromCAPSILCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsPolicyInfo() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPremiumModeCapsilCompletedEventHandler(ByVal sender As Object, ByVal e As GetPremiumModeCapsilCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPremiumModeCapsilCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsPolicyInfo() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPolicyPOInfofromCAPSILCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyPOInfofromCAPSILCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyPOInfofromCAPSILCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsPolicyInfo() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetVPOAgentDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetVPOAgentDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetVPOAgentDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsAgentDetail() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetVPOAgentMgrCompletedEventHandler(ByVal sender As Object, ByVal e As GetVPOAgentMgrCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetVPOAgentMgrCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsAgentMgr() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetVPOMemoDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetVPOMemoDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetVPOMemoDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMemo() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetInsuredCompletedEventHandler(ByVal sender As Object, ByVal e As GetInsuredCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInsuredCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsInsuredInfo() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetDividendOptionCompletedEventHandler(ByVal sender As Object, ByVal e As GetDividendOptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDividendOptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsDividend() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPolicyCurrencyCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyCurrencyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyCurrencyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strPolicyCurrency() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPolicyStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strPolicyStatus() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFromCodeTableCompletedEventHandler(ByVal sender As Object, ByVal e As GetFromCodeTableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFromCodeTableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strValue() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetInterestRateCompletedEventHandler(ByVal sender As Object, ByVal e As GetInterestRateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInterestRateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dblRate() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTargetPremiumCompletedEventHandler(ByVal sender As Object, ByVal e As GetTargetPremiumCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTargetPremiumCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRece() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckExchangeRateCompletedEventHandler(ByVal sender As Object, ByVal e As CheckExchangeRateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckExchangeRateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceiveData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errorMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransLogClaimsCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransLogClaimsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransLogClaimsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CFIWarningForLinkProductCompletedEventHandler(ByVal sender As Object, ByVal e As CFIWarningForLinkProductCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CFIWarningForLinkProductCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strWarnMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetWarningMessageByPolicyNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetWarningMessageByPolicyNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWarningMessageByPolicyNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMessage() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAgentFaxNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetAgentFaxNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAgentFaxNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property sAgentFaxNo() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetRequestTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetRequestTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRequestTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRequestType() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPOLCTransLogCompletedEventHandler(ByVal sender As Object, ByVal e As GetPOLCTransLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPOLCTransLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMessage() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPOLMTransLogCompletedEventHandler(ByVal sender As Object, ByVal e As GetPOLMTransLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPOLMTransLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMessage() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPCOVTransLogCompletedEventHandler(ByVal sender As Object, ByVal e As GetPCOVTransLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPCOVTransLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMessage() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPPOLTransLogCompletedEventHandler(ByVal sender As Object, ByVal e As GetPPOLTransLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPPOLTransLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMessage() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ValidProductTheOneCompletedEventHandler(ByVal sender As Object, ByVal e As ValidProductTheOneCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidProductTheOneCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub TheOnePlanIsPRCCompletedEventHandler(ByVal sender As Object, ByVal e As TheOnePlanIsPRCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TheOnePlanIsPRCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property IsPRC() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFundListCompletedEventHandler(ByVal sender As Object, ByVal e As GetFundListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFundListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsFundList() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub EnableFundSwitchInPublicWebsiteCompletedEventHandler(ByVal sender As Object, ByVal e As EnableFundSwitchInPublicWebsiteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EnableFundSwitchInPublicWebsiteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DisableFundSwitchInPublicWebsiteCompletedEventHandler(ByVal sender As Object, ByVal e As DisableFundSwitchInPublicWebsiteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DisableFundSwitchInPublicWebsiteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SuspensionFundSwitchInPublicWebsiteCompletedEventHandler(ByVal sender As Object, ByVal e As SuspensionFundSwitchInPublicWebsiteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SuspensionFundSwitchInPublicWebsiteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub EnableFundSwitchOutPublicWebsiteCompletedEventHandler(ByVal sender As Object, ByVal e As EnableFundSwitchOutPublicWebsiteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EnableFundSwitchOutPublicWebsiteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DisableFundSwitchOutPublicWebsiteCompletedEventHandler(ByVal sender As Object, ByVal e As DisableFundSwitchOutPublicWebsiteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DisableFundSwitchOutPublicWebsiteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub EnableFundAllocationLASCompletedEventHandler(ByVal sender As Object, ByVal e As EnableFundAllocationLASCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EnableFundAllocationLASCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DisableFundAllocationLASCompletedEventHandler(ByVal sender As Object, ByVal e As DisableFundAllocationLASCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DisableFundAllocationLASCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DeAuthCapsilFundCompletedEventHandler(ByVal sender As Object, ByVal e As DeAuthCapsilFundCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeAuthCapsilFundCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AuthCapsilFundCompletedEventHandler(ByVal sender As Object, ByVal e As AuthCapsilFundCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AuthCapsilFundCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub EnableFundClosingCompletedEventHandler(ByVal sender As Object, ByVal e As EnableFundClosingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EnableFundClosingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DisableFundClosingCompletedEventHandler(ByVal sender As Object, ByVal e As DisableFundClosingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DisableFundClosingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CloseCapsilFundCompletedEventHandler(ByVal sender As Object, ByVal e As CloseCapsilFundCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CloseCapsilFundCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub OpenCapsilFundCompletedEventHandler(ByVal sender As Object, ByVal e As OpenCapsilFundCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OpenCapsilFundCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ReleaseFundSwitchOutMinReqCompletedEventHandler(ByVal sender As Object, ByVal e As ReleaseFundSwitchOutMinReqCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReleaseFundSwitchOutMinReqCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ResumeFundSwitchOutMinReqCompletedEventHandler(ByVal sender As Object, ByVal e As ResumeFundSwitchOutMinReqCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ResumeFundSwitchOutMinReqCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckFundSwitchOutMinReqCompletedEventHandler(ByVal sender As Object, ByVal e As CheckFundSwitchOutMinReqCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckFundSwitchOutMinReqCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strLockedBy() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFundPolicyListCompletedEventHandler(ByVal sender As Object, ByVal e As GetFundPolicyListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFundPolicyListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtData() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CreateMarkinCompletedEventHandler(ByVal sender As Object, ByVal e As CreateMarkinCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateMarkinCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCapsilFundNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetCapsilFundNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCapsilFundNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strFundName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strFundNameChi() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateCapsilFundNameCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCapsilFundNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCapsilFundNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetLifeAsiaFundNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetLifeAsiaFundNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLifeAsiaFundNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strFundName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strFundNameChi() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateLifeAsiaFundNameCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateLifeAsiaFundNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateLifeAsiaFundNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strFundName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strFundNameChi() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateFundNameCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateFundNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateFundNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddMarkinReqCompletedEventHandler(ByVal sender As Object, ByVal e As AddMarkinReqCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddMarkinReqCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPendingMarkinReqListCompletedEventHandler(ByVal sender As Object, ByVal e As GetPendingMarkinReqListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPendingMarkinReqListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtMarkinReq() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateMarkinReqStatusCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMarkinReqStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMarkinReqStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SurByAmountCompletedEventHandler(ByVal sender As Object, ByVal e As SurByAmountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SurByAmountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property IsSurByAmount() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SurEnableEffDateCompletedEventHandler(ByVal sender As Object, ByVal e As SurEnableEffDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SurEnableEffDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property IsSurEnableEffDate() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetBoosterPlanByBoosterRiderCompletedEventHandler(ByVal sender As Object, ByVal e As GetBoosterPlanByBoosterRiderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBoosterPlanByBoosterRiderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strBoosterPlan() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMarkInRequestTypeListCompletedEventHandler(ByVal sender As Object, ByVal e As GetMarkInRequestTypeListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMarkInRequestTypeListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMarkIn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMarkInStatusListCompletedEventHandler(ByVal sender As Object, ByVal e As GetMarkInStatusListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMarkInStatusListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMarkIn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMarkInInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetMarkInInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMarkInInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMarkIn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCompanyNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetCompanyNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCompanyNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strCompanyName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPolicyInfoListCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyInfoListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyInfoListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsPolicyInfoList() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ResumeCapsilTransCompletedEventHandler(ByVal sender As Object, ByVal e As ResumeCapsilTransCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ResumeCapsilTransCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getPaymentSourceCompletedEventHandler(ByVal sender As Object, ByVal e As getPaymentSourceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getPaymentSourceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getIsExRateExistCompletedEventHandler(ByVal sender As Object, ByVal e As getIsExRateExistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getIsExRateExistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Is_HasExRate() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateMoneyAdjRecCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMoneyAdjRecCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMoneyAdjRecCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAcctMappingCompletedEventHandler(ByVal sender As Object, ByVal e As GetAcctMappingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAcctMappingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMoneyAdjEnquireCompletedEventHandler(ByVal sender As Object, ByVal e As GetMoneyAdjEnquireCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMoneyAdjEnquireCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetUWTransHistCompletedEventHandler(ByVal sender As Object, ByVal e As GetUWTransHistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUWTransHistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetUWTransTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetUWTransTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUWTransTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetUWRiderCompletedEventHandler(ByVal sender As Object, ByVal e As GetUWRiderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUWRiderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsCov() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetUWCapsilRiderCompletedEventHandler(ByVal sender As Object, ByVal e As GetUWCapsilRiderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUWCapsilRiderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetRiderStatusDescCompletedEventHandler(ByVal sender As Object, ByVal e As GetRiderStatusDescCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRiderStatusDescCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveUWTransHistCompletedEventHandler(ByVal sender As Object, ByVal e As SaveUWTransHistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveUWTransHistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsTrans() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetUWInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetUWInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUWInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetUWInfoForCalcCompletedEventHandler(ByVal sender As Object, ByVal e As GetUWInfoForCalcCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUWInfoForCalcCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveUWInfoCompletedEventHandler(ByVal sender As Object, ByVal e As SaveUWInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveUWInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetUWSysInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetUWSysInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUWSysInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetUwWorksheetPrtInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetUwWorksheetPrtInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUwWorksheetPrtInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetLoadingExclusionPrtInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetLoadingExclusionPrtInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLoadingExclusionPrtInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetUWMessageCompletedEventHandler(ByVal sender As Object, ByVal e As GetUWMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUWMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveUWMessageCompletedEventHandler(ByVal sender As Object, ByVal e As SaveUWMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveUWMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPoilcyStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetPoilcyStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPoilcyStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransQueSummaryValCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransQueSummaryValCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransQueSummaryValCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransSummaryBouncedChequeCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransSummaryBouncedChequeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransSummaryBouncedChequeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransSummaryClientRoleCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransSummaryClientRoleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransSummaryClientRoleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransQueSummaryRIHistCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransQueSummaryRIHistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransQueSummaryRIHistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransSummaryPolicyAddressLogCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransSummaryPolicyAddressLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransSummaryPolicyAddressLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransSummaryChangeServiceAgentCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransSummaryChangeServiceAgentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransSummaryChangeServiceAgentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransSummaryChangeDOBCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransSummaryChangeDOBCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransSummaryChangeDOBCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransSummaryPremHolidayCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransSummaryPremHolidayCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransSummaryPremHolidayCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransSummaryCovHistCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransSummaryCovHistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransSummaryCovHistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransSummaryRPUCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransSummaryRPUCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransSummaryRPUCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransRemarkTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransRemarkTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransRemarkTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransRemarkCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransRemarkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransRemarkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveTransRemarkCompletedEventHandler(ByVal sender As Object, ByVal e As SaveTransRemarkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveTransRemarkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransSummaryPOHCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransSummaryPOHCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransSummaryPOHCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransSummaryAddBoosterCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransSummaryAddBoosterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransSummaryAddBoosterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransSummaryFundAlloCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransSummaryFundAlloCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransSummaryFundAlloCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransSummaryChgCurrCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransSummaryChgCurrCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransSummaryChgCurrCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransSummaryCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransSummaryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransSummaryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransSummaryLASCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransSummaryLASCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransSummaryLASCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAutoMaturityRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetAutoMaturityRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAutoMaturityRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPolicyNoteCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyNoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyNoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property data() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Byte())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPolicyNoteByPolicyCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyNoteByPolicyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyNoteByPolicyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property data() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Byte())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPolicyNoteByPageCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyNoteByPageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyNoteByPageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property count() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SavePolicyNoteCompletedEventHandler(ByVal sender As Object, ByVal e As SavePolicyNoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SavePolicyNoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCustomerCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsCust() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCustomerCoverageDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerCoverageDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerCoverageDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsCoverage() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetBenefitPlanCodeInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetBenefitPlanCodeInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBenefitPlanCodeInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsBenefitPlanCode() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCustomerInfoByPolicyNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerInfoByPolicyNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerInfoByPolicyNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsCust() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAgingInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetAgingInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAgingInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCCSInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetCCSInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCCSInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAgentInfoByPolicyNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetAgentInfoByPolicyNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAgentInfoByPolicyNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetRemarkTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetRemarkTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRemarkTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub TraditionalParSurCompletedEventHandler(ByVal sender As Object, ByVal e As TraditionalParSurCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TraditionalParSurCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRece() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub PolicyValueEnqCompletedEventHandler(ByVal sender As Object, ByVal e As PolicyValueEnqCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PolicyValueEnqCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRece() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPolicyProjectionCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyProjectionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyProjectionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRece() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub InvokeBOMethodCompletedEventHandler(ByVal sender As Object, ByVal e As InvokeBOMethodCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InvokeBOMethodCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRece() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetDividendAdjustTransactionCompletedEventHandler(ByVal sender As Object, ByVal e As GetDividendAdjustTransactionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDividendAdjustTransactionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DividendAdjustInputCompletedEventHandler(ByVal sender As Object, ByVal e As DividendAdjustInputCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DividendAdjustInputCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSend() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DividendAdjustApproveCompletedEventHandler(ByVal sender As Object, ByVal e As DividendAdjustApproveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DividendAdjustApproveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ValueWithdrawCompletedEventHandler(ByVal sender As Object, ByVal e As ValueWithdrawCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValueWithdrawCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCashValueRiderCompletedEventHandler(ByVal sender As Object, ByVal e As GetCashValueRiderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCashValueRiderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DownloadCashValueRiderCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadCashValueRiderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadCashValueRiderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub RejectDDACompletedEventHandler(ByVal sender As Object, ByVal e As RejectDDACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RejectDDACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetDDARefEnquiryCompletedEventHandler(ByVal sender As Object, ByVal e As GetDDARefEnquiryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDDARefEnquiryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateAPLStatusCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateAPLStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateAPLStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ProcessVpoCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessVpoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessVpoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errorMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetLCPPaymentByPaymentNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetLCPPaymentByPaymentNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLCPPaymentByPaymentNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ProcessRpuCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessRpuCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessRpuCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errorMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub QuoteRpuCompletedEventHandler(ByVal sender As Object, ByVal e As QuoteRpuCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class QuoteRpuCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsQuoteRpu() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errorMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetLCPPaymentByCaseNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetLCPPaymentByCaseNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLCPPaymentByCaseNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckLCPPaymentCompletedEventHandler(ByVal sender As Object, ByVal e As CheckLCPPaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckLCPPaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddLcpPaymentCompletedEventHandler(ByVal sender As Object, ByVal e As AddLcpPaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddLcpPaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property paymentNo() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property refNo() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetLCPChequeDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetLCPChequeDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLCPChequeDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsChqDetail() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetChequeHistCompletedEventHandler(ByVal sender As Object, ByVal e As GetChequeHistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetChequeHistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ValidateChequeCompletedEventHandler(ByVal sender As Object, ByVal e As ValidateChequeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidateChequeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property lngChqID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsCheque() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetChqDSCompletedEventHandler(ByVal sender As Object, ByVal e As GetChqDSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetChqDSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateUserCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DeleteUserCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPositionInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetPositionInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPositionInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddPositionCompletedEventHandler(ByVal sender As Object, ByVal e As AddPositionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddPositionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdatePositionCompletedEventHandler(ByVal sender As Object, ByVal e As UpdatePositionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdatePositionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DeletePositionCompletedEventHandler(ByVal sender As Object, ByVal e As DeletePositionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeletePositionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetChequeLimitInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetChequeLimitInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetChequeLimitInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddChequeLimitCompletedEventHandler(ByVal sender As Object, ByVal e As AddChequeLimitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddChequeLimitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateChequeLimitCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateChequeLimitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateChequeLimitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DeleteChequeLimitCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteChequeLimitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteChequeLimitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckIsPositionInUseCompletedEventHandler(ByVal sender As Object, ByVal e As CheckIsPositionInUseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckIsPositionInUseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property bIsInUse() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMultiCurCompletedEventHandler(ByVal sender As Object, ByVal e As GetMultiCurCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMultiCurCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetExchangeRateCompletedEventHandler(ByVal sender As Object, ByVal e As GetExchangeRateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetExchangeRateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strFromCurr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strToCurr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRate() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dteEffectiveDate() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),Date)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRateType() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strFixedFunc() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(7),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetExchangeRateWithPolicyNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetExchangeRateWithPolicyNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetExchangeRateWithPolicyNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strFromCurr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strToCurr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRate() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dteEffectiveDate() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),Date)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRateType() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strFixedFunc() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(7),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCurrencyCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetCurrencyCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCurrencyCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsCurr() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ChkChqAuthPosCompletedEventHandler(ByVal sender As Object, ByVal e As ChkChqAuthPosCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChkChqAuthPosCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strPosDesc() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ChqAuthPos() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFuncCategoryCompletedEventHandler(ByVal sender As Object, ByVal e As GetFuncCategoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFuncCategoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strCat() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub MinContribValidationCompletedEventHandler(ByVal sender As Object, ByVal e As MinContribValidationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MinContribValidationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strOverMinCAmt() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property decMinContribAmt() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Decimal)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AllowParSurMinBalCompletedEventHandler(ByVal sender As Object, ByVal e As AllowParSurMinBalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AllowParSurMinBalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strReplyMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property decAllPerc() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Decimal)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AllowParSurrValidationCompletedEventHandler(ByVal sender As Object, ByVal e As AllowParSurrValidationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AllowParSurrValidationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strReplyMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ParSurMinAmtValidationCompletedEventHandler(ByVal sender As Object, ByVal e As ParSurMinAmtValidationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParSurMinAmtValidationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strReplyMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property decMinSurAmt() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Decimal)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ParSurMaxPercValidationCompletedEventHandler(ByVal sender As Object, ByVal e As ParSurMaxPercValidationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParSurMaxPercValidationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strReplyMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property decAllowPerc() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Decimal)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub FundSWMinSwitchAmtValidationCompletedEventHandler(ByVal sender As Object, ByVal e As FundSWMinSwitchAmtValidationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FundSWMinSwitchAmtValidationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strReplyMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrType() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub FundSWAllowSwitchingValidationCompletedEventHandler(ByVal sender As Object, ByVal e As FundSWAllowSwitchingValidationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FundSWAllowSwitchingValidationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strReplyMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ReinstateValidationCompletedEventHandler(ByVal sender As Object, ByVal e As ReinstateValidationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReinstateValidationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strReplyIndicator() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strReplyMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AllowChgOwnerValidationCompletedEventHandler(ByVal sender As Object, ByVal e As AllowChgOwnerValidationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AllowChgOwnerValidationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strReplyIndic() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AllowChgModeValidationCompletedEventHandler(ByVal sender As Object, ByVal e As AllowChgModeValidationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AllowChgModeValidationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strReplyMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AllowChgBTValidationCompletedEventHandler(ByVal sender As Object, ByVal e As AllowChgBTValidationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AllowChgBTValidationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strReplyMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ChkPolicyInforceCompletedEventHandler(ByVal sender As Object, ByVal e As ChkPolicyInforceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChkPolicyInforceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strReplyMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransQStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransQStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransQStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strTransQSts() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub saveAddBoosterSynRecordCompletedEventHandler(ByVal sender As Object, ByVal e As saveAddBoosterSynRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class saveAddBoosterSynRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransType() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub saveAddPDFSynRecordCompletedEventHandler(ByVal sender As Object, ByVal e As saveAddPDFSynRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class saveAddPDFSynRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransType() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub checkAddPDFSynRecordCompletedEventHandler(ByVal sender As Object, ByVal e As checkAddPDFSynRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class checkAddPDFSynRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransType() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub saveWithdrawPDFRecordCompletedEventHandler(ByVal sender As Object, ByVal e As saveWithdrawPDFRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class saveWithdrawPDFRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransType() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPDFEnquiryCompletedEventHandler(ByVal sender As Object, ByVal e As GetPDFEnquiryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPDFEnquiryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetSWInMainRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetSWInMainRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSWInMainRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSWInMain() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub saveFundAllocSynRecordCompletedEventHandler(ByVal sender As Object, ByVal e As saveFundAllocSynRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class saveFundAllocSynRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransType() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFundAllocRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetFundAllocRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFundAllocRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSWInMain() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveParSurrSynRecordCompletedEventHandler(ByVal sender As Object, ByVal e As SaveParSurrSynRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveParSurrSynRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransType() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAllParSurrRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllParSurrRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllParSurrRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsParSurr() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub saveFSSynRecordCompletedEventHandler(ByVal sender As Object, ByVal e As saveFSSynRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class saveFSSynRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransType() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub saveReInstateSynRecordCompletedEventHandler(ByVal sender As Object, ByVal e As saveReInstateSynRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class saveReInstateSynRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransType() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetReinstateEnquiryCompletedEventHandler(ByVal sender As Object, ByVal e As GetReinstateEnquiryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReinstateEnquiryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetReinstateRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetReinstateRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReinstateRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReinstate() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckReinstateTheOneMedicalCompletedEventHandler(ByVal sender As Object, ByVal e As CheckReinstateTheOneMedicalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckReinstateTheOneMedicalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property IsTheOneProduct() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetBeneShareRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetBeneShareRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBeneShareRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsBeneShare() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub saveCltRelationSynRecordCompletedEventHandler(ByVal sender As Object, ByVal e As saveCltRelationSynRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class saveCltRelationSynRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property lngTransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strTransType() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetContAssignCompletedEventHandler(ByVal sender As Object, ByVal e As GetContAssignCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetContAssignCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsContAssign() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetContBeneCompletedEventHandler(ByVal sender As Object, ByVal e As GetContBeneCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetContBeneCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsContBene() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCIWPolicyaccountCompletedEventHandler(ByVal sender As Object, ByVal e As GetCIWPolicyaccountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCIWPolicyaccountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsPolicy() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetContOwnerCompletedEventHandler(ByVal sender As Object, ByVal e As GetContOwnerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetContOwnerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsContOwner() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPayorCompletedEventHandler(ByVal sender As Object, ByVal e As GetPayorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPayorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsPayor() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetBillingChgRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetBillingChgRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBillingChgRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsBillingChg() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property lngTransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPaymentMethEnqCompletedEventHandler(ByVal sender As Object, ByVal e As GetPaymentMethEnqCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPaymentMethEnqCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetModeCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetModeCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetModeCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRece() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetBillingChgQuotCompletedEventHandler(ByVal sender As Object, ByVal e As GetBillingChgQuotCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBillingChgQuotCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub saveBCSynRecordCompletedEventHandler(ByVal sender As Object, ByVal e As saveBCSynRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class saveBCSynRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransType() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ProcEventLogCompletedEventHandler(ByVal sender As Object, ByVal e As ProcEventLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcEventLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub PrepareTransQDTCompletedEventHandler(ByVal sender As Object, ByVal e As PrepareTransQDTCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrepareTransQDTCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransQueRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransQueRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransQueRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransQueRecordBetterVersionCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransQueRecordBetterVersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransQueRecordBetterVersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property data() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Byte())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransHeadTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransHeadTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransHeadTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetLogonDBCompletedEventHandler(ByVal sender As Object, ByVal e As GetLogonDBCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLogonDBCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsLogon() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMenuItemCompletedEventHandler(ByVal sender As Object, ByVal e As GetMenuItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMenuItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMenuItem() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getPayment_FreqCompletedEventHandler(ByVal sender As Object, ByVal e As getPayment_FreqCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getPayment_FreqCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getPayment_MethCompletedEventHandler(ByVal sender As Object, ByVal e As getPayment_MethCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getPayment_MethCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetBillingNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetBillingNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBillingNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property billNo() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCIWOwnerInsuredCompletedEventHandler(ByVal sender As Object, ByVal e As GetCIWOwnerInsuredCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCIWOwnerInsuredCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SendNoClaimDiscReqCompletedEventHandler(ByVal sender As Object, ByVal e As SendNoClaimDiscReqCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendNoClaimDiscReqCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub savePremiumHolidaySynRecordCompletedEventHandler(ByVal sender As Object, ByVal e As savePremiumHolidaySynRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class savePremiumHolidaySynRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransType() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPremiumHolidayMainRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetPremiumHolidayMainRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPremiumHolidayMainRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsTrans() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPremiumHolidayMainRecordByPolicyCompletedEventHandler(ByVal sender As Object, ByVal e As GetPremiumHolidayMainRecordByPolicyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPremiumHolidayMainRecordByPolicyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsTrans() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAvailableFundListCompletedEventHandler(ByVal sender As Object, ByVal e As GetAvailableFundListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAvailableFundListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsFundList() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub PlanNotAllowAECardCompletedEventHandler(ByVal sender As Object, ByVal e As PlanNotAllowAECardCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PlanNotAllowAECardCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property IsNotAllowAECard() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UFProductCheckingCompletedEventHandler(ByVal sender As Object, ByVal e As UFProductCheckingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UFProductCheckingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property IsShowMessage() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strWarnMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub FreeWithdrawalPeriodCheckingCompletedEventHandler(ByVal sender As Object, ByVal e As FreeWithdrawalPeriodCheckingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FreeWithdrawalPeriodCheckingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property IsShowMessage() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property IsWarn() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strWarnMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CommissionClawbackCheckingCompletedEventHandler(ByVal sender As Object, ByVal e As CommissionClawbackCheckingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CommissionClawbackCheckingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property IsShowMessage() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strWarnMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub PlanWarningMessageGenericCompletedEventHandler(ByVal sender As Object, ByVal e As PlanWarningMessageGenericCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PlanWarningMessageGenericCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtPlanWarnMsg() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCashFlowListCompletedEventHandler(ByVal sender As Object, ByVal e As GetCashFlowListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCashFlowListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPremiumRoutineCompletedEventHandler(ByVal sender As Object, ByVal e As GetPremiumRoutineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPremiumRoutineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetRiderPremiumCompletedEventHandler(ByVal sender As Object, ByVal e As GetRiderPremiumCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRiderPremiumCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetContractDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetContractDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetContractDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetInterestQuotationCompletedEventHandler(ByVal sender As Object, ByVal e As GetInterestQuotationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInterestQuotationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub EnqSurByCashflowBOCompletedEventHandler(ByVal sender As Object, ByVal e As EnqSurByCashflowBOCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EnqSurByCashflowBOCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property IsEnqSurByCashflowBO() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ValidAgentByProductTypeCompletedEventHandler(ByVal sender As Object, ByVal e As ValidAgentByProductTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidAgentByProductTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strAgentName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property IsShowMessage() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property IsWarn() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strWarnMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPolicyRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetBECustomerCompletedEventHandler(ByVal sender As Object, ByVal e As GetBECustomerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBECustomerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsCustData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveExchangeRateCompletedEventHandler(ByVal sender As Object, ByVal e As SaveExchangeRateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveExchangeRateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetInforceIllustrationCompletedEventHandler(ByVal sender As Object, ByVal e As GetInforceIllustrationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInforceIllustrationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetInforceIllustrationPhaseIICompletedEventHandler(ByVal sender As Object, ByVal e As GetInforceIllustrationPhaseIICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInforceIllustrationPhaseIICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveFundPriceCompletedEventHandler(ByVal sender As Object, ByVal e As SaveFundPriceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveFundPriceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCapsilPolicyRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetCapsilPolicyRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCapsilPolicyRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPolicyTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub RequiredAddrProofWarningCompletedEventHandler(ByVal sender As Object, ByVal e As RequiredAddrProofWarningCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RequiredAddrProofWarningCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAgentRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetAgentRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAgentRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCapsilPolicyNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetCapsilPolicyNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCapsilPolicyNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strCapsilPolicy() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetLifeAsiaPolicyNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetLifeAsiaPolicyNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLifeAsiaPolicyNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strLifeAsiaPolicy() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPaymentHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As GetPaymentHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPaymentHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ReprintPolicyScheduleCompletedEventHandler(ByVal sender As Object, ByVal e As ReprintPolicyScheduleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReprintPolicyScheduleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CancelReceiptCompletedEventHandler(ByVal sender As Object, ByVal e As CancelReceiptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelReceiptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetReceipCancellationLogByIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetReceipCancellationLogByIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReceipCancellationLogByIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsLog() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetBounceChequeReasonListCompletedEventHandler(ByVal sender As Object, ByVal e As GetBounceChequeReasonListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBounceChequeReasonListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsList() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetRpuPendingMemoCompletedEventHandler(ByVal sender As Object, ByVal e As GetRpuPendingMemoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRpuPendingMemoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsPend() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetRpuProjectionLetterCompletedEventHandler(ByVal sender As Object, ByVal e As GetRpuProjectionLetterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRpuProjectionLetterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsProjection() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetBounceChequePendingMemoCompletedEventHandler(ByVal sender As Object, ByVal e As GetBounceChequePendingMemoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBounceChequePendingMemoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsPend() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SubmitBounceChequeLetterRequestCompletedEventHandler(ByVal sender As Object, ByVal e As SubmitBounceChequeLetterRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubmitBounceChequeLetterRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetSoftCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetSoftCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSoftCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsKeyVal() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCompSelectionRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetCompSelectionRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCompSelectionRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCompSelectionWithCustNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetCompSelectionWithCustNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCompSelectionWithCustNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAvailComponentCompletedEventHandler(ByVal sender As Object, ByVal e As GetAvailComponentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAvailComponentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCovMaintHistCompletedEventHandler(ByVal sender As Object, ByVal e As GetCovMaintHistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCovMaintHistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetComponentSysTableCompletedEventHandler(ByVal sender As Object, ByVal e As GetComponentSysTableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetComponentSysTableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetDistChannelCompletedEventHandler(ByVal sender As Object, ByVal e As GetDistChannelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDistChannelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strDistChannel() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetSpecPayOptCompletedEventHandler(ByVal sender As Object, ByVal e As GetSpecPayOptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSpecPayOptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsPayOption() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPolicyClientSysTableCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyClientSysTableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyClientSysTableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFundAllocSysTableCompletedEventHandler(ByVal sender As Object, ByVal e As GetFundAllocSysTableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFundAllocSysTableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetContExDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetContExDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetContExDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCompDetailRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetCompDetailRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCompDetailRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFundDirectRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetFundDirectRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFundDirectRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPoInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetPoInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPoInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsPoInfo() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFundInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetFundInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFundInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsFundInfo() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetIAAccountTableSchemaCompletedEventHandler(ByVal sender As Object, ByVal e As GetIAAccountTableSchemaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIAAccountTableSchemaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSchema() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPolicyFundDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyFundDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyFundDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTrailerMapCompletedEventHandler(ByVal sender As Object, ByVal e As GetTrailerMapCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTrailerMapCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetUFPolicyFundDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetUFPolicyFundDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUFPolicyFundDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetSurValueCompletedEventHandler(ByVal sender As Object, ByVal e As GetSurValueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSurValueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetSurrChargeCompletedEventHandler(ByVal sender As Object, ByVal e As GetSurrChargeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSurrChargeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPolicyAccountBalanceCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyAccountBalanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyAccountBalanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dblAcctBalance() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClientRoleCompletedEventHandler(ByVal sender As Object, ByVal e As GetClientRoleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClientRoleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClientRoleExtendCompletedEventHandler(ByVal sender As Object, ByVal e As GetClientRoleExtendCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClientRoleExtendCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub PolicyAssignedCompletedEventHandler(ByVal sender As Object, ByVal e As PolicyAssignedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PolicyAssignedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strPolicyAssigned() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetSubAcctBalCompletedEventHandler(ByVal sender As Object, ByVal e As GetSubAcctBalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSubAcctBalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetSubAcctPostCompletedEventHandler(ByVal sender As Object, ByVal e As GetSubAcctPostCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSubAcctPostCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAgentCommDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetAgentCommDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAgentCommDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strTime() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAgentSplitCompletedEventHandler(ByVal sender As Object, ByVal e As GetAgentSplitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAgentSplitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strTime() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetSpecialTermsDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As GetSpecialTermsDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSpecialTermsDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetSpecialTermsByTrailerCompletedEventHandler(ByVal sender As Object, ByVal e As GetSpecialTermsByTrailerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSpecialTermsByTrailerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCoveredLifeCompletedEventHandler(ByVal sender As Object, ByVal e As GetCoveredLifeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCoveredLifeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFundHoldingCompletedEventHandler(ByVal sender As Object, ByVal e As GetFundHoldingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFundHoldingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTotalInvestPremPaidFromCAPSILCompletedEventHandler(ByVal sender As Object, ByVal e As GetTotalInvestPremPaidFromCAPSILCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTotalInvestPremPaidFromCAPSILCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsResult() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTranHistCompletedEventHandler(ByVal sender As Object, ByVal e As GetTranHistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTranHistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTransactionHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransactionHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransactionHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddAnotherLifeRecordCompletedEventHandler(ByVal sender As Object, ByVal e As AddAnotherLifeRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddAnotherLifeRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ChangeComponentRecordCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeComponentRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeComponentRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property bBOSuccess() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ChangeComponentRecordThroughBackEndCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeComponentRecordThroughBackEndCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeComponentRecordThroughBackEndCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property bBOSuccess() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetSubAccountBalanceCompletedEventHandler(ByVal sender As Object, ByVal e As GetSubAccountBalanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSubAccountBalanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub OverCoolOffPeriodCompletedEventHandler(ByVal sender As Object, ByVal e As OverCoolOffPeriodCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OverCoolOffPeriodCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strOverCoolOff() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub LapseDateValidationCompletedEventHandler(ByVal sender As Object, ByVal e As LapseDateValidationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LapseDateValidationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strLapseDateValid() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub TransTypeValidationCompletedEventHandler(ByVal sender As Object, ByVal e As TransTypeValidationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TransTypeValidationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strPolStatusValid() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetLetterHeaderCompletedEventHandler(ByVal sender As Object, ByVal e As GetLetterHeaderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLetterHeaderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SavePolSurrSynRecordCompletedEventHandler(ByVal sender As Object, ByVal e As SavePolSurrSynRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SavePolSurrSynRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransType() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPolSurrRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolSurrRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolSurrRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsParSurr() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetLastSurrReqCompletedEventHandler(ByVal sender As Object, ByVal e As GetLastSurrReqCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLastSurrReqCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveValTransSynRecordCompletedEventHandler(ByVal sender As Object, ByVal e As SaveValTransSynRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveValTransSynRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransType() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetValTransRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetValTransRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetValTransRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsParSurr() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property TransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetUnitTranCompletedEventHandler(ByVal sender As Object, ByVal e As GetUnitTranCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUnitTranCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPOSValHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As GetPOSValHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPOSValHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPOSValHistory2CompletedEventHandler(ByVal sender As Object, ByVal e As GetPOSValHistory2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPOSValHistory2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetChqLimitCompletedEventHandler(ByVal sender As Object, ByVal e As GetChqLimitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetChqLimitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetNewChqLimitCompletedEventHandler(ByVal sender As Object, ByVal e As GetNewChqLimitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNewChqLimitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetUserInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCategoryIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetCategoryIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCategoryIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCurrencyIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetCurrencyIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCurrencyIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPositionAndDeptCompletedEventHandler(ByVal sender As Object, ByVal e As GetPositionAndDeptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPositionAndDeptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddNewUserCompletedEventHandler(ByVal sender As Object, ByVal e As AddNewUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddNewUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
End Namespace
