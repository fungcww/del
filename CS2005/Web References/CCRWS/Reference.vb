'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace CCRWS
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ServiceSoap", [Namespace]:="http://inglife.com.hk/"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(SchemaObject)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(CCRComORM))>  _
    Partial Public Class Service
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetRenewalPremiumOperationCompleted As System.Threading.SendOrPostCallback
        
        Private mQSOAPHeaderValueField As MQSOAPHeader
        
        Private getCUPExRateToleranceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDDAFORMOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ccrSearchClientOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CNBTESTccrSearchClientOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CNBccrSearchClientOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPolicyNoByCustomerNoAndAddressCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPolicyNoByCustomerNoAndAddressCodeXMLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPolicyNoByCustomerNoAndAddressCodeObjOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ccrDelClientOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ccrDelClientRcdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClnMainGeneralRcdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerByIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerByLaIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerAddressByIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private dBSOAPHeaderValueField As DBSOAPHeader
        
        Private GetLAClentMappingByNumOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CNBccrSaveClientOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ccrSaveClientOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPolicyRelateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getBeatOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPolicyAccountByPlyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPolicyRelateCustOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAccountStatusCodesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAgentInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getHKLAgentInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPolicyAddressLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCustomerLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCustomerAddressLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCustomerMergeLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ccrUpdPlyAddrRsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyAddressByPlyNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrdCClientRcdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getORDCNAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getORDCNA_SQLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getORDUNAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getORDURLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLARelatedPolicyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getOrdUClientRcdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPolicyRelationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getLAClientNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAddrTypeCodeByLAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PassInSQLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInqClientRoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCustHeadInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EnqClientBankOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdClientBankOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CRTClientBankOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMandateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateMandateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMandateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportExcelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateRiskLevelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateRiskLevelFreezeListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FetchPathOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateHeaderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HeaderInfoFillerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FreezeListCheckOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RiskLevelCheckOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsOneOffPlanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClientBankSysInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ccrMergeClientOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChkClientMergeProgressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getClientMergeTransLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClientMatchControlReportPrtInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private llmUpdateLetterLibraryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private llmGetLetterLibraryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLetterheadOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSysBusinessDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsBlackListedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ccsGetPaymentDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ccsGetPPSPaymentDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ccsGetCapsilPaymentDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ccsGetLifeAsiaPaymentDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ccsGetLifeAsiaPaymentRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ccsGetCapsilPaymentRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ccsGetCapsilPaymentRecordBatchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ccsGetLifeAsiaPaymentRecordBatchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRedFlagAgentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadRedFlagAgentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCIWSysValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCUPPayerIDTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCUPProvinceListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCUPCityListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCUPBankListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.CS2005.My.MySettings.Default.CS2005_CCRWS_Service
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Property MQSOAPHeaderValue() As MQSOAPHeader
            Get
                Return Me.mQSOAPHeaderValueField
            End Get
            Set
                Me.mQSOAPHeaderValueField = value
            End Set
        End Property
        
        Public Property DBSOAPHeaderValue() As DBSOAPHeader
            Get
                Return Me.dBSOAPHeaderValueField
            End Get
            Set
                Me.dBSOAPHeaderValueField = value
            End Set
        End Property
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetRenewalPremiumCompleted As GetRenewalPremiumCompletedEventHandler
        
        '''<remarks/>
        Public Event getCUPExRateToleranceCompleted As getCUPExRateToleranceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDDAFORMCompleted As GetDDAFORMCompletedEventHandler
        
        '''<remarks/>
        Public Event ccrSearchClientCompleted As ccrSearchClientCompletedEventHandler
        
        '''<remarks/>
        Public Event CNBTESTccrSearchClientCompleted As CNBTESTccrSearchClientCompletedEventHandler
        
        '''<remarks/>
        Public Event CNBccrSearchClientCompleted As CNBccrSearchClientCompletedEventHandler
        
        '''<remarks/>
        Public Event getPolicyNoByCustomerNoAndAddressCodeCompleted As getPolicyNoByCustomerNoAndAddressCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event getPolicyNoByCustomerNoAndAddressCodeXMLCompleted As getPolicyNoByCustomerNoAndAddressCodeXMLCompletedEventHandler
        
        '''<remarks/>
        Public Event getPolicyNoByCustomerNoAndAddressCodeObjCompleted As getPolicyNoByCustomerNoAndAddressCodeObjCompletedEventHandler
        
        '''<remarks/>
        Public Event ccrDelClientCompleted As ccrDelClientCompletedEventHandler
        
        '''<remarks/>
        Public Event ccrDelClientRcdCompleted As ccrDelClientRcdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClnMainGeneralRcdCompleted As GetClnMainGeneralRcdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerByIDCompleted As GetCustomerByIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerByLaIDCompleted As GetCustomerByLaIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerAddressByIDCompleted As GetCustomerAddressByIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLAClentMappingByNumCompleted As GetLAClentMappingByNumCompletedEventHandler
        
        '''<remarks/>
        Public Event CNBccrSaveClientCompleted As CNBccrSaveClientCompletedEventHandler
        
        '''<remarks/>
        Public Event ccrSaveClientCompleted As ccrSaveClientCompletedEventHandler
        
        '''<remarks/>
        Public Event getPolicyRelateCompleted As getPolicyRelateCompletedEventHandler
        
        '''<remarks/>
        Public Event getBeatCompleted As getBeatCompletedEventHandler
        
        '''<remarks/>
        Public Event getPolicyAccountByPlyCompleted As getPolicyAccountByPlyCompletedEventHandler
        
        '''<remarks/>
        Public Event getPolicyRelateCustCompleted As getPolicyRelateCustCompletedEventHandler
        
        '''<remarks/>
        Public Event getAccountStatusCodesCompleted As getAccountStatusCodesCompletedEventHandler
        
        '''<remarks/>
        Public Event getAgentInfoCompleted As getAgentInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event getHKLAgentInfoCompleted As getHKLAgentInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event getPolicyAddressLogCompleted As getPolicyAddressLogCompletedEventHandler
        
        '''<remarks/>
        Public Event getCustomerLogCompleted As getCustomerLogCompletedEventHandler
        
        '''<remarks/>
        Public Event getCustomerAddressLogCompleted As getCustomerAddressLogCompletedEventHandler
        
        '''<remarks/>
        Public Event getCustomerMergeLogCompleted As getCustomerMergeLogCompletedEventHandler
        
        '''<remarks/>
        Public Event ccrUpdPlyAddrRsCompleted As ccrUpdPlyAddrRsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyAddressByPlyNoCompleted As GetPolicyAddressByPlyNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrdCClientRcdCompleted As GetOrdCClientRcdCompletedEventHandler
        
        '''<remarks/>
        Public Event getORDCNACompleted As getORDCNACompletedEventHandler
        
        '''<remarks/>
        Public Event getORDCNA_SQLCompleted As getORDCNA_SQLCompletedEventHandler
        
        '''<remarks/>
        Public Event getORDUNACompleted As getORDUNACompletedEventHandler
        
        '''<remarks/>
        Public Event getORDURLCompleted As getORDURLCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLARelatedPolicyCompleted As GetLARelatedPolicyCompletedEventHandler
        
        '''<remarks/>
        Public Event getOrdUClientRcdCompleted As getOrdUClientRcdCompletedEventHandler
        
        '''<remarks/>
        Public Event getPolicyRelationCompleted As getPolicyRelationCompletedEventHandler
        
        '''<remarks/>
        Public Event getLAClientNoCompleted As getLAClientNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAddrTypeCodeByLACompleted As GetAddrTypeCodeByLACompletedEventHandler
        
        '''<remarks/>
        Public Event PassInSQLCompleted As PassInSQLCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInqClientRoleCompleted As GetInqClientRoleCompletedEventHandler
        
        '''<remarks/>
        Public Event getCustHeadInfoCompleted As getCustHeadInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event EnqClientBankCompleted As EnqClientBankCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdClientBankCompleted As UpdClientBankCompletedEventHandler
        
        '''<remarks/>
        Public Event CRTClientBankCompleted As CRTClientBankCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMandateCompleted As GetMandateCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateMandateCompleted As CreateMandateCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMandateCompleted As UpdateMandateCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportExcelCompleted As ImportExcelCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateRiskLevelCompleted As UpdateRiskLevelCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateRiskLevelFreezeListCompleted As UpdateRiskLevelFreezeListCompletedEventHandler
        
        '''<remarks/>
        Public Event FetchPathCompleted As FetchPathCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateHeaderCompleted As UpdateHeaderCompletedEventHandler
        
        '''<remarks/>
        Public Event HeaderInfoFillerCompleted As HeaderInfoFillerCompletedEventHandler
        
        '''<remarks/>
        Public Event FreezeListCheckCompleted As FreezeListCheckCompletedEventHandler
        
        '''<remarks/>
        Public Event RiskLevelCheckCompleted As RiskLevelCheckCompletedEventHandler
        
        '''<remarks/>
        Public Event IsOneOffPlanCompleted As IsOneOffPlanCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClientBankSysInfoCompleted As GetClientBankSysInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event ccrMergeClientCompleted As ccrMergeClientCompletedEventHandler
        
        '''<remarks/>
        Public Event ChkClientMergeProgressCompleted As ChkClientMergeProgressCompletedEventHandler
        
        '''<remarks/>
        Public Event getClientMergeTransLogCompleted As getClientMergeTransLogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClientMatchControlReportPrtInfoCompleted As GetClientMatchControlReportPrtInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event llmUpdateLetterLibraryCompleted As llmUpdateLetterLibraryCompletedEventHandler
        
        '''<remarks/>
        Public Event llmGetLetterLibraryCompleted As llmGetLetterLibraryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLetterheadCompleted As GetLetterheadCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSysBusinessDateCompleted As GetSysBusinessDateCompletedEventHandler
        
        '''<remarks/>
        Public Event IsBlackListedCompleted As IsBlackListedCompletedEventHandler
        
        '''<remarks/>
        Public Event ccsGetPaymentDetailCompleted As ccsGetPaymentDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event ccsGetPPSPaymentDetailCompleted As ccsGetPPSPaymentDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event ccsGetCapsilPaymentDetailCompleted As ccsGetCapsilPaymentDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event ccsGetLifeAsiaPaymentDetailCompleted As ccsGetLifeAsiaPaymentDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event ccsGetLifeAsiaPaymentRecordCompleted As ccsGetLifeAsiaPaymentRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event ccsGetCapsilPaymentRecordCompleted As ccsGetCapsilPaymentRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event ccsGetCapsilPaymentRecordBatchCompleted As ccsGetCapsilPaymentRecordBatchCompletedEventHandler
        
        '''<remarks/>
        Public Event ccsGetLifeAsiaPaymentRecordBatchCompleted As ccsGetLifeAsiaPaymentRecordBatchCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRedFlagAgentCompleted As GetRedFlagAgentCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadRedFlagAgentCompleted As UploadRedFlagAgentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCIWSysValueCompleted As GetCIWSysValueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCUPPayerIDTypeCompleted As GetCUPPayerIDTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCUPProvinceListCompleted As GetCUPProvinceListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCUPCityListCompleted As GetCUPCityListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCUPBankListCompleted As GetCUPBankListCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetRenewalPremium", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRenewalPremium(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal strPolicyNo As String, ByRef dsRenewalPremium As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetRenewalPremium", New Object() {pstrUserId, istrEnv, strPolicyNo, dsRenewalPremium, strError})
            dsRenewalPremium = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRenewalPremiumAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal strPolicyNo As String, ByVal dsRenewalPremium As System.Data.DataSet, ByVal strError As String)
            Me.GetRenewalPremiumAsync(pstrUserId, istrEnv, strPolicyNo, dsRenewalPremium, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRenewalPremiumAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal strPolicyNo As String, ByVal dsRenewalPremium As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetRenewalPremiumOperationCompleted Is Nothing) Then
                Me.GetRenewalPremiumOperationCompleted = AddressOf Me.OnGetRenewalPremiumOperationCompleted
            End If
            Me.InvokeAsync("GetRenewalPremium", New Object() {pstrUserId, istrEnv, strPolicyNo, dsRenewalPremium, strError}, Me.GetRenewalPremiumOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRenewalPremiumOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRenewalPremiumCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRenewalPremiumCompleted(Me, New GetRenewalPremiumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getCUPExRateTolerance", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCUPExRateTolerance(ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("getCUPExRateTolerance", New Object() {ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCUPExRateToleranceAsync(ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.getCUPExRateToleranceAsync(ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCUPExRateToleranceAsync(ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.getCUPExRateToleranceOperationCompleted Is Nothing) Then
                Me.getCUPExRateToleranceOperationCompleted = AddressOf Me.OngetCUPExRateToleranceOperationCompleted
            End If
            Me.InvokeAsync("getCUPExRateTolerance", New Object() {ds, strError}, Me.getCUPExRateToleranceOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCUPExRateToleranceOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCUPExRateToleranceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCUPExRateToleranceCompleted(Me, New getCUPExRateToleranceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetDDAFORM", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDDAFORM(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal strPolicy As String, ByRef dtDDA As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetDDAFORM", New Object() {pstrUserId, istrEnv, strPolicy, dtDDA, strErr})
            dtDDA = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDDAFORMAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal strPolicy As String, ByVal dtDDA As System.Data.DataTable, ByVal strErr As String)
            Me.GetDDAFORMAsync(pstrUserId, istrEnv, strPolicy, dtDDA, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDDAFORMAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal strPolicy As String, ByVal dtDDA As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetDDAFORMOperationCompleted Is Nothing) Then
                Me.GetDDAFORMOperationCompleted = AddressOf Me.OnGetDDAFORMOperationCompleted
            End If
            Me.InvokeAsync("GetDDAFORM", New Object() {pstrUserId, istrEnv, strPolicy, dtDDA, strErr}, Me.GetDDAFORMOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDDAFORMOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDDAFORMCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDDAFORMCompleted(Me, New GetDDAFORMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ccrSearchClient", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ccrSearchClient( _
                    ByVal pCompID As String,  _
                    ByVal pStrUser As String,  _
                    ByVal pStrEnv As String,  _
                    ByRef dsSrhCustomer As System.Data.DataSet,  _
                    ByRef dsSrhPolicyRelate As System.Data.DataSet,  _
                    ByRef dsLAMapping As System.Data.DataSet,  _
                    ByRef dsInqClientRole As System.Data.DataSet,  _
                    ByVal iCustNo As Long,  _
                    ByVal iHKID As String,  _
                    ByVal iPassport As String,  _
                    ByVal iAgtNo As String,  _
                    ByVal iFirstName As String,  _
                    ByVal iLastName As String,  _
                    ByVal iCoName As String,  _
                    ByVal strMsg As String,  _
                    ByVal strPolicyRel As String,  _
                    ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ccrSearchClient", New Object() {pCompID, pStrUser, pStrEnv, dsSrhCustomer, dsSrhPolicyRelate, dsLAMapping, dsInqClientRole, iCustNo, iHKID, iPassport, iAgtNo, iFirstName, iLastName, iCoName, strMsg, strPolicyRel, strErr})
            dsSrhCustomer = CType(results(1),System.Data.DataSet)
            dsSrhPolicyRelate = CType(results(2),System.Data.DataSet)
            dsLAMapping = CType(results(3),System.Data.DataSet)
            dsInqClientRole = CType(results(4),System.Data.DataSet)
            strErr = CType(results(5),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ccrSearchClientAsync( _
                    ByVal pCompID As String,  _
                    ByVal pStrUser As String,  _
                    ByVal pStrEnv As String,  _
                    ByVal dsSrhCustomer As System.Data.DataSet,  _
                    ByVal dsSrhPolicyRelate As System.Data.DataSet,  _
                    ByVal dsLAMapping As System.Data.DataSet,  _
                    ByVal dsInqClientRole As System.Data.DataSet,  _
                    ByVal iCustNo As Long,  _
                    ByVal iHKID As String,  _
                    ByVal iPassport As String,  _
                    ByVal iAgtNo As String,  _
                    ByVal iFirstName As String,  _
                    ByVal iLastName As String,  _
                    ByVal iCoName As String,  _
                    ByVal strMsg As String,  _
                    ByVal strPolicyRel As String,  _
                    ByVal strErr As String)
            Me.ccrSearchClientAsync(pCompID, pStrUser, pStrEnv, dsSrhCustomer, dsSrhPolicyRelate, dsLAMapping, dsInqClientRole, iCustNo, iHKID, iPassport, iAgtNo, iFirstName, iLastName, iCoName, strMsg, strPolicyRel, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ccrSearchClientAsync( _
                    ByVal pCompID As String,  _
                    ByVal pStrUser As String,  _
                    ByVal pStrEnv As String,  _
                    ByVal dsSrhCustomer As System.Data.DataSet,  _
                    ByVal dsSrhPolicyRelate As System.Data.DataSet,  _
                    ByVal dsLAMapping As System.Data.DataSet,  _
                    ByVal dsInqClientRole As System.Data.DataSet,  _
                    ByVal iCustNo As Long,  _
                    ByVal iHKID As String,  _
                    ByVal iPassport As String,  _
                    ByVal iAgtNo As String,  _
                    ByVal iFirstName As String,  _
                    ByVal iLastName As String,  _
                    ByVal iCoName As String,  _
                    ByVal strMsg As String,  _
                    ByVal strPolicyRel As String,  _
                    ByVal strErr As String,  _
                    ByVal userState As Object)
            If (Me.ccrSearchClientOperationCompleted Is Nothing) Then
                Me.ccrSearchClientOperationCompleted = AddressOf Me.OnccrSearchClientOperationCompleted
            End If
            Me.InvokeAsync("ccrSearchClient", New Object() {pCompID, pStrUser, pStrEnv, dsSrhCustomer, dsSrhPolicyRelate, dsLAMapping, dsInqClientRole, iCustNo, iHKID, iPassport, iAgtNo, iFirstName, iLastName, iCoName, strMsg, strPolicyRel, strErr}, Me.ccrSearchClientOperationCompleted, userState)
        End Sub
        
        Private Sub OnccrSearchClientOperationCompleted(ByVal arg As Object)
            If (Not (Me.ccrSearchClientCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ccrSearchClientCompleted(Me, New ccrSearchClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CNBTESTccrSearchClient", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CNBTESTccrSearchClient(ByVal pCompID As String, ByVal pStrUser As String, ByVal pStrEnv As String, ByRef objCustomer() As clsClient, ByVal iCustNo As Long, ByVal iHKID As String, ByVal iPassport As String, ByVal iAgtNo As String, ByVal iFirstName As String, ByVal iLastName As String, ByVal iCoName As String, ByVal strMsg As String, ByVal strPolicyRel As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CNBTESTccrSearchClient", New Object() {pCompID, pStrUser, pStrEnv, objCustomer, iCustNo, iHKID, iPassport, iAgtNo, iFirstName, iLastName, iCoName, strMsg, strPolicyRel, strErr})
            objCustomer = CType(results(1),clsClient())
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CNBTESTccrSearchClientAsync(ByVal pCompID As String, ByVal pStrUser As String, ByVal pStrEnv As String, ByVal objCustomer() As clsClient, ByVal iCustNo As Long, ByVal iHKID As String, ByVal iPassport As String, ByVal iAgtNo As String, ByVal iFirstName As String, ByVal iLastName As String, ByVal iCoName As String, ByVal strMsg As String, ByVal strPolicyRel As String, ByVal strErr As String)
            Me.CNBTESTccrSearchClientAsync(pCompID, pStrUser, pStrEnv, objCustomer, iCustNo, iHKID, iPassport, iAgtNo, iFirstName, iLastName, iCoName, strMsg, strPolicyRel, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CNBTESTccrSearchClientAsync(ByVal pCompID As String, ByVal pStrUser As String, ByVal pStrEnv As String, ByVal objCustomer() As clsClient, ByVal iCustNo As Long, ByVal iHKID As String, ByVal iPassport As String, ByVal iAgtNo As String, ByVal iFirstName As String, ByVal iLastName As String, ByVal iCoName As String, ByVal strMsg As String, ByVal strPolicyRel As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.CNBTESTccrSearchClientOperationCompleted Is Nothing) Then
                Me.CNBTESTccrSearchClientOperationCompleted = AddressOf Me.OnCNBTESTccrSearchClientOperationCompleted
            End If
            Me.InvokeAsync("CNBTESTccrSearchClient", New Object() {pCompID, pStrUser, pStrEnv, objCustomer, iCustNo, iHKID, iPassport, iAgtNo, iFirstName, iLastName, iCoName, strMsg, strPolicyRel, strErr}, Me.CNBTESTccrSearchClientOperationCompleted, userState)
        End Sub
        
        Private Sub OnCNBTESTccrSearchClientOperationCompleted(ByVal arg As Object)
            If (Not (Me.CNBTESTccrSearchClientCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CNBTESTccrSearchClientCompleted(Me, New CNBTESTccrSearchClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CNBccrSearchClient", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CNBccrSearchClient(ByVal pCompID As String, ByVal pStrUser As String, ByVal pStrEnv As String, ByRef objCustomer() As clsClient, ByVal iCustNo As Long, ByVal iHKID As String, ByVal iPassport As String, ByVal iAgtNo As String, ByVal iFirstName As String, ByVal iLastName As String, ByVal iDob As Date, ByVal iCoName As String, ByVal strMsg As String, ByVal strPolicyRel As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CNBccrSearchClient", New Object() {pCompID, pStrUser, pStrEnv, objCustomer, iCustNo, iHKID, iPassport, iAgtNo, iFirstName, iLastName, iDob, iCoName, strMsg, strPolicyRel, strErr})
            objCustomer = CType(results(1),clsClient())
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CNBccrSearchClientAsync(ByVal pCompID As String, ByVal pStrUser As String, ByVal pStrEnv As String, ByVal objCustomer() As clsClient, ByVal iCustNo As Long, ByVal iHKID As String, ByVal iPassport As String, ByVal iAgtNo As String, ByVal iFirstName As String, ByVal iLastName As String, ByVal iDob As Date, ByVal iCoName As String, ByVal strMsg As String, ByVal strPolicyRel As String, ByVal strErr As String)
            Me.CNBccrSearchClientAsync(pCompID, pStrUser, pStrEnv, objCustomer, iCustNo, iHKID, iPassport, iAgtNo, iFirstName, iLastName, iDob, iCoName, strMsg, strPolicyRel, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CNBccrSearchClientAsync( _
                    ByVal pCompID As String,  _
                    ByVal pStrUser As String,  _
                    ByVal pStrEnv As String,  _
                    ByVal objCustomer() As clsClient,  _
                    ByVal iCustNo As Long,  _
                    ByVal iHKID As String,  _
                    ByVal iPassport As String,  _
                    ByVal iAgtNo As String,  _
                    ByVal iFirstName As String,  _
                    ByVal iLastName As String,  _
                    ByVal iDob As Date,  _
                    ByVal iCoName As String,  _
                    ByVal strMsg As String,  _
                    ByVal strPolicyRel As String,  _
                    ByVal strErr As String,  _
                    ByVal userState As Object)
            If (Me.CNBccrSearchClientOperationCompleted Is Nothing) Then
                Me.CNBccrSearchClientOperationCompleted = AddressOf Me.OnCNBccrSearchClientOperationCompleted
            End If
            Me.InvokeAsync("CNBccrSearchClient", New Object() {pCompID, pStrUser, pStrEnv, objCustomer, iCustNo, iHKID, iPassport, iAgtNo, iFirstName, iLastName, iDob, iCoName, strMsg, strPolicyRel, strErr}, Me.CNBccrSearchClientOperationCompleted, userState)
        End Sub
        
        Private Sub OnCNBccrSearchClientOperationCompleted(ByVal arg As Object)
            If (Not (Me.CNBccrSearchClientCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CNBccrSearchClientCompleted(Me, New CNBccrSearchClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getPolicyNoByCustomerNoAndAddressCode", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPolicyNoByCustomerNoAndAddressCode(ByVal pstrUserId As String, ByVal pstrCustomerNo As String, ByVal pstrAddressCode As String, ByVal istrEnv As String, ByRef ds As System.Data.DataSet, ByRef strErr As String, ByVal iblnExcludeCustAddr As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("getPolicyNoByCustomerNoAndAddressCode", New Object() {pstrUserId, pstrCustomerNo, pstrAddressCode, istrEnv, ds, strErr, iblnExcludeCustAddr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPolicyNoByCustomerNoAndAddressCodeAsync(ByVal pstrUserId As String, ByVal pstrCustomerNo As String, ByVal pstrAddressCode As String, ByVal istrEnv As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal iblnExcludeCustAddr As Boolean)
            Me.getPolicyNoByCustomerNoAndAddressCodeAsync(pstrUserId, pstrCustomerNo, pstrAddressCode, istrEnv, ds, strErr, iblnExcludeCustAddr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPolicyNoByCustomerNoAndAddressCodeAsync(ByVal pstrUserId As String, ByVal pstrCustomerNo As String, ByVal pstrAddressCode As String, ByVal istrEnv As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal iblnExcludeCustAddr As Boolean, ByVal userState As Object)
            If (Me.getPolicyNoByCustomerNoAndAddressCodeOperationCompleted Is Nothing) Then
                Me.getPolicyNoByCustomerNoAndAddressCodeOperationCompleted = AddressOf Me.OngetPolicyNoByCustomerNoAndAddressCodeOperationCompleted
            End If
            Me.InvokeAsync("getPolicyNoByCustomerNoAndAddressCode", New Object() {pstrUserId, pstrCustomerNo, pstrAddressCode, istrEnv, ds, strErr, iblnExcludeCustAddr}, Me.getPolicyNoByCustomerNoAndAddressCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPolicyNoByCustomerNoAndAddressCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPolicyNoByCustomerNoAndAddressCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPolicyNoByCustomerNoAndAddressCodeCompleted(Me, New getPolicyNoByCustomerNoAndAddressCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getPolicyNoByCustomerNoAndAddressCodeXML", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPolicyNoByCustomerNoAndAddressCodeXML(ByVal pstrUserId As String, ByVal pstrCustomerNo As String, ByVal pstrAddressCode As String, ByVal istrEnv As String, ByRef xmldoc As String, ByRef strErr As String, ByVal iblnExcludeCustAddr As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("getPolicyNoByCustomerNoAndAddressCodeXML", New Object() {pstrUserId, pstrCustomerNo, pstrAddressCode, istrEnv, xmldoc, strErr, iblnExcludeCustAddr})
            xmldoc = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPolicyNoByCustomerNoAndAddressCodeXMLAsync(ByVal pstrUserId As String, ByVal pstrCustomerNo As String, ByVal pstrAddressCode As String, ByVal istrEnv As String, ByVal xmldoc As String, ByVal strErr As String, ByVal iblnExcludeCustAddr As Boolean)
            Me.getPolicyNoByCustomerNoAndAddressCodeXMLAsync(pstrUserId, pstrCustomerNo, pstrAddressCode, istrEnv, xmldoc, strErr, iblnExcludeCustAddr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPolicyNoByCustomerNoAndAddressCodeXMLAsync(ByVal pstrUserId As String, ByVal pstrCustomerNo As String, ByVal pstrAddressCode As String, ByVal istrEnv As String, ByVal xmldoc As String, ByVal strErr As String, ByVal iblnExcludeCustAddr As Boolean, ByVal userState As Object)
            If (Me.getPolicyNoByCustomerNoAndAddressCodeXMLOperationCompleted Is Nothing) Then
                Me.getPolicyNoByCustomerNoAndAddressCodeXMLOperationCompleted = AddressOf Me.OngetPolicyNoByCustomerNoAndAddressCodeXMLOperationCompleted
            End If
            Me.InvokeAsync("getPolicyNoByCustomerNoAndAddressCodeXML", New Object() {pstrUserId, pstrCustomerNo, pstrAddressCode, istrEnv, xmldoc, strErr, iblnExcludeCustAddr}, Me.getPolicyNoByCustomerNoAndAddressCodeXMLOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPolicyNoByCustomerNoAndAddressCodeXMLOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPolicyNoByCustomerNoAndAddressCodeXMLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPolicyNoByCustomerNoAndAddressCodeXMLCompleted(Me, New getPolicyNoByCustomerNoAndAddressCodeXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getPolicyNoByCustomerNoAndAddressCodeObj", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPolicyNoByCustomerNoAndAddressCodeObj(ByVal pstrUserId As String, ByVal pstrCustomerNo As String, ByVal pstrAddressCode As String, ByVal istrEnv As String, ByRef objClientPolicy() As clsClientPolicyRelation, ByRef strErr As String, ByVal iblnExcludeCustAddr As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("getPolicyNoByCustomerNoAndAddressCodeObj", New Object() {pstrUserId, pstrCustomerNo, pstrAddressCode, istrEnv, objClientPolicy, strErr, iblnExcludeCustAddr})
            objClientPolicy = CType(results(1),clsClientPolicyRelation())
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPolicyNoByCustomerNoAndAddressCodeObjAsync(ByVal pstrUserId As String, ByVal pstrCustomerNo As String, ByVal pstrAddressCode As String, ByVal istrEnv As String, ByVal objClientPolicy() As clsClientPolicyRelation, ByVal strErr As String, ByVal iblnExcludeCustAddr As Boolean)
            Me.getPolicyNoByCustomerNoAndAddressCodeObjAsync(pstrUserId, pstrCustomerNo, pstrAddressCode, istrEnv, objClientPolicy, strErr, iblnExcludeCustAddr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPolicyNoByCustomerNoAndAddressCodeObjAsync(ByVal pstrUserId As String, ByVal pstrCustomerNo As String, ByVal pstrAddressCode As String, ByVal istrEnv As String, ByVal objClientPolicy() As clsClientPolicyRelation, ByVal strErr As String, ByVal iblnExcludeCustAddr As Boolean, ByVal userState As Object)
            If (Me.getPolicyNoByCustomerNoAndAddressCodeObjOperationCompleted Is Nothing) Then
                Me.getPolicyNoByCustomerNoAndAddressCodeObjOperationCompleted = AddressOf Me.OngetPolicyNoByCustomerNoAndAddressCodeObjOperationCompleted
            End If
            Me.InvokeAsync("getPolicyNoByCustomerNoAndAddressCodeObj", New Object() {pstrUserId, pstrCustomerNo, pstrAddressCode, istrEnv, objClientPolicy, strErr, iblnExcludeCustAddr}, Me.getPolicyNoByCustomerNoAndAddressCodeObjOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPolicyNoByCustomerNoAndAddressCodeObjOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPolicyNoByCustomerNoAndAddressCodeObjCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPolicyNoByCustomerNoAndAddressCodeObjCompleted(Me, New getPolicyNoByCustomerNoAndAddressCodeObjCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ccrDelClient", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ccrDelClient(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal lngCiwNo As Long, ByVal strNANO As String, ByRef strErr As String, ByVal blnCheck As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("ccrDelClient", New Object() {pstrUserId, istrEnv, lngCiwNo, strNANO, strErr, blnCheck})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ccrDelClientAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal lngCiwNo As Long, ByVal strNANO As String, ByVal strErr As String, ByVal blnCheck As Boolean)
            Me.ccrDelClientAsync(pstrUserId, istrEnv, lngCiwNo, strNANO, strErr, blnCheck, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ccrDelClientAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal lngCiwNo As Long, ByVal strNANO As String, ByVal strErr As String, ByVal blnCheck As Boolean, ByVal userState As Object)
            If (Me.ccrDelClientOperationCompleted Is Nothing) Then
                Me.ccrDelClientOperationCompleted = AddressOf Me.OnccrDelClientOperationCompleted
            End If
            Me.InvokeAsync("ccrDelClient", New Object() {pstrUserId, istrEnv, lngCiwNo, strNANO, strErr, blnCheck}, Me.ccrDelClientOperationCompleted, userState)
        End Sub
        
        Private Sub OnccrDelClientOperationCompleted(ByVal arg As Object)
            If (Not (Me.ccrDelClientCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ccrDelClientCompleted(Me, New ccrDelClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ccrDelClientRcd", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ccrDelClientRcd(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal lngCiwNo As Long, ByVal strNANO As String, ByRef strErr1 As String, ByVal blnCheck As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("ccrDelClientRcd", New Object() {pstrUserId, istrEnv, lngCiwNo, strNANO, strErr1, blnCheck})
            strErr1 = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ccrDelClientRcdAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal lngCiwNo As Long, ByVal strNANO As String, ByVal strErr1 As String, ByVal blnCheck As Boolean)
            Me.ccrDelClientRcdAsync(pstrUserId, istrEnv, lngCiwNo, strNANO, strErr1, blnCheck, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ccrDelClientRcdAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal lngCiwNo As Long, ByVal strNANO As String, ByVal strErr1 As String, ByVal blnCheck As Boolean, ByVal userState As Object)
            If (Me.ccrDelClientRcdOperationCompleted Is Nothing) Then
                Me.ccrDelClientRcdOperationCompleted = AddressOf Me.OnccrDelClientRcdOperationCompleted
            End If
            Me.InvokeAsync("ccrDelClientRcd", New Object() {pstrUserId, istrEnv, lngCiwNo, strNANO, strErr1, blnCheck}, Me.ccrDelClientRcdOperationCompleted, userState)
        End Sub
        
        Private Sub OnccrDelClientRcdOperationCompleted(ByVal arg As Object)
            If (Not (Me.ccrDelClientRcdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ccrDelClientRcdCompleted(Me, New ccrDelClientRcdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetClnMainGeneralRcd", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClnMainGeneralRcd(ByVal pCompID As String, ByVal pstrUserId As String, ByVal istrEnv As String, ByRef ErrStr As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetClnMainGeneralRcd", New Object() {pCompID, pstrUserId, istrEnv, ErrStr})
            ErrStr = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClnMainGeneralRcdAsync(ByVal pCompID As String, ByVal pstrUserId As String, ByVal istrEnv As String, ByVal ErrStr As String)
            Me.GetClnMainGeneralRcdAsync(pCompID, pstrUserId, istrEnv, ErrStr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClnMainGeneralRcdAsync(ByVal pCompID As String, ByVal pstrUserId As String, ByVal istrEnv As String, ByVal ErrStr As String, ByVal userState As Object)
            If (Me.GetClnMainGeneralRcdOperationCompleted Is Nothing) Then
                Me.GetClnMainGeneralRcdOperationCompleted = AddressOf Me.OnGetClnMainGeneralRcdOperationCompleted
            End If
            Me.InvokeAsync("GetClnMainGeneralRcd", New Object() {pCompID, pstrUserId, istrEnv, ErrStr}, Me.GetClnMainGeneralRcdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClnMainGeneralRcdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClnMainGeneralRcdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClnMainGeneralRcdCompleted(Me, New GetClnMainGeneralRcdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCustomerByID", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerByID(ByVal pCompID As String, ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iCustomerID As Integer, ByRef ErrStr As String, ByRef ds As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("GetCustomerByID", New Object() {pCompID, pstrUserId, istrEnv, iCustomerID, ErrStr, ds})
            ErrStr = CType(results(1),String)
            ds = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerByIDAsync(ByVal pCompID As String, ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iCustomerID As Integer, ByVal ErrStr As String, ByVal ds As System.Data.DataSet)
            Me.GetCustomerByIDAsync(pCompID, pstrUserId, istrEnv, iCustomerID, ErrStr, ds, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerByIDAsync(ByVal pCompID As String, ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iCustomerID As Integer, ByVal ErrStr As String, ByVal ds As System.Data.DataSet, ByVal userState As Object)
            If (Me.GetCustomerByIDOperationCompleted Is Nothing) Then
                Me.GetCustomerByIDOperationCompleted = AddressOf Me.OnGetCustomerByIDOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerByID", New Object() {pCompID, pstrUserId, istrEnv, iCustomerID, ErrStr, ds}, Me.GetCustomerByIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerByIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerByIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerByIDCompleted(Me, New GetCustomerByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCustomerByLaID", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerByLaID(ByVal pCompID As String, ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iLaID As Integer, ByRef ErrStr As String, ByRef ds As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("GetCustomerByLaID", New Object() {pCompID, pstrUserId, istrEnv, iLaID, ErrStr, ds})
            ErrStr = CType(results(1),String)
            ds = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerByLaIDAsync(ByVal pCompID As String, ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iLaID As Integer, ByVal ErrStr As String, ByVal ds As System.Data.DataSet)
            Me.GetCustomerByLaIDAsync(pCompID, pstrUserId, istrEnv, iLaID, ErrStr, ds, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerByLaIDAsync(ByVal pCompID As String, ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iLaID As Integer, ByVal ErrStr As String, ByVal ds As System.Data.DataSet, ByVal userState As Object)
            If (Me.GetCustomerByLaIDOperationCompleted Is Nothing) Then
                Me.GetCustomerByLaIDOperationCompleted = AddressOf Me.OnGetCustomerByLaIDOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerByLaID", New Object() {pCompID, pstrUserId, istrEnv, iLaID, ErrStr, ds}, Me.GetCustomerByLaIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerByLaIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerByLaIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerByLaIDCompleted(Me, New GetCustomerByLaIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCustomerAddressByID", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerAddressByID(ByVal pCompID As String, ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iCustomerID As Integer, ByRef ErrStr As String, ByRef ds As System.Data.DataSet, ByVal blnAddField As Boolean, ByVal strEAddrType As String, ByVal strCAddrType As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCustomerAddressByID", New Object() {pCompID, pstrUserId, istrEnv, iCustomerID, ErrStr, ds, blnAddField, strEAddrType, strCAddrType})
            ErrStr = CType(results(1),String)
            ds = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerAddressByIDAsync(ByVal pCompID As String, ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iCustomerID As Integer, ByVal ErrStr As String, ByVal ds As System.Data.DataSet, ByVal blnAddField As Boolean, ByVal strEAddrType As String, ByVal strCAddrType As String)
            Me.GetCustomerAddressByIDAsync(pCompID, pstrUserId, istrEnv, iCustomerID, ErrStr, ds, blnAddField, strEAddrType, strCAddrType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerAddressByIDAsync(ByVal pCompID As String, ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iCustomerID As Integer, ByVal ErrStr As String, ByVal ds As System.Data.DataSet, ByVal blnAddField As Boolean, ByVal strEAddrType As String, ByVal strCAddrType As String, ByVal userState As Object)
            If (Me.GetCustomerAddressByIDOperationCompleted Is Nothing) Then
                Me.GetCustomerAddressByIDOperationCompleted = AddressOf Me.OnGetCustomerAddressByIDOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerAddressByID", New Object() {pCompID, pstrUserId, istrEnv, iCustomerID, ErrStr, ds, blnAddField, strEAddrType, strCAddrType}, Me.GetCustomerAddressByIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerAddressByIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerAddressByIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerAddressByIDCompleted(Me, New GetCustomerAddressByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLAClentMappingByNum", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLAClentMappingByNum(ByVal pstrUserId As String, ByVal CIWNO As String, ByVal CustType As String, ByVal AddrType As String, ByRef dsRtn As System.Data.DataSet, ByRef strErr As String, ByVal istrEnv As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLAClentMappingByNum", New Object() {pstrUserId, CIWNO, CustType, AddrType, dsRtn, strErr, istrEnv})
            dsRtn = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLAClentMappingByNumAsync(ByVal pstrUserId As String, ByVal CIWNO As String, ByVal CustType As String, ByVal AddrType As String, ByVal dsRtn As System.Data.DataSet, ByVal strErr As String, ByVal istrEnv As String)
            Me.GetLAClentMappingByNumAsync(pstrUserId, CIWNO, CustType, AddrType, dsRtn, strErr, istrEnv, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLAClentMappingByNumAsync(ByVal pstrUserId As String, ByVal CIWNO As String, ByVal CustType As String, ByVal AddrType As String, ByVal dsRtn As System.Data.DataSet, ByVal strErr As String, ByVal istrEnv As String, ByVal userState As Object)
            If (Me.GetLAClentMappingByNumOperationCompleted Is Nothing) Then
                Me.GetLAClentMappingByNumOperationCompleted = AddressOf Me.OnGetLAClentMappingByNumOperationCompleted
            End If
            Me.InvokeAsync("GetLAClentMappingByNum", New Object() {pstrUserId, CIWNO, CustType, AddrType, dsRtn, strErr, istrEnv}, Me.GetLAClentMappingByNumOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLAClentMappingByNumOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLAClentMappingByNumCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLAClentMappingByNumCompleted(Me, New GetLAClentMappingByNumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CNBccrSaveClient", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CNBccrSaveClient( _
                    ByVal pCompID As String,  _
                    ByVal pstrUserId As String,  _
                    ByVal istrEnv As String,  _
                    ByVal istrMode As String,  _
                    ByVal sendObj As SaveClient_Send_Schema,  _
                    ByVal PrintAddrLetterInBatch As Boolean,  _
                    ByVal strAgent As String,  _
                    ByVal strACBank As String,  _
                    ByVal strACBranch As String,  _
                    ByVal strACNo As String,  _
                    ByVal strACType As String,  _
                    ByRef oCiwNo As Integer,  _
                    ByVal strOAccountType As String,  _
                    ByVal strOBank As String,  _
                    ByVal strOBranch As String,  _
                    ByVal strOAccountNo As String,  _
                    ByVal strNAccountType As String,  _
                    ByVal strNBank As String,  _
                    ByVal strNBranch As String,  _
                    ByVal strNAccountNo As String,  _
                    ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("CNBccrSaveClient", New Object() {pCompID, pstrUserId, istrEnv, istrMode, sendObj, PrintAddrLetterInBatch, strAgent, strACBank, strACBranch, strACNo, strACType, oCiwNo, strOAccountType, strOBank, strOBranch, strOAccountNo, strNAccountType, strNBank, strNBranch, strNAccountNo, strError})
            oCiwNo = CType(results(1),Integer)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CNBccrSaveClientAsync( _
                    ByVal pCompID As String,  _
                    ByVal pstrUserId As String,  _
                    ByVal istrEnv As String,  _
                    ByVal istrMode As String,  _
                    ByVal sendObj As SaveClient_Send_Schema,  _
                    ByVal PrintAddrLetterInBatch As Boolean,  _
                    ByVal strAgent As String,  _
                    ByVal strACBank As String,  _
                    ByVal strACBranch As String,  _
                    ByVal strACNo As String,  _
                    ByVal strACType As String,  _
                    ByVal oCiwNo As Integer,  _
                    ByVal strOAccountType As String,  _
                    ByVal strOBank As String,  _
                    ByVal strOBranch As String,  _
                    ByVal strOAccountNo As String,  _
                    ByVal strNAccountType As String,  _
                    ByVal strNBank As String,  _
                    ByVal strNBranch As String,  _
                    ByVal strNAccountNo As String,  _
                    ByVal strError As String)
            Me.CNBccrSaveClientAsync(pCompID, pstrUserId, istrEnv, istrMode, sendObj, PrintAddrLetterInBatch, strAgent, strACBank, strACBranch, strACNo, strACType, oCiwNo, strOAccountType, strOBank, strOBranch, strOAccountNo, strNAccountType, strNBank, strNBranch, strNAccountNo, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CNBccrSaveClientAsync( _
                    ByVal pCompID As String,  _
                    ByVal pstrUserId As String,  _
                    ByVal istrEnv As String,  _
                    ByVal istrMode As String,  _
                    ByVal sendObj As SaveClient_Send_Schema,  _
                    ByVal PrintAddrLetterInBatch As Boolean,  _
                    ByVal strAgent As String,  _
                    ByVal strACBank As String,  _
                    ByVal strACBranch As String,  _
                    ByVal strACNo As String,  _
                    ByVal strACType As String,  _
                    ByVal oCiwNo As Integer,  _
                    ByVal strOAccountType As String,  _
                    ByVal strOBank As String,  _
                    ByVal strOBranch As String,  _
                    ByVal strOAccountNo As String,  _
                    ByVal strNAccountType As String,  _
                    ByVal strNBank As String,  _
                    ByVal strNBranch As String,  _
                    ByVal strNAccountNo As String,  _
                    ByVal strError As String,  _
                    ByVal userState As Object)
            If (Me.CNBccrSaveClientOperationCompleted Is Nothing) Then
                Me.CNBccrSaveClientOperationCompleted = AddressOf Me.OnCNBccrSaveClientOperationCompleted
            End If
            Me.InvokeAsync("CNBccrSaveClient", New Object() {pCompID, pstrUserId, istrEnv, istrMode, sendObj, PrintAddrLetterInBatch, strAgent, strACBank, strACBranch, strACNo, strACType, oCiwNo, strOAccountType, strOBank, strOBranch, strOAccountNo, strNAccountType, strNBank, strNBranch, strNAccountNo, strError}, Me.CNBccrSaveClientOperationCompleted, userState)
        End Sub
        
        Private Sub OnCNBccrSaveClientOperationCompleted(ByVal arg As Object)
            If (Not (Me.CNBccrSaveClientCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CNBccrSaveClientCompleted(Me, New CNBccrSaveClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ccrSaveClient", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ccrSaveClient( _
                    ByVal pCompID As String,  _
                    ByVal pstrUserId As String,  _
                    ByVal istrEnv As String,  _
                    ByVal istrMode As String,  _
                    ByRef strErr As String,  _
                    ByRef dsCustomer As System.Data.DataSet,  _
                    ByRef dsCustomerAddress As System.Data.DataSet,  _
                    ByVal PrintAddrLetterInBatch As Boolean,  _
                    ByVal dsCustAddrEC As System.Data.DataSet,  _
                    ByVal dsORDURL As System.Data.DataSet,  _
                    ByVal strAgent As String,  _
                    ByVal strACBank As String,  _
                    ByVal strACBranch As String,  _
                    ByVal strACNo As String,  _
                    ByVal strACType As String,  _
                    ByRef oCiwNo As Integer,  _
                    ByVal strOAccountType As String,  _
                    ByVal strOBank As String,  _
                    ByVal strOBranch As String,  _
                    ByVal strOAccountNo As String,  _
                    ByVal strNAccountType As String,  _
                    ByVal strNBank As String,  _
                    ByVal strNBranch As String,  _
                    ByVal strNAccountNo As String) As Boolean
            Dim results() As Object = Me.Invoke("ccrSaveClient", New Object() {pCompID, pstrUserId, istrEnv, istrMode, strErr, dsCustomer, dsCustomerAddress, PrintAddrLetterInBatch, dsCustAddrEC, dsORDURL, strAgent, strACBank, strACBranch, strACNo, strACType, oCiwNo, strOAccountType, strOBank, strOBranch, strOAccountNo, strNAccountType, strNBank, strNBranch, strNAccountNo})
            strErr = CType(results(1),String)
            dsCustomer = CType(results(2),System.Data.DataSet)
            dsCustomerAddress = CType(results(3),System.Data.DataSet)
            oCiwNo = CType(results(4),Integer)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ccrSaveClientAsync( _
                    ByVal pCompID As String,  _
                    ByVal pstrUserId As String,  _
                    ByVal istrEnv As String,  _
                    ByVal istrMode As String,  _
                    ByVal strErr As String,  _
                    ByVal dsCustomer As System.Data.DataSet,  _
                    ByVal dsCustomerAddress As System.Data.DataSet,  _
                    ByVal PrintAddrLetterInBatch As Boolean,  _
                    ByVal dsCustAddrEC As System.Data.DataSet,  _
                    ByVal dsORDURL As System.Data.DataSet,  _
                    ByVal strAgent As String,  _
                    ByVal strACBank As String,  _
                    ByVal strACBranch As String,  _
                    ByVal strACNo As String,  _
                    ByVal strACType As String,  _
                    ByVal oCiwNo As Integer,  _
                    ByVal strOAccountType As String,  _
                    ByVal strOBank As String,  _
                    ByVal strOBranch As String,  _
                    ByVal strOAccountNo As String,  _
                    ByVal strNAccountType As String,  _
                    ByVal strNBank As String,  _
                    ByVal strNBranch As String,  _
                    ByVal strNAccountNo As String)
            Me.ccrSaveClientAsync(pCompID, pstrUserId, istrEnv, istrMode, strErr, dsCustomer, dsCustomerAddress, PrintAddrLetterInBatch, dsCustAddrEC, dsORDURL, strAgent, strACBank, strACBranch, strACNo, strACType, oCiwNo, strOAccountType, strOBank, strOBranch, strOAccountNo, strNAccountType, strNBank, strNBranch, strNAccountNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ccrSaveClientAsync( _
                    ByVal pCompID As String,  _
                    ByVal pstrUserId As String,  _
                    ByVal istrEnv As String,  _
                    ByVal istrMode As String,  _
                    ByVal strErr As String,  _
                    ByVal dsCustomer As System.Data.DataSet,  _
                    ByVal dsCustomerAddress As System.Data.DataSet,  _
                    ByVal PrintAddrLetterInBatch As Boolean,  _
                    ByVal dsCustAddrEC As System.Data.DataSet,  _
                    ByVal dsORDURL As System.Data.DataSet,  _
                    ByVal strAgent As String,  _
                    ByVal strACBank As String,  _
                    ByVal strACBranch As String,  _
                    ByVal strACNo As String,  _
                    ByVal strACType As String,  _
                    ByVal oCiwNo As Integer,  _
                    ByVal strOAccountType As String,  _
                    ByVal strOBank As String,  _
                    ByVal strOBranch As String,  _
                    ByVal strOAccountNo As String,  _
                    ByVal strNAccountType As String,  _
                    ByVal strNBank As String,  _
                    ByVal strNBranch As String,  _
                    ByVal strNAccountNo As String,  _
                    ByVal userState As Object)
            If (Me.ccrSaveClientOperationCompleted Is Nothing) Then
                Me.ccrSaveClientOperationCompleted = AddressOf Me.OnccrSaveClientOperationCompleted
            End If
            Me.InvokeAsync("ccrSaveClient", New Object() {pCompID, pstrUserId, istrEnv, istrMode, strErr, dsCustomer, dsCustomerAddress, PrintAddrLetterInBatch, dsCustAddrEC, dsORDURL, strAgent, strACBank, strACBranch, strACNo, strACType, oCiwNo, strOAccountType, strOBank, strOBranch, strOAccountNo, strNAccountType, strNBank, strNBranch, strNAccountNo}, Me.ccrSaveClientOperationCompleted, userState)
        End Sub
        
        Private Sub OnccrSaveClientOperationCompleted(ByVal arg As Object)
            If (Not (Me.ccrSaveClientCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ccrSaveClientCompleted(Me, New ccrSaveClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getPolicyRelate", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPolicyRelate(ByVal pstrUserId As String, ByVal istrEnv As String, ByRef dsPolicyRelate As System.Data.DataSet, ByRef strErr As String, ByVal iCustomerID As String, ByVal istrPolicy As String, ByVal istrRelate As String) As Boolean
            Dim results() As Object = Me.Invoke("getPolicyRelate", New Object() {pstrUserId, istrEnv, dsPolicyRelate, strErr, iCustomerID, istrPolicy, istrRelate})
            dsPolicyRelate = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPolicyRelateAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal dsPolicyRelate As System.Data.DataSet, ByVal strErr As String, ByVal iCustomerID As String, ByVal istrPolicy As String, ByVal istrRelate As String)
            Me.getPolicyRelateAsync(pstrUserId, istrEnv, dsPolicyRelate, strErr, iCustomerID, istrPolicy, istrRelate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPolicyRelateAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal dsPolicyRelate As System.Data.DataSet, ByVal strErr As String, ByVal iCustomerID As String, ByVal istrPolicy As String, ByVal istrRelate As String, ByVal userState As Object)
            If (Me.getPolicyRelateOperationCompleted Is Nothing) Then
                Me.getPolicyRelateOperationCompleted = AddressOf Me.OngetPolicyRelateOperationCompleted
            End If
            Me.InvokeAsync("getPolicyRelate", New Object() {pstrUserId, istrEnv, dsPolicyRelate, strErr, iCustomerID, istrPolicy, istrRelate}, Me.getPolicyRelateOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPolicyRelateOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPolicyRelateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPolicyRelateCompleted(Me, New getPolicyRelateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getBeat", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getBeat(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal cAddrLine1 As String, ByVal cAddrLine2 As String, ByVal cAddrLine3 As String, ByVal cAddrLine4 As String, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("getBeat", New Object() {pstrUserId, istrEnv, cAddrLine1, cAddrLine2, cAddrLine3, cAddrLine4, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getBeatAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal cAddrLine1 As String, ByVal cAddrLine2 As String, ByVal cAddrLine3 As String, ByVal cAddrLine4 As String, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.getBeatAsync(pstrUserId, istrEnv, cAddrLine1, cAddrLine2, cAddrLine3, cAddrLine4, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getBeatAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal cAddrLine1 As String, ByVal cAddrLine2 As String, ByVal cAddrLine3 As String, ByVal cAddrLine4 As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.getBeatOperationCompleted Is Nothing) Then
                Me.getBeatOperationCompleted = AddressOf Me.OngetBeatOperationCompleted
            End If
            Me.InvokeAsync("getBeat", New Object() {pstrUserId, istrEnv, cAddrLine1, cAddrLine2, cAddrLine3, cAddrLine4, ds, strErr}, Me.getBeatOperationCompleted, userState)
        End Sub
        
        Private Sub OngetBeatOperationCompleted(ByVal arg As Object)
            If (Not (Me.getBeatCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getBeatCompleted(Me, New getBeatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getPolicyAccountByPly", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPolicyAccountByPly(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iPolicyNo As String, ByRef ds As System.Data.DataSet, ByRef StrErr As String) As Boolean
            Dim results() As Object = Me.Invoke("getPolicyAccountByPly", New Object() {pstrUserId, istrEnv, iPolicyNo, ds, StrErr})
            ds = CType(results(1),System.Data.DataSet)
            StrErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPolicyAccountByPlyAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal StrErr As String)
            Me.getPolicyAccountByPlyAsync(pstrUserId, istrEnv, iPolicyNo, ds, StrErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPolicyAccountByPlyAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal StrErr As String, ByVal userState As Object)
            If (Me.getPolicyAccountByPlyOperationCompleted Is Nothing) Then
                Me.getPolicyAccountByPlyOperationCompleted = AddressOf Me.OngetPolicyAccountByPlyOperationCompleted
            End If
            Me.InvokeAsync("getPolicyAccountByPly", New Object() {pstrUserId, istrEnv, iPolicyNo, ds, StrErr}, Me.getPolicyAccountByPlyOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPolicyAccountByPlyOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPolicyAccountByPlyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPolicyAccountByPlyCompleted(Me, New getPolicyAccountByPlyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getPolicyRelateCust", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPolicyRelateCust(ByVal pstrUserId As String, ByVal istrEnv As String, ByRef dsPR As System.Data.DataSet, ByRef strErr As String, ByVal iCustomerID As String, ByVal istrPolicy As String, ByVal istrRelate As String) As Boolean
            Dim results() As Object = Me.Invoke("getPolicyRelateCust", New Object() {pstrUserId, istrEnv, dsPR, strErr, iCustomerID, istrPolicy, istrRelate})
            dsPR = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPolicyRelateCustAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal dsPR As System.Data.DataSet, ByVal strErr As String, ByVal iCustomerID As String, ByVal istrPolicy As String, ByVal istrRelate As String)
            Me.getPolicyRelateCustAsync(pstrUserId, istrEnv, dsPR, strErr, iCustomerID, istrPolicy, istrRelate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPolicyRelateCustAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal dsPR As System.Data.DataSet, ByVal strErr As String, ByVal iCustomerID As String, ByVal istrPolicy As String, ByVal istrRelate As String, ByVal userState As Object)
            If (Me.getPolicyRelateCustOperationCompleted Is Nothing) Then
                Me.getPolicyRelateCustOperationCompleted = AddressOf Me.OngetPolicyRelateCustOperationCompleted
            End If
            Me.InvokeAsync("getPolicyRelateCust", New Object() {pstrUserId, istrEnv, dsPR, strErr, iCustomerID, istrPolicy, istrRelate}, Me.getPolicyRelateCustOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPolicyRelateCustOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPolicyRelateCustCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPolicyRelateCustCompleted(Me, New getPolicyRelateCustCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getAccountStatusCodes", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAccountStatusCodes(ByVal pstrUserId As String, ByVal istrEnv As String, ByRef ds As System.Data.DataSet, ByRef StrErr As String) As Boolean
            Dim results() As Object = Me.Invoke("getAccountStatusCodes", New Object() {pstrUserId, istrEnv, ds, StrErr})
            ds = CType(results(1),System.Data.DataSet)
            StrErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAccountStatusCodesAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal ds As System.Data.DataSet, ByVal StrErr As String)
            Me.getAccountStatusCodesAsync(pstrUserId, istrEnv, ds, StrErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAccountStatusCodesAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal ds As System.Data.DataSet, ByVal StrErr As String, ByVal userState As Object)
            If (Me.getAccountStatusCodesOperationCompleted Is Nothing) Then
                Me.getAccountStatusCodesOperationCompleted = AddressOf Me.OngetAccountStatusCodesOperationCompleted
            End If
            Me.InvokeAsync("getAccountStatusCodes", New Object() {pstrUserId, istrEnv, ds, StrErr}, Me.getAccountStatusCodesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAccountStatusCodesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAccountStatusCodesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAccountStatusCodesCompleted(Me, New getAccountStatusCodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getAgentInfo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAgentInfo(ByVal pstrUserId As String, ByVal istrEnv As String, ByRef errStr As String, ByRef ds As System.Data.DataSet, ByVal iAgentNo As String) As Boolean
            Dim results() As Object = Me.Invoke("getAgentInfo", New Object() {pstrUserId, istrEnv, errStr, ds, iAgentNo})
            errStr = CType(results(1),String)
            ds = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAgentInfoAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal errStr As String, ByVal ds As System.Data.DataSet, ByVal iAgentNo As String)
            Me.getAgentInfoAsync(pstrUserId, istrEnv, errStr, ds, iAgentNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAgentInfoAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal errStr As String, ByVal ds As System.Data.DataSet, ByVal iAgentNo As String, ByVal userState As Object)
            If (Me.getAgentInfoOperationCompleted Is Nothing) Then
                Me.getAgentInfoOperationCompleted = AddressOf Me.OngetAgentInfoOperationCompleted
            End If
            Me.InvokeAsync("getAgentInfo", New Object() {pstrUserId, istrEnv, errStr, ds, iAgentNo}, Me.getAgentInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAgentInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAgentInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAgentInfoCompleted(Me, New getAgentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getHKLAgentInfo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getHKLAgentInfo(ByVal pstrUserId As String, ByVal istrEnv As String, ByRef errStr As String, ByRef ds As System.Data.DataSet, ByVal iAgentNo As String) As Boolean
            Dim results() As Object = Me.Invoke("getHKLAgentInfo", New Object() {pstrUserId, istrEnv, errStr, ds, iAgentNo})
            errStr = CType(results(1),String)
            ds = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getHKLAgentInfoAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal errStr As String, ByVal ds As System.Data.DataSet, ByVal iAgentNo As String)
            Me.getHKLAgentInfoAsync(pstrUserId, istrEnv, errStr, ds, iAgentNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getHKLAgentInfoAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal errStr As String, ByVal ds As System.Data.DataSet, ByVal iAgentNo As String, ByVal userState As Object)
            If (Me.getHKLAgentInfoOperationCompleted Is Nothing) Then
                Me.getHKLAgentInfoOperationCompleted = AddressOf Me.OngetHKLAgentInfoOperationCompleted
            End If
            Me.InvokeAsync("getHKLAgentInfo", New Object() {pstrUserId, istrEnv, errStr, ds, iAgentNo}, Me.getHKLAgentInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OngetHKLAgentInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.getHKLAgentInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getHKLAgentInfoCompleted(Me, New getHKLAgentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getPolicyAddressLog", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPolicyAddressLog(ByVal pstrUserId As String, ByVal istrEnv As String, ByRef ds As System.Data.DataSet, ByRef strErr As String, ByVal iPolicyNo As String, ByVal iLastUpdUsr As String, ByVal idatLastUpdDateFm As String, ByVal idatLastUpdDateTo As String, ByVal blnSrhAllFld As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("getPolicyAddressLog", New Object() {pstrUserId, istrEnv, ds, strErr, iPolicyNo, iLastUpdUsr, idatLastUpdDateFm, idatLastUpdDateTo, blnSrhAllFld})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPolicyAddressLogAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal iPolicyNo As String, ByVal iLastUpdUsr As String, ByVal idatLastUpdDateFm As String, ByVal idatLastUpdDateTo As String, ByVal blnSrhAllFld As Boolean)
            Me.getPolicyAddressLogAsync(pstrUserId, istrEnv, ds, strErr, iPolicyNo, iLastUpdUsr, idatLastUpdDateFm, idatLastUpdDateTo, blnSrhAllFld, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPolicyAddressLogAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal iPolicyNo As String, ByVal iLastUpdUsr As String, ByVal idatLastUpdDateFm As String, ByVal idatLastUpdDateTo As String, ByVal blnSrhAllFld As Boolean, ByVal userState As Object)
            If (Me.getPolicyAddressLogOperationCompleted Is Nothing) Then
                Me.getPolicyAddressLogOperationCompleted = AddressOf Me.OngetPolicyAddressLogOperationCompleted
            End If
            Me.InvokeAsync("getPolicyAddressLog", New Object() {pstrUserId, istrEnv, ds, strErr, iPolicyNo, iLastUpdUsr, idatLastUpdDateFm, idatLastUpdDateTo, blnSrhAllFld}, Me.getPolicyAddressLogOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPolicyAddressLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPolicyAddressLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPolicyAddressLogCompleted(Me, New getPolicyAddressLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getCustomerLog", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCustomerLog(ByVal pstrUserId As String, ByVal istrEnv As String, ByRef ods As System.Data.DataSet, ByRef strErr As String, ByVal iCustomerID As Long, ByVal iLastUpdUsr As String, ByVal idatLastUpdDateFm As String, ByVal idatLastUpdDateTo As String) As Boolean
            Dim results() As Object = Me.Invoke("getCustomerLog", New Object() {pstrUserId, istrEnv, ods, strErr, iCustomerID, iLastUpdUsr, idatLastUpdDateFm, idatLastUpdDateTo})
            ods = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCustomerLogAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal ods As System.Data.DataSet, ByVal strErr As String, ByVal iCustomerID As Long, ByVal iLastUpdUsr As String, ByVal idatLastUpdDateFm As String, ByVal idatLastUpdDateTo As String)
            Me.getCustomerLogAsync(pstrUserId, istrEnv, ods, strErr, iCustomerID, iLastUpdUsr, idatLastUpdDateFm, idatLastUpdDateTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCustomerLogAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal ods As System.Data.DataSet, ByVal strErr As String, ByVal iCustomerID As Long, ByVal iLastUpdUsr As String, ByVal idatLastUpdDateFm As String, ByVal idatLastUpdDateTo As String, ByVal userState As Object)
            If (Me.getCustomerLogOperationCompleted Is Nothing) Then
                Me.getCustomerLogOperationCompleted = AddressOf Me.OngetCustomerLogOperationCompleted
            End If
            Me.InvokeAsync("getCustomerLog", New Object() {pstrUserId, istrEnv, ods, strErr, iCustomerID, iLastUpdUsr, idatLastUpdDateFm, idatLastUpdDateTo}, Me.getCustomerLogOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCustomerLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCustomerLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCustomerLogCompleted(Me, New getCustomerLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getCustomerAddressLog", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCustomerAddressLog(ByVal pstrUserId As String, ByVal istrEnv As String, ByRef ods As System.Data.DataSet, ByRef strErr As String, ByVal iCustomerID As Long, ByVal iLastUpdUsr As String, ByVal idatLastUpdDateFm As String, ByVal idatLastUpdDateTo As String, ByVal istrEAddrType As String, ByVal istrCAddrType As String) As Boolean
            Dim results() As Object = Me.Invoke("getCustomerAddressLog", New Object() {pstrUserId, istrEnv, ods, strErr, iCustomerID, iLastUpdUsr, idatLastUpdDateFm, idatLastUpdDateTo, istrEAddrType, istrCAddrType})
            ods = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCustomerAddressLogAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal ods As System.Data.DataSet, ByVal strErr As String, ByVal iCustomerID As Long, ByVal iLastUpdUsr As String, ByVal idatLastUpdDateFm As String, ByVal idatLastUpdDateTo As String, ByVal istrEAddrType As String, ByVal istrCAddrType As String)
            Me.getCustomerAddressLogAsync(pstrUserId, istrEnv, ods, strErr, iCustomerID, iLastUpdUsr, idatLastUpdDateFm, idatLastUpdDateTo, istrEAddrType, istrCAddrType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCustomerAddressLogAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal ods As System.Data.DataSet, ByVal strErr As String, ByVal iCustomerID As Long, ByVal iLastUpdUsr As String, ByVal idatLastUpdDateFm As String, ByVal idatLastUpdDateTo As String, ByVal istrEAddrType As String, ByVal istrCAddrType As String, ByVal userState As Object)
            If (Me.getCustomerAddressLogOperationCompleted Is Nothing) Then
                Me.getCustomerAddressLogOperationCompleted = AddressOf Me.OngetCustomerAddressLogOperationCompleted
            End If
            Me.InvokeAsync("getCustomerAddressLog", New Object() {pstrUserId, istrEnv, ods, strErr, iCustomerID, iLastUpdUsr, idatLastUpdDateFm, idatLastUpdDateTo, istrEAddrType, istrCAddrType}, Me.getCustomerAddressLogOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCustomerAddressLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCustomerAddressLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCustomerAddressLogCompleted(Me, New getCustomerAddressLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getCustomerMergeLog", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCustomerMergeLog(ByVal pstrUserId As String, ByVal istrEnv As String, ByRef oRsCustomerMergeLog As System.Data.DataSet, ByRef oRsCustomerMergePlyLog As System.Data.DataSet, ByRef strErr As String, ByVal iCustomerID As Long, ByVal iLastUpdUsr As String, ByVal idatLastUpdDateFm As String, ByVal idatLastUpdDateTo As String, ByVal blnSrhAllFld As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("getCustomerMergeLog", New Object() {pstrUserId, istrEnv, oRsCustomerMergeLog, oRsCustomerMergePlyLog, strErr, iCustomerID, iLastUpdUsr, idatLastUpdDateFm, idatLastUpdDateTo, blnSrhAllFld})
            oRsCustomerMergeLog = CType(results(1),System.Data.DataSet)
            oRsCustomerMergePlyLog = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCustomerMergeLogAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal oRsCustomerMergeLog As System.Data.DataSet, ByVal oRsCustomerMergePlyLog As System.Data.DataSet, ByVal strErr As String, ByVal iCustomerID As Long, ByVal iLastUpdUsr As String, ByVal idatLastUpdDateFm As String, ByVal idatLastUpdDateTo As String, ByVal blnSrhAllFld As Boolean)
            Me.getCustomerMergeLogAsync(pstrUserId, istrEnv, oRsCustomerMergeLog, oRsCustomerMergePlyLog, strErr, iCustomerID, iLastUpdUsr, idatLastUpdDateFm, idatLastUpdDateTo, blnSrhAllFld, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCustomerMergeLogAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal oRsCustomerMergeLog As System.Data.DataSet, ByVal oRsCustomerMergePlyLog As System.Data.DataSet, ByVal strErr As String, ByVal iCustomerID As Long, ByVal iLastUpdUsr As String, ByVal idatLastUpdDateFm As String, ByVal idatLastUpdDateTo As String, ByVal blnSrhAllFld As Boolean, ByVal userState As Object)
            If (Me.getCustomerMergeLogOperationCompleted Is Nothing) Then
                Me.getCustomerMergeLogOperationCompleted = AddressOf Me.OngetCustomerMergeLogOperationCompleted
            End If
            Me.InvokeAsync("getCustomerMergeLog", New Object() {pstrUserId, istrEnv, oRsCustomerMergeLog, oRsCustomerMergePlyLog, strErr, iCustomerID, iLastUpdUsr, idatLastUpdDateFm, idatLastUpdDateTo, blnSrhAllFld}, Me.getCustomerMergeLogOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCustomerMergeLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCustomerMergeLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCustomerMergeLogCompleted(Me, New getCustomerMergeLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ccrUpdPlyAddrRs", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ccrUpdPlyAddrRs(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal rstPolicyAddress As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ccrUpdPlyAddrRs", New Object() {pstrUserId, istrEnv, rstPolicyAddress, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ccrUpdPlyAddrRsAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal rstPolicyAddress As System.Data.DataSet, ByVal strErr As String)
            Me.ccrUpdPlyAddrRsAsync(pstrUserId, istrEnv, rstPolicyAddress, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ccrUpdPlyAddrRsAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal rstPolicyAddress As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.ccrUpdPlyAddrRsOperationCompleted Is Nothing) Then
                Me.ccrUpdPlyAddrRsOperationCompleted = AddressOf Me.OnccrUpdPlyAddrRsOperationCompleted
            End If
            Me.InvokeAsync("ccrUpdPlyAddrRs", New Object() {pstrUserId, istrEnv, rstPolicyAddress, strErr}, Me.ccrUpdPlyAddrRsOperationCompleted, userState)
        End Sub
        
        Private Sub OnccrUpdPlyAddrRsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ccrUpdPlyAddrRsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ccrUpdPlyAddrRsCompleted(Me, New ccrUpdPlyAddrRsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetPolicyAddressByPlyNo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyAddressByPlyNo(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iPolicyNo As String, ByRef ods As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPolicyAddressByPlyNo", New Object() {pstrUserId, istrEnv, iPolicyNo, ods, strErr})
            ods = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyAddressByPlyNoAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iPolicyNo As String, ByVal ods As System.Data.DataSet, ByVal strErr As String)
            Me.GetPolicyAddressByPlyNoAsync(pstrUserId, istrEnv, iPolicyNo, ods, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyAddressByPlyNoAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iPolicyNo As String, ByVal ods As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPolicyAddressByPlyNoOperationCompleted Is Nothing) Then
                Me.GetPolicyAddressByPlyNoOperationCompleted = AddressOf Me.OnGetPolicyAddressByPlyNoOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyAddressByPlyNo", New Object() {pstrUserId, istrEnv, iPolicyNo, ods, strErr}, Me.GetPolicyAddressByPlyNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyAddressByPlyNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyAddressByPlyNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyAddressByPlyNoCompleted(Me, New GetPolicyAddressByPlyNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetOrdCClientRcd", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrdCClientRcd(ByVal pstrUserId As String, ByVal istrEnv As String, ByRef ds As System.Data.DataSet, ByRef strErr As String, ByVal iNANOList As String, ByVal iNACIW As Long, ByVal iNAIDLst As String, ByVal iPassportList As String, ByVal iblnExcludeCustAddr As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("GetOrdCClientRcd", New Object() {pstrUserId, istrEnv, ds, strErr, iNANOList, iNACIW, iNAIDLst, iPassportList, iblnExcludeCustAddr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrdCClientRcdAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal iNANOList As String, ByVal iNACIW As Long, ByVal iNAIDLst As String, ByVal iPassportList As String, ByVal iblnExcludeCustAddr As Boolean)
            Me.GetOrdCClientRcdAsync(pstrUserId, istrEnv, ds, strErr, iNANOList, iNACIW, iNAIDLst, iPassportList, iblnExcludeCustAddr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrdCClientRcdAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal iNANOList As String, ByVal iNACIW As Long, ByVal iNAIDLst As String, ByVal iPassportList As String, ByVal iblnExcludeCustAddr As Boolean, ByVal userState As Object)
            If (Me.GetOrdCClientRcdOperationCompleted Is Nothing) Then
                Me.GetOrdCClientRcdOperationCompleted = AddressOf Me.OnGetOrdCClientRcdOperationCompleted
            End If
            Me.InvokeAsync("GetOrdCClientRcd", New Object() {pstrUserId, istrEnv, ds, strErr, iNANOList, iNACIW, iNAIDLst, iPassportList, iblnExcludeCustAddr}, Me.GetOrdCClientRcdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrdCClientRcdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrdCClientRcdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrdCClientRcdCompleted(Me, New GetOrdCClientRcdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getORDCNA", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getORDCNA(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iNANOLst As String, ByVal iNACIW As Long, ByVal iNAIDLst As String, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("getORDCNA", New Object() {pstrUserId, istrEnv, iNANOLst, iNACIW, iNAIDLst, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getORDCNAAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iNANOLst As String, ByVal iNACIW As Long, ByVal iNAIDLst As String, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.getORDCNAAsync(pstrUserId, istrEnv, iNANOLst, iNACIW, iNAIDLst, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getORDCNAAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iNANOLst As String, ByVal iNACIW As Long, ByVal iNAIDLst As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.getORDCNAOperationCompleted Is Nothing) Then
                Me.getORDCNAOperationCompleted = AddressOf Me.OngetORDCNAOperationCompleted
            End If
            Me.InvokeAsync("getORDCNA", New Object() {pstrUserId, istrEnv, iNANOLst, iNACIW, iNAIDLst, ds, strErr}, Me.getORDCNAOperationCompleted, userState)
        End Sub
        
        Private Sub OngetORDCNAOperationCompleted(ByVal arg As Object)
            If (Not (Me.getORDCNACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getORDCNACompleted(Me, New getORDCNACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getORDCNA_SQL", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getORDCNA_SQL(ByVal pstrUserId As String, ByVal istrEnv As String, ByRef dsRtn As System.Data.DataSet, ByRef strErr As String, ByVal iNANOList As String, ByVal iNACIW As Long, ByVal iNAIDLst As String, ByVal iPassportList As String, ByVal iblnExcludeCustAddr As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("getORDCNA_SQL", New Object() {pstrUserId, istrEnv, dsRtn, strErr, iNANOList, iNACIW, iNAIDLst, iPassportList, iblnExcludeCustAddr})
            dsRtn = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getORDCNA_SQLAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal dsRtn As System.Data.DataSet, ByVal strErr As String, ByVal iNANOList As String, ByVal iNACIW As Long, ByVal iNAIDLst As String, ByVal iPassportList As String, ByVal iblnExcludeCustAddr As Boolean)
            Me.getORDCNA_SQLAsync(pstrUserId, istrEnv, dsRtn, strErr, iNANOList, iNACIW, iNAIDLst, iPassportList, iblnExcludeCustAddr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getORDCNA_SQLAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal dsRtn As System.Data.DataSet, ByVal strErr As String, ByVal iNANOList As String, ByVal iNACIW As Long, ByVal iNAIDLst As String, ByVal iPassportList As String, ByVal iblnExcludeCustAddr As Boolean, ByVal userState As Object)
            If (Me.getORDCNA_SQLOperationCompleted Is Nothing) Then
                Me.getORDCNA_SQLOperationCompleted = AddressOf Me.OngetORDCNA_SQLOperationCompleted
            End If
            Me.InvokeAsync("getORDCNA_SQL", New Object() {pstrUserId, istrEnv, dsRtn, strErr, iNANOList, iNACIW, iNAIDLst, iPassportList, iblnExcludeCustAddr}, Me.getORDCNA_SQLOperationCompleted, userState)
        End Sub
        
        Private Sub OngetORDCNA_SQLOperationCompleted(ByVal arg As Object)
            If (Not (Me.getORDCNA_SQLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getORDCNA_SQLCompleted(Me, New getORDCNA_SQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getORDUNA", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getORDUNA(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iNANOList As String, ByVal iNANOLike As String, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("getORDUNA", New Object() {pstrUserId, istrEnv, iNANOList, iNANOLike, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getORDUNAAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iNANOList As String, ByVal iNANOLike As String, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.getORDUNAAsync(pstrUserId, istrEnv, iNANOList, iNANOLike, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getORDUNAAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iNANOList As String, ByVal iNANOLike As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.getORDUNAOperationCompleted Is Nothing) Then
                Me.getORDUNAOperationCompleted = AddressOf Me.OngetORDUNAOperationCompleted
            End If
            Me.InvokeAsync("getORDUNA", New Object() {pstrUserId, istrEnv, iNANOList, iNANOLike, ds, strErr}, Me.getORDUNAOperationCompleted, userState)
        End Sub
        
        Private Sub OngetORDUNAOperationCompleted(ByVal arg As Object)
            If (Not (Me.getORDUNACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getORDUNACompleted(Me, New getORDUNACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getORDURL", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getORDURL(ByVal pstrUserId As String, ByVal istrEnv As String, ByRef dsPolicyRelation As System.Data.DataSet, ByVal iNANOList As String, ByVal iPlyList As String, ByVal iRelateList As String, ByVal iNANOLike As String, ByVal iCiwNo As Integer, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("getORDURL", New Object() {pstrUserId, istrEnv, dsPolicyRelation, iNANOList, iPlyList, iRelateList, iNANOLike, iCiwNo, strErr})
            dsPolicyRelation = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getORDURLAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal dsPolicyRelation As System.Data.DataSet, ByVal iNANOList As String, ByVal iPlyList As String, ByVal iRelateList As String, ByVal iNANOLike As String, ByVal iCiwNo As Integer, ByVal strErr As String)
            Me.getORDURLAsync(pstrUserId, istrEnv, dsPolicyRelation, iNANOList, iPlyList, iRelateList, iNANOLike, iCiwNo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getORDURLAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal dsPolicyRelation As System.Data.DataSet, ByVal iNANOList As String, ByVal iPlyList As String, ByVal iRelateList As String, ByVal iNANOLike As String, ByVal iCiwNo As Integer, ByVal strErr As String, ByVal userState As Object)
            If (Me.getORDURLOperationCompleted Is Nothing) Then
                Me.getORDURLOperationCompleted = AddressOf Me.OngetORDURLOperationCompleted
            End If
            Me.InvokeAsync("getORDURL", New Object() {pstrUserId, istrEnv, dsPolicyRelation, iNANOList, iPlyList, iRelateList, iNANOLike, iCiwNo, strErr}, Me.getORDURLOperationCompleted, userState)
        End Sub
        
        Private Sub OngetORDURLOperationCompleted(ByVal arg As Object)
            If (Not (Me.getORDURLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getORDURLCompleted(Me, New getORDURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLARelatedPolicy", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLARelatedPolicy(ByVal pstrUserId As String, ByVal istrEnv As String, ByRef dsPolicyRelation As System.Data.DataSet, ByRef strErr As String, ByRef iCiwNo As Long, ByRef sEAddrType As String, ByRef sCAddrType As String, ByVal iNANO As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLARelatedPolicy", New Object() {pstrUserId, istrEnv, dsPolicyRelation, strErr, iCiwNo, sEAddrType, sCAddrType, iNANO})
            dsPolicyRelation = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            iCiwNo = CType(results(3),Long)
            sEAddrType = CType(results(4),String)
            sCAddrType = CType(results(5),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLARelatedPolicyAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal dsPolicyRelation As System.Data.DataSet, ByVal strErr As String, ByVal iCiwNo As Long, ByVal sEAddrType As String, ByVal sCAddrType As String, ByVal iNANO As String)
            Me.GetLARelatedPolicyAsync(pstrUserId, istrEnv, dsPolicyRelation, strErr, iCiwNo, sEAddrType, sCAddrType, iNANO, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLARelatedPolicyAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal dsPolicyRelation As System.Data.DataSet, ByVal strErr As String, ByVal iCiwNo As Long, ByVal sEAddrType As String, ByVal sCAddrType As String, ByVal iNANO As String, ByVal userState As Object)
            If (Me.GetLARelatedPolicyOperationCompleted Is Nothing) Then
                Me.GetLARelatedPolicyOperationCompleted = AddressOf Me.OnGetLARelatedPolicyOperationCompleted
            End If
            Me.InvokeAsync("GetLARelatedPolicy", New Object() {pstrUserId, istrEnv, dsPolicyRelation, strErr, iCiwNo, sEAddrType, sCAddrType, iNANO}, Me.GetLARelatedPolicyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLARelatedPolicyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLARelatedPolicyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLARelatedPolicyCompleted(Me, New GetLARelatedPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getOrdUClientRcd", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getOrdUClientRcd(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iNANOList As String, ByVal iNANOLike As String, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("getOrdUClientRcd", New Object() {pstrUserId, istrEnv, iNANOList, iNANOLike, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getOrdUClientRcdAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iNANOList As String, ByVal iNANOLike As String, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.getOrdUClientRcdAsync(pstrUserId, istrEnv, iNANOList, iNANOLike, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getOrdUClientRcdAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iNANOList As String, ByVal iNANOLike As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.getOrdUClientRcdOperationCompleted Is Nothing) Then
                Me.getOrdUClientRcdOperationCompleted = AddressOf Me.OngetOrdUClientRcdOperationCompleted
            End If
            Me.InvokeAsync("getOrdUClientRcd", New Object() {pstrUserId, istrEnv, iNANOList, iNANOLike, ds, strErr}, Me.getOrdUClientRcdOperationCompleted, userState)
        End Sub
        
        Private Sub OngetOrdUClientRcdOperationCompleted(ByVal arg As Object)
            If (Not (Me.getOrdUClientRcdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getOrdUClientRcdCompleted(Me, New getOrdUClientRcdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getPolicyRelation", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPolicyRelation(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iNANOList As String, ByVal iPlyList As String, ByVal iRelateList As String, ByVal iNANOLike As String, ByVal iCiwNo As Long, ByRef ds400URL As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("getPolicyRelation", New Object() {pstrUserId, istrEnv, iNANOList, iPlyList, iRelateList, iNANOLike, iCiwNo, ds400URL, strErr})
            ds400URL = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPolicyRelationAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iNANOList As String, ByVal iPlyList As String, ByVal iRelateList As String, ByVal iNANOLike As String, ByVal iCiwNo As Long, ByVal ds400URL As System.Data.DataSet, ByVal strErr As String)
            Me.getPolicyRelationAsync(pstrUserId, istrEnv, iNANOList, iPlyList, iRelateList, iNANOLike, iCiwNo, ds400URL, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPolicyRelationAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iNANOList As String, ByVal iPlyList As String, ByVal iRelateList As String, ByVal iNANOLike As String, ByVal iCiwNo As Long, ByVal ds400URL As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.getPolicyRelationOperationCompleted Is Nothing) Then
                Me.getPolicyRelationOperationCompleted = AddressOf Me.OngetPolicyRelationOperationCompleted
            End If
            Me.InvokeAsync("getPolicyRelation", New Object() {pstrUserId, istrEnv, iNANOList, iPlyList, iRelateList, iNANOLike, iCiwNo, ds400URL, strErr}, Me.getPolicyRelationOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPolicyRelationOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPolicyRelationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPolicyRelationCompleted(Me, New getPolicyRelationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getLAClientNo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getLAClientNo(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iCustNo As String, ByVal sAddrType As String, ByRef strErr As String, ByRef sLAClientNo_Client As String, ByRef sLAClientNo_Alt As String) As String
            Dim results() As Object = Me.Invoke("getLAClientNo", New Object() {pstrUserId, istrEnv, iCustNo, sAddrType, strErr, sLAClientNo_Client, sLAClientNo_Alt})
            strErr = CType(results(1),String)
            sLAClientNo_Client = CType(results(2),String)
            sLAClientNo_Alt = CType(results(3),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getLAClientNoAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iCustNo As String, ByVal sAddrType As String, ByVal strErr As String, ByVal sLAClientNo_Client As String, ByVal sLAClientNo_Alt As String)
            Me.getLAClientNoAsync(pstrUserId, istrEnv, iCustNo, sAddrType, strErr, sLAClientNo_Client, sLAClientNo_Alt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getLAClientNoAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iCustNo As String, ByVal sAddrType As String, ByVal strErr As String, ByVal sLAClientNo_Client As String, ByVal sLAClientNo_Alt As String, ByVal userState As Object)
            If (Me.getLAClientNoOperationCompleted Is Nothing) Then
                Me.getLAClientNoOperationCompleted = AddressOf Me.OngetLAClientNoOperationCompleted
            End If
            Me.InvokeAsync("getLAClientNo", New Object() {pstrUserId, istrEnv, iCustNo, sAddrType, strErr, sLAClientNo_Client, sLAClientNo_Alt}, Me.getLAClientNoOperationCompleted, userState)
        End Sub
        
        Private Sub OngetLAClientNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.getLAClientNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getLAClientNoCompleted(Me, New getLAClientNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetAddrTypeCodeByLA", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAddrTypeCodeByLA(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iLAClientNo As String, ByRef sAddrType As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAddrTypeCodeByLA", New Object() {pstrUserId, istrEnv, iLAClientNo, sAddrType, strErr})
            sAddrType = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAddrTypeCodeByLAAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iLAClientNo As String, ByVal sAddrType As String, ByVal strErr As String)
            Me.GetAddrTypeCodeByLAAsync(pstrUserId, istrEnv, iLAClientNo, sAddrType, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAddrTypeCodeByLAAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iLAClientNo As String, ByVal sAddrType As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetAddrTypeCodeByLAOperationCompleted Is Nothing) Then
                Me.GetAddrTypeCodeByLAOperationCompleted = AddressOf Me.OnGetAddrTypeCodeByLAOperationCompleted
            End If
            Me.InvokeAsync("GetAddrTypeCodeByLA", New Object() {pstrUserId, istrEnv, iLAClientNo, sAddrType, strErr}, Me.GetAddrTypeCodeByLAOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAddrTypeCodeByLAOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAddrTypeCodeByLACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAddrTypeCodeByLACompleted(Me, New GetAddrTypeCodeByLACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/PassInSQL", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PassInSQL(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal strSql As String, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("PassInSQL", New Object() {pstrUserId, istrEnv, strSql, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PassInSQLAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal strSql As String, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.PassInSQLAsync(pstrUserId, istrEnv, strSql, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PassInSQLAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal strSql As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.PassInSQLOperationCompleted Is Nothing) Then
                Me.PassInSQLOperationCompleted = AddressOf Me.OnPassInSQLOperationCompleted
            End If
            Me.InvokeAsync("PassInSQL", New Object() {pstrUserId, istrEnv, strSql, ds, strErr}, Me.PassInSQLOperationCompleted, userState)
        End Sub
        
        Private Sub OnPassInSQLOperationCompleted(ByVal arg As Object)
            If (Not (Me.PassInSQLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PassInSQLCompleted(Me, New PassInSQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetInqClientRole", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInqClientRole(ByRef dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetInqClientRole", New Object() {dsSendData, dsReceData, strErr})
            dsSendData = CType(results(1),System.Data.DataSet)
            dsReceData = CType(results(2),System.Data.DataSet)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInqClientRoleAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetInqClientRoleAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInqClientRoleAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetInqClientRoleOperationCompleted Is Nothing) Then
                Me.GetInqClientRoleOperationCompleted = AddressOf Me.OnGetInqClientRoleOperationCompleted
            End If
            Me.InvokeAsync("GetInqClientRole", New Object() {dsSendData, dsReceData, strErr}, Me.GetInqClientRoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInqClientRoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInqClientRoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInqClientRoleCompleted(Me, New GetInqClientRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getCustHeadInfo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCustHeadInfo(ByVal pCompID As String, ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iCustomerID As Integer, ByRef ErrStr As String, ByRef ds As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("getCustHeadInfo", New Object() {pCompID, pstrUserId, istrEnv, iCustomerID, ErrStr, ds})
            ErrStr = CType(results(1),String)
            ds = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCustHeadInfoAsync(ByVal pCompID As String, ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iCustomerID As Integer, ByVal ErrStr As String, ByVal ds As System.Data.DataSet)
            Me.getCustHeadInfoAsync(pCompID, pstrUserId, istrEnv, iCustomerID, ErrStr, ds, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCustHeadInfoAsync(ByVal pCompID As String, ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iCustomerID As Integer, ByVal ErrStr As String, ByVal ds As System.Data.DataSet, ByVal userState As Object)
            If (Me.getCustHeadInfoOperationCompleted Is Nothing) Then
                Me.getCustHeadInfoOperationCompleted = AddressOf Me.OngetCustHeadInfoOperationCompleted
            End If
            Me.InvokeAsync("getCustHeadInfo", New Object() {pCompID, pstrUserId, istrEnv, iCustomerID, ErrStr, ds}, Me.getCustHeadInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCustHeadInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCustHeadInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCustHeadInfoCompleted(Me, New getCustHeadInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/EnqClientBank", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EnqClientBank(ByVal dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("EnqClientBank", New Object() {dsSendData, dsReceData, strErr})
            dsReceData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EnqClientBankAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.EnqClientBankAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EnqClientBankAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.EnqClientBankOperationCompleted Is Nothing) Then
                Me.EnqClientBankOperationCompleted = AddressOf Me.OnEnqClientBankOperationCompleted
            End If
            Me.InvokeAsync("EnqClientBank", New Object() {dsSendData, dsReceData, strErr}, Me.EnqClientBankOperationCompleted, userState)
        End Sub
        
        Private Sub OnEnqClientBankOperationCompleted(ByVal arg As Object)
            If (Not (Me.EnqClientBankCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EnqClientBankCompleted(Me, New EnqClientBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdClientBank", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdClientBank(ByVal dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdClientBank", New Object() {dsSendData, dsReceData, strErr})
            dsReceData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdClientBankAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.UpdClientBankAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdClientBankAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdClientBankOperationCompleted Is Nothing) Then
                Me.UpdClientBankOperationCompleted = AddressOf Me.OnUpdClientBankOperationCompleted
            End If
            Me.InvokeAsync("UpdClientBank", New Object() {dsSendData, dsReceData, strErr}, Me.UpdClientBankOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdClientBankOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdClientBankCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdClientBankCompleted(Me, New UpdClientBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CRTClientBank", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CRTClientBank(ByVal dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CRTClientBank", New Object() {dsSendData, dsReceData, strErr})
            dsReceData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CRTClientBankAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.CRTClientBankAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CRTClientBankAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.CRTClientBankOperationCompleted Is Nothing) Then
                Me.CRTClientBankOperationCompleted = AddressOf Me.OnCRTClientBankOperationCompleted
            End If
            Me.InvokeAsync("CRTClientBank", New Object() {dsSendData, dsReceData, strErr}, Me.CRTClientBankOperationCompleted, userState)
        End Sub
        
        Private Sub OnCRTClientBankOperationCompleted(ByVal arg As Object)
            If (Not (Me.CRTClientBankCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CRTClientBankCompleted(Me, New CRTClientBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetMandate", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMandate(ByVal dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetMandate", New Object() {dsSendData, dsReceData, strErr})
            dsReceData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMandateAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetMandateAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMandateAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetMandateOperationCompleted Is Nothing) Then
                Me.GetMandateOperationCompleted = AddressOf Me.OnGetMandateOperationCompleted
            End If
            Me.InvokeAsync("GetMandate", New Object() {dsSendData, dsReceData, strErr}, Me.GetMandateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMandateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMandateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMandateCompleted(Me, New GetMandateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/CreateMandate", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateMandate(ByVal dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CreateMandate", New Object() {dsSendData, dsReceData, strErr})
            dsReceData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateMandateAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.CreateMandateAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateMandateAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.CreateMandateOperationCompleted Is Nothing) Then
                Me.CreateMandateOperationCompleted = AddressOf Me.OnCreateMandateOperationCompleted
            End If
            Me.InvokeAsync("CreateMandate", New Object() {dsSendData, dsReceData, strErr}, Me.CreateMandateOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateMandateOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateMandateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateMandateCompleted(Me, New CreateMandateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdateMandate", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMandate(ByVal dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateMandate", New Object() {dsSendData, dsReceData, strErr})
            dsReceData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMandateAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.UpdateMandateAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMandateAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateMandateOperationCompleted Is Nothing) Then
                Me.UpdateMandateOperationCompleted = AddressOf Me.OnUpdateMandateOperationCompleted
            End If
            Me.InvokeAsync("UpdateMandate", New Object() {dsSendData, dsReceData, strErr}, Me.UpdateMandateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMandateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMandateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMandateCompleted(Me, New UpdateMandateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ImportExcel", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportExcel(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal data() As Byte, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("ImportExcel", New Object() {data, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportExcelAsync(ByVal data() As Byte, ByVal strError As String)
            Me.ImportExcelAsync(data, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportExcelAsync(ByVal data() As Byte, ByVal strError As String, ByVal userState As Object)
            If (Me.ImportExcelOperationCompleted Is Nothing) Then
                Me.ImportExcelOperationCompleted = AddressOf Me.OnImportExcelOperationCompleted
            End If
            Me.InvokeAsync("ImportExcel", New Object() {data, strError}, Me.ImportExcelOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportExcelOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportExcelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportExcelCompleted(Me, New ImportExcelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdateRiskLevel", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateRiskLevel(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal lngCIWNo As Long, ByVal strRiskLevel As String, ByVal dteRiskLevelDate As Date, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateRiskLevel", New Object() {pstrUserId, istrEnv, lngCIWNo, strRiskLevel, dteRiskLevelDate, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateRiskLevelAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal lngCIWNo As Long, ByVal strRiskLevel As String, ByVal dteRiskLevelDate As Date, ByVal strErr As String)
            Me.UpdateRiskLevelAsync(pstrUserId, istrEnv, lngCIWNo, strRiskLevel, dteRiskLevelDate, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateRiskLevelAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal lngCIWNo As Long, ByVal strRiskLevel As String, ByVal dteRiskLevelDate As Date, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateRiskLevelOperationCompleted Is Nothing) Then
                Me.UpdateRiskLevelOperationCompleted = AddressOf Me.OnUpdateRiskLevelOperationCompleted
            End If
            Me.InvokeAsync("UpdateRiskLevel", New Object() {pstrUserId, istrEnv, lngCIWNo, strRiskLevel, dteRiskLevelDate, strErr}, Me.UpdateRiskLevelOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateRiskLevelOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateRiskLevelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateRiskLevelCompleted(Me, New UpdateRiskLevelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdateRiskLevelFreezeList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateRiskLevelFreezeList(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal lngCIWNo As Long, ByVal strRiskLevel As String, ByVal dteRiskLevelDate As Date, ByVal strFreezeList As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateRiskLevelFreezeList", New Object() {pstrUserId, istrEnv, lngCIWNo, strRiskLevel, dteRiskLevelDate, strFreezeList, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateRiskLevelFreezeListAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal lngCIWNo As Long, ByVal strRiskLevel As String, ByVal dteRiskLevelDate As Date, ByVal strFreezeList As String, ByVal strErr As String)
            Me.UpdateRiskLevelFreezeListAsync(pstrUserId, istrEnv, lngCIWNo, strRiskLevel, dteRiskLevelDate, strFreezeList, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateRiskLevelFreezeListAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal lngCIWNo As Long, ByVal strRiskLevel As String, ByVal dteRiskLevelDate As Date, ByVal strFreezeList As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateRiskLevelFreezeListOperationCompleted Is Nothing) Then
                Me.UpdateRiskLevelFreezeListOperationCompleted = AddressOf Me.OnUpdateRiskLevelFreezeListOperationCompleted
            End If
            Me.InvokeAsync("UpdateRiskLevelFreezeList", New Object() {pstrUserId, istrEnv, lngCIWNo, strRiskLevel, dteRiskLevelDate, strFreezeList, strErr}, Me.UpdateRiskLevelFreezeListOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateRiskLevelFreezeListOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateRiskLevelFreezeListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateRiskLevelFreezeListCompleted(Me, New UpdateRiskLevelFreezeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/FetchPath", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FetchPath(ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("FetchPath", New Object() {ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FetchPathAsync(ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.FetchPathAsync(ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FetchPathAsync(ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.FetchPathOperationCompleted Is Nothing) Then
                Me.FetchPathOperationCompleted = AddressOf Me.OnFetchPathOperationCompleted
            End If
            Me.InvokeAsync("FetchPath", New Object() {ds, strError}, Me.FetchPathOperationCompleted, userState)
        End Sub
        
        Private Sub OnFetchPathOperationCompleted(ByVal arg As Object)
            If (Not (Me.FetchPathCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FetchPathCompleted(Me, New FetchPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdateHeader", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateHeader(ByVal strUploadPath As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateHeader", New Object() {strUploadPath, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateHeaderAsync(ByVal strUploadPath As String, ByVal strError As String)
            Me.UpdateHeaderAsync(strUploadPath, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateHeaderAsync(ByVal strUploadPath As String, ByVal strError As String, ByVal userState As Object)
            If (Me.UpdateHeaderOperationCompleted Is Nothing) Then
                Me.UpdateHeaderOperationCompleted = AddressOf Me.OnUpdateHeaderOperationCompleted
            End If
            Me.InvokeAsync("UpdateHeader", New Object() {strUploadPath, strError}, Me.UpdateHeaderOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateHeaderOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateHeaderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateHeaderCompleted(Me, New UpdateHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/HeaderInfoFiller", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HeaderInfoFiller(ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("HeaderInfoFiller", New Object() {ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HeaderInfoFillerAsync(ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.HeaderInfoFillerAsync(ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HeaderInfoFillerAsync(ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.HeaderInfoFillerOperationCompleted Is Nothing) Then
                Me.HeaderInfoFillerOperationCompleted = AddressOf Me.OnHeaderInfoFillerOperationCompleted
            End If
            Me.InvokeAsync("HeaderInfoFiller", New Object() {ds, strError}, Me.HeaderInfoFillerOperationCompleted, userState)
        End Sub
        
        Private Sub OnHeaderInfoFillerOperationCompleted(ByVal arg As Object)
            If (Not (Me.HeaderInfoFillerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HeaderInfoFillerCompleted(Me, New HeaderInfoFillerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/FreezeListCheck", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FreezeListCheck(ByRef IsEnhanced As Boolean, ByRef EngName1 As String, ByRef EngName2 As String, ByRef ChName As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("FreezeListCheck", New Object() {IsEnhanced, EngName1, EngName2, ChName, strError})
            IsEnhanced = CType(results(1),Boolean)
            EngName1 = CType(results(2),String)
            EngName2 = CType(results(3),String)
            ChName = CType(results(4),String)
            strError = CType(results(5),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FreezeListCheckAsync(ByVal IsEnhanced As Boolean, ByVal EngName1 As String, ByVal EngName2 As String, ByVal ChName As String, ByVal strError As String)
            Me.FreezeListCheckAsync(IsEnhanced, EngName1, EngName2, ChName, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FreezeListCheckAsync(ByVal IsEnhanced As Boolean, ByVal EngName1 As String, ByVal EngName2 As String, ByVal ChName As String, ByVal strError As String, ByVal userState As Object)
            If (Me.FreezeListCheckOperationCompleted Is Nothing) Then
                Me.FreezeListCheckOperationCompleted = AddressOf Me.OnFreezeListCheckOperationCompleted
            End If
            Me.InvokeAsync("FreezeListCheck", New Object() {IsEnhanced, EngName1, EngName2, ChName, strError}, Me.FreezeListCheckOperationCompleted, userState)
        End Sub
        
        Private Sub OnFreezeListCheckOperationCompleted(ByVal arg As Object)
            If (Not (Me.FreezeListCheckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FreezeListCheckCompleted(Me, New FreezeListCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/RiskLevelCheck", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RiskLevelCheck(ByRef intCusID As Integer, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("RiskLevelCheck", New Object() {intCusID, strError})
            intCusID = CType(results(1),Integer)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RiskLevelCheckAsync(ByVal intCusID As Integer, ByVal strError As String)
            Me.RiskLevelCheckAsync(intCusID, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RiskLevelCheckAsync(ByVal intCusID As Integer, ByVal strError As String, ByVal userState As Object)
            If (Me.RiskLevelCheckOperationCompleted Is Nothing) Then
                Me.RiskLevelCheckOperationCompleted = AddressOf Me.OnRiskLevelCheckOperationCompleted
            End If
            Me.InvokeAsync("RiskLevelCheck", New Object() {intCusID, strError}, Me.RiskLevelCheckOperationCompleted, userState)
        End Sub
        
        Private Sub OnRiskLevelCheckOperationCompleted(ByVal arg As Object)
            If (Not (Me.RiskLevelCheckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RiskLevelCheckCompleted(Me, New RiskLevelCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/IsOneOffPlan", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsOneOffPlan(ByVal strPolicyNo As String, ByRef IsOneOff As Boolean, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("IsOneOffPlan", New Object() {strPolicyNo, IsOneOff, strErr})
            IsOneOff = CType(results(1),Boolean)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsOneOffPlanAsync(ByVal strPolicyNo As String, ByVal IsOneOff As Boolean, ByVal strErr As String)
            Me.IsOneOffPlanAsync(strPolicyNo, IsOneOff, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsOneOffPlanAsync(ByVal strPolicyNo As String, ByVal IsOneOff As Boolean, ByVal strErr As String, ByVal userState As Object)
            If (Me.IsOneOffPlanOperationCompleted Is Nothing) Then
                Me.IsOneOffPlanOperationCompleted = AddressOf Me.OnIsOneOffPlanOperationCompleted
            End If
            Me.InvokeAsync("IsOneOffPlan", New Object() {strPolicyNo, IsOneOff, strErr}, Me.IsOneOffPlanOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsOneOffPlanOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsOneOffPlanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsOneOffPlanCompleted(Me, New IsOneOffPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetClientBankSysInfo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientBankSysInfo(ByVal strSrc() As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetClientBankSysInfo", New Object() {strSrc, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClientBankSysInfoAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetClientBankSysInfoAsync(strSrc, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClientBankSysInfoAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetClientBankSysInfoOperationCompleted Is Nothing) Then
                Me.GetClientBankSysInfoOperationCompleted = AddressOf Me.OnGetClientBankSysInfoOperationCompleted
            End If
            Me.InvokeAsync("GetClientBankSysInfo", New Object() {strSrc, ds, strError}, Me.GetClientBankSysInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClientBankSysInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClientBankSysInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClientBankSysInfoCompleted(Me, New GetClientBankSysInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ccrMergeClient", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ccrMergeClient(ByVal TranID As Integer, ByVal pCompID As String, ByVal pstrUserId As String, ByVal istrEnv As String, ByVal strMsg As String, ByVal lngCIWNoFrom As Long, ByVal lngCIWNoTo As Long, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ccrMergeClient", New Object() {TranID, pCompID, pstrUserId, istrEnv, strMsg, lngCIWNoFrom, lngCIWNoTo, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ccrMergeClientAsync(ByVal TranID As Integer, ByVal pCompID As String, ByVal pstrUserId As String, ByVal istrEnv As String, ByVal strMsg As String, ByVal lngCIWNoFrom As Long, ByVal lngCIWNoTo As Long, ByVal strErr As String)
            Me.ccrMergeClientAsync(TranID, pCompID, pstrUserId, istrEnv, strMsg, lngCIWNoFrom, lngCIWNoTo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ccrMergeClientAsync(ByVal TranID As Integer, ByVal pCompID As String, ByVal pstrUserId As String, ByVal istrEnv As String, ByVal strMsg As String, ByVal lngCIWNoFrom As Long, ByVal lngCIWNoTo As Long, ByVal strErr As String, ByVal userState As Object)
            If (Me.ccrMergeClientOperationCompleted Is Nothing) Then
                Me.ccrMergeClientOperationCompleted = AddressOf Me.OnccrMergeClientOperationCompleted
            End If
            Me.InvokeAsync("ccrMergeClient", New Object() {TranID, pCompID, pstrUserId, istrEnv, strMsg, lngCIWNoFrom, lngCIWNoTo, strErr}, Me.ccrMergeClientOperationCompleted, userState)
        End Sub
        
        Private Sub OnccrMergeClientOperationCompleted(ByVal arg As Object)
            If (Not (Me.ccrMergeClientCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ccrMergeClientCompleted(Me, New ccrMergeClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ChkClientMergeProgress", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChkClientMergeProgress(ByVal pCompID As String, ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iCIWNo As Integer, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ChkClientMergeProgress", New Object() {pCompID, pstrUserId, istrEnv, iCIWNo, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChkClientMergeProgressAsync(ByVal pCompID As String, ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iCIWNo As Integer, ByVal strErr As String)
            Me.ChkClientMergeProgressAsync(pCompID, pstrUserId, istrEnv, iCIWNo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChkClientMergeProgressAsync(ByVal pCompID As String, ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iCIWNo As Integer, ByVal strErr As String, ByVal userState As Object)
            If (Me.ChkClientMergeProgressOperationCompleted Is Nothing) Then
                Me.ChkClientMergeProgressOperationCompleted = AddressOf Me.OnChkClientMergeProgressOperationCompleted
            End If
            Me.InvokeAsync("ChkClientMergeProgress", New Object() {pCompID, pstrUserId, istrEnv, iCIWNo, strErr}, Me.ChkClientMergeProgressOperationCompleted, userState)
        End Sub
        
        Private Sub OnChkClientMergeProgressOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChkClientMergeProgressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChkClientMergeProgressCompleted(Me, New ChkClientMergeProgressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/getClientMergeTransLog", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getClientMergeTransLog(ByVal pstrUserId As String, ByVal istrEnv As String, ByRef ods As System.Data.DataSet, ByRef strErr As String, ByVal strStatus As String, ByVal iLastUpdUsr As String, ByVal idatLastUpdDateFm As String, ByVal idatLastUpdDateTo As String) As Boolean
            Dim results() As Object = Me.Invoke("getClientMergeTransLog", New Object() {pstrUserId, istrEnv, ods, strErr, strStatus, iLastUpdUsr, idatLastUpdDateFm, idatLastUpdDateTo})
            ods = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getClientMergeTransLogAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal ods As System.Data.DataSet, ByVal strErr As String, ByVal strStatus As String, ByVal iLastUpdUsr As String, ByVal idatLastUpdDateFm As String, ByVal idatLastUpdDateTo As String)
            Me.getClientMergeTransLogAsync(pstrUserId, istrEnv, ods, strErr, strStatus, iLastUpdUsr, idatLastUpdDateFm, idatLastUpdDateTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getClientMergeTransLogAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal ods As System.Data.DataSet, ByVal strErr As String, ByVal strStatus As String, ByVal iLastUpdUsr As String, ByVal idatLastUpdDateFm As String, ByVal idatLastUpdDateTo As String, ByVal userState As Object)
            If (Me.getClientMergeTransLogOperationCompleted Is Nothing) Then
                Me.getClientMergeTransLogOperationCompleted = AddressOf Me.OngetClientMergeTransLogOperationCompleted
            End If
            Me.InvokeAsync("getClientMergeTransLog", New Object() {pstrUserId, istrEnv, ods, strErr, strStatus, iLastUpdUsr, idatLastUpdDateFm, idatLastUpdDateTo}, Me.getClientMergeTransLogOperationCompleted, userState)
        End Sub
        
        Private Sub OngetClientMergeTransLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.getClientMergeTransLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getClientMergeTransLogCompleted(Me, New getClientMergeTransLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetClientMatchControlReportPrtInfo", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientMatchControlReportPrtInfo(ByVal strSrc() As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetClientMatchControlReportPrtInfo", New Object() {strSrc, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClientMatchControlReportPrtInfoAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetClientMatchControlReportPrtInfoAsync(strSrc, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClientMatchControlReportPrtInfoAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetClientMatchControlReportPrtInfoOperationCompleted Is Nothing) Then
                Me.GetClientMatchControlReportPrtInfoOperationCompleted = AddressOf Me.OnGetClientMatchControlReportPrtInfoOperationCompleted
            End If
            Me.InvokeAsync("GetClientMatchControlReportPrtInfo", New Object() {strSrc, ds, strError}, Me.GetClientMatchControlReportPrtInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClientMatchControlReportPrtInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClientMatchControlReportPrtInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClientMatchControlReportPrtInfoCompleted(Me, New GetClientMatchControlReportPrtInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/llmUpdateLetterLibrary", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function llmUpdateLetterLibrary(ByVal ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("llmUpdateLetterLibrary", New Object() {ds, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub llmUpdateLetterLibraryAsync(ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.llmUpdateLetterLibraryAsync(ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub llmUpdateLetterLibraryAsync(ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.llmUpdateLetterLibraryOperationCompleted Is Nothing) Then
                Me.llmUpdateLetterLibraryOperationCompleted = AddressOf Me.OnllmUpdateLetterLibraryOperationCompleted
            End If
            Me.InvokeAsync("llmUpdateLetterLibrary", New Object() {ds, strError}, Me.llmUpdateLetterLibraryOperationCompleted, userState)
        End Sub
        
        Private Sub OnllmUpdateLetterLibraryOperationCompleted(ByVal arg As Object)
            If (Not (Me.llmUpdateLetterLibraryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent llmUpdateLetterLibraryCompleted(Me, New llmUpdateLetterLibraryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/llmGetLetterLibrary", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function llmGetLetterLibrary(ByVal strBranchCode As String, ByVal strReportCode As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("llmGetLetterLibrary", New Object() {strBranchCode, strReportCode, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub llmGetLetterLibraryAsync(ByVal strBranchCode As String, ByVal strReportCode As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.llmGetLetterLibraryAsync(strBranchCode, strReportCode, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub llmGetLetterLibraryAsync(ByVal strBranchCode As String, ByVal strReportCode As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.llmGetLetterLibraryOperationCompleted Is Nothing) Then
                Me.llmGetLetterLibraryOperationCompleted = AddressOf Me.OnllmGetLetterLibraryOperationCompleted
            End If
            Me.InvokeAsync("llmGetLetterLibrary", New Object() {strBranchCode, strReportCode, ds, strError}, Me.llmGetLetterLibraryOperationCompleted, userState)
        End Sub
        
        Private Sub OnllmGetLetterLibraryOperationCompleted(ByVal arg As Object)
            If (Not (Me.llmGetLetterLibraryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent llmGetLetterLibraryCompleted(Me, New llmGetLetterLibraryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLetterhead", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLetterhead(ByVal strBranchCode As String, ByVal strReportCode As String, ByRef dt As System.Data.DataTable, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLetterhead", New Object() {strBranchCode, strReportCode, dt, strError})
            dt = CType(results(1),System.Data.DataTable)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLetterheadAsync(ByVal strBranchCode As String, ByVal strReportCode As String, ByVal dt As System.Data.DataTable, ByVal strError As String)
            Me.GetLetterheadAsync(strBranchCode, strReportCode, dt, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLetterheadAsync(ByVal strBranchCode As String, ByVal strReportCode As String, ByVal dt As System.Data.DataTable, ByVal strError As String, ByVal userState As Object)
            If (Me.GetLetterheadOperationCompleted Is Nothing) Then
                Me.GetLetterheadOperationCompleted = AddressOf Me.OnGetLetterheadOperationCompleted
            End If
            Me.InvokeAsync("GetLetterhead", New Object() {strBranchCode, strReportCode, dt, strError}, Me.GetLetterheadOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLetterheadOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLetterheadCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLetterheadCompleted(Me, New GetLetterheadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetSysBusinessDate", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSysBusinessDate(ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSysBusinessDate", New Object() {ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSysBusinessDateAsync(ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetSysBusinessDateAsync(ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSysBusinessDateAsync(ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetSysBusinessDateOperationCompleted Is Nothing) Then
                Me.GetSysBusinessDateOperationCompleted = AddressOf Me.OnGetSysBusinessDateOperationCompleted
            End If
            Me.InvokeAsync("GetSysBusinessDate", New Object() {ds, strError}, Me.GetSysBusinessDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSysBusinessDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSysBusinessDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSysBusinessDateCompleted(Me, New GetSysBusinessDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/IsBlackListed", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsBlackListed(ByRef pstrUserId As String, ByVal istrEnv As String, ByVal iCustomerID As Long) As Boolean
            Dim results() As Object = Me.Invoke("IsBlackListed", New Object() {pstrUserId, istrEnv, iCustomerID})
            pstrUserId = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsBlackListedAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iCustomerID As Long)
            Me.IsBlackListedAsync(pstrUserId, istrEnv, iCustomerID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsBlackListedAsync(ByVal pstrUserId As String, ByVal istrEnv As String, ByVal iCustomerID As Long, ByVal userState As Object)
            If (Me.IsBlackListedOperationCompleted Is Nothing) Then
                Me.IsBlackListedOperationCompleted = AddressOf Me.OnIsBlackListedOperationCompleted
            End If
            Me.InvokeAsync("IsBlackListed", New Object() {pstrUserId, istrEnv, iCustomerID}, Me.IsBlackListedOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsBlackListedOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsBlackListedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsBlackListedCompleted(Me, New IsBlackListedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ccsGetPaymentDetail", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ccsGetPaymentDetail(ByVal pStrEnv As String, ByVal dateFrom As Date, ByVal dateTo As Date, ByVal pstrCriteria As String, ByVal pstrCriteriaValue As String, ByRef ds As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ccsGetPaymentDetail", New Object() {pStrEnv, dateFrom, dateTo, pstrCriteria, pstrCriteriaValue, ds, strErr})
            ds = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ccsGetPaymentDetailAsync(ByVal pStrEnv As String, ByVal dateFrom As Date, ByVal dateTo As Date, ByVal pstrCriteria As String, ByVal pstrCriteriaValue As String, ByVal ds As System.Data.DataSet, ByVal strErr As String)
            Me.ccsGetPaymentDetailAsync(pStrEnv, dateFrom, dateTo, pstrCriteria, pstrCriteriaValue, ds, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ccsGetPaymentDetailAsync(ByVal pStrEnv As String, ByVal dateFrom As Date, ByVal dateTo As Date, ByVal pstrCriteria As String, ByVal pstrCriteriaValue As String, ByVal ds As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.ccsGetPaymentDetailOperationCompleted Is Nothing) Then
                Me.ccsGetPaymentDetailOperationCompleted = AddressOf Me.OnccsGetPaymentDetailOperationCompleted
            End If
            Me.InvokeAsync("ccsGetPaymentDetail", New Object() {pStrEnv, dateFrom, dateTo, pstrCriteria, pstrCriteriaValue, ds, strErr}, Me.ccsGetPaymentDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnccsGetPaymentDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.ccsGetPaymentDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ccsGetPaymentDetailCompleted(Me, New ccsGetPaymentDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ccsGetPPSPaymentDetail", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ccsGetPPSPaymentDetail(ByVal pStrEnv As String, ByVal dateFrom As Date, ByVal dateTo As Date, ByVal pstrCriteria As String, ByVal pstrCriteriaValue As String, ByRef dt As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ccsGetPPSPaymentDetail", New Object() {pStrEnv, dateFrom, dateTo, pstrCriteria, pstrCriteriaValue, dt, strErr})
            dt = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ccsGetPPSPaymentDetailAsync(ByVal pStrEnv As String, ByVal dateFrom As Date, ByVal dateTo As Date, ByVal pstrCriteria As String, ByVal pstrCriteriaValue As String, ByVal dt As System.Data.DataTable, ByVal strErr As String)
            Me.ccsGetPPSPaymentDetailAsync(pStrEnv, dateFrom, dateTo, pstrCriteria, pstrCriteriaValue, dt, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ccsGetPPSPaymentDetailAsync(ByVal pStrEnv As String, ByVal dateFrom As Date, ByVal dateTo As Date, ByVal pstrCriteria As String, ByVal pstrCriteriaValue As String, ByVal dt As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.ccsGetPPSPaymentDetailOperationCompleted Is Nothing) Then
                Me.ccsGetPPSPaymentDetailOperationCompleted = AddressOf Me.OnccsGetPPSPaymentDetailOperationCompleted
            End If
            Me.InvokeAsync("ccsGetPPSPaymentDetail", New Object() {pStrEnv, dateFrom, dateTo, pstrCriteria, pstrCriteriaValue, dt, strErr}, Me.ccsGetPPSPaymentDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnccsGetPPSPaymentDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.ccsGetPPSPaymentDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ccsGetPPSPaymentDetailCompleted(Me, New ccsGetPPSPaymentDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ccsGetCapsilPaymentDetail", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ccsGetCapsilPaymentDetail(ByVal dateFrom As Date, ByVal dateTo As Date, ByRef dt As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ccsGetCapsilPaymentDetail", New Object() {dateFrom, dateTo, dt, strErr})
            dt = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ccsGetCapsilPaymentDetailAsync(ByVal dateFrom As Date, ByVal dateTo As Date, ByVal dt As System.Data.DataTable, ByVal strErr As String)
            Me.ccsGetCapsilPaymentDetailAsync(dateFrom, dateTo, dt, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ccsGetCapsilPaymentDetailAsync(ByVal dateFrom As Date, ByVal dateTo As Date, ByVal dt As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.ccsGetCapsilPaymentDetailOperationCompleted Is Nothing) Then
                Me.ccsGetCapsilPaymentDetailOperationCompleted = AddressOf Me.OnccsGetCapsilPaymentDetailOperationCompleted
            End If
            Me.InvokeAsync("ccsGetCapsilPaymentDetail", New Object() {dateFrom, dateTo, dt, strErr}, Me.ccsGetCapsilPaymentDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnccsGetCapsilPaymentDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.ccsGetCapsilPaymentDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ccsGetCapsilPaymentDetailCompleted(Me, New ccsGetCapsilPaymentDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ccsGetLifeAsiaPaymentDetail", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ccsGetLifeAsiaPaymentDetail(ByVal dateFrom As Date, ByVal dateTo As Date, ByRef dt As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ccsGetLifeAsiaPaymentDetail", New Object() {dateFrom, dateTo, dt, strErr})
            dt = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ccsGetLifeAsiaPaymentDetailAsync(ByVal dateFrom As Date, ByVal dateTo As Date, ByVal dt As System.Data.DataTable, ByVal strErr As String)
            Me.ccsGetLifeAsiaPaymentDetailAsync(dateFrom, dateTo, dt, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ccsGetLifeAsiaPaymentDetailAsync(ByVal dateFrom As Date, ByVal dateTo As Date, ByVal dt As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.ccsGetLifeAsiaPaymentDetailOperationCompleted Is Nothing) Then
                Me.ccsGetLifeAsiaPaymentDetailOperationCompleted = AddressOf Me.OnccsGetLifeAsiaPaymentDetailOperationCompleted
            End If
            Me.InvokeAsync("ccsGetLifeAsiaPaymentDetail", New Object() {dateFrom, dateTo, dt, strErr}, Me.ccsGetLifeAsiaPaymentDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnccsGetLifeAsiaPaymentDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.ccsGetLifeAsiaPaymentDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ccsGetLifeAsiaPaymentDetailCompleted(Me, New ccsGetLifeAsiaPaymentDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ccsGetLifeAsiaPaymentRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ccsGetLifeAsiaPaymentRecord(ByVal strReceiptNo As String, ByVal intPaySeq As Integer, ByVal intPolSeq As Integer, ByRef dt As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ccsGetLifeAsiaPaymentRecord", New Object() {strReceiptNo, intPaySeq, intPolSeq, dt, strErr})
            dt = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ccsGetLifeAsiaPaymentRecordAsync(ByVal strReceiptNo As String, ByVal intPaySeq As Integer, ByVal intPolSeq As Integer, ByVal dt As System.Data.DataTable, ByVal strErr As String)
            Me.ccsGetLifeAsiaPaymentRecordAsync(strReceiptNo, intPaySeq, intPolSeq, dt, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ccsGetLifeAsiaPaymentRecordAsync(ByVal strReceiptNo As String, ByVal intPaySeq As Integer, ByVal intPolSeq As Integer, ByVal dt As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.ccsGetLifeAsiaPaymentRecordOperationCompleted Is Nothing) Then
                Me.ccsGetLifeAsiaPaymentRecordOperationCompleted = AddressOf Me.OnccsGetLifeAsiaPaymentRecordOperationCompleted
            End If
            Me.InvokeAsync("ccsGetLifeAsiaPaymentRecord", New Object() {strReceiptNo, intPaySeq, intPolSeq, dt, strErr}, Me.ccsGetLifeAsiaPaymentRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnccsGetLifeAsiaPaymentRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.ccsGetLifeAsiaPaymentRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ccsGetLifeAsiaPaymentRecordCompleted(Me, New ccsGetLifeAsiaPaymentRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ccsGetCapsilPaymentRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ccsGetCapsilPaymentRecord(ByVal strReceiptNo As String, ByVal intPaySeq As Integer, ByVal intPolSeq As Integer, ByRef dt As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ccsGetCapsilPaymentRecord", New Object() {strReceiptNo, intPaySeq, intPolSeq, dt, strErr})
            dt = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ccsGetCapsilPaymentRecordAsync(ByVal strReceiptNo As String, ByVal intPaySeq As Integer, ByVal intPolSeq As Integer, ByVal dt As System.Data.DataTable, ByVal strErr As String)
            Me.ccsGetCapsilPaymentRecordAsync(strReceiptNo, intPaySeq, intPolSeq, dt, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ccsGetCapsilPaymentRecordAsync(ByVal strReceiptNo As String, ByVal intPaySeq As Integer, ByVal intPolSeq As Integer, ByVal dt As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.ccsGetCapsilPaymentRecordOperationCompleted Is Nothing) Then
                Me.ccsGetCapsilPaymentRecordOperationCompleted = AddressOf Me.OnccsGetCapsilPaymentRecordOperationCompleted
            End If
            Me.InvokeAsync("ccsGetCapsilPaymentRecord", New Object() {strReceiptNo, intPaySeq, intPolSeq, dt, strErr}, Me.ccsGetCapsilPaymentRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnccsGetCapsilPaymentRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.ccsGetCapsilPaymentRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ccsGetCapsilPaymentRecordCompleted(Me, New ccsGetCapsilPaymentRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ccsGetCapsilPaymentRecordBatch", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ccsGetCapsilPaymentRecordBatch(ByVal strReceipts As String, ByRef dt As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ccsGetCapsilPaymentRecordBatch", New Object() {strReceipts, dt, strErr})
            dt = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ccsGetCapsilPaymentRecordBatchAsync(ByVal strReceipts As String, ByVal dt As System.Data.DataTable, ByVal strErr As String)
            Me.ccsGetCapsilPaymentRecordBatchAsync(strReceipts, dt, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ccsGetCapsilPaymentRecordBatchAsync(ByVal strReceipts As String, ByVal dt As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.ccsGetCapsilPaymentRecordBatchOperationCompleted Is Nothing) Then
                Me.ccsGetCapsilPaymentRecordBatchOperationCompleted = AddressOf Me.OnccsGetCapsilPaymentRecordBatchOperationCompleted
            End If
            Me.InvokeAsync("ccsGetCapsilPaymentRecordBatch", New Object() {strReceipts, dt, strErr}, Me.ccsGetCapsilPaymentRecordBatchOperationCompleted, userState)
        End Sub
        
        Private Sub OnccsGetCapsilPaymentRecordBatchOperationCompleted(ByVal arg As Object)
            If (Not (Me.ccsGetCapsilPaymentRecordBatchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ccsGetCapsilPaymentRecordBatchCompleted(Me, New ccsGetCapsilPaymentRecordBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/ccsGetLifeAsiaPaymentRecordBatch", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ccsGetLifeAsiaPaymentRecordBatch(ByVal strReceipts As String, ByRef dt As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ccsGetLifeAsiaPaymentRecordBatch", New Object() {strReceipts, dt, strErr})
            dt = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ccsGetLifeAsiaPaymentRecordBatchAsync(ByVal strReceipts As String, ByVal dt As System.Data.DataTable, ByVal strErr As String)
            Me.ccsGetLifeAsiaPaymentRecordBatchAsync(strReceipts, dt, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ccsGetLifeAsiaPaymentRecordBatchAsync(ByVal strReceipts As String, ByVal dt As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.ccsGetLifeAsiaPaymentRecordBatchOperationCompleted Is Nothing) Then
                Me.ccsGetLifeAsiaPaymentRecordBatchOperationCompleted = AddressOf Me.OnccsGetLifeAsiaPaymentRecordBatchOperationCompleted
            End If
            Me.InvokeAsync("ccsGetLifeAsiaPaymentRecordBatch", New Object() {strReceipts, dt, strErr}, Me.ccsGetLifeAsiaPaymentRecordBatchOperationCompleted, userState)
        End Sub
        
        Private Sub OnccsGetLifeAsiaPaymentRecordBatchOperationCompleted(ByVal arg As Object)
            If (Not (Me.ccsGetLifeAsiaPaymentRecordBatchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ccsGetLifeAsiaPaymentRecordBatchCompleted(Me, New ccsGetLifeAsiaPaymentRecordBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetRedFlagAgent", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRedFlagAgent(ByRef dsRedFlagAgent As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetRedFlagAgent", New Object() {dsRedFlagAgent, strError})
            dsRedFlagAgent = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRedFlagAgentAsync(ByVal dsRedFlagAgent As System.Data.DataSet, ByVal strError As String)
            Me.GetRedFlagAgentAsync(dsRedFlagAgent, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRedFlagAgentAsync(ByVal dsRedFlagAgent As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetRedFlagAgentOperationCompleted Is Nothing) Then
                Me.GetRedFlagAgentOperationCompleted = AddressOf Me.OnGetRedFlagAgentOperationCompleted
            End If
            Me.InvokeAsync("GetRedFlagAgent", New Object() {dsRedFlagAgent, strError}, Me.GetRedFlagAgentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRedFlagAgentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRedFlagAgentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRedFlagAgentCompleted(Me, New GetRedFlagAgentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UploadRedFlagAgent", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadRedFlagAgent(ByRef dsRedFlagAgent As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("UploadRedFlagAgent", New Object() {dsRedFlagAgent, strError})
            dsRedFlagAgent = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadRedFlagAgentAsync(ByVal dsRedFlagAgent As System.Data.DataSet, ByVal strError As String)
            Me.UploadRedFlagAgentAsync(dsRedFlagAgent, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadRedFlagAgentAsync(ByVal dsRedFlagAgent As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.UploadRedFlagAgentOperationCompleted Is Nothing) Then
                Me.UploadRedFlagAgentOperationCompleted = AddressOf Me.OnUploadRedFlagAgentOperationCompleted
            End If
            Me.InvokeAsync("UploadRedFlagAgent", New Object() {dsRedFlagAgent, strError}, Me.UploadRedFlagAgentOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadRedFlagAgentOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadRedFlagAgentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadRedFlagAgentCompleted(Me, New UploadRedFlagAgentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCIWSysValue", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCIWSysValue(ByVal pstrUserName As String, ByRef IsExtranalUser As Boolean, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCIWSysValue", New Object() {pstrUserName, IsExtranalUser, strErr})
            IsExtranalUser = CType(results(1),Boolean)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCIWSysValueAsync(ByVal pstrUserName As String, ByVal IsExtranalUser As Boolean, ByVal strErr As String)
            Me.GetCIWSysValueAsync(pstrUserName, IsExtranalUser, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCIWSysValueAsync(ByVal pstrUserName As String, ByVal IsExtranalUser As Boolean, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCIWSysValueOperationCompleted Is Nothing) Then
                Me.GetCIWSysValueOperationCompleted = AddressOf Me.OnGetCIWSysValueOperationCompleted
            End If
            Me.InvokeAsync("GetCIWSysValue", New Object() {pstrUserName, IsExtranalUser, strErr}, Me.GetCIWSysValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCIWSysValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCIWSysValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCIWSysValueCompleted(Me, New GetCIWSysValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCUPPayerIDType", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCUPPayerIDType(ByRef dsData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCUPPayerIDType", New Object() {dsData, strErr})
            dsData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCUPPayerIDTypeAsync(ByVal dsData As System.Data.DataSet, ByVal strErr As String)
            Me.GetCUPPayerIDTypeAsync(dsData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCUPPayerIDTypeAsync(ByVal dsData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCUPPayerIDTypeOperationCompleted Is Nothing) Then
                Me.GetCUPPayerIDTypeOperationCompleted = AddressOf Me.OnGetCUPPayerIDTypeOperationCompleted
            End If
            Me.InvokeAsync("GetCUPPayerIDType", New Object() {dsData, strErr}, Me.GetCUPPayerIDTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCUPPayerIDTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCUPPayerIDTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCUPPayerIDTypeCompleted(Me, New GetCUPPayerIDTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCUPProvinceList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCUPProvinceList(ByRef dsData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCUPProvinceList", New Object() {dsData, strErr})
            dsData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCUPProvinceListAsync(ByVal dsData As System.Data.DataSet, ByVal strErr As String)
            Me.GetCUPProvinceListAsync(dsData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCUPProvinceListAsync(ByVal dsData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCUPProvinceListOperationCompleted Is Nothing) Then
                Me.GetCUPProvinceListOperationCompleted = AddressOf Me.OnGetCUPProvinceListOperationCompleted
            End If
            Me.InvokeAsync("GetCUPProvinceList", New Object() {dsData, strErr}, Me.GetCUPProvinceListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCUPProvinceListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCUPProvinceListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCUPProvinceListCompleted(Me, New GetCUPProvinceListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCUPCityList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCUPCityList(ByVal strProvince As String, ByRef dsData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCUPCityList", New Object() {strProvince, dsData, strErr})
            dsData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCUPCityListAsync(ByVal strProvince As String, ByVal dsData As System.Data.DataSet, ByVal strErr As String)
            Me.GetCUPCityListAsync(strProvince, dsData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCUPCityListAsync(ByVal strProvince As String, ByVal dsData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCUPCityListOperationCompleted Is Nothing) Then
                Me.GetCUPCityListOperationCompleted = AddressOf Me.OnGetCUPCityListOperationCompleted
            End If
            Me.InvokeAsync("GetCUPCityList", New Object() {strProvince, dsData, strErr}, Me.GetCUPCityListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCUPCityListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCUPCityListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCUPCityListCompleted(Me, New GetCUPCityListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCUPBankList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCUPBankList(ByVal strFactoringHse As String, ByVal strBankCode As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCUPBankList", New Object() {strFactoringHse, strBankCode, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCUPBankListAsync(ByVal strFactoringHse As String, ByVal strBankCode As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetCUPBankListAsync(strFactoringHse, strBankCode, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCUPBankListAsync(ByVal strFactoringHse As String, ByVal strBankCode As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetCUPBankListOperationCompleted Is Nothing) Then
                Me.GetCUPBankListOperationCompleted = AddressOf Me.OnGetCUPBankListOperationCompleted
            End If
            Me.InvokeAsync("GetCUPBankList", New Object() {strFactoringHse, strBankCode, ds, strError}, Me.GetCUPBankListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCUPBankListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCUPBankListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCUPBankListCompleted(Me, New GetCUPBankListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://inglife.com.hk/"),  _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="http://inglife.com.hk/", IsNullable:=false)>  _
    Partial Public Class DBSOAPHeader
        Inherits System.Web.Services.Protocols.SoapHeader
        
        Private projectField As String
        
        Private connectionAliasField As String
        
        Private userField As String
        
        Private userTypeField As String
        
        Private envField As String
        
        Private compField As String
        
        Private cIWProjectField As String
        
        Private cIWConnectionAliasField As String
        
        Private cIWUserField As String
        
        Private cIWEnvField As String
        
        Private cIWCompField As String
        
        Private anyAttrField() As System.Xml.XmlAttribute
        
        '''<remarks/>
        Public Property Project() As String
            Get
                Return Me.projectField
            End Get
            Set
                Me.projectField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ConnectionAlias() As String
            Get
                Return Me.connectionAliasField
            End Get
            Set
                Me.connectionAliasField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property User() As String
            Get
                Return Me.userField
            End Get
            Set
                Me.userField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserType() As String
            Get
                Return Me.userTypeField
            End Get
            Set
                Me.userTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Env() As String
            Get
                Return Me.envField
            End Get
            Set
                Me.envField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Comp() As String
            Get
                Return Me.compField
            End Get
            Set
                Me.compField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CIWProject() As String
            Get
                Return Me.cIWProjectField
            End Get
            Set
                Me.cIWProjectField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CIWConnectionAlias() As String
            Get
                Return Me.cIWConnectionAliasField
            End Get
            Set
                Me.cIWConnectionAliasField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CIWUser() As String
            Get
                Return Me.cIWUserField
            End Get
            Set
                Me.cIWUserField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CIWEnv() As String
            Get
                Return Me.cIWEnvField
            End Get
            Set
                Me.cIWEnvField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CIWComp() As String
            Get
                Return Me.cIWCompField
            End Get
            Set
                Me.cIWCompField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyAttributeAttribute()>  _
        Public Property AnyAttr() As System.Xml.XmlAttribute()
            Get
                Return Me.anyAttrField
            End Get
            Set
                Me.anyAttrField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIncludeAttribute(GetType(SchemaSendObject)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(CustomerAddress_Send)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(Customer_Send)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(SaveClient_Send_Schema)),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://inglife.com.hk/")>  _
    Partial Public MustInherit Class SchemaObject
    End Class
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIncludeAttribute(GetType(CustomerAddress_Send)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(Customer_Send)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(SaveClient_Send_Schema)),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://inglife.com.hk/")>  _
    Partial Public MustInherit Class SchemaSendObject
        Inherits SchemaObject
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://inglife.com.hk/")>  _
    Partial Public Class CustomerAddress_Send
        Inherits SchemaSendObject
        
        Private customerIDField As Decimal
        
        Private addressTypeCodeField As String
        
        Private addressLine1Field As String
        
        Private addressLine2Field As String
        
        Private addressLine3Field As String
        
        Private addressCityField As String
        
        Private addressPostalCodeField As String
        
        Private phoneNumber1Field As String
        
        Private phoneNumber2Field As String
        
        Private faxNumber1Field As String
        
        Private faxNumber2Field As String
        
        Private eMailIDField As String
        
        Private badAddressField As String
        
        Private createDateField As Date
        
        Private createUserField As String
        
        Private lstUpdDateField As Date
        
        Private lstUpdUserField As String
        
        Private timestampField As Byte
        
        Private countryCodeField As String
        
        Private actModeField As String
        
        Private pOFlagField As String
        
        Private addrProofField As String
        
        Private telCountryCode1Field As String
        
        Private telCountryCode2Field As String
        
        Private telAreaCode1Field As String
        
        Private telAreaCode2Field As String
        
        '''<remarks/>
        Public Property CustomerID() As Decimal
            Get
                Return Me.customerIDField
            End Get
            Set
                Me.customerIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AddressTypeCode() As String
            Get
                Return Me.addressTypeCodeField
            End Get
            Set
                Me.addressTypeCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AddressLine1() As String
            Get
                Return Me.addressLine1Field
            End Get
            Set
                Me.addressLine1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AddressLine2() As String
            Get
                Return Me.addressLine2Field
            End Get
            Set
                Me.addressLine2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AddressLine3() As String
            Get
                Return Me.addressLine3Field
            End Get
            Set
                Me.addressLine3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AddressCity() As String
            Get
                Return Me.addressCityField
            End Get
            Set
                Me.addressCityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AddressPostalCode() As String
            Get
                Return Me.addressPostalCodeField
            End Get
            Set
                Me.addressPostalCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PhoneNumber1() As String
            Get
                Return Me.phoneNumber1Field
            End Get
            Set
                Me.phoneNumber1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PhoneNumber2() As String
            Get
                Return Me.phoneNumber2Field
            End Get
            Set
                Me.phoneNumber2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FaxNumber1() As String
            Get
                Return Me.faxNumber1Field
            End Get
            Set
                Me.faxNumber1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FaxNumber2() As String
            Get
                Return Me.faxNumber2Field
            End Get
            Set
                Me.faxNumber2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EMailID() As String
            Get
                Return Me.eMailIDField
            End Get
            Set
                Me.eMailIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BadAddress() As String
            Get
                Return Me.badAddressField
            End Get
            Set
                Me.badAddressField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CreateDate() As Date
            Get
                Return Me.createDateField
            End Get
            Set
                Me.createDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CreateUser() As String
            Get
                Return Me.createUserField
            End Get
            Set
                Me.createUserField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LstUpdDate() As Date
            Get
                Return Me.lstUpdDateField
            End Get
            Set
                Me.lstUpdDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LstUpdUser() As String
            Get
                Return Me.lstUpdUserField
            End Get
            Set
                Me.lstUpdUserField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property timestamp() As Byte
            Get
                Return Me.timestampField
            End Get
            Set
                Me.timestampField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CountryCode() As String
            Get
                Return Me.countryCodeField
            End Get
            Set
                Me.countryCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ActMode() As String
            Get
                Return Me.actModeField
            End Get
            Set
                Me.actModeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property POFlag() As String
            Get
                Return Me.pOFlagField
            End Get
            Set
                Me.pOFlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AddrProof() As String
            Get
                Return Me.addrProofField
            End Get
            Set
                Me.addrProofField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TelCountryCode1() As String
            Get
                Return Me.telCountryCode1Field
            End Get
            Set
                Me.telCountryCode1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TelCountryCode2() As String
            Get
                Return Me.telCountryCode2Field
            End Get
            Set
                Me.telCountryCode2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TelAreaCode1() As String
            Get
                Return Me.telAreaCode1Field
            End Get
            Set
                Me.telAreaCode1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TelAreaCode2() As String
            Get
                Return Me.telAreaCode2Field
            End Get
            Set
                Me.telAreaCode2Field = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://inglife.com.hk/")>  _
    Partial Public Class Customer_Send
        Inherits SchemaSendObject
        
        Private customerIDField As Decimal
        
        Private countryCodeField As String
        
        Private customerTypeCodeField As String
        
        Private shortNameField As String
        
        Private customerStatusCodeField As String
        
        Private titleField As String
        
        Private namePrefixField As String
        
        Private firstNameField As String
        
        Private nameSuffixField As String
        
        Private chiFstNmField As String
        
        Private dateOfBirthField As Date
        
        Private dateOfDeathField As Date
        
        Private genderField As String
        
        Private phoneMobileField As String
        
        Private phoneMobileCountryCodeField As String
        
        Private phoneMobileAreaCodeField As String
        
        Private phonePagerField As String
        
        Private phonePagerCountryCodeField As String
        
        Private phonePagerAreaCodeField As String
        
        Private employerField As String
        
        Private industryField As String
        
        Private incomeRangeBandField As String
        
        Private maritalStatusCodeField As String
        
        Private numberOfDependentsField As Decimal
        
        Private occupatClsCodeField As String
        
        Private smokerFlagField As String
        
        Private languageCodeField As String
        
        Private governmentIDCardField As String
        
        Private passportCntyCodeField As String
        
        Private passportNumberField As String
        
        Private websiteIDField As String
        
        Private remarksField As String
        
        Private dateofLastChangeField As Date
        
        Private agentCodeField As String
        
        Private optOutFlagField As String
        
        Private optOutOtherFlagField As String
        
        Private pINNumberField As String
        
        Private nationalityField As String
        
        Private driverLicenceNoField As String
        
        Private idChkIndField As String
        
        Private useChiIndField As String
        
        Private birthPlaceField As String
        
        Private ageAdmIndField As String
        
        Private coNameField As String
        
        Private coCNameField As String
        
        Private chiLstNmField As String
        
        Private emailAddrField As String
        
        Private eduLevelField As String
        
        Private annSalaryField As String
        
        Private dutyField As String
        
        Private busiNatField As String
        
        Private occupationField As String
        
        Private createDateField As Date
        
        Private createUserField As String
        
        Private lstUpdDateField As Date
        
        Private lstUpdUserField As String
        
        Private timestampField As Byte
        
        Private companyIDField As String
        
        Private blackListField As String
        
        Private vIPField As Integer
        
        Private fECIndustryField As String
        
        Private fECNationalityField As String
        
        Private riskLevelField As String
        
        Private rLDateReviewField As Date
        
        Private fECFreezeListField As String
        
        Private fECIdentityField As String
        
        Private fECProductField As String
        
        Private fECMoneyInField As String
        
        Private fECMoneyOutField As String
        
        Private fECTransFqyField As String
        
        Private occupcodeField As Integer
        
        Private occupNameField As String
        
        Private occupIndyField As String
        
        Private occupEENameField As String
        
        Private occupBusField As String
        
        Private fATCAStatusField As String
        
        Private w8FlagField As String
        
        Private w8SignDateField As Date
        
        Private w9FlagField As String
        
        Private w9SignDateField As Date
        
        '''<remarks/>
        Public Property CustomerID() As Decimal
            Get
                Return Me.customerIDField
            End Get
            Set
                Me.customerIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CountryCode() As String
            Get
                Return Me.countryCodeField
            End Get
            Set
                Me.countryCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustomerTypeCode() As String
            Get
                Return Me.customerTypeCodeField
            End Get
            Set
                Me.customerTypeCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ShortName() As String
            Get
                Return Me.shortNameField
            End Get
            Set
                Me.shortNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustomerStatusCode() As String
            Get
                Return Me.customerStatusCodeField
            End Get
            Set
                Me.customerStatusCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Title() As String
            Get
                Return Me.titleField
            End Get
            Set
                Me.titleField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NamePrefix() As String
            Get
                Return Me.namePrefixField
            End Get
            Set
                Me.namePrefixField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FirstName() As String
            Get
                Return Me.firstNameField
            End Get
            Set
                Me.firstNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NameSuffix() As String
            Get
                Return Me.nameSuffixField
            End Get
            Set
                Me.nameSuffixField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ChiFstNm() As String
            Get
                Return Me.chiFstNmField
            End Get
            Set
                Me.chiFstNmField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DateOfBirth() As Date
            Get
                Return Me.dateOfBirthField
            End Get
            Set
                Me.dateOfBirthField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DateOfDeath() As Date
            Get
                Return Me.dateOfDeathField
            End Get
            Set
                Me.dateOfDeathField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Gender() As String
            Get
                Return Me.genderField
            End Get
            Set
                Me.genderField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PhoneMobile() As String
            Get
                Return Me.phoneMobileField
            End Get
            Set
                Me.phoneMobileField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PhoneMobileCountryCode() As String
            Get
                Return Me.phoneMobileCountryCodeField
            End Get
            Set
                Me.phoneMobileCountryCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PhoneMobileAreaCode() As String
            Get
                Return Me.phoneMobileAreaCodeField
            End Get
            Set
                Me.phoneMobileAreaCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PhonePager() As String
            Get
                Return Me.phonePagerField
            End Get
            Set
                Me.phonePagerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PhonePagerCountryCode() As String
            Get
                Return Me.phonePagerCountryCodeField
            End Get
            Set
                Me.phonePagerCountryCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PhonePagerAreaCode() As String
            Get
                Return Me.phonePagerAreaCodeField
            End Get
            Set
                Me.phonePagerAreaCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Employer() As String
            Get
                Return Me.employerField
            End Get
            Set
                Me.employerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Industry() As String
            Get
                Return Me.industryField
            End Get
            Set
                Me.industryField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IncomeRangeBand() As String
            Get
                Return Me.incomeRangeBandField
            End Get
            Set
                Me.incomeRangeBandField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MaritalStatusCode() As String
            Get
                Return Me.maritalStatusCodeField
            End Get
            Set
                Me.maritalStatusCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property NumberOfDependents() As Decimal
            Get
                Return Me.numberOfDependentsField
            End Get
            Set
                Me.numberOfDependentsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OccupatClsCode() As String
            Get
                Return Me.occupatClsCodeField
            End Get
            Set
                Me.occupatClsCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SmokerFlag() As String
            Get
                Return Me.smokerFlagField
            End Get
            Set
                Me.smokerFlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LanguageCode() As String
            Get
                Return Me.languageCodeField
            End Get
            Set
                Me.languageCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GovernmentIDCard() As String
            Get
                Return Me.governmentIDCardField
            End Get
            Set
                Me.governmentIDCardField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PassportCntyCode() As String
            Get
                Return Me.passportCntyCodeField
            End Get
            Set
                Me.passportCntyCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PassportNumber() As String
            Get
                Return Me.passportNumberField
            End Get
            Set
                Me.passportNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property WebsiteID() As String
            Get
                Return Me.websiteIDField
            End Get
            Set
                Me.websiteIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Remarks() As String
            Get
                Return Me.remarksField
            End Get
            Set
                Me.remarksField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DateofLastChange() As Date
            Get
                Return Me.dateofLastChangeField
            End Get
            Set
                Me.dateofLastChangeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AgentCode() As String
            Get
                Return Me.agentCodeField
            End Get
            Set
                Me.agentCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OptOutFlag() As String
            Get
                Return Me.optOutFlagField
            End Get
            Set
                Me.optOutFlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property OptOutOtherFlag() As String
            Get
                Return Me.optOutOtherFlagField
            End Get
            Set
                Me.optOutOtherFlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PINNumber() As String
            Get
                Return Me.pINNumberField
            End Get
            Set
                Me.pINNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Nationality() As String
            Get
                Return Me.nationalityField
            End Get
            Set
                Me.nationalityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DriverLicenceNo() As String
            Get
                Return Me.driverLicenceNoField
            End Get
            Set
                Me.driverLicenceNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IdChkInd() As String
            Get
                Return Me.idChkIndField
            End Get
            Set
                Me.idChkIndField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UseChiInd() As String
            Get
                Return Me.useChiIndField
            End Get
            Set
                Me.useChiIndField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BirthPlace() As String
            Get
                Return Me.birthPlaceField
            End Get
            Set
                Me.birthPlaceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AgeAdmInd() As String
            Get
                Return Me.ageAdmIndField
            End Get
            Set
                Me.ageAdmIndField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CoName() As String
            Get
                Return Me.coNameField
            End Get
            Set
                Me.coNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CoCName() As String
            Get
                Return Me.coCNameField
            End Get
            Set
                Me.coCNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ChiLstNm() As String
            Get
                Return Me.chiLstNmField
            End Get
            Set
                Me.chiLstNmField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EmailAddr() As String
            Get
                Return Me.emailAddrField
            End Get
            Set
                Me.emailAddrField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EduLevel() As String
            Get
                Return Me.eduLevelField
            End Get
            Set
                Me.eduLevelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AnnSalary() As String
            Get
                Return Me.annSalaryField
            End Get
            Set
                Me.annSalaryField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Duty() As String
            Get
                Return Me.dutyField
            End Get
            Set
                Me.dutyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BusiNat() As String
            Get
                Return Me.busiNatField
            End Get
            Set
                Me.busiNatField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Occupation() As String
            Get
                Return Me.occupationField
            End Get
            Set
                Me.occupationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CreateDate() As Date
            Get
                Return Me.createDateField
            End Get
            Set
                Me.createDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CreateUser() As String
            Get
                Return Me.createUserField
            End Get
            Set
                Me.createUserField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LstUpdDate() As Date
            Get
                Return Me.lstUpdDateField
            End Get
            Set
                Me.lstUpdDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LstUpdUser() As String
            Get
                Return Me.lstUpdUserField
            End Get
            Set
                Me.lstUpdUserField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property timestamp() As Byte
            Get
                Return Me.timestampField
            End Get
            Set
                Me.timestampField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompanyID() As String
            Get
                Return Me.companyIDField
            End Get
            Set
                Me.companyIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BlackList() As String
            Get
                Return Me.blackListField
            End Get
            Set
                Me.blackListField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property VIP() As Integer
            Get
                Return Me.vIPField
            End Get
            Set
                Me.vIPField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FECIndustry() As String
            Get
                Return Me.fECIndustryField
            End Get
            Set
                Me.fECIndustryField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FECNationality() As String
            Get
                Return Me.fECNationalityField
            End Get
            Set
                Me.fECNationalityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RiskLevel() As String
            Get
                Return Me.riskLevelField
            End Get
            Set
                Me.riskLevelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RLDateReview() As Date
            Get
                Return Me.rLDateReviewField
            End Get
            Set
                Me.rLDateReviewField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FECFreezeList() As String
            Get
                Return Me.fECFreezeListField
            End Get
            Set
                Me.fECFreezeListField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FECIdentity() As String
            Get
                Return Me.fECIdentityField
            End Get
            Set
                Me.fECIdentityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FECProduct() As String
            Get
                Return Me.fECProductField
            End Get
            Set
                Me.fECProductField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FECMoneyIn() As String
            Get
                Return Me.fECMoneyInField
            End Get
            Set
                Me.fECMoneyInField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FECMoneyOut() As String
            Get
                Return Me.fECMoneyOutField
            End Get
            Set
                Me.fECMoneyOutField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FECTransFqy() As String
            Get
                Return Me.fECTransFqyField
            End Get
            Set
                Me.fECTransFqyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property occupcode() As Integer
            Get
                Return Me.occupcodeField
            End Get
            Set
                Me.occupcodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property occupName() As String
            Get
                Return Me.occupNameField
            End Get
            Set
                Me.occupNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property occupIndy() As String
            Get
                Return Me.occupIndyField
            End Get
            Set
                Me.occupIndyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property occupEEName() As String
            Get
                Return Me.occupEENameField
            End Get
            Set
                Me.occupEENameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property occupBus() As String
            Get
                Return Me.occupBusField
            End Get
            Set
                Me.occupBusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FATCAStatus() As String
            Get
                Return Me.fATCAStatusField
            End Get
            Set
                Me.fATCAStatusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property W8Flag() As String
            Get
                Return Me.w8FlagField
            End Get
            Set
                Me.w8FlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property W8SignDate() As Date
            Get
                Return Me.w8SignDateField
            End Get
            Set
                Me.w8SignDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property W9Flag() As String
            Get
                Return Me.w9FlagField
            End Get
            Set
                Me.w9FlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property W9SignDate() As Date
            Get
                Return Me.w9SignDateField
            End Get
            Set
                Me.w9SignDateField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://inglife.com.hk/")>  _
    Partial Public Class SaveClient_Send_Schema
        Inherits SchemaSendObject
        
        Private customer_SendField As Customer_Send
        
        Private customerAddress_SendField() As CustomerAddress_Send
        
        '''<remarks/>
        Public Property Customer_Send() As Customer_Send
            Get
                Return Me.customer_SendField
            End Get
            Set
                Me.customer_SendField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustomerAddress_Send() As CustomerAddress_Send()
            Get
                Return Me.customerAddress_SendField
            End Get
            Set
                Me.customerAddress_SendField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIncludeAttribute(GetType(clsClientPolicyRelation)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(clsClient)),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://inglife.com.hk/")>  _
    Partial Public Class CCRComORM
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://inglife.com.hk/")>  _
    Partial Public Class clsClientPolicyRelation
        Inherits CCRComORM
        
        Private policyNoField As String
        
        '''<remarks/>
        Public Property PolicyNo() As String
            Get
                Return Me.policyNoField
            End Get
            Set
                Me.policyNoField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://inglife.com.hk/")>  _
    Partial Public Class clsClient
        Inherits CCRComORM
        
        Private customerIDField As String
        
        Private firstNameField As String
        
        Private lastNameField As String
        
        Private dOBField As Date
        
        '''<remarks/>
        Public Property CustomerID() As String
            Get
                Return Me.customerIDField
            End Get
            Set
                Me.customerIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FirstName() As String
            Get
                Return Me.firstNameField
            End Get
            Set
                Me.firstNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LastName() As String
            Get
                Return Me.lastNameField
            End Get
            Set
                Me.lastNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DOB() As Date
            Get
                Return Me.dOBField
            End Get
            Set
                Me.dOBField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://inglife.com.hk/"),  _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="http://inglife.com.hk/", IsNullable:=false)>  _
    Partial Public Class MQSOAPHeader
        Inherits System.Web.Services.Protocols.SoapHeader
        
        Private queueManagerField As String
        
        Private remoteQueueField As String
        
        Private replyToQueueField As String
        
        Private localQueueField As String
        
        Private timeoutField As Integer
        
        Private projectAliasField As String
        
        Private connectionAliasField As String
        
        Private userTypeField As String
        
        Private environmentUseField As String
        
        Private companyIDField As String
        
        Private userIDField As String
        
        Private machineIDField As String
        
        Private versionNoField As String
        
        Private libraryNameField As String
        
        Private anyAttrField() As System.Xml.XmlAttribute
        
        '''<remarks/>
        Public Property QueueManager() As String
            Get
                Return Me.queueManagerField
            End Get
            Set
                Me.queueManagerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RemoteQueue() As String
            Get
                Return Me.remoteQueueField
            End Get
            Set
                Me.remoteQueueField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ReplyToQueue() As String
            Get
                Return Me.replyToQueueField
            End Get
            Set
                Me.replyToQueueField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LocalQueue() As String
            Get
                Return Me.localQueueField
            End Get
            Set
                Me.localQueueField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Timeout() As Integer
            Get
                Return Me.timeoutField
            End Get
            Set
                Me.timeoutField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectAlias() As String
            Get
                Return Me.projectAliasField
            End Get
            Set
                Me.projectAliasField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ConnectionAlias() As String
            Get
                Return Me.connectionAliasField
            End Get
            Set
                Me.connectionAliasField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserType() As String
            Get
                Return Me.userTypeField
            End Get
            Set
                Me.userTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EnvironmentUse() As String
            Get
                Return Me.environmentUseField
            End Get
            Set
                Me.environmentUseField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompanyID() As String
            Get
                Return Me.companyIDField
            End Get
            Set
                Me.companyIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As String
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MachineID() As String
            Get
                Return Me.machineIDField
            End Get
            Set
                Me.machineIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property VersionNo() As String
            Get
                Return Me.versionNoField
            End Get
            Set
                Me.versionNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LibraryName() As String
            Get
                Return Me.libraryNameField
            End Get
            Set
                Me.libraryNameField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyAttributeAttribute()>  _
        Public Property AnyAttr() As System.Xml.XmlAttribute()
            Get
                Return Me.anyAttrField
            End Get
            Set
                Me.anyAttrField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetRenewalPremiumCompletedEventHandler(ByVal sender As Object, ByVal e As GetRenewalPremiumCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRenewalPremiumCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRenewalPremium() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getCUPExRateToleranceCompletedEventHandler(ByVal sender As Object, ByVal e As getCUPExRateToleranceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCUPExRateToleranceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetDDAFORMCompletedEventHandler(ByVal sender As Object, ByVal e As GetDDAFORMCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDDAFORMCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtDDA() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ccrSearchClientCompletedEventHandler(ByVal sender As Object, ByVal e As ccrSearchClientCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ccrSearchClientCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSrhCustomer() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSrhPolicyRelate() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsLAMapping() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsInqClientRole() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub CNBTESTccrSearchClientCompletedEventHandler(ByVal sender As Object, ByVal e As CNBTESTccrSearchClientCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CNBTESTccrSearchClientCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objCustomer() As clsClient()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),clsClient())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub CNBccrSearchClientCompletedEventHandler(ByVal sender As Object, ByVal e As CNBccrSearchClientCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CNBccrSearchClientCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objCustomer() As clsClient()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),clsClient())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getPolicyNoByCustomerNoAndAddressCodeCompletedEventHandler(ByVal sender As Object, ByVal e As getPolicyNoByCustomerNoAndAddressCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getPolicyNoByCustomerNoAndAddressCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getPolicyNoByCustomerNoAndAddressCodeXMLCompletedEventHandler(ByVal sender As Object, ByVal e As getPolicyNoByCustomerNoAndAddressCodeXMLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getPolicyNoByCustomerNoAndAddressCodeXMLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property xmldoc() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getPolicyNoByCustomerNoAndAddressCodeObjCompletedEventHandler(ByVal sender As Object, ByVal e As getPolicyNoByCustomerNoAndAddressCodeObjCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getPolicyNoByCustomerNoAndAddressCodeObjCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property objClientPolicy() As clsClientPolicyRelation()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),clsClientPolicyRelation())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ccrDelClientCompletedEventHandler(ByVal sender As Object, ByVal e As ccrDelClientCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ccrDelClientCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ccrDelClientRcdCompletedEventHandler(ByVal sender As Object, ByVal e As ccrDelClientRcdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ccrDelClientRcdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr1() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetClnMainGeneralRcdCompletedEventHandler(ByVal sender As Object, ByVal e As GetClnMainGeneralRcdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClnMainGeneralRcdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrStr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetCustomerByIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerByIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerByIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrStr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetCustomerByLaIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerByLaIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerByLaIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrStr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetCustomerAddressByIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerAddressByIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerAddressByIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrStr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLAClentMappingByNumCompletedEventHandler(ByVal sender As Object, ByVal e As GetLAClentMappingByNumCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLAClentMappingByNumCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRtn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub CNBccrSaveClientCompletedEventHandler(ByVal sender As Object, ByVal e As CNBccrSaveClientCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CNBccrSaveClientCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property oCiwNo() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ccrSaveClientCompletedEventHandler(ByVal sender As Object, ByVal e As ccrSaveClientCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ccrSaveClientCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsCustomer() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsCustomerAddress() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property oCiwNo() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getPolicyRelateCompletedEventHandler(ByVal sender As Object, ByVal e As getPolicyRelateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getPolicyRelateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsPolicyRelate() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getBeatCompletedEventHandler(ByVal sender As Object, ByVal e As getBeatCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getBeatCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getPolicyAccountByPlyCompletedEventHandler(ByVal sender As Object, ByVal e As getPolicyAccountByPlyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getPolicyAccountByPlyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property StrErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getPolicyRelateCustCompletedEventHandler(ByVal sender As Object, ByVal e As getPolicyRelateCustCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getPolicyRelateCustCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsPR() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getAccountStatusCodesCompletedEventHandler(ByVal sender As Object, ByVal e As getAccountStatusCodesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAccountStatusCodesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property StrErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getAgentInfoCompletedEventHandler(ByVal sender As Object, ByVal e As getAgentInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAgentInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errStr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getHKLAgentInfoCompletedEventHandler(ByVal sender As Object, ByVal e As getHKLAgentInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getHKLAgentInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errStr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getPolicyAddressLogCompletedEventHandler(ByVal sender As Object, ByVal e As getPolicyAddressLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getPolicyAddressLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getCustomerLogCompletedEventHandler(ByVal sender As Object, ByVal e As getCustomerLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCustomerLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ods() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getCustomerAddressLogCompletedEventHandler(ByVal sender As Object, ByVal e As getCustomerAddressLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCustomerAddressLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ods() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getCustomerMergeLogCompletedEventHandler(ByVal sender As Object, ByVal e As getCustomerMergeLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCustomerMergeLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property oRsCustomerMergeLog() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property oRsCustomerMergePlyLog() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ccrUpdPlyAddrRsCompletedEventHandler(ByVal sender As Object, ByVal e As ccrUpdPlyAddrRsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ccrUpdPlyAddrRsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetPolicyAddressByPlyNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyAddressByPlyNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyAddressByPlyNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ods() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetOrdCClientRcdCompletedEventHandler(ByVal sender As Object, ByVal e As GetOrdCClientRcdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOrdCClientRcdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getORDCNACompletedEventHandler(ByVal sender As Object, ByVal e As getORDCNACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getORDCNACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getORDCNA_SQLCompletedEventHandler(ByVal sender As Object, ByVal e As getORDCNA_SQLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getORDCNA_SQLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRtn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getORDUNACompletedEventHandler(ByVal sender As Object, ByVal e As getORDUNACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getORDUNACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getORDURLCompletedEventHandler(ByVal sender As Object, ByVal e As getORDURLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getORDURLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsPolicyRelation() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLARelatedPolicyCompletedEventHandler(ByVal sender As Object, ByVal e As GetLARelatedPolicyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLARelatedPolicyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsPolicyRelation() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property iCiwNo() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property sEAddrType() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property sCAddrType() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getOrdUClientRcdCompletedEventHandler(ByVal sender As Object, ByVal e As getOrdUClientRcdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getOrdUClientRcdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getPolicyRelationCompletedEventHandler(ByVal sender As Object, ByVal e As getPolicyRelationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getPolicyRelationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds400URL() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getLAClientNoCompletedEventHandler(ByVal sender As Object, ByVal e As getLAClientNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getLAClientNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property sLAClientNo_Client() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property sLAClientNo_Alt() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetAddrTypeCodeByLACompletedEventHandler(ByVal sender As Object, ByVal e As GetAddrTypeCodeByLACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAddrTypeCodeByLACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property sAddrType() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub PassInSQLCompletedEventHandler(ByVal sender As Object, ByVal e As PassInSQLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PassInSQLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetInqClientRoleCompletedEventHandler(ByVal sender As Object, ByVal e As GetInqClientRoleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInqClientRoleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSendData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getCustHeadInfoCompletedEventHandler(ByVal sender As Object, ByVal e As getCustHeadInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCustHeadInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrStr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub EnqClientBankCompletedEventHandler(ByVal sender As Object, ByVal e As EnqClientBankCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EnqClientBankCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UpdClientBankCompletedEventHandler(ByVal sender As Object, ByVal e As UpdClientBankCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdClientBankCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub CRTClientBankCompletedEventHandler(ByVal sender As Object, ByVal e As CRTClientBankCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CRTClientBankCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetMandateCompletedEventHandler(ByVal sender As Object, ByVal e As GetMandateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMandateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub CreateMandateCompletedEventHandler(ByVal sender As Object, ByVal e As CreateMandateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateMandateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UpdateMandateCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMandateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMandateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ImportExcelCompletedEventHandler(ByVal sender As Object, ByVal e As ImportExcelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportExcelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UpdateRiskLevelCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateRiskLevelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateRiskLevelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UpdateRiskLevelFreezeListCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateRiskLevelFreezeListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateRiskLevelFreezeListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub FetchPathCompletedEventHandler(ByVal sender As Object, ByVal e As FetchPathCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FetchPathCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UpdateHeaderCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateHeaderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateHeaderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub HeaderInfoFillerCompletedEventHandler(ByVal sender As Object, ByVal e As HeaderInfoFillerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HeaderInfoFillerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub FreezeListCheckCompletedEventHandler(ByVal sender As Object, ByVal e As FreezeListCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FreezeListCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property IsEnhanced() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property EngName1() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property EngName2() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ChName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RiskLevelCheckCompletedEventHandler(ByVal sender As Object, ByVal e As RiskLevelCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RiskLevelCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property intCusID() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub IsOneOffPlanCompletedEventHandler(ByVal sender As Object, ByVal e As IsOneOffPlanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsOneOffPlanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property IsOneOff() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetClientBankSysInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetClientBankSysInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClientBankSysInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ccrMergeClientCompletedEventHandler(ByVal sender As Object, ByVal e As ccrMergeClientCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ccrMergeClientCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ChkClientMergeProgressCompletedEventHandler(ByVal sender As Object, ByVal e As ChkClientMergeProgressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChkClientMergeProgressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub getClientMergeTransLogCompletedEventHandler(ByVal sender As Object, ByVal e As getClientMergeTransLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getClientMergeTransLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ods() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetClientMatchControlReportPrtInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetClientMatchControlReportPrtInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClientMatchControlReportPrtInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub llmUpdateLetterLibraryCompletedEventHandler(ByVal sender As Object, ByVal e As llmUpdateLetterLibraryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class llmUpdateLetterLibraryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub llmGetLetterLibraryCompletedEventHandler(ByVal sender As Object, ByVal e As llmGetLetterLibraryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class llmGetLetterLibraryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLetterheadCompletedEventHandler(ByVal sender As Object, ByVal e As GetLetterheadCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLetterheadCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dt() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetSysBusinessDateCompletedEventHandler(ByVal sender As Object, ByVal e As GetSysBusinessDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSysBusinessDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub IsBlackListedCompletedEventHandler(ByVal sender As Object, ByVal e As IsBlackListedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsBlackListedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pstrUserId() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ccsGetPaymentDetailCompletedEventHandler(ByVal sender As Object, ByVal e As ccsGetPaymentDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ccsGetPaymentDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ccsGetPPSPaymentDetailCompletedEventHandler(ByVal sender As Object, ByVal e As ccsGetPPSPaymentDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ccsGetPPSPaymentDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dt() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ccsGetCapsilPaymentDetailCompletedEventHandler(ByVal sender As Object, ByVal e As ccsGetCapsilPaymentDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ccsGetCapsilPaymentDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dt() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ccsGetLifeAsiaPaymentDetailCompletedEventHandler(ByVal sender As Object, ByVal e As ccsGetLifeAsiaPaymentDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ccsGetLifeAsiaPaymentDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dt() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ccsGetLifeAsiaPaymentRecordCompletedEventHandler(ByVal sender As Object, ByVal e As ccsGetLifeAsiaPaymentRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ccsGetLifeAsiaPaymentRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dt() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ccsGetCapsilPaymentRecordCompletedEventHandler(ByVal sender As Object, ByVal e As ccsGetCapsilPaymentRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ccsGetCapsilPaymentRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dt() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ccsGetCapsilPaymentRecordBatchCompletedEventHandler(ByVal sender As Object, ByVal e As ccsGetCapsilPaymentRecordBatchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ccsGetCapsilPaymentRecordBatchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dt() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ccsGetLifeAsiaPaymentRecordBatchCompletedEventHandler(ByVal sender As Object, ByVal e As ccsGetLifeAsiaPaymentRecordBatchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ccsGetLifeAsiaPaymentRecordBatchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dt() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetRedFlagAgentCompletedEventHandler(ByVal sender As Object, ByVal e As GetRedFlagAgentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRedFlagAgentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRedFlagAgent() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UploadRedFlagAgentCompletedEventHandler(ByVal sender As Object, ByVal e As UploadRedFlagAgentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadRedFlagAgentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRedFlagAgent() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetCIWSysValueCompletedEventHandler(ByVal sender As Object, ByVal e As GetCIWSysValueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCIWSysValueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property IsExtranalUser() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetCUPPayerIDTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetCUPPayerIDTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCUPPayerIDTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetCUPProvinceListCompletedEventHandler(ByVal sender As Object, ByVal e As GetCUPProvinceListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCUPProvinceListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetCUPCityListCompletedEventHandler(ByVal sender As Object, ByVal e As GetCUPCityListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCUPCityListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetCUPBankListCompletedEventHandler(ByVal sender As Object, ByVal e As GetCUPBankListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCUPBankListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
End Namespace
