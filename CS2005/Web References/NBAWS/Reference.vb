'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8806
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.8806.
'
Namespace NBAWS
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="NBAWSSoap", [Namespace]:="http://www.ing.com.hk/")>  _
    Partial Public Class NBAWS
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private comSOAPHeaderValueField As ComSOAPHeader
        
        Private IsCNBCaseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCouponPaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddLcpPaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLcpChequeDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLcpChequePaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyCustInfoForPAGIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateRedemptionForPAGIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetASITypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetILASInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveILASInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckClientBankExistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetUWLastOngoingInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLASVersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUWSysInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateWelLetterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWavierANPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUnitTranHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUWInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSysSoftCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCCStypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInitialTransUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetASIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMedicalAmountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateUWASIInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GenerateUWAdviceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveUWInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNBSysInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getNBRCodeByCodeNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSysCompStruOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSysCompStruUWOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSysContractStruOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOSWNCReportPrtInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransHeaderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMonthlyKPIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPrintNBControlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFNAInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveFNAInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetContCliOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSysPlanDistChannelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetContDtlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPropInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SubmitPropRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessPropRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUWAdvicePrintingInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintUWAdviceInBatchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserAuthorityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserAuthorityByProjectAliasOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserGroupAuthorityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUwWorksheetPrtInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUWworkSheetToPrintOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MarkUWworkSheetSuccessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckEdorToDeleteInCMOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOfferLetterPrtInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLoadingExclusionPrtInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFirstYearComRateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProposalFYCInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSysBusinessDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private checkUWAuthorityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConvertIcrAppl2LifeAsiaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSysInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIllustrationPrintListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ClearCMImageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEdorExportParaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateIllustrationPrintStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSysAvaiFundListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSysFundRulesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBasicInsuredInfoFromNBOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyPaymentInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintWeeklyAPEOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintMonthlyAPEOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintAMCMOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintAMCMQuarterlyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintPOSurOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendSMSOutReqOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUWAdviceMsgLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUWOSReqOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendMailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertUWAdviceMsgLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckMandateExistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveUWAdviceHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPOSMarkinInfoForUWOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsLastClientSavedUsingUpdatedFECTableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidCCSPlanCdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AlterPolAfterInforceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MISReportTransferOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMISReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAgentClassOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAgentRegionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMISProcessRptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TATReportTransferOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTATDetailRptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTATSummaryRptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTATCountRptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTATAvgRptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.CS2005.My.MySettings.Default.CS2005_NBAWS_NBAWS
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Property ComSOAPHeaderValue() As ComSOAPHeader
            Get
                Return Me.comSOAPHeaderValueField
            End Get
            Set
                Me.comSOAPHeaderValueField = value
            End Set
        End Property
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event IsCNBCaseCompleted As IsCNBCaseCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCouponPaymentCompleted As GetCouponPaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event AddLcpPaymentCompleted As AddLcpPaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLcpChequeDetailCompleted As GetLcpChequeDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLcpChequePaymentCompleted As GetLcpChequePaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyCustInfoForPAGICompleted As GetPolicyCustInfoForPAGICompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateRedemptionForPAGICompleted As UpdateRedemptionForPAGICompletedEventHandler
        
        '''<remarks/>
        Public Event GetASITypeCompleted As GetASITypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetILASInfoCompleted As GetILASInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveILASInfoCompleted As SaveILASInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckClientBankExistCompleted As CheckClientBankExistCompletedEventHandler
        
        '''<remarks/>
        Public Event SetUWLastOngoingInfoCompleted As SetUWLastOngoingInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLASVersionCompleted As GetLASVersionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUWSysInfoCompleted As GetUWSysInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateWelLetterCompleted As UpdateWelLetterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWavierANPCompleted As GetWavierANPCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUnitTranHistoryCompleted As GetUnitTranHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUWInfoCompleted As GetUWInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSysSoftCodeCompleted As GetSysSoftCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event getCCStypeCompleted As getCCStypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInitialTransUserCompleted As GetInitialTransUserCompletedEventHandler
        
        '''<remarks/>
        Public Event GetASICompleted As GetASICompletedEventHandler
        
        '''<remarks/>
        Public Event GetMedicalAmountCompleted As GetMedicalAmountCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateUWASIInfoCompleted As UpdateUWASIInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GenerateUWAdviceCompleted As GenerateUWAdviceCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveUWInfoCompleted As SaveUWInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNBSysInfoCompleted As GetNBSysInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event getNBRCodeByCodeNameCompleted As getNBRCodeByCodeNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSysCompStruCompleted As GetSysCompStruCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSysCompStruUWCompleted As GetSysCompStruUWCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSysContractStruCompleted As GetSysContractStruCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOSWNCReportPrtInfoCompleted As GetOSWNCReportPrtInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransHeaderCompleted As GetTransHeaderCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMonthlyKPICompleted As GetMonthlyKPICompletedEventHandler
        
        '''<remarks/>
        Public Event GetPrintNBControlCompleted As GetPrintNBControlCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFNAInfoCompleted As GetFNAInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveFNAInfoCompleted As SaveFNAInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetContCliCompleted As GetContCliCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSysPlanDistChannelCompleted As GetSysPlanDistChannelCompletedEventHandler
        
        '''<remarks/>
        Public Event GetContDtlCompleted As GetContDtlCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPropInfoCompleted As GetPropInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event SubmitPropRequestCompleted As SubmitPropRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessPropRequestCompleted As ProcessPropRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUWAdvicePrintingInfoCompleted As GetUWAdvicePrintingInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintUWAdviceInBatchCompleted As PrintUWAdviceInBatchCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserAuthorityCompleted As GetUserAuthorityCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserAuthorityByProjectAliasCompleted As GetUserAuthorityByProjectAliasCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserGroupAuthorityCompleted As GetUserGroupAuthorityCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUwWorksheetPrtInfoCompleted As GetUwWorksheetPrtInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUWworkSheetToPrintCompleted As GetUWworkSheetToPrintCompletedEventHandler
        
        '''<remarks/>
        Public Event MarkUWworkSheetSuccessCompleted As MarkUWworkSheetSuccessCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckEdorToDeleteInCMCompleted As CheckEdorToDeleteInCMCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOfferLetterPrtInfoCompleted As GetOfferLetterPrtInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLoadingExclusionPrtInfoCompleted As GetLoadingExclusionPrtInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFirstYearComRateCompleted As GetFirstYearComRateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProposalFYCInfoCompleted As GetProposalFYCInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSysBusinessDateCompleted As GetSysBusinessDateCompletedEventHandler
        
        '''<remarks/>
        Public Event checkUWAuthorityCompleted As checkUWAuthorityCompletedEventHandler
        
        '''<remarks/>
        Public Event ConvertIcrAppl2LifeAsiaCompleted As ConvertIcrAppl2LifeAsiaCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSysInfoCompleted As UpdateSysInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIllustrationPrintListCompleted As GetIllustrationPrintListCompletedEventHandler
        
        '''<remarks/>
        Public Event ClearCMImageCompleted As ClearCMImageCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEdorExportParaCompleted As GetEdorExportParaCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateIllustrationPrintStatusCompleted As UpdateIllustrationPrintStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSysAvaiFundListCompleted As GetSysAvaiFundListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSysFundRulesCompleted As GetSysFundRulesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBasicInsuredInfoFromNBCompleted As GetBasicInsuredInfoFromNBCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyPaymentInfoCompleted As GetPolicyPaymentInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintWeeklyAPECompleted As PrintWeeklyAPECompletedEventHandler
        
        '''<remarks/>
        Public Event PrintMonthlyAPECompleted As PrintMonthlyAPECompletedEventHandler
        
        '''<remarks/>
        Public Event PrintAMCMCompleted As PrintAMCMCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintAMCMQuarterlyCompleted As PrintAMCMQuarterlyCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintPOSurCompleted As PrintPOSurCompletedEventHandler
        
        '''<remarks/>
        Public Event SendSMSOutReqCompleted As SendSMSOutReqCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUWAdviceMsgLogCompleted As GetUWAdviceMsgLogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUWOSReqCompleted As GetUWOSReqCompletedEventHandler
        
        '''<remarks/>
        Public Event SendMailCompleted As SendMailCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertUWAdviceMsgLogCompleted As InsertUWAdviceMsgLogCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckMandateExistCompleted As CheckMandateExistCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveUWAdviceHistoryCompleted As SaveUWAdviceHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPOSMarkinInfoForUWCompleted As GetPOSMarkinInfoForUWCompletedEventHandler
        
        '''<remarks/>
        Public Event IsLastClientSavedUsingUpdatedFECTableCompleted As IsLastClientSavedUsingUpdatedFECTableCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidCCSPlanCdCompleted As ValidCCSPlanCdCompletedEventHandler
        
        '''<remarks/>
        Public Event AlterPolAfterInforceCompleted As AlterPolAfterInforceCompletedEventHandler
        
        '''<remarks/>
        Public Event MISReportTransferCompleted As MISReportTransferCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMISReportCompleted As GetMISReportCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAgentClassCompleted As GetAgentClassCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAgentRegionCompleted As GetAgentRegionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMISProcessRptCompleted As GetMISProcessRptCompletedEventHandler
        
        '''<remarks/>
        Public Event TATReportTransferCompleted As TATReportTransferCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTATDetailRptCompleted As GetTATDetailRptCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTATSummaryRptCompleted As GetTATSummaryRptCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTATCountRptCompleted As GetTATCountRptCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTATAvgRptCompleted As GetTATAvgRptCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/IsCNBCase", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsCNBCase(ByVal strPolicyNo As String, ByRef blnCNBCase As Boolean, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("IsCNBCase", New Object() {strPolicyNo, blnCNBCase, strError})
            blnCNBCase = CType(results(1),Boolean)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsCNBCaseAsync(ByVal strPolicyNo As String, ByVal blnCNBCase As Boolean, ByVal strError As String)
            Me.IsCNBCaseAsync(strPolicyNo, blnCNBCase, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsCNBCaseAsync(ByVal strPolicyNo As String, ByVal blnCNBCase As Boolean, ByVal strError As String, ByVal userState As Object)
            If (Me.IsCNBCaseOperationCompleted Is Nothing) Then
                Me.IsCNBCaseOperationCompleted = AddressOf Me.OnIsCNBCaseOperationCompleted
            End If
            Me.InvokeAsync("IsCNBCase", New Object() {strPolicyNo, blnCNBCase, strError}, Me.IsCNBCaseOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsCNBCaseOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsCNBCaseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsCNBCaseCompleted(Me, New IsCNBCaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetCouponPayment", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCouponPayment(ByVal strPolicyNo As String, ByRef dsCCS As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCouponPayment", New Object() {strPolicyNo, dsCCS, strError})
            dsCCS = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCouponPaymentAsync(ByVal strPolicyNo As String, ByVal dsCCS As System.Data.DataSet, ByVal strError As String)
            Me.GetCouponPaymentAsync(strPolicyNo, dsCCS, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCouponPaymentAsync(ByVal strPolicyNo As String, ByVal dsCCS As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetCouponPaymentOperationCompleted Is Nothing) Then
                Me.GetCouponPaymentOperationCompleted = AddressOf Me.OnGetCouponPaymentOperationCompleted
            End If
            Me.InvokeAsync("GetCouponPayment", New Object() {strPolicyNo, dsCCS, strError}, Me.GetCouponPaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCouponPaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCouponPaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCouponPaymentCompleted(Me, New GetCouponPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/AddLcpPayment", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddLcpPayment(ByVal dsPay As System.Data.DataSet, ByVal printMode As String, ByVal sys As String, ByRef paymentNo As Integer, ByRef refNo As Integer, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("AddLcpPayment", New Object() {dsPay, printMode, sys, paymentNo, refNo, strErr})
            paymentNo = CType(results(1),Integer)
            refNo = CType(results(2),Integer)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddLcpPaymentAsync(ByVal dsPay As System.Data.DataSet, ByVal printMode As String, ByVal sys As String, ByVal paymentNo As Integer, ByVal refNo As Integer, ByVal strErr As String)
            Me.AddLcpPaymentAsync(dsPay, printMode, sys, paymentNo, refNo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddLcpPaymentAsync(ByVal dsPay As System.Data.DataSet, ByVal printMode As String, ByVal sys As String, ByVal paymentNo As Integer, ByVal refNo As Integer, ByVal strErr As String, ByVal userState As Object)
            If (Me.AddLcpPaymentOperationCompleted Is Nothing) Then
                Me.AddLcpPaymentOperationCompleted = AddressOf Me.OnAddLcpPaymentOperationCompleted
            End If
            Me.InvokeAsync("AddLcpPayment", New Object() {dsPay, printMode, sys, paymentNo, refNo, strErr}, Me.AddLcpPaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddLcpPaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddLcpPaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddLcpPaymentCompleted(Me, New AddLcpPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetLcpChequeDetail", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLcpChequeDetail(ByVal paymentNo As Integer, ByRef dtChqDetail As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLcpChequeDetail", New Object() {paymentNo, dtChqDetail, strErr})
            dtChqDetail = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLcpChequeDetailAsync(ByVal paymentNo As Integer, ByVal dtChqDetail As System.Data.DataTable, ByVal strErr As String)
            Me.GetLcpChequeDetailAsync(paymentNo, dtChqDetail, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLcpChequeDetailAsync(ByVal paymentNo As Integer, ByVal dtChqDetail As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLcpChequeDetailOperationCompleted Is Nothing) Then
                Me.GetLcpChequeDetailOperationCompleted = AddressOf Me.OnGetLcpChequeDetailOperationCompleted
            End If
            Me.InvokeAsync("GetLcpChequeDetail", New Object() {paymentNo, dtChqDetail, strErr}, Me.GetLcpChequeDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLcpChequeDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLcpChequeDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLcpChequeDetailCompleted(Me, New GetLcpChequeDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetLcpChequePayment", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLcpChequePayment(ByVal lngPaymentNo As Integer, ByRef dtPayment As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLcpChequePayment", New Object() {lngPaymentNo, dtPayment, strErr})
            dtPayment = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLcpChequePaymentAsync(ByVal lngPaymentNo As Integer, ByVal dtPayment As System.Data.DataTable, ByVal strErr As String)
            Me.GetLcpChequePaymentAsync(lngPaymentNo, dtPayment, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLcpChequePaymentAsync(ByVal lngPaymentNo As Integer, ByVal dtPayment As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLcpChequePaymentOperationCompleted Is Nothing) Then
                Me.GetLcpChequePaymentOperationCompleted = AddressOf Me.OnGetLcpChequePaymentOperationCompleted
            End If
            Me.InvokeAsync("GetLcpChequePayment", New Object() {lngPaymentNo, dtPayment, strErr}, Me.GetLcpChequePaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLcpChequePaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLcpChequePaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLcpChequePaymentCompleted(Me, New GetLcpChequePaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetPolicyCustInfoForPAGI", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyCustInfoForPAGI(ByVal strUserID As String, ByVal strPolicyNo As String, ByRef dsResult As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPolicyCustInfoForPAGI", New Object() {strUserID, strPolicyNo, dsResult, strErr})
            dsResult = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyCustInfoForPAGIAsync(ByVal strUserID As String, ByVal strPolicyNo As String, ByVal dsResult As System.Data.DataSet, ByVal strErr As String)
            Me.GetPolicyCustInfoForPAGIAsync(strUserID, strPolicyNo, dsResult, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyCustInfoForPAGIAsync(ByVal strUserID As String, ByVal strPolicyNo As String, ByVal dsResult As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPolicyCustInfoForPAGIOperationCompleted Is Nothing) Then
                Me.GetPolicyCustInfoForPAGIOperationCompleted = AddressOf Me.OnGetPolicyCustInfoForPAGIOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyCustInfoForPAGI", New Object() {strUserID, strPolicyNo, dsResult, strErr}, Me.GetPolicyCustInfoForPAGIOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyCustInfoForPAGIOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyCustInfoForPAGICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyCustInfoForPAGICompleted(Me, New GetPolicyCustInfoForPAGICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/UpdateRedemptionForPAGI", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateRedemptionForPAGI(ByVal strUserID As String, ByVal strPolicyNo As String, ByVal strCurrency As String, ByVal dblAmount As Double, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateRedemptionForPAGI", New Object() {strUserID, strPolicyNo, strCurrency, dblAmount, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateRedemptionForPAGIAsync(ByVal strUserID As String, ByVal strPolicyNo As String, ByVal strCurrency As String, ByVal dblAmount As Double, ByVal strErr As String)
            Me.UpdateRedemptionForPAGIAsync(strUserID, strPolicyNo, strCurrency, dblAmount, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateRedemptionForPAGIAsync(ByVal strUserID As String, ByVal strPolicyNo As String, ByVal strCurrency As String, ByVal dblAmount As Double, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateRedemptionForPAGIOperationCompleted Is Nothing) Then
                Me.UpdateRedemptionForPAGIOperationCompleted = AddressOf Me.OnUpdateRedemptionForPAGIOperationCompleted
            End If
            Me.InvokeAsync("UpdateRedemptionForPAGI", New Object() {strUserID, strPolicyNo, strCurrency, dblAmount, strErr}, Me.UpdateRedemptionForPAGIOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateRedemptionForPAGIOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateRedemptionForPAGICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateRedemptionForPAGICompleted(Me, New UpdateRedemptionForPAGICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetASIType", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetASIType(ByVal strPlanCode As String, ByRef dt As System.Data.DataTable, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetASIType", New Object() {strPlanCode, dt, strError})
            dt = CType(results(1),System.Data.DataTable)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetASITypeAsync(ByVal strPlanCode As String, ByVal dt As System.Data.DataTable, ByVal strError As String)
            Me.GetASITypeAsync(strPlanCode, dt, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetASITypeAsync(ByVal strPlanCode As String, ByVal dt As System.Data.DataTable, ByVal strError As String, ByVal userState As Object)
            If (Me.GetASITypeOperationCompleted Is Nothing) Then
                Me.GetASITypeOperationCompleted = AddressOf Me.OnGetASITypeOperationCompleted
            End If
            Me.InvokeAsync("GetASIType", New Object() {strPlanCode, dt, strError}, Me.GetASITypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetASITypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetASITypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetASITypeCompleted(Me, New GetASITypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetILASInfo", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetILASInfo(ByVal strPolicyNo As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetILASInfo", New Object() {strPolicyNo, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetILASInfoAsync(ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetILASInfoAsync(strPolicyNo, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetILASInfoAsync(ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetILASInfoOperationCompleted Is Nothing) Then
                Me.GetILASInfoOperationCompleted = AddressOf Me.OnGetILASInfoOperationCompleted
            End If
            Me.InvokeAsync("GetILASInfo", New Object() {strPolicyNo, ds, strError}, Me.GetILASInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetILASInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetILASInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetILASInfoCompleted(Me, New GetILASInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/SaveILASInfo", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveILASInfo(ByVal strPolicyNo As String, ByRef ds As System.Data.DataSet, ByRef strError As String, ByVal strUser As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveILASInfo", New Object() {strPolicyNo, ds, strError, strUser})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveILASInfoAsync(ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal strUser As String)
            Me.SaveILASInfoAsync(strPolicyNo, ds, strError, strUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveILASInfoAsync(ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal strUser As String, ByVal userState As Object)
            If (Me.SaveILASInfoOperationCompleted Is Nothing) Then
                Me.SaveILASInfoOperationCompleted = AddressOf Me.OnSaveILASInfoOperationCompleted
            End If
            Me.InvokeAsync("SaveILASInfo", New Object() {strPolicyNo, ds, strError, strUser}, Me.SaveILASInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveILASInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveILASInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveILASInfoCompleted(Me, New SaveILASInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/CheckClientBankExist", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckClientBankExist(ByVal strClientNo As String, ByVal strBankCode As String, ByVal strAccount As String, ByRef blnExist As Boolean, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckClientBankExist", New Object() {strClientNo, strBankCode, strAccount, blnExist, strError})
            blnExist = CType(results(1),Boolean)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckClientBankExistAsync(ByVal strClientNo As String, ByVal strBankCode As String, ByVal strAccount As String, ByVal blnExist As Boolean, ByVal strError As String)
            Me.CheckClientBankExistAsync(strClientNo, strBankCode, strAccount, blnExist, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckClientBankExistAsync(ByVal strClientNo As String, ByVal strBankCode As String, ByVal strAccount As String, ByVal blnExist As Boolean, ByVal strError As String, ByVal userState As Object)
            If (Me.CheckClientBankExistOperationCompleted Is Nothing) Then
                Me.CheckClientBankExistOperationCompleted = AddressOf Me.OnCheckClientBankExistOperationCompleted
            End If
            Me.InvokeAsync("CheckClientBankExist", New Object() {strClientNo, strBankCode, strAccount, blnExist, strError}, Me.CheckClientBankExistOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckClientBankExistOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckClientBankExistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckClientBankExistCompleted(Me, New CheckClientBankExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/SetUWLastOngoingInfo", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetUWLastOngoingInfo(ByVal strPolicyNo As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("SetUWLastOngoingInfo", New Object() {strPolicyNo, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetUWLastOngoingInfoAsync(ByVal strPolicyNo As String, ByVal strError As String)
            Me.SetUWLastOngoingInfoAsync(strPolicyNo, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetUWLastOngoingInfoAsync(ByVal strPolicyNo As String, ByVal strError As String, ByVal userState As Object)
            If (Me.SetUWLastOngoingInfoOperationCompleted Is Nothing) Then
                Me.SetUWLastOngoingInfoOperationCompleted = AddressOf Me.OnSetUWLastOngoingInfoOperationCompleted
            End If
            Me.InvokeAsync("SetUWLastOngoingInfo", New Object() {strPolicyNo, strError}, Me.SetUWLastOngoingInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetUWLastOngoingInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetUWLastOngoingInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetUWLastOngoingInfoCompleted(Me, New SetUWLastOngoingInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetLASVersion", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLASVersion(ByRef strVersion As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLASVersion", New Object() {strVersion, strErr})
            strVersion = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLASVersionAsync(ByVal strVersion As String, ByVal strErr As String)
            Me.GetLASVersionAsync(strVersion, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLASVersionAsync(ByVal strVersion As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLASVersionOperationCompleted Is Nothing) Then
                Me.GetLASVersionOperationCompleted = AddressOf Me.OnGetLASVersionOperationCompleted
            End If
            Me.InvokeAsync("GetLASVersion", New Object() {strVersion, strErr}, Me.GetLASVersionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLASVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLASVersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLASVersionCompleted(Me, New GetLASVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetUWSysInfo", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUWSysInfo(ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUWSysInfo", New Object() {ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUWSysInfoAsync(ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetUWSysInfoAsync(ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUWSysInfoAsync(ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetUWSysInfoOperationCompleted Is Nothing) Then
                Me.GetUWSysInfoOperationCompleted = AddressOf Me.OnGetUWSysInfoOperationCompleted
            End If
            Me.InvokeAsync("GetUWSysInfo", New Object() {ds, strError}, Me.GetUWSysInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUWSysInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUWSysInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUWSysInfoCompleted(Me, New GetUWSysInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/UpdateWelLetter", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateWelLetter(ByVal strPolicyNo As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateWelLetter", New Object() {strPolicyNo, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateWelLetterAsync(ByVal strPolicyNo As String, ByVal strError As String)
            Me.UpdateWelLetterAsync(strPolicyNo, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateWelLetterAsync(ByVal strPolicyNo As String, ByVal strError As String, ByVal userState As Object)
            If (Me.UpdateWelLetterOperationCompleted Is Nothing) Then
                Me.UpdateWelLetterOperationCompleted = AddressOf Me.OnUpdateWelLetterOperationCompleted
            End If
            Me.InvokeAsync("UpdateWelLetter", New Object() {strPolicyNo, strError}, Me.UpdateWelLetterOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateWelLetterOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateWelLetterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateWelLetterCompleted(Me, New UpdateWelLetterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetWavierANP", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWavierANP(ByVal strPolicyNo As String, ByVal strPlan As String, ByRef dsMoP As System.Data.DataSet, ByRef strError As String, ByVal strInsured As String) As Boolean
            Dim results() As Object = Me.Invoke("GetWavierANP", New Object() {strPolicyNo, strPlan, dsMoP, strError, strInsured})
            dsMoP = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWavierANPAsync(ByVal strPolicyNo As String, ByVal strPlan As String, ByVal dsMoP As System.Data.DataSet, ByVal strError As String, ByVal strInsured As String)
            Me.GetWavierANPAsync(strPolicyNo, strPlan, dsMoP, strError, strInsured, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWavierANPAsync(ByVal strPolicyNo As String, ByVal strPlan As String, ByVal dsMoP As System.Data.DataSet, ByVal strError As String, ByVal strInsured As String, ByVal userState As Object)
            If (Me.GetWavierANPOperationCompleted Is Nothing) Then
                Me.GetWavierANPOperationCompleted = AddressOf Me.OnGetWavierANPOperationCompleted
            End If
            Me.InvokeAsync("GetWavierANP", New Object() {strPolicyNo, strPlan, dsMoP, strError, strInsured}, Me.GetWavierANPOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWavierANPOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWavierANPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWavierANPCompleted(Me, New GetWavierANPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetUnitTranHistory", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUnitTranHistory(ByVal strPolicyNo As String, ByRef dsTransHist As System.Data.DataSet, ByRef strError As String, ByVal dteStartDate As Date, ByVal dteEndDate As Date) As Boolean
            Dim results() As Object = Me.Invoke("GetUnitTranHistory", New Object() {strPolicyNo, dsTransHist, strError, dteStartDate, dteEndDate})
            dsTransHist = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUnitTranHistoryAsync(ByVal strPolicyNo As String, ByVal dsTransHist As System.Data.DataSet, ByVal strError As String, ByVal dteStartDate As Date, ByVal dteEndDate As Date)
            Me.GetUnitTranHistoryAsync(strPolicyNo, dsTransHist, strError, dteStartDate, dteEndDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUnitTranHistoryAsync(ByVal strPolicyNo As String, ByVal dsTransHist As System.Data.DataSet, ByVal strError As String, ByVal dteStartDate As Date, ByVal dteEndDate As Date, ByVal userState As Object)
            If (Me.GetUnitTranHistoryOperationCompleted Is Nothing) Then
                Me.GetUnitTranHistoryOperationCompleted = AddressOf Me.OnGetUnitTranHistoryOperationCompleted
            End If
            Me.InvokeAsync("GetUnitTranHistory", New Object() {strPolicyNo, dsTransHist, strError, dteStartDate, dteEndDate}, Me.GetUnitTranHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUnitTranHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUnitTranHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUnitTranHistoryCompleted(Me, New GetUnitTranHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetUWInfo", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUWInfo(ByVal strSrc() As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUWInfo", New Object() {strSrc, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUWInfoAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetUWInfoAsync(strSrc, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUWInfoAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetUWInfoOperationCompleted Is Nothing) Then
                Me.GetUWInfoOperationCompleted = AddressOf Me.OnGetUWInfoOperationCompleted
            End If
            Me.InvokeAsync("GetUWInfo", New Object() {strSrc, ds, strError}, Me.GetUWInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUWInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUWInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUWInfoCompleted(Me, New GetUWInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetSysSoftCode", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSysSoftCode(ByVal strSrc() As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSysSoftCode", New Object() {strSrc, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSysSoftCodeAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetSysSoftCodeAsync(strSrc, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSysSoftCodeAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetSysSoftCodeOperationCompleted Is Nothing) Then
                Me.GetSysSoftCodeOperationCompleted = AddressOf Me.OnGetSysSoftCodeOperationCompleted
            End If
            Me.InvokeAsync("GetSysSoftCode", New Object() {strSrc, ds, strError}, Me.GetSysSoftCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSysSoftCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSysSoftCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSysSoftCodeCompleted(Me, New GetSysSoftCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/getCCStype", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCCStype(ByVal strPO As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("getCCStype", New Object() {strPO, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCCStypeAsync(ByVal strPO As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.getCCStypeAsync(strPO, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCCStypeAsync(ByVal strPO As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.getCCStypeOperationCompleted Is Nothing) Then
                Me.getCCStypeOperationCompleted = AddressOf Me.OngetCCStypeOperationCompleted
            End If
            Me.InvokeAsync("getCCStype", New Object() {strPO, ds, strError}, Me.getCCStypeOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCCStypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCCStypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCCStypeCompleted(Me, New getCCStypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetInitialTransUser", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInitialTransUser(ByVal strPO As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetInitialTransUser", New Object() {strPO, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInitialTransUserAsync(ByVal strPO As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetInitialTransUserAsync(strPO, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInitialTransUserAsync(ByVal strPO As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetInitialTransUserOperationCompleted Is Nothing) Then
                Me.GetInitialTransUserOperationCompleted = AddressOf Me.OnGetInitialTransUserOperationCompleted
            End If
            Me.InvokeAsync("GetInitialTransUser", New Object() {strPO, ds, strError}, Me.GetInitialTransUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInitialTransUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInitialTransUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInitialTransUserCompleted(Me, New GetInitialTransUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetASI", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetASI(ByVal strSrc() As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetASI", New Object() {strSrc, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetASIAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetASIAsync(strSrc, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetASIAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetASIOperationCompleted Is Nothing) Then
                Me.GetASIOperationCompleted = AddressOf Me.OnGetASIOperationCompleted
            End If
            Me.InvokeAsync("GetASI", New Object() {strSrc, ds, strError}, Me.GetASIOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetASIOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetASICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetASICompleted(Me, New GetASICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetMedicalAmount", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMedicalAmount(ByRef ds As System.Data.DataSet, ByRef strCur As String, ByRef dblLifeMedicalAmount As Double, ByRef dblDIMedicalAmount As Double, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetMedicalAmount", New Object() {ds, strCur, dblLifeMedicalAmount, dblDIMedicalAmount, strError})
            ds = CType(results(1),System.Data.DataSet)
            strCur = CType(results(2),String)
            dblLifeMedicalAmount = CType(results(3),Double)
            dblDIMedicalAmount = CType(results(4),Double)
            strError = CType(results(5),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMedicalAmountAsync(ByVal ds As System.Data.DataSet, ByVal strCur As String, ByVal dblLifeMedicalAmount As Double, ByVal dblDIMedicalAmount As Double, ByVal strError As String)
            Me.GetMedicalAmountAsync(ds, strCur, dblLifeMedicalAmount, dblDIMedicalAmount, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMedicalAmountAsync(ByVal ds As System.Data.DataSet, ByVal strCur As String, ByVal dblLifeMedicalAmount As Double, ByVal dblDIMedicalAmount As Double, ByVal strError As String, ByVal userState As Object)
            If (Me.GetMedicalAmountOperationCompleted Is Nothing) Then
                Me.GetMedicalAmountOperationCompleted = AddressOf Me.OnGetMedicalAmountOperationCompleted
            End If
            Me.InvokeAsync("GetMedicalAmount", New Object() {ds, strCur, dblLifeMedicalAmount, dblDIMedicalAmount, strError}, Me.GetMedicalAmountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMedicalAmountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMedicalAmountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMedicalAmountCompleted(Me, New GetMedicalAmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/UpdateUWASIInfo", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateUWASIInfo(ByVal strSrc() As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateUWASIInfo", New Object() {strSrc, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateUWASIInfoAsync(ByVal strSrc() As String, ByVal strError As String)
            Me.UpdateUWASIInfoAsync(strSrc, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUWASIInfoAsync(ByVal strSrc() As String, ByVal strError As String, ByVal userState As Object)
            If (Me.UpdateUWASIInfoOperationCompleted Is Nothing) Then
                Me.UpdateUWASIInfoOperationCompleted = AddressOf Me.OnUpdateUWASIInfoOperationCompleted
            End If
            Me.InvokeAsync("UpdateUWASIInfo", New Object() {strSrc, strError}, Me.UpdateUWASIInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateUWASIInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateUWASIInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateUWASIInfoCompleted(Me, New UpdateUWASIInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GenerateUWAdvice", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GenerateUWAdvice(ByVal strSrc() As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GenerateUWAdvice", New Object() {strSrc, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GenerateUWAdviceAsync(ByVal strSrc() As String, ByVal strError As String)
            Me.GenerateUWAdviceAsync(strSrc, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GenerateUWAdviceAsync(ByVal strSrc() As String, ByVal strError As String, ByVal userState As Object)
            If (Me.GenerateUWAdviceOperationCompleted Is Nothing) Then
                Me.GenerateUWAdviceOperationCompleted = AddressOf Me.OnGenerateUWAdviceOperationCompleted
            End If
            Me.InvokeAsync("GenerateUWAdvice", New Object() {strSrc, strError}, Me.GenerateUWAdviceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGenerateUWAdviceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GenerateUWAdviceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GenerateUWAdviceCompleted(Me, New GenerateUWAdviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/SaveUWInfo", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveUWInfo(ByVal strSrc() As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveUWInfo", New Object() {strSrc, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveUWInfoAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.SaveUWInfoAsync(strSrc, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveUWInfoAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.SaveUWInfoOperationCompleted Is Nothing) Then
                Me.SaveUWInfoOperationCompleted = AddressOf Me.OnSaveUWInfoOperationCompleted
            End If
            Me.InvokeAsync("SaveUWInfo", New Object() {strSrc, ds, strError}, Me.SaveUWInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveUWInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveUWInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveUWInfoCompleted(Me, New SaveUWInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetNBSysInfo", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNBSysInfo(ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetNBSysInfo", New Object() {ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNBSysInfoAsync(ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetNBSysInfoAsync(ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNBSysInfoAsync(ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetNBSysInfoOperationCompleted Is Nothing) Then
                Me.GetNBSysInfoOperationCompleted = AddressOf Me.OnGetNBSysInfoOperationCompleted
            End If
            Me.InvokeAsync("GetNBSysInfo", New Object() {ds, strError}, Me.GetNBSysInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNBSysInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNBSysInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNBSysInfoCompleted(Me, New GetNBSysInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/getNBRCodeByCodeName", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getNBRCodeByCodeName(ByVal strPlanCD As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("getNBRCodeByCodeName", New Object() {strPlanCD, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getNBRCodeByCodeNameAsync(ByVal strPlanCD As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.getNBRCodeByCodeNameAsync(strPlanCD, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getNBRCodeByCodeNameAsync(ByVal strPlanCD As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.getNBRCodeByCodeNameOperationCompleted Is Nothing) Then
                Me.getNBRCodeByCodeNameOperationCompleted = AddressOf Me.OngetNBRCodeByCodeNameOperationCompleted
            End If
            Me.InvokeAsync("getNBRCodeByCodeName", New Object() {strPlanCD, ds, strError}, Me.getNBRCodeByCodeNameOperationCompleted, userState)
        End Sub
        
        Private Sub OngetNBRCodeByCodeNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.getNBRCodeByCodeNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getNBRCodeByCodeNameCompleted(Me, New getNBRCodeByCodeNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetSysCompStru", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSysCompStru(ByVal strContType As String, ByRef dtSysCompStru As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSysCompStru", New Object() {strContType, dtSysCompStru, strError})
            dtSysCompStru = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSysCompStruAsync(ByVal strContType As String, ByVal dtSysCompStru As System.Data.DataSet, ByVal strError As String)
            Me.GetSysCompStruAsync(strContType, dtSysCompStru, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSysCompStruAsync(ByVal strContType As String, ByVal dtSysCompStru As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetSysCompStruOperationCompleted Is Nothing) Then
                Me.GetSysCompStruOperationCompleted = AddressOf Me.OnGetSysCompStruOperationCompleted
            End If
            Me.InvokeAsync("GetSysCompStru", New Object() {strContType, dtSysCompStru, strError}, Me.GetSysCompStruOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSysCompStruOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSysCompStruCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSysCompStruCompleted(Me, New GetSysCompStruCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetSysCompStruUW", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSysCompStruUW(ByVal strContType As String, ByRef dtSysCompStru As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSysCompStruUW", New Object() {strContType, dtSysCompStru, strError})
            dtSysCompStru = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSysCompStruUWAsync(ByVal strContType As String, ByVal dtSysCompStru As System.Data.DataSet, ByVal strError As String)
            Me.GetSysCompStruUWAsync(strContType, dtSysCompStru, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSysCompStruUWAsync(ByVal strContType As String, ByVal dtSysCompStru As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetSysCompStruUWOperationCompleted Is Nothing) Then
                Me.GetSysCompStruUWOperationCompleted = AddressOf Me.OnGetSysCompStruUWOperationCompleted
            End If
            Me.InvokeAsync("GetSysCompStruUW", New Object() {strContType, dtSysCompStru, strError}, Me.GetSysCompStruUWOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSysCompStruUWOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSysCompStruUWCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSysCompStruUWCompleted(Me, New GetSysCompStruUWCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetSysContractStru", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSysContractStru(ByRef dtSysContractStru As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSysContractStru", New Object() {dtSysContractStru, strError})
            dtSysContractStru = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSysContractStruAsync(ByVal dtSysContractStru As System.Data.DataSet, ByVal strError As String)
            Me.GetSysContractStruAsync(dtSysContractStru, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSysContractStruAsync(ByVal dtSysContractStru As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetSysContractStruOperationCompleted Is Nothing) Then
                Me.GetSysContractStruOperationCompleted = AddressOf Me.OnGetSysContractStruOperationCompleted
            End If
            Me.InvokeAsync("GetSysContractStru", New Object() {dtSysContractStru, strError}, Me.GetSysContractStruOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSysContractStruOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSysContractStruCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSysContractStruCompleted(Me, New GetSysContractStruCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetOSWNCReportPrtInfo", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOSWNCReportPrtInfo(ByVal strSrc() As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetOSWNCReportPrtInfo", New Object() {strSrc, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOSWNCReportPrtInfoAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetOSWNCReportPrtInfoAsync(strSrc, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOSWNCReportPrtInfoAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetOSWNCReportPrtInfoOperationCompleted Is Nothing) Then
                Me.GetOSWNCReportPrtInfoOperationCompleted = AddressOf Me.OnGetOSWNCReportPrtInfoOperationCompleted
            End If
            Me.InvokeAsync("GetOSWNCReportPrtInfo", New Object() {strSrc, ds, strError}, Me.GetOSWNCReportPrtInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOSWNCReportPrtInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOSWNCReportPrtInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOSWNCReportPrtInfoCompleted(Me, New GetOSWNCReportPrtInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetTransHeader", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransHeader(ByVal dblTransId As Double, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTransHeader", New Object() {dblTransId, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransHeaderAsync(ByVal dblTransId As Double, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetTransHeaderAsync(dblTransId, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransHeaderAsync(ByVal dblTransId As Double, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetTransHeaderOperationCompleted Is Nothing) Then
                Me.GetTransHeaderOperationCompleted = AddressOf Me.OnGetTransHeaderOperationCompleted
            End If
            Me.InvokeAsync("GetTransHeader", New Object() {dblTransId, ds, strError}, Me.GetTransHeaderOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransHeaderOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransHeaderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransHeaderCompleted(Me, New GetTransHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetMonthlyKPI", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMonthlyKPI(ByVal strSrc() As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetMonthlyKPI", New Object() {strSrc, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMonthlyKPIAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetMonthlyKPIAsync(strSrc, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMonthlyKPIAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetMonthlyKPIOperationCompleted Is Nothing) Then
                Me.GetMonthlyKPIOperationCompleted = AddressOf Me.OnGetMonthlyKPIOperationCompleted
            End If
            Me.InvokeAsync("GetMonthlyKPI", New Object() {strSrc, ds, strError}, Me.GetMonthlyKPIOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMonthlyKPIOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMonthlyKPICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMonthlyKPICompleted(Me, New GetMonthlyKPICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetPrintNBControl", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPrintNBControl(ByVal strSrc() As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPrintNBControl", New Object() {strSrc, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPrintNBControlAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetPrintNBControlAsync(strSrc, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPrintNBControlAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetPrintNBControlOperationCompleted Is Nothing) Then
                Me.GetPrintNBControlOperationCompleted = AddressOf Me.OnGetPrintNBControlOperationCompleted
            End If
            Me.InvokeAsync("GetPrintNBControl", New Object() {strSrc, ds, strError}, Me.GetPrintNBControlOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPrintNBControlOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPrintNBControlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPrintNBControlCompleted(Me, New GetPrintNBControlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetFNAInfo", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFNAInfo(ByVal strSrc As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFNAInfo", New Object() {strSrc, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFNAInfoAsync(ByVal strSrc As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetFNAInfoAsync(strSrc, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFNAInfoAsync(ByVal strSrc As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetFNAInfoOperationCompleted Is Nothing) Then
                Me.GetFNAInfoOperationCompleted = AddressOf Me.OnGetFNAInfoOperationCompleted
            End If
            Me.InvokeAsync("GetFNAInfo", New Object() {strSrc, ds, strError}, Me.GetFNAInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFNAInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFNAInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFNAInfoCompleted(Me, New GetFNAInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/SaveFNAInfo", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveFNAInfo(ByVal strSrc As String, ByRef ds As System.Data.DataSet, ByRef strError As String, ByVal strUser As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveFNAInfo", New Object() {strSrc, ds, strError, strUser})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveFNAInfoAsync(ByVal strSrc As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal strUser As String)
            Me.SaveFNAInfoAsync(strSrc, ds, strError, strUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveFNAInfoAsync(ByVal strSrc As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal strUser As String, ByVal userState As Object)
            If (Me.SaveFNAInfoOperationCompleted Is Nothing) Then
                Me.SaveFNAInfoOperationCompleted = AddressOf Me.OnSaveFNAInfoOperationCompleted
            End If
            Me.InvokeAsync("SaveFNAInfo", New Object() {strSrc, ds, strError, strUser}, Me.SaveFNAInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveFNAInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveFNAInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveFNAInfoCompleted(Me, New SaveFNAInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetContCli", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetContCli(ByVal strPo As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetContCli", New Object() {strPo, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetContCliAsync(ByVal strPo As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetContCliAsync(strPo, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetContCliAsync(ByVal strPo As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetContCliOperationCompleted Is Nothing) Then
                Me.GetContCliOperationCompleted = AddressOf Me.OnGetContCliOperationCompleted
            End If
            Me.InvokeAsync("GetContCli", New Object() {strPo, ds, strError}, Me.GetContCliOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetContCliOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetContCliCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetContCliCompleted(Me, New GetContCliCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetSysPlanDistChannel", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSysPlanDistChannel(ByVal strPlan As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSysPlanDistChannel", New Object() {strPlan, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSysPlanDistChannelAsync(ByVal strPlan As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetSysPlanDistChannelAsync(strPlan, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSysPlanDistChannelAsync(ByVal strPlan As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetSysPlanDistChannelOperationCompleted Is Nothing) Then
                Me.GetSysPlanDistChannelOperationCompleted = AddressOf Me.OnGetSysPlanDistChannelOperationCompleted
            End If
            Me.InvokeAsync("GetSysPlanDistChannel", New Object() {strPlan, ds, strError}, Me.GetSysPlanDistChannelOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSysPlanDistChannelOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSysPlanDistChannelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSysPlanDistChannelCompleted(Me, New GetSysPlanDistChannelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetContDtl", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetContDtl(ByVal strPo As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetContDtl", New Object() {strPo, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetContDtlAsync(ByVal strPo As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetContDtlAsync(strPo, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetContDtlAsync(ByVal strPo As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetContDtlOperationCompleted Is Nothing) Then
                Me.GetContDtlOperationCompleted = AddressOf Me.OnGetContDtlOperationCompleted
            End If
            Me.InvokeAsync("GetContDtl", New Object() {strPo, ds, strError}, Me.GetContDtlOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetContDtlOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetContDtlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetContDtlCompleted(Me, New GetContDtlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetPropInfo", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPropInfo(ByVal strSrc() As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPropInfo", New Object() {strSrc, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPropInfoAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetPropInfoAsync(strSrc, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPropInfoAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetPropInfoOperationCompleted Is Nothing) Then
                Me.GetPropInfoOperationCompleted = AddressOf Me.OnGetPropInfoOperationCompleted
            End If
            Me.InvokeAsync("GetPropInfo", New Object() {strSrc, ds, strError}, Me.GetPropInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPropInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPropInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPropInfoCompleted(Me, New GetPropInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/SubmitPropRequest", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SubmitPropRequest(ByVal strSrc() As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Double
            Dim results() As Object = Me.Invoke("SubmitPropRequest", New Object() {strSrc, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Double)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SubmitPropRequestAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.SubmitPropRequestAsync(strSrc, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SubmitPropRequestAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.SubmitPropRequestOperationCompleted Is Nothing) Then
                Me.SubmitPropRequestOperationCompleted = AddressOf Me.OnSubmitPropRequestOperationCompleted
            End If
            Me.InvokeAsync("SubmitPropRequest", New Object() {strSrc, ds, strError}, Me.SubmitPropRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnSubmitPropRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.SubmitPropRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SubmitPropRequestCompleted(Me, New SubmitPropRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/ProcessPropRequest", RequestNamespace:="http://www.ing.com.hk/", OneWay:=true, Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ProcessPropRequest(ByVal dblTransId As Double, ByVal strError As String)
            Me.Invoke("ProcessPropRequest", New Object() {dblTransId, strError})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessPropRequestAsync(ByVal dblTransId As Double, ByVal strError As String)
            Me.ProcessPropRequestAsync(dblTransId, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessPropRequestAsync(ByVal dblTransId As Double, ByVal strError As String, ByVal userState As Object)
            If (Me.ProcessPropRequestOperationCompleted Is Nothing) Then
                Me.ProcessPropRequestOperationCompleted = AddressOf Me.OnProcessPropRequestOperationCompleted
            End If
            Me.InvokeAsync("ProcessPropRequest", New Object() {dblTransId, strError}, Me.ProcessPropRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessPropRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessPropRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessPropRequestCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetUWAdvicePrintingInfo", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUWAdvicePrintingInfo(ByVal strPolicyNo As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUWAdvicePrintingInfo", New Object() {strPolicyNo, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUWAdvicePrintingInfoAsync(ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetUWAdvicePrintingInfoAsync(strPolicyNo, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUWAdvicePrintingInfoAsync(ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetUWAdvicePrintingInfoOperationCompleted Is Nothing) Then
                Me.GetUWAdvicePrintingInfoOperationCompleted = AddressOf Me.OnGetUWAdvicePrintingInfoOperationCompleted
            End If
            Me.InvokeAsync("GetUWAdvicePrintingInfo", New Object() {strPolicyNo, ds, strError}, Me.GetUWAdvicePrintingInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUWAdvicePrintingInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUWAdvicePrintingInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUWAdvicePrintingInfoCompleted(Me, New GetUWAdvicePrintingInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/PrintUWAdviceInBatch", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintUWAdviceInBatch(ByVal strPolicyNo As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("PrintUWAdviceInBatch", New Object() {strPolicyNo, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintUWAdviceInBatchAsync(ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.PrintUWAdviceInBatchAsync(strPolicyNo, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintUWAdviceInBatchAsync(ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.PrintUWAdviceInBatchOperationCompleted Is Nothing) Then
                Me.PrintUWAdviceInBatchOperationCompleted = AddressOf Me.OnPrintUWAdviceInBatchOperationCompleted
            End If
            Me.InvokeAsync("PrintUWAdviceInBatch", New Object() {strPolicyNo, ds, strError}, Me.PrintUWAdviceInBatchOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintUWAdviceInBatchOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintUWAdviceInBatchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintUWAdviceInBatchCompleted(Me, New PrintUWAdviceInBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetUserAuthority", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserAuthority(ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUserAuthority", New Object() {ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserAuthorityAsync(ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetUserAuthorityAsync(ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserAuthorityAsync(ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetUserAuthorityOperationCompleted Is Nothing) Then
                Me.GetUserAuthorityOperationCompleted = AddressOf Me.OnGetUserAuthorityOperationCompleted
            End If
            Me.InvokeAsync("GetUserAuthority", New Object() {ds, strError}, Me.GetUserAuthorityOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserAuthorityOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserAuthorityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserAuthorityCompleted(Me, New GetUserAuthorityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetUserAuthorityByProjectAlias", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserAuthorityByProjectAlias(ByRef ds As System.Data.DataSet, ByRef strError As String, ByVal strUPSHeaderProjectAlias As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUserAuthorityByProjectAlias", New Object() {ds, strError, strUPSHeaderProjectAlias})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserAuthorityByProjectAliasAsync(ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal strUPSHeaderProjectAlias As String)
            Me.GetUserAuthorityByProjectAliasAsync(ds, strError, strUPSHeaderProjectAlias, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserAuthorityByProjectAliasAsync(ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal strUPSHeaderProjectAlias As String, ByVal userState As Object)
            If (Me.GetUserAuthorityByProjectAliasOperationCompleted Is Nothing) Then
                Me.GetUserAuthorityByProjectAliasOperationCompleted = AddressOf Me.OnGetUserAuthorityByProjectAliasOperationCompleted
            End If
            Me.InvokeAsync("GetUserAuthorityByProjectAlias", New Object() {ds, strError, strUPSHeaderProjectAlias}, Me.GetUserAuthorityByProjectAliasOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserAuthorityByProjectAliasOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserAuthorityByProjectAliasCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserAuthorityByProjectAliasCompleted(Me, New GetUserAuthorityByProjectAliasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetUserGroupAuthority", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserGroupAuthority(ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUserGroupAuthority", New Object() {ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserGroupAuthorityAsync(ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetUserGroupAuthorityAsync(ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserGroupAuthorityAsync(ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetUserGroupAuthorityOperationCompleted Is Nothing) Then
                Me.GetUserGroupAuthorityOperationCompleted = AddressOf Me.OnGetUserGroupAuthorityOperationCompleted
            End If
            Me.InvokeAsync("GetUserGroupAuthority", New Object() {ds, strError}, Me.GetUserGroupAuthorityOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserGroupAuthorityOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserGroupAuthorityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserGroupAuthorityCompleted(Me, New GetUserGroupAuthorityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetUwWorksheetPrtInfo", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUwWorksheetPrtInfo(ByVal strPolicyNo As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUwWorksheetPrtInfo", New Object() {strPolicyNo, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUwWorksheetPrtInfoAsync(ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetUwWorksheetPrtInfoAsync(strPolicyNo, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUwWorksheetPrtInfoAsync(ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetUwWorksheetPrtInfoOperationCompleted Is Nothing) Then
                Me.GetUwWorksheetPrtInfoOperationCompleted = AddressOf Me.OnGetUwWorksheetPrtInfoOperationCompleted
            End If
            Me.InvokeAsync("GetUwWorksheetPrtInfo", New Object() {strPolicyNo, ds, strError}, Me.GetUwWorksheetPrtInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUwWorksheetPrtInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUwWorksheetPrtInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUwWorksheetPrtInfoCompleted(Me, New GetUwWorksheetPrtInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetUWworkSheetToPrint", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUWworkSheetToPrint(ByVal strDate As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUWworkSheetToPrint", New Object() {strDate, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUWworkSheetToPrintAsync(ByVal strDate As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetUWworkSheetToPrintAsync(strDate, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUWworkSheetToPrintAsync(ByVal strDate As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetUWworkSheetToPrintOperationCompleted Is Nothing) Then
                Me.GetUWworkSheetToPrintOperationCompleted = AddressOf Me.OnGetUWworkSheetToPrintOperationCompleted
            End If
            Me.InvokeAsync("GetUWworkSheetToPrint", New Object() {strDate, ds, strError}, Me.GetUWworkSheetToPrintOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUWworkSheetToPrintOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUWworkSheetToPrintCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUWworkSheetToPrintCompleted(Me, New GetUWworkSheetToPrintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/MarkUWworkSheetSuccess", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MarkUWworkSheetSuccess(ByVal strSrc() As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("MarkUWworkSheetSuccess", New Object() {strSrc, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MarkUWworkSheetSuccessAsync(ByVal strSrc() As String, ByVal strError As String)
            Me.MarkUWworkSheetSuccessAsync(strSrc, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MarkUWworkSheetSuccessAsync(ByVal strSrc() As String, ByVal strError As String, ByVal userState As Object)
            If (Me.MarkUWworkSheetSuccessOperationCompleted Is Nothing) Then
                Me.MarkUWworkSheetSuccessOperationCompleted = AddressOf Me.OnMarkUWworkSheetSuccessOperationCompleted
            End If
            Me.InvokeAsync("MarkUWworkSheetSuccess", New Object() {strSrc, strError}, Me.MarkUWworkSheetSuccessOperationCompleted, userState)
        End Sub
        
        Private Sub OnMarkUWworkSheetSuccessOperationCompleted(ByVal arg As Object)
            If (Not (Me.MarkUWworkSheetSuccessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MarkUWworkSheetSuccessCompleted(Me, New MarkUWworkSheetSuccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/CheckEdorToDeleteInCM", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckEdorToDeleteInCM(ByVal strTmpFileName As String, ByVal strVIUserID As String, ByVal strPassword As String, ByVal strServer As String, ByVal strTmpPolicyno As String, ByVal strInsuredName As String, ByVal strInsuredID As String, ByVal strDocType As String, ByVal strBusinessType As String, ByVal datCreate As Date, ByVal strUserName As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckEdorToDeleteInCM", New Object() {strTmpFileName, strVIUserID, strPassword, strServer, strTmpPolicyno, strInsuredName, strInsuredID, strDocType, strBusinessType, datCreate, strUserName, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckEdorToDeleteInCMAsync(ByVal strTmpFileName As String, ByVal strVIUserID As String, ByVal strPassword As String, ByVal strServer As String, ByVal strTmpPolicyno As String, ByVal strInsuredName As String, ByVal strInsuredID As String, ByVal strDocType As String, ByVal strBusinessType As String, ByVal datCreate As Date, ByVal strUserName As String, ByVal strError As String)
            Me.CheckEdorToDeleteInCMAsync(strTmpFileName, strVIUserID, strPassword, strServer, strTmpPolicyno, strInsuredName, strInsuredID, strDocType, strBusinessType, datCreate, strUserName, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckEdorToDeleteInCMAsync(ByVal strTmpFileName As String, ByVal strVIUserID As String, ByVal strPassword As String, ByVal strServer As String, ByVal strTmpPolicyno As String, ByVal strInsuredName As String, ByVal strInsuredID As String, ByVal strDocType As String, ByVal strBusinessType As String, ByVal datCreate As Date, ByVal strUserName As String, ByVal strError As String, ByVal userState As Object)
            If (Me.CheckEdorToDeleteInCMOperationCompleted Is Nothing) Then
                Me.CheckEdorToDeleteInCMOperationCompleted = AddressOf Me.OnCheckEdorToDeleteInCMOperationCompleted
            End If
            Me.InvokeAsync("CheckEdorToDeleteInCM", New Object() {strTmpFileName, strVIUserID, strPassword, strServer, strTmpPolicyno, strInsuredName, strInsuredID, strDocType, strBusinessType, datCreate, strUserName, strError}, Me.CheckEdorToDeleteInCMOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckEdorToDeleteInCMOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckEdorToDeleteInCMCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckEdorToDeleteInCMCompleted(Me, New CheckEdorToDeleteInCMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetOfferLetterPrtInfo", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOfferLetterPrtInfo(ByVal strPolicyNo As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetOfferLetterPrtInfo", New Object() {strPolicyNo, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOfferLetterPrtInfoAsync(ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetOfferLetterPrtInfoAsync(strPolicyNo, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOfferLetterPrtInfoAsync(ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetOfferLetterPrtInfoOperationCompleted Is Nothing) Then
                Me.GetOfferLetterPrtInfoOperationCompleted = AddressOf Me.OnGetOfferLetterPrtInfoOperationCompleted
            End If
            Me.InvokeAsync("GetOfferLetterPrtInfo", New Object() {strPolicyNo, ds, strError}, Me.GetOfferLetterPrtInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOfferLetterPrtInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOfferLetterPrtInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOfferLetterPrtInfoCompleted(Me, New GetOfferLetterPrtInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetLoadingExclusionPrtInfo", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLoadingExclusionPrtInfo(ByVal strPolicyNo As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLoadingExclusionPrtInfo", New Object() {strPolicyNo, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLoadingExclusionPrtInfoAsync(ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetLoadingExclusionPrtInfoAsync(strPolicyNo, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLoadingExclusionPrtInfoAsync(ByVal strPolicyNo As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetLoadingExclusionPrtInfoOperationCompleted Is Nothing) Then
                Me.GetLoadingExclusionPrtInfoOperationCompleted = AddressOf Me.OnGetLoadingExclusionPrtInfoOperationCompleted
            End If
            Me.InvokeAsync("GetLoadingExclusionPrtInfo", New Object() {strPolicyNo, ds, strError}, Me.GetLoadingExclusionPrtInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLoadingExclusionPrtInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLoadingExclusionPrtInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLoadingExclusionPrtInfoCompleted(Me, New GetLoadingExclusionPrtInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetFirstYearComRate", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFirstYearComRate(ByVal iPlanCode As String, ByVal iChannel As String, ByVal iAge As Integer, ByVal iTerm As String, ByRef oCommRate As Double, ByRef dsRate As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFirstYearComRate", New Object() {iPlanCode, iChannel, iAge, iTerm, oCommRate, dsRate, strError})
            oCommRate = CType(results(1),Double)
            dsRate = CType(results(2),System.Data.DataSet)
            strError = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFirstYearComRateAsync(ByVal iPlanCode As String, ByVal iChannel As String, ByVal iAge As Integer, ByVal iTerm As String, ByVal oCommRate As Double, ByVal dsRate As System.Data.DataSet, ByVal strError As String)
            Me.GetFirstYearComRateAsync(iPlanCode, iChannel, iAge, iTerm, oCommRate, dsRate, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFirstYearComRateAsync(ByVal iPlanCode As String, ByVal iChannel As String, ByVal iAge As Integer, ByVal iTerm As String, ByVal oCommRate As Double, ByVal dsRate As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetFirstYearComRateOperationCompleted Is Nothing) Then
                Me.GetFirstYearComRateOperationCompleted = AddressOf Me.OnGetFirstYearComRateOperationCompleted
            End If
            Me.InvokeAsync("GetFirstYearComRate", New Object() {iPlanCode, iChannel, iAge, iTerm, oCommRate, dsRate, strError}, Me.GetFirstYearComRateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFirstYearComRateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFirstYearComRateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFirstYearComRateCompleted(Me, New GetFirstYearComRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetProposalFYCInfo", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProposalFYCInfo(ByVal iPolicyNo As String, ByRef dsCommission As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetProposalFYCInfo", New Object() {iPolicyNo, dsCommission, strError})
            dsCommission = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProposalFYCInfoAsync(ByVal iPolicyNo As String, ByVal dsCommission As System.Data.DataSet, ByVal strError As String)
            Me.GetProposalFYCInfoAsync(iPolicyNo, dsCommission, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProposalFYCInfoAsync(ByVal iPolicyNo As String, ByVal dsCommission As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetProposalFYCInfoOperationCompleted Is Nothing) Then
                Me.GetProposalFYCInfoOperationCompleted = AddressOf Me.OnGetProposalFYCInfoOperationCompleted
            End If
            Me.InvokeAsync("GetProposalFYCInfo", New Object() {iPolicyNo, dsCommission, strError}, Me.GetProposalFYCInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProposalFYCInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProposalFYCInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProposalFYCInfoCompleted(Me, New GetProposalFYCInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetSysBusinessDate", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSysBusinessDate(ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSysBusinessDate", New Object() {ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSysBusinessDateAsync(ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.GetSysBusinessDateAsync(ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSysBusinessDateAsync(ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetSysBusinessDateOperationCompleted Is Nothing) Then
                Me.GetSysBusinessDateOperationCompleted = AddressOf Me.OnGetSysBusinessDateOperationCompleted
            End If
            Me.InvokeAsync("GetSysBusinessDate", New Object() {ds, strError}, Me.GetSysBusinessDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSysBusinessDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSysBusinessDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSysBusinessDateCompleted(Me, New GetSysBusinessDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/checkUWAuthority", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function checkUWAuthority(ByVal iPolicyNo As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("checkUWAuthority", New Object() {iPolicyNo, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub checkUWAuthorityAsync(ByVal iPolicyNo As String, ByVal strError As String)
            Me.checkUWAuthorityAsync(iPolicyNo, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub checkUWAuthorityAsync(ByVal iPolicyNo As String, ByVal strError As String, ByVal userState As Object)
            If (Me.checkUWAuthorityOperationCompleted Is Nothing) Then
                Me.checkUWAuthorityOperationCompleted = AddressOf Me.OncheckUWAuthorityOperationCompleted
            End If
            Me.InvokeAsync("checkUWAuthority", New Object() {iPolicyNo, strError}, Me.checkUWAuthorityOperationCompleted, userState)
        End Sub
        
        Private Sub OncheckUWAuthorityOperationCompleted(ByVal arg As Object)
            If (Not (Me.checkUWAuthorityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent checkUWAuthorityCompleted(Me, New checkUWAuthorityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/ConvertIcrAppl2LifeAsia", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConvertIcrAppl2LifeAsia(ByVal strPolicyNo As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("ConvertIcrAppl2LifeAsia", New Object() {strPolicyNo, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConvertIcrAppl2LifeAsiaAsync(ByVal strPolicyNo As String, ByVal strError As String)
            Me.ConvertIcrAppl2LifeAsiaAsync(strPolicyNo, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConvertIcrAppl2LifeAsiaAsync(ByVal strPolicyNo As String, ByVal strError As String, ByVal userState As Object)
            If (Me.ConvertIcrAppl2LifeAsiaOperationCompleted Is Nothing) Then
                Me.ConvertIcrAppl2LifeAsiaOperationCompleted = AddressOf Me.OnConvertIcrAppl2LifeAsiaOperationCompleted
            End If
            Me.InvokeAsync("ConvertIcrAppl2LifeAsia", New Object() {strPolicyNo, strError}, Me.ConvertIcrAppl2LifeAsiaOperationCompleted, userState)
        End Sub
        
        Private Sub OnConvertIcrAppl2LifeAsiaOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConvertIcrAppl2LifeAsiaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConvertIcrAppl2LifeAsiaCompleted(Me, New ConvertIcrAppl2LifeAsiaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/UpdateSysInfo", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateSysInfo(ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateSysInfo", New Object() {strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateSysInfoAsync(ByVal strError As String)
            Me.UpdateSysInfoAsync(strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSysInfoAsync(ByVal strError As String, ByVal userState As Object)
            If (Me.UpdateSysInfoOperationCompleted Is Nothing) Then
                Me.UpdateSysInfoOperationCompleted = AddressOf Me.OnUpdateSysInfoOperationCompleted
            End If
            Me.InvokeAsync("UpdateSysInfo", New Object() {strError}, Me.UpdateSysInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSysInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSysInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSysInfoCompleted(Me, New UpdateSysInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetIllustrationPrintList", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIllustrationPrintList(ByVal PrintDate As Date, ByRef ds As System.Data.DataSet, ByRef strError As String, ByVal PolicyNo As String) As Boolean
            Dim results() As Object = Me.Invoke("GetIllustrationPrintList", New Object() {PrintDate, ds, strError, PolicyNo})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIllustrationPrintListAsync(ByVal PrintDate As Date, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal PolicyNo As String)
            Me.GetIllustrationPrintListAsync(PrintDate, ds, strError, PolicyNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIllustrationPrintListAsync(ByVal PrintDate As Date, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal PolicyNo As String, ByVal userState As Object)
            If (Me.GetIllustrationPrintListOperationCompleted Is Nothing) Then
                Me.GetIllustrationPrintListOperationCompleted = AddressOf Me.OnGetIllustrationPrintListOperationCompleted
            End If
            Me.InvokeAsync("GetIllustrationPrintList", New Object() {PrintDate, ds, strError, PolicyNo}, Me.GetIllustrationPrintListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIllustrationPrintListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIllustrationPrintListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIllustrationPrintListCompleted(Me, New GetIllustrationPrintListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/ClearCMImage", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ClearCMImage(ByVal strPolicyNo As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("ClearCMImage", New Object() {strPolicyNo, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ClearCMImageAsync(ByVal strPolicyNo As String, ByVal strError As String)
            Me.ClearCMImageAsync(strPolicyNo, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClearCMImageAsync(ByVal strPolicyNo As String, ByVal strError As String, ByVal userState As Object)
            If (Me.ClearCMImageOperationCompleted Is Nothing) Then
                Me.ClearCMImageOperationCompleted = AddressOf Me.OnClearCMImageOperationCompleted
            End If
            Me.InvokeAsync("ClearCMImage", New Object() {strPolicyNo, strError}, Me.ClearCMImageOperationCompleted, userState)
        End Sub
        
        Private Sub OnClearCMImageOperationCompleted(ByVal arg As Object)
            If (Not (Me.ClearCMImageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ClearCMImageCompleted(Me, New ClearCMImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetEdorExportPara", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEdorExportPara(ByRef strExportDriver As String, ByRef strTIFName As String, ByRef strTIFDir As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetEdorExportPara", New Object() {strExportDriver, strTIFName, strTIFDir, strError})
            strExportDriver = CType(results(1),String)
            strTIFName = CType(results(2),String)
            strTIFDir = CType(results(3),String)
            strError = CType(results(4),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEdorExportParaAsync(ByVal strExportDriver As String, ByVal strTIFName As String, ByVal strTIFDir As String, ByVal strError As String)
            Me.GetEdorExportParaAsync(strExportDriver, strTIFName, strTIFDir, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEdorExportParaAsync(ByVal strExportDriver As String, ByVal strTIFName As String, ByVal strTIFDir As String, ByVal strError As String, ByVal userState As Object)
            If (Me.GetEdorExportParaOperationCompleted Is Nothing) Then
                Me.GetEdorExportParaOperationCompleted = AddressOf Me.OnGetEdorExportParaOperationCompleted
            End If
            Me.InvokeAsync("GetEdorExportPara", New Object() {strExportDriver, strTIFName, strTIFDir, strError}, Me.GetEdorExportParaOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEdorExportParaOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEdorExportParaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEdorExportParaCompleted(Me, New GetEdorExportParaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/UpdateIllustrationPrintStatus", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateIllustrationPrintStatus(ByVal strPolicyNo As String, ByVal strTiffFile As String, ByVal strIndexClass As String, ByVal strBasicInsuredId As String, ByVal strBasicInsuredName As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateIllustrationPrintStatus", New Object() {strPolicyNo, strTiffFile, strIndexClass, strBasicInsuredId, strBasicInsuredName, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateIllustrationPrintStatusAsync(ByVal strPolicyNo As String, ByVal strTiffFile As String, ByVal strIndexClass As String, ByVal strBasicInsuredId As String, ByVal strBasicInsuredName As String, ByVal strError As String)
            Me.UpdateIllustrationPrintStatusAsync(strPolicyNo, strTiffFile, strIndexClass, strBasicInsuredId, strBasicInsuredName, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateIllustrationPrintStatusAsync(ByVal strPolicyNo As String, ByVal strTiffFile As String, ByVal strIndexClass As String, ByVal strBasicInsuredId As String, ByVal strBasicInsuredName As String, ByVal strError As String, ByVal userState As Object)
            If (Me.UpdateIllustrationPrintStatusOperationCompleted Is Nothing) Then
                Me.UpdateIllustrationPrintStatusOperationCompleted = AddressOf Me.OnUpdateIllustrationPrintStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateIllustrationPrintStatus", New Object() {strPolicyNo, strTiffFile, strIndexClass, strBasicInsuredId, strBasicInsuredName, strError}, Me.UpdateIllustrationPrintStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateIllustrationPrintStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateIllustrationPrintStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateIllustrationPrintStatusCompleted(Me, New UpdateIllustrationPrintStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetSysAvaiFundList", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSysAvaiFundList(ByRef ds As System.Data.DataSet, ByRef strPlanCode As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSysAvaiFundList", New Object() {ds, strPlanCode})
            ds = CType(results(1),System.Data.DataSet)
            strPlanCode = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSysAvaiFundListAsync(ByVal ds As System.Data.DataSet, ByVal strPlanCode As String)
            Me.GetSysAvaiFundListAsync(ds, strPlanCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSysAvaiFundListAsync(ByVal ds As System.Data.DataSet, ByVal strPlanCode As String, ByVal userState As Object)
            If (Me.GetSysAvaiFundListOperationCompleted Is Nothing) Then
                Me.GetSysAvaiFundListOperationCompleted = AddressOf Me.OnGetSysAvaiFundListOperationCompleted
            End If
            Me.InvokeAsync("GetSysAvaiFundList", New Object() {ds, strPlanCode}, Me.GetSysAvaiFundListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSysAvaiFundListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSysAvaiFundListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSysAvaiFundListCompleted(Me, New GetSysAvaiFundListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetSysFundRules", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSysFundRules(ByRef ds As System.Data.DataSet, ByRef strPlanCode As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSysFundRules", New Object() {ds, strPlanCode})
            ds = CType(results(1),System.Data.DataSet)
            strPlanCode = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSysFundRulesAsync(ByVal ds As System.Data.DataSet, ByVal strPlanCode As String)
            Me.GetSysFundRulesAsync(ds, strPlanCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSysFundRulesAsync(ByVal ds As System.Data.DataSet, ByVal strPlanCode As String, ByVal userState As Object)
            If (Me.GetSysFundRulesOperationCompleted Is Nothing) Then
                Me.GetSysFundRulesOperationCompleted = AddressOf Me.OnGetSysFundRulesOperationCompleted
            End If
            Me.InvokeAsync("GetSysFundRules", New Object() {ds, strPlanCode}, Me.GetSysFundRulesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSysFundRulesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSysFundRulesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSysFundRulesCompleted(Me, New GetSysFundRulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetBasicInsuredInfoFromNB", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBasicInsuredInfoFromNB(ByVal strSrc() As String, ByRef dsInsuredInfo As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetBasicInsuredInfoFromNB", New Object() {strSrc, dsInsuredInfo, strError})
            dsInsuredInfo = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBasicInsuredInfoFromNBAsync(ByVal strSrc() As String, ByVal dsInsuredInfo As System.Data.DataSet, ByVal strError As String)
            Me.GetBasicInsuredInfoFromNBAsync(strSrc, dsInsuredInfo, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBasicInsuredInfoFromNBAsync(ByVal strSrc() As String, ByVal dsInsuredInfo As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetBasicInsuredInfoFromNBOperationCompleted Is Nothing) Then
                Me.GetBasicInsuredInfoFromNBOperationCompleted = AddressOf Me.OnGetBasicInsuredInfoFromNBOperationCompleted
            End If
            Me.InvokeAsync("GetBasicInsuredInfoFromNB", New Object() {strSrc, dsInsuredInfo, strError}, Me.GetBasicInsuredInfoFromNBOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBasicInsuredInfoFromNBOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBasicInsuredInfoFromNBCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBasicInsuredInfoFromNBCompleted(Me, New GetBasicInsuredInfoFromNBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetPolicyPaymentInfo", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyPaymentInfo(ByVal strPolicyNo As String, ByRef dsPaymentInfo As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPolicyPaymentInfo", New Object() {strPolicyNo, dsPaymentInfo, strError})
            dsPaymentInfo = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyPaymentInfoAsync(ByVal strPolicyNo As String, ByVal dsPaymentInfo As System.Data.DataSet, ByVal strError As String)
            Me.GetPolicyPaymentInfoAsync(strPolicyNo, dsPaymentInfo, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyPaymentInfoAsync(ByVal strPolicyNo As String, ByVal dsPaymentInfo As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetPolicyPaymentInfoOperationCompleted Is Nothing) Then
                Me.GetPolicyPaymentInfoOperationCompleted = AddressOf Me.OnGetPolicyPaymentInfoOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyPaymentInfo", New Object() {strPolicyNo, dsPaymentInfo, strError}, Me.GetPolicyPaymentInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyPaymentInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyPaymentInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyPaymentInfoCompleted(Me, New GetPolicyPaymentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/PrintWeeklyAPE", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintWeeklyAPE(ByVal strSrc() As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("PrintWeeklyAPE", New Object() {strSrc, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintWeeklyAPEAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.PrintWeeklyAPEAsync(strSrc, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintWeeklyAPEAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.PrintWeeklyAPEOperationCompleted Is Nothing) Then
                Me.PrintWeeklyAPEOperationCompleted = AddressOf Me.OnPrintWeeklyAPEOperationCompleted
            End If
            Me.InvokeAsync("PrintWeeklyAPE", New Object() {strSrc, ds, strError}, Me.PrintWeeklyAPEOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintWeeklyAPEOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintWeeklyAPECompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintWeeklyAPECompleted(Me, New PrintWeeklyAPECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/PrintMonthlyAPE", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintMonthlyAPE(ByVal strSrc() As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("PrintMonthlyAPE", New Object() {strSrc, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintMonthlyAPEAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.PrintMonthlyAPEAsync(strSrc, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintMonthlyAPEAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.PrintMonthlyAPEOperationCompleted Is Nothing) Then
                Me.PrintMonthlyAPEOperationCompleted = AddressOf Me.OnPrintMonthlyAPEOperationCompleted
            End If
            Me.InvokeAsync("PrintMonthlyAPE", New Object() {strSrc, ds, strError}, Me.PrintMonthlyAPEOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintMonthlyAPEOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintMonthlyAPECompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintMonthlyAPECompleted(Me, New PrintMonthlyAPECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/PrintAMCM", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintAMCM(ByVal strSrc() As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("PrintAMCM", New Object() {strSrc, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintAMCMAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.PrintAMCMAsync(strSrc, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintAMCMAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.PrintAMCMOperationCompleted Is Nothing) Then
                Me.PrintAMCMOperationCompleted = AddressOf Me.OnPrintAMCMOperationCompleted
            End If
            Me.InvokeAsync("PrintAMCM", New Object() {strSrc, ds, strError}, Me.PrintAMCMOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintAMCMOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintAMCMCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintAMCMCompleted(Me, New PrintAMCMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/PrintAMCMQuarterly", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintAMCMQuarterly(ByVal strSrc() As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("PrintAMCMQuarterly", New Object() {strSrc, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintAMCMQuarterlyAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.PrintAMCMQuarterlyAsync(strSrc, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintAMCMQuarterlyAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.PrintAMCMQuarterlyOperationCompleted Is Nothing) Then
                Me.PrintAMCMQuarterlyOperationCompleted = AddressOf Me.OnPrintAMCMQuarterlyOperationCompleted
            End If
            Me.InvokeAsync("PrintAMCMQuarterly", New Object() {strSrc, ds, strError}, Me.PrintAMCMQuarterlyOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintAMCMQuarterlyOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintAMCMQuarterlyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintAMCMQuarterlyCompleted(Me, New PrintAMCMQuarterlyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/PrintPOSur", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintPOSur(ByVal strSrc() As String, ByRef ds As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("PrintPOSur", New Object() {strSrc, ds, strError})
            ds = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintPOSurAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String)
            Me.PrintPOSurAsync(strSrc, ds, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintPOSurAsync(ByVal strSrc() As String, ByVal ds As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.PrintPOSurOperationCompleted Is Nothing) Then
                Me.PrintPOSurOperationCompleted = AddressOf Me.OnPrintPOSurOperationCompleted
            End If
            Me.InvokeAsync("PrintPOSur", New Object() {strSrc, ds, strError}, Me.PrintPOSurOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintPOSurOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintPOSurCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintPOSurCompleted(Me, New PrintPOSurCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/SendSMSOutReq", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendSMSOutReq(ByVal strPolicyNo As String, ByVal strAgentCode As String, ByVal strInsuredName As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("SendSMSOutReq", New Object() {strPolicyNo, strAgentCode, strInsuredName, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendSMSOutReqAsync(ByVal strPolicyNo As String, ByVal strAgentCode As String, ByVal strInsuredName As String, ByVal strError As String)
            Me.SendSMSOutReqAsync(strPolicyNo, strAgentCode, strInsuredName, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendSMSOutReqAsync(ByVal strPolicyNo As String, ByVal strAgentCode As String, ByVal strInsuredName As String, ByVal strError As String, ByVal userState As Object)
            If (Me.SendSMSOutReqOperationCompleted Is Nothing) Then
                Me.SendSMSOutReqOperationCompleted = AddressOf Me.OnSendSMSOutReqOperationCompleted
            End If
            Me.InvokeAsync("SendSMSOutReq", New Object() {strPolicyNo, strAgentCode, strInsuredName, strError}, Me.SendSMSOutReqOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendSMSOutReqOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendSMSOutReqCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendSMSOutReqCompleted(Me, New SendSMSOutReqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetUWAdviceMsgLog", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUWAdviceMsgLog(ByVal strSrc() As String, ByRef dsMain As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUWAdviceMsgLog", New Object() {strSrc, dsMain, strError})
            dsMain = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUWAdviceMsgLogAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String)
            Me.GetUWAdviceMsgLogAsync(strSrc, dsMain, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUWAdviceMsgLogAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetUWAdviceMsgLogOperationCompleted Is Nothing) Then
                Me.GetUWAdviceMsgLogOperationCompleted = AddressOf Me.OnGetUWAdviceMsgLogOperationCompleted
            End If
            Me.InvokeAsync("GetUWAdviceMsgLog", New Object() {strSrc, dsMain, strError}, Me.GetUWAdviceMsgLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUWAdviceMsgLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUWAdviceMsgLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUWAdviceMsgLogCompleted(Me, New GetUWAdviceMsgLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetUWOSReq", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUWOSReq(ByVal strSrc() As String, ByRef dsMain As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetUWOSReq", New Object() {strSrc, dsMain, strError})
            dsMain = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUWOSReqAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String)
            Me.GetUWOSReqAsync(strSrc, dsMain, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUWOSReqAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetUWOSReqOperationCompleted Is Nothing) Then
                Me.GetUWOSReqOperationCompleted = AddressOf Me.OnGetUWOSReqOperationCompleted
            End If
            Me.InvokeAsync("GetUWOSReq", New Object() {strSrc, dsMain, strError}, Me.GetUWOSReqOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUWOSReqOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUWOSReqCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUWOSReqCompleted(Me, New GetUWOSReqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/SendMail", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendMail(ByVal strHost As String, ByVal strFrom As String, ByVal strTo() As String, ByVal strCC() As String, ByVal strBcc() As String, ByVal strSubject As String, ByVal strBody As String, ByVal strAttachName As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal oAttachment() As Byte, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("SendMail", New Object() {strHost, strFrom, strTo, strCC, strBcc, strSubject, strBody, strAttachName, oAttachment, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendMailAsync(ByVal strHost As String, ByVal strFrom As String, ByVal strTo() As String, ByVal strCC() As String, ByVal strBcc() As String, ByVal strSubject As String, ByVal strBody As String, ByVal strAttachName As String, ByVal oAttachment() As Byte, ByVal strError As String)
            Me.SendMailAsync(strHost, strFrom, strTo, strCC, strBcc, strSubject, strBody, strAttachName, oAttachment, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendMailAsync(ByVal strHost As String, ByVal strFrom As String, ByVal strTo() As String, ByVal strCC() As String, ByVal strBcc() As String, ByVal strSubject As String, ByVal strBody As String, ByVal strAttachName As String, ByVal oAttachment() As Byte, ByVal strError As String, ByVal userState As Object)
            If (Me.SendMailOperationCompleted Is Nothing) Then
                Me.SendMailOperationCompleted = AddressOf Me.OnSendMailOperationCompleted
            End If
            Me.InvokeAsync("SendMail", New Object() {strHost, strFrom, strTo, strCC, strBcc, strSubject, strBody, strAttachName, oAttachment, strError}, Me.SendMailOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendMailOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendMailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendMailCompleted(Me, New SendMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/InsertUWAdviceMsgLog", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertUWAdviceMsgLog(ByVal strSrc() As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("InsertUWAdviceMsgLog", New Object() {strSrc, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertUWAdviceMsgLogAsync(ByVal strSrc() As String, ByVal strError As String)
            Me.InsertUWAdviceMsgLogAsync(strSrc, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertUWAdviceMsgLogAsync(ByVal strSrc() As String, ByVal strError As String, ByVal userState As Object)
            If (Me.InsertUWAdviceMsgLogOperationCompleted Is Nothing) Then
                Me.InsertUWAdviceMsgLogOperationCompleted = AddressOf Me.OnInsertUWAdviceMsgLogOperationCompleted
            End If
            Me.InvokeAsync("InsertUWAdviceMsgLog", New Object() {strSrc, strError}, Me.InsertUWAdviceMsgLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertUWAdviceMsgLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertUWAdviceMsgLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertUWAdviceMsgLogCompleted(Me, New InsertUWAdviceMsgLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/CheckMandateExist", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckMandateExist(ByVal strSrc() As String, ByRef dsMain As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckMandateExist", New Object() {strSrc, dsMain, strError})
            dsMain = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckMandateExistAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String)
            Me.CheckMandateExistAsync(strSrc, dsMain, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckMandateExistAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.CheckMandateExistOperationCompleted Is Nothing) Then
                Me.CheckMandateExistOperationCompleted = AddressOf Me.OnCheckMandateExistOperationCompleted
            End If
            Me.InvokeAsync("CheckMandateExist", New Object() {strSrc, dsMain, strError}, Me.CheckMandateExistOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckMandateExistOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckMandateExistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckMandateExistCompleted(Me, New CheckMandateExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/SaveUWAdviceHistory", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveUWAdviceHistory(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveUWAdviceHistory", New Object() {strSrc, dsMain, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveUWAdviceHistoryAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String)
            Me.SaveUWAdviceHistoryAsync(strSrc, dsMain, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveUWAdviceHistoryAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.SaveUWAdviceHistoryOperationCompleted Is Nothing) Then
                Me.SaveUWAdviceHistoryOperationCompleted = AddressOf Me.OnSaveUWAdviceHistoryOperationCompleted
            End If
            Me.InvokeAsync("SaveUWAdviceHistory", New Object() {strSrc, dsMain, strError}, Me.SaveUWAdviceHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveUWAdviceHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveUWAdviceHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveUWAdviceHistoryCompleted(Me, New SaveUWAdviceHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetPOSMarkinInfoForUW", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPOSMarkinInfoForUW(ByVal IngInsuredId As Long, ByRef dsMarkinInfo As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPOSMarkinInfoForUW", New Object() {IngInsuredId, dsMarkinInfo, strError})
            dsMarkinInfo = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPOSMarkinInfoForUWAsync(ByVal IngInsuredId As Long, ByVal dsMarkinInfo As System.Data.DataSet, ByVal strError As String)
            Me.GetPOSMarkinInfoForUWAsync(IngInsuredId, dsMarkinInfo, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPOSMarkinInfoForUWAsync(ByVal IngInsuredId As Long, ByVal dsMarkinInfo As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetPOSMarkinInfoForUWOperationCompleted Is Nothing) Then
                Me.GetPOSMarkinInfoForUWOperationCompleted = AddressOf Me.OnGetPOSMarkinInfoForUWOperationCompleted
            End If
            Me.InvokeAsync("GetPOSMarkinInfoForUW", New Object() {IngInsuredId, dsMarkinInfo, strError}, Me.GetPOSMarkinInfoForUWOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPOSMarkinInfoForUWOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPOSMarkinInfoForUWCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPOSMarkinInfoForUWCompleted(Me, New GetPOSMarkinInfoForUWCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/IsLastClientSavedUsingUpdatedFECTable", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsLastClientSavedUsingUpdatedFECTable(ByRef IsCheckFEC As Boolean, ByVal intInsuredID As Long, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("IsLastClientSavedUsingUpdatedFECTable", New Object() {IsCheckFEC, intInsuredID, strError})
            IsCheckFEC = CType(results(1),Boolean)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsLastClientSavedUsingUpdatedFECTableAsync(ByVal IsCheckFEC As Boolean, ByVal intInsuredID As Long, ByVal strError As String)
            Me.IsLastClientSavedUsingUpdatedFECTableAsync(IsCheckFEC, intInsuredID, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsLastClientSavedUsingUpdatedFECTableAsync(ByVal IsCheckFEC As Boolean, ByVal intInsuredID As Long, ByVal strError As String, ByVal userState As Object)
            If (Me.IsLastClientSavedUsingUpdatedFECTableOperationCompleted Is Nothing) Then
                Me.IsLastClientSavedUsingUpdatedFECTableOperationCompleted = AddressOf Me.OnIsLastClientSavedUsingUpdatedFECTableOperationCompleted
            End If
            Me.InvokeAsync("IsLastClientSavedUsingUpdatedFECTable", New Object() {IsCheckFEC, intInsuredID, strError}, Me.IsLastClientSavedUsingUpdatedFECTableOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsLastClientSavedUsingUpdatedFECTableOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsLastClientSavedUsingUpdatedFECTableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsLastClientSavedUsingUpdatedFECTableCompleted(Me, New IsLastClientSavedUsingUpdatedFECTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/ValidCCSPlanCd", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidCCSPlanCd(ByRef IsValidPol As Boolean, ByVal policyNo As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("ValidCCSPlanCd", New Object() {IsValidPol, policyNo, strError})
            IsValidPol = CType(results(1),Boolean)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidCCSPlanCdAsync(ByVal IsValidPol As Boolean, ByVal policyNo As String, ByVal strError As String)
            Me.ValidCCSPlanCdAsync(IsValidPol, policyNo, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidCCSPlanCdAsync(ByVal IsValidPol As Boolean, ByVal policyNo As String, ByVal strError As String, ByVal userState As Object)
            If (Me.ValidCCSPlanCdOperationCompleted Is Nothing) Then
                Me.ValidCCSPlanCdOperationCompleted = AddressOf Me.OnValidCCSPlanCdOperationCompleted
            End If
            Me.InvokeAsync("ValidCCSPlanCd", New Object() {IsValidPol, policyNo, strError}, Me.ValidCCSPlanCdOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidCCSPlanCdOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidCCSPlanCdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidCCSPlanCdCompleted(Me, New ValidCCSPlanCdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/AlterPolAfterInforce", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AlterPolAfterInforce(ByVal dsSendData As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("AlterPolAfterInforce", New Object() {dsSendData, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AlterPolAfterInforceAsync(ByVal dsSendData As System.Data.DataSet, ByVal strError As String)
            Me.AlterPolAfterInforceAsync(dsSendData, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AlterPolAfterInforceAsync(ByVal dsSendData As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.AlterPolAfterInforceOperationCompleted Is Nothing) Then
                Me.AlterPolAfterInforceOperationCompleted = AddressOf Me.OnAlterPolAfterInforceOperationCompleted
            End If
            Me.InvokeAsync("AlterPolAfterInforce", New Object() {dsSendData, strError}, Me.AlterPolAfterInforceOperationCompleted, userState)
        End Sub
        
        Private Sub OnAlterPolAfterInforceOperationCompleted(ByVal arg As Object)
            If (Not (Me.AlterPolAfterInforceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AlterPolAfterInforceCompleted(Me, New AlterPolAfterInforceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/MISReportTransfer", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MISReportTransfer(ByVal strSrc() As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("MISReportTransfer", New Object() {strSrc, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MISReportTransferAsync(ByVal strSrc() As String, ByVal strError As String)
            Me.MISReportTransferAsync(strSrc, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MISReportTransferAsync(ByVal strSrc() As String, ByVal strError As String, ByVal userState As Object)
            If (Me.MISReportTransferOperationCompleted Is Nothing) Then
                Me.MISReportTransferOperationCompleted = AddressOf Me.OnMISReportTransferOperationCompleted
            End If
            Me.InvokeAsync("MISReportTransfer", New Object() {strSrc, strError}, Me.MISReportTransferOperationCompleted, userState)
        End Sub
        
        Private Sub OnMISReportTransferOperationCompleted(ByVal arg As Object)
            If (Not (Me.MISReportTransferCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MISReportTransferCompleted(Me, New MISReportTransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetMISReport", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMISReport(ByVal strSrc() As String, ByRef dsMain As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetMISReport", New Object() {strSrc, dsMain, strError})
            dsMain = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMISReportAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String)
            Me.GetMISReportAsync(strSrc, dsMain, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMISReportAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetMISReportOperationCompleted Is Nothing) Then
                Me.GetMISReportOperationCompleted = AddressOf Me.OnGetMISReportOperationCompleted
            End If
            Me.InvokeAsync("GetMISReport", New Object() {strSrc, dsMain, strError}, Me.GetMISReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMISReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMISReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMISReportCompleted(Me, New GetMISReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetAgentClass", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAgentClass(ByVal strSrc() As String, ByRef dsMain As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAgentClass", New Object() {strSrc, dsMain, strError})
            dsMain = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAgentClassAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String)
            Me.GetAgentClassAsync(strSrc, dsMain, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAgentClassAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetAgentClassOperationCompleted Is Nothing) Then
                Me.GetAgentClassOperationCompleted = AddressOf Me.OnGetAgentClassOperationCompleted
            End If
            Me.InvokeAsync("GetAgentClass", New Object() {strSrc, dsMain, strError}, Me.GetAgentClassOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAgentClassOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAgentClassCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAgentClassCompleted(Me, New GetAgentClassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetAgentRegion", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAgentRegion(ByVal strSrc() As String, ByRef dsMain As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAgentRegion", New Object() {strSrc, dsMain, strError})
            dsMain = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAgentRegionAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String)
            Me.GetAgentRegionAsync(strSrc, dsMain, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAgentRegionAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetAgentRegionOperationCompleted Is Nothing) Then
                Me.GetAgentRegionOperationCompleted = AddressOf Me.OnGetAgentRegionOperationCompleted
            End If
            Me.InvokeAsync("GetAgentRegion", New Object() {strSrc, dsMain, strError}, Me.GetAgentRegionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAgentRegionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAgentRegionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAgentRegionCompleted(Me, New GetAgentRegionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetMISProcessRpt", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMISProcessRpt(ByVal strSrc() As String, ByRef dsMain As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetMISProcessRpt", New Object() {strSrc, dsMain, strError})
            dsMain = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMISProcessRptAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String)
            Me.GetMISProcessRptAsync(strSrc, dsMain, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMISProcessRptAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetMISProcessRptOperationCompleted Is Nothing) Then
                Me.GetMISProcessRptOperationCompleted = AddressOf Me.OnGetMISProcessRptOperationCompleted
            End If
            Me.InvokeAsync("GetMISProcessRpt", New Object() {strSrc, dsMain, strError}, Me.GetMISProcessRptOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMISProcessRptOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMISProcessRptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMISProcessRptCompleted(Me, New GetMISProcessRptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/TATReportTransfer", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TATReportTransfer(ByVal strSrc() As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("TATReportTransfer", New Object() {strSrc, strError})
            strError = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TATReportTransferAsync(ByVal strSrc() As String, ByVal strError As String)
            Me.TATReportTransferAsync(strSrc, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TATReportTransferAsync(ByVal strSrc() As String, ByVal strError As String, ByVal userState As Object)
            If (Me.TATReportTransferOperationCompleted Is Nothing) Then
                Me.TATReportTransferOperationCompleted = AddressOf Me.OnTATReportTransferOperationCompleted
            End If
            Me.InvokeAsync("TATReportTransfer", New Object() {strSrc, strError}, Me.TATReportTransferOperationCompleted, userState)
        End Sub
        
        Private Sub OnTATReportTransferOperationCompleted(ByVal arg As Object)
            If (Not (Me.TATReportTransferCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TATReportTransferCompleted(Me, New TATReportTransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetTATDetailRpt", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTATDetailRpt(ByVal strSrc() As String, ByRef dsMain As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTATDetailRpt", New Object() {strSrc, dsMain, strError})
            dsMain = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTATDetailRptAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String)
            Me.GetTATDetailRptAsync(strSrc, dsMain, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTATDetailRptAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetTATDetailRptOperationCompleted Is Nothing) Then
                Me.GetTATDetailRptOperationCompleted = AddressOf Me.OnGetTATDetailRptOperationCompleted
            End If
            Me.InvokeAsync("GetTATDetailRpt", New Object() {strSrc, dsMain, strError}, Me.GetTATDetailRptOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTATDetailRptOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTATDetailRptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTATDetailRptCompleted(Me, New GetTATDetailRptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetTATSummaryRpt", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTATSummaryRpt(ByVal strSrc() As String, ByRef dsMain As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTATSummaryRpt", New Object() {strSrc, dsMain, strError})
            dsMain = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTATSummaryRptAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String)
            Me.GetTATSummaryRptAsync(strSrc, dsMain, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTATSummaryRptAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetTATSummaryRptOperationCompleted Is Nothing) Then
                Me.GetTATSummaryRptOperationCompleted = AddressOf Me.OnGetTATSummaryRptOperationCompleted
            End If
            Me.InvokeAsync("GetTATSummaryRpt", New Object() {strSrc, dsMain, strError}, Me.GetTATSummaryRptOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTATSummaryRptOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTATSummaryRptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTATSummaryRptCompleted(Me, New GetTATSummaryRptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetTATCountRpt", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTATCountRpt(ByVal strSrc() As String, ByRef dsMain As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTATCountRpt", New Object() {strSrc, dsMain, strError})
            dsMain = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTATCountRptAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String)
            Me.GetTATCountRptAsync(strSrc, dsMain, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTATCountRptAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetTATCountRptOperationCompleted Is Nothing) Then
                Me.GetTATCountRptOperationCompleted = AddressOf Me.OnGetTATCountRptOperationCompleted
            End If
            Me.InvokeAsync("GetTATCountRpt", New Object() {strSrc, dsMain, strError}, Me.GetTATCountRptOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTATCountRptOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTATCountRptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTATCountRptCompleted(Me, New GetTATCountRptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("ComSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ing.com.hk/GetTATAvgRpt", RequestNamespace:="http://www.ing.com.hk/", ResponseNamespace:="http://www.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTATAvgRpt(ByVal strSrc() As String, ByRef dsMain As System.Data.DataSet, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTATAvgRpt", New Object() {strSrc, dsMain, strError})
            dsMain = CType(results(1),System.Data.DataSet)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTATAvgRptAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String)
            Me.GetTATAvgRptAsync(strSrc, dsMain, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTATAvgRptAsync(ByVal strSrc() As String, ByVal dsMain As System.Data.DataSet, ByVal strError As String, ByVal userState As Object)
            If (Me.GetTATAvgRptOperationCompleted Is Nothing) Then
                Me.GetTATAvgRptOperationCompleted = AddressOf Me.OnGetTATAvgRptOperationCompleted
            End If
            Me.InvokeAsync("GetTATAvgRpt", New Object() {strSrc, dsMain, strError}, Me.GetTATAvgRptOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTATAvgRptOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTATAvgRptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTATAvgRptCompleted(Me, New GetTATAvgRptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.8773"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://www.ing.com.hk/"),  _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="http://www.ing.com.hk/", IsNullable:=false)>  _
    Partial Public Class ComSOAPHeader
        Inherits System.Web.Services.Protocols.SoapHeader
        
        Private projectAliasField As String
        
        Private libraryNameField As String
        
        Private machineIDField As String
        
        Private userIDField As String
        
        Private userTypeField As String
        
        Private versionNoField As String
        
        Private companyIDField As String
        
        Private environmentUseField As String
        
        Private anyAttrField() As System.Xml.XmlAttribute
        
        '''<remarks/>
        Public Property ProjectAlias() As String
            Get
                Return Me.projectAliasField
            End Get
            Set
                Me.projectAliasField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LibraryName() As String
            Get
                Return Me.libraryNameField
            End Get
            Set
                Me.libraryNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MachineID() As String
            Get
                Return Me.machineIDField
            End Get
            Set
                Me.machineIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As String
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserType() As String
            Get
                Return Me.userTypeField
            End Get
            Set
                Me.userTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property VersionNo() As String
            Get
                Return Me.versionNoField
            End Get
            Set
                Me.versionNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompanyID() As String
            Get
                Return Me.companyIDField
            End Get
            Set
                Me.companyIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EnvironmentUse() As String
            Get
                Return Me.environmentUseField
            End Get
            Set
                Me.environmentUseField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyAttributeAttribute()>  _
        Public Property AnyAttr() As System.Xml.XmlAttribute()
            Get
                Return Me.anyAttrField
            End Get
            Set
                Me.anyAttrField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub IsCNBCaseCompletedEventHandler(ByVal sender As Object, ByVal e As IsCNBCaseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsCNBCaseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property blnCNBCase() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetCouponPaymentCompletedEventHandler(ByVal sender As Object, ByVal e As GetCouponPaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCouponPaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsCCS() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub AddLcpPaymentCompletedEventHandler(ByVal sender As Object, ByVal e As AddLcpPaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddLcpPaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property paymentNo() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property refNo() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetLcpChequeDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetLcpChequeDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLcpChequeDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtChqDetail() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetLcpChequePaymentCompletedEventHandler(ByVal sender As Object, ByVal e As GetLcpChequePaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLcpChequePaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtPayment() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetPolicyCustInfoForPAGICompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyCustInfoForPAGICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyCustInfoForPAGICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsResult() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateRedemptionForPAGICompletedEventHandler(ByVal sender As Object, ByVal e As UpdateRedemptionForPAGICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateRedemptionForPAGICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetASITypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetASITypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetASITypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dt() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetILASInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetILASInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetILASInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub SaveILASInfoCompletedEventHandler(ByVal sender As Object, ByVal e As SaveILASInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveILASInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub CheckClientBankExistCompletedEventHandler(ByVal sender As Object, ByVal e As CheckClientBankExistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckClientBankExistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property blnExist() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub SetUWLastOngoingInfoCompletedEventHandler(ByVal sender As Object, ByVal e As SetUWLastOngoingInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetUWLastOngoingInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetLASVersionCompletedEventHandler(ByVal sender As Object, ByVal e As GetLASVersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLASVersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strVersion() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUWSysInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetUWSysInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUWSysInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateWelLetterCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateWelLetterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateWelLetterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetWavierANPCompletedEventHandler(ByVal sender As Object, ByVal e As GetWavierANPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWavierANPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMoP() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUnitTranHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As GetUnitTranHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUnitTranHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsTransHist() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUWInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetUWInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUWInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetSysSoftCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetSysSoftCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSysSoftCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub getCCStypeCompletedEventHandler(ByVal sender As Object, ByVal e As getCCStypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCCStypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetInitialTransUserCompletedEventHandler(ByVal sender As Object, ByVal e As GetInitialTransUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInitialTransUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetASICompletedEventHandler(ByVal sender As Object, ByVal e As GetASICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetASICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetMedicalAmountCompletedEventHandler(ByVal sender As Object, ByVal e As GetMedicalAmountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMedicalAmountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strCur() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dblLifeMedicalAmount() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dblDIMedicalAmount() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateUWASIInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateUWASIInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateUWASIInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GenerateUWAdviceCompletedEventHandler(ByVal sender As Object, ByVal e As GenerateUWAdviceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GenerateUWAdviceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub SaveUWInfoCompletedEventHandler(ByVal sender As Object, ByVal e As SaveUWInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveUWInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetNBSysInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetNBSysInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNBSysInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub getNBRCodeByCodeNameCompletedEventHandler(ByVal sender As Object, ByVal e As getNBRCodeByCodeNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getNBRCodeByCodeNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetSysCompStruCompletedEventHandler(ByVal sender As Object, ByVal e As GetSysCompStruCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSysCompStruCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtSysCompStru() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetSysCompStruUWCompletedEventHandler(ByVal sender As Object, ByVal e As GetSysCompStruUWCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSysCompStruUWCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtSysCompStru() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetSysContractStruCompletedEventHandler(ByVal sender As Object, ByVal e As GetSysContractStruCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSysContractStruCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtSysContractStru() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetOSWNCReportPrtInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetOSWNCReportPrtInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOSWNCReportPrtInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetTransHeaderCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransHeaderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransHeaderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetMonthlyKPICompletedEventHandler(ByVal sender As Object, ByVal e As GetMonthlyKPICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMonthlyKPICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetPrintNBControlCompletedEventHandler(ByVal sender As Object, ByVal e As GetPrintNBControlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPrintNBControlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetFNAInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetFNAInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFNAInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub SaveFNAInfoCompletedEventHandler(ByVal sender As Object, ByVal e As SaveFNAInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveFNAInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetContCliCompletedEventHandler(ByVal sender As Object, ByVal e As GetContCliCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetContCliCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetSysPlanDistChannelCompletedEventHandler(ByVal sender As Object, ByVal e As GetSysPlanDistChannelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSysPlanDistChannelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetContDtlCompletedEventHandler(ByVal sender As Object, ByVal e As GetContDtlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetContDtlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetPropInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetPropInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPropInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub SubmitPropRequestCompletedEventHandler(ByVal sender As Object, ByVal e As SubmitPropRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubmitPropRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ProcessPropRequestCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUWAdvicePrintingInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetUWAdvicePrintingInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUWAdvicePrintingInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub PrintUWAdviceInBatchCompletedEventHandler(ByVal sender As Object, ByVal e As PrintUWAdviceInBatchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintUWAdviceInBatchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUserAuthorityCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserAuthorityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserAuthorityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUserAuthorityByProjectAliasCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserAuthorityByProjectAliasCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserAuthorityByProjectAliasCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUserGroupAuthorityCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserGroupAuthorityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserGroupAuthorityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUwWorksheetPrtInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetUwWorksheetPrtInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUwWorksheetPrtInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUWworkSheetToPrintCompletedEventHandler(ByVal sender As Object, ByVal e As GetUWworkSheetToPrintCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUWworkSheetToPrintCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub MarkUWworkSheetSuccessCompletedEventHandler(ByVal sender As Object, ByVal e As MarkUWworkSheetSuccessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MarkUWworkSheetSuccessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub CheckEdorToDeleteInCMCompletedEventHandler(ByVal sender As Object, ByVal e As CheckEdorToDeleteInCMCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckEdorToDeleteInCMCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetOfferLetterPrtInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetOfferLetterPrtInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOfferLetterPrtInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetLoadingExclusionPrtInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetLoadingExclusionPrtInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLoadingExclusionPrtInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetFirstYearComRateCompletedEventHandler(ByVal sender As Object, ByVal e As GetFirstYearComRateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFirstYearComRateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property oCommRate() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRate() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetProposalFYCInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetProposalFYCInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProposalFYCInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsCommission() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetSysBusinessDateCompletedEventHandler(ByVal sender As Object, ByVal e As GetSysBusinessDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSysBusinessDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub checkUWAuthorityCompletedEventHandler(ByVal sender As Object, ByVal e As checkUWAuthorityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class checkUWAuthorityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ConvertIcrAppl2LifeAsiaCompletedEventHandler(ByVal sender As Object, ByVal e As ConvertIcrAppl2LifeAsiaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConvertIcrAppl2LifeAsiaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateSysInfoCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateSysInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateSysInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetIllustrationPrintListCompletedEventHandler(ByVal sender As Object, ByVal e As GetIllustrationPrintListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIllustrationPrintListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ClearCMImageCompletedEventHandler(ByVal sender As Object, ByVal e As ClearCMImageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ClearCMImageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetEdorExportParaCompletedEventHandler(ByVal sender As Object, ByVal e As GetEdorExportParaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEdorExportParaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strExportDriver() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strTIFName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strTIFDir() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateIllustrationPrintStatusCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateIllustrationPrintStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateIllustrationPrintStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetSysAvaiFundListCompletedEventHandler(ByVal sender As Object, ByVal e As GetSysAvaiFundListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSysAvaiFundListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strPlanCode() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetSysFundRulesCompletedEventHandler(ByVal sender As Object, ByVal e As GetSysFundRulesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSysFundRulesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strPlanCode() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetBasicInsuredInfoFromNBCompletedEventHandler(ByVal sender As Object, ByVal e As GetBasicInsuredInfoFromNBCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBasicInsuredInfoFromNBCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsInsuredInfo() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetPolicyPaymentInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyPaymentInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyPaymentInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsPaymentInfo() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub PrintWeeklyAPECompletedEventHandler(ByVal sender As Object, ByVal e As PrintWeeklyAPECompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintWeeklyAPECompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub PrintMonthlyAPECompletedEventHandler(ByVal sender As Object, ByVal e As PrintMonthlyAPECompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintMonthlyAPECompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub PrintAMCMCompletedEventHandler(ByVal sender As Object, ByVal e As PrintAMCMCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintAMCMCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub PrintAMCMQuarterlyCompletedEventHandler(ByVal sender As Object, ByVal e As PrintAMCMQuarterlyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintAMCMQuarterlyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub PrintPOSurCompletedEventHandler(ByVal sender As Object, ByVal e As PrintPOSurCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintPOSurCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub SendSMSOutReqCompletedEventHandler(ByVal sender As Object, ByVal e As SendSMSOutReqCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendSMSOutReqCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUWAdviceMsgLogCompletedEventHandler(ByVal sender As Object, ByVal e As GetUWAdviceMsgLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUWAdviceMsgLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMain() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUWOSReqCompletedEventHandler(ByVal sender As Object, ByVal e As GetUWOSReqCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUWOSReqCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMain() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub SendMailCompletedEventHandler(ByVal sender As Object, ByVal e As SendMailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendMailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub InsertUWAdviceMsgLogCompletedEventHandler(ByVal sender As Object, ByVal e As InsertUWAdviceMsgLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertUWAdviceMsgLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub CheckMandateExistCompletedEventHandler(ByVal sender As Object, ByVal e As CheckMandateExistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckMandateExistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMain() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub SaveUWAdviceHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As SaveUWAdviceHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveUWAdviceHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetPOSMarkinInfoForUWCompletedEventHandler(ByVal sender As Object, ByVal e As GetPOSMarkinInfoForUWCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPOSMarkinInfoForUWCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMarkinInfo() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub IsLastClientSavedUsingUpdatedFECTableCompletedEventHandler(ByVal sender As Object, ByVal e As IsLastClientSavedUsingUpdatedFECTableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsLastClientSavedUsingUpdatedFECTableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property IsCheckFEC() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ValidCCSPlanCdCompletedEventHandler(ByVal sender As Object, ByVal e As ValidCCSPlanCdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidCCSPlanCdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property IsValidPol() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub AlterPolAfterInforceCompletedEventHandler(ByVal sender As Object, ByVal e As AlterPolAfterInforceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AlterPolAfterInforceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub MISReportTransferCompletedEventHandler(ByVal sender As Object, ByVal e As MISReportTransferCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MISReportTransferCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetMISReportCompletedEventHandler(ByVal sender As Object, ByVal e As GetMISReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMISReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMain() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetAgentClassCompletedEventHandler(ByVal sender As Object, ByVal e As GetAgentClassCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAgentClassCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMain() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetAgentRegionCompletedEventHandler(ByVal sender As Object, ByVal e As GetAgentRegionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAgentRegionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMain() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetMISProcessRptCompletedEventHandler(ByVal sender As Object, ByVal e As GetMISProcessRptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMISProcessRptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMain() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub TATReportTransferCompletedEventHandler(ByVal sender As Object, ByVal e As TATReportTransferCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TATReportTransferCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetTATDetailRptCompletedEventHandler(ByVal sender As Object, ByVal e As GetTATDetailRptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTATDetailRptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMain() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetTATSummaryRptCompletedEventHandler(ByVal sender As Object, ByVal e As GetTATSummaryRptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTATSummaryRptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMain() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetTATCountRptCompletedEventHandler(ByVal sender As Object, ByVal e As GetTATCountRptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTATCountRptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMain() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetTATAvgRptCompletedEventHandler(ByVal sender As Object, ByVal e As GetTATAvgRptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTATAvgRptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMain() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
End Namespace
