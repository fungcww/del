'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace LEVYWS
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="LEVYWSSoap", [Namespace]:="http://inglife.com.hk/")>  _
    Partial Public Class LEVYWS
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private dBSOAPHeaderValueField As DBSOAPHeader
        
        Private mQSOAPHeaderValueField As MQSOAPHeader
        
        Private HelloWorldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyQuotationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyAmountDueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyQuotationHaveEnvOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyQuotationForIFEFAPPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyQuotationForIFWDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyAmountSuspenseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyAmountOutstandingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyAmountCCSOutstandingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNextLevyQuotationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyAmountCapsilOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProposalPremiumAmountDueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNBEnquiryValueByCNBOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNBEnquiryValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLifeAsiaEnquiryValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCNBTotalLevyAmountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyHistoryHeaderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyHistoryBillingRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyHistorySettlementRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCCSInformationForCNBOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyQuotationForCRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyQuotationForAESOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyQuotationForCNBOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyQuotationBillingChangeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertLevyOverdueFollowUpOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateLevyOverdueFollowUpOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyOverdueFollowUpOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyOverdueFollowUpTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyOverDueListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyOverDueSubListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertLevyOverdueListLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertLevyOverdueListLogTempOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIsOpenPosBatchLevyOutsandingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertFsurLevyInfoCapOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRunningDateListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyOverLetterDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertLevyOverduePrintListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyOverLetterRound3PrintListsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateLevyOverLetterPrintedDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInsertLevyOverdueFollowUpIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInsertLevyOverdueListLogIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSMSsdMsgIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertLevyOverdueFollowUpSmsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertLevyOverdueListLogSmsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyOverdueListLogSMSListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSMSResultStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateLevyOverdueListLogFlagOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyOverdueFollowUpSmsListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateLevyOverdueFollowUpFlagOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyOverLetterPolicyAccountInformationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyArbDetailABOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HandleLevyArbCsvSummaryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyArbCsvDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertLevyArbCsvLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertIntoLevyArbDetailHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyArbPathOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TruncateLevyArbDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSumLevyAmountInPolcurrOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyaArbTorrenceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLevyArbExcelLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRefExchangeRateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsLevyArbDetailABDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertLevyOverdueFollowUpLetterLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.CS2005.My.MySettings.Default.CS2005_LEVYWS_LEVYWS
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Property DBSOAPHeaderValue() As DBSOAPHeader
            Get
                Return Me.dBSOAPHeaderValueField
            End Get
            Set
                Me.dBSOAPHeaderValueField = value
            End Set
        End Property
        
        Public Property MQSOAPHeaderValue() As MQSOAPHeader
            Get
                Return Me.mQSOAPHeaderValueField
            End Get
            Set
                Me.mQSOAPHeaderValueField = value
            End Set
        End Property
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event HelloWorldCompleted As HelloWorldCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyQuotationCompleted As GetLevyQuotationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyAmountDueCompleted As GetLevyAmountDueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyQuotationHaveEnvCompleted As GetLevyQuotationHaveEnvCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyQuotationForIFEFAPPCompleted As GetLevyQuotationForIFEFAPPCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyQuotationForIFWDCompleted As GetLevyQuotationForIFWDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyAmountSuspenseCompleted As GetLevyAmountSuspenseCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyAmountOutstandingCompleted As GetLevyAmountOutstandingCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyAmountCCSOutstandingCompleted As GetLevyAmountCCSOutstandingCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNextLevyQuotationCompleted As GetNextLevyQuotationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyAmountCapsilCompleted As GetLevyAmountCapsilCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProposalPremiumAmountDueCompleted As GetProposalPremiumAmountDueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNBEnquiryValueByCNBCompleted As GetNBEnquiryValueByCNBCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNBEnquiryValueCompleted As GetNBEnquiryValueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLifeAsiaEnquiryValueCompleted As GetLifeAsiaEnquiryValueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCNBTotalLevyAmountCompleted As GetCNBTotalLevyAmountCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyHistoryHeaderCompleted As GetLevyHistoryHeaderCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyHistoryBillingRecordCompleted As GetLevyHistoryBillingRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyHistorySettlementRecordCompleted As GetLevyHistorySettlementRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCCSInformationForCNBCompleted As GetCCSInformationForCNBCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyQuotationForCRSCompleted As GetLevyQuotationForCRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyQuotationForAESCompleted As GetLevyQuotationForAESCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyQuotationForCNBCompleted As GetLevyQuotationForCNBCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyQuotationBillingChangeCompleted As GetLevyQuotationBillingChangeCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertLevyOverdueFollowUpCompleted As InsertLevyOverdueFollowUpCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateLevyOverdueFollowUpCompleted As UpdateLevyOverdueFollowUpCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyOverdueFollowUpCompleted As GetLevyOverdueFollowUpCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyOverdueFollowUpTypeCompleted As GetLevyOverdueFollowUpTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyOverDueListCompleted As GetLevyOverDueListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyOverDueSubListCompleted As GetLevyOverDueSubListCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertLevyOverdueListLogCompleted As InsertLevyOverdueListLogCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertLevyOverdueListLogTempCompleted As InsertLevyOverdueListLogTempCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIsOpenPosBatchLevyOutsandingCompleted As GetIsOpenPosBatchLevyOutsandingCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertFsurLevyInfoCapCompleted As InsertFsurLevyInfoCapCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRunningDateListCompleted As GetRunningDateListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyOverLetterDataCompleted As GetLevyOverLetterDataCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertLevyOverduePrintListCompleted As InsertLevyOverduePrintListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyOverLetterRound3PrintListsCompleted As GetLevyOverLetterRound3PrintListsCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateLevyOverLetterPrintedDateCompleted As UpdateLevyOverLetterPrintedDateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInsertLevyOverdueFollowUpIdCompleted As GetInsertLevyOverdueFollowUpIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInsertLevyOverdueListLogIdCompleted As GetInsertLevyOverdueListLogIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSMSsdMsgIdCompleted As GetSMSsdMsgIdCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertLevyOverdueFollowUpSmsCompleted As InsertLevyOverdueFollowUpSmsCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertLevyOverdueListLogSmsCompleted As InsertLevyOverdueListLogSmsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyOverdueListLogSMSListCompleted As GetLevyOverdueListLogSMSListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSMSResultStatusCompleted As GetSMSResultStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateLevyOverdueListLogFlagCompleted As UpdateLevyOverdueListLogFlagCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyOverdueFollowUpSmsListCompleted As GetLevyOverdueFollowUpSmsListCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateLevyOverdueFollowUpFlagCompleted As UpdateLevyOverdueFollowUpFlagCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyOverLetterPolicyAccountInformationCompleted As GetLevyOverLetterPolicyAccountInformationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyArbDetailABCompleted As GetLevyArbDetailABCompletedEventHandler
        
        '''<remarks/>
        Public Event HandleLevyArbCsvSummaryCompleted As HandleLevyArbCsvSummaryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyArbCsvDetailCompleted As GetLevyArbCsvDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertLevyArbCsvLogCompleted As InsertLevyArbCsvLogCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertIntoLevyArbDetailHistoryCompleted As InsertIntoLevyArbDetailHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyArbPathCompleted As GetLevyArbPathCompletedEventHandler
        
        '''<remarks/>
        Public Event TruncateLevyArbDetailCompleted As TruncateLevyArbDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSumLevyAmountInPolcurrCompleted As GetSumLevyAmountInPolcurrCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyaArbTorrenceCompleted As GetLevyaArbTorrenceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLevyArbExcelLogCompleted As GetLevyArbExcelLogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRefExchangeRateCompleted As GetRefExchangeRateCompletedEventHandler
        
        '''<remarks/>
        Public Event IsLevyArbDetailABDataCompleted As IsLevyArbDetailABDataCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertLevyOverdueFollowUpLetterLogCompleted As InsertLevyOverdueFollowUpLetterLogCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/HelloWorld", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HelloWorld() As String
            Dim results() As Object = Me.Invoke("HelloWorld", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HelloWorldAsync()
            Me.HelloWorldAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HelloWorldAsync(ByVal userState As Object)
            If (Me.HelloWorldOperationCompleted Is Nothing) Then
                Me.HelloWorldOperationCompleted = AddressOf Me.OnHelloWorldOperationCompleted
            End If
            Me.InvokeAsync("HelloWorld", New Object(-1) {}, Me.HelloWorldOperationCompleted, userState)
        End Sub
        
        Private Sub OnHelloWorldOperationCompleted(ByVal arg As Object)
            If (Not (Me.HelloWorldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HelloWorldCompleted(Me, New HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyQuotation", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyQuotation(ByVal dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyQuotation", New Object() {dsSendData, dsReceData, strErr})
            dsReceData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyQuotationAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetLevyQuotationAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyQuotationAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyQuotationOperationCompleted Is Nothing) Then
                Me.GetLevyQuotationOperationCompleted = AddressOf Me.OnGetLevyQuotationOperationCompleted
            End If
            Me.InvokeAsync("GetLevyQuotation", New Object() {dsSendData, dsReceData, strErr}, Me.GetLevyQuotationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyQuotationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyQuotationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyQuotationCompleted(Me, New GetLevyQuotationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyAmountDue", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyAmountDue(ByVal dsSendData As System.Data.DataSet, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyAmountDue", New Object() {dsSendData, dsReceData, strErr})
            dsReceData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyAmountDueAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetLevyAmountDueAsync(dsSendData, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyAmountDueAsync(ByVal dsSendData As System.Data.DataSet, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyAmountDueOperationCompleted Is Nothing) Then
                Me.GetLevyAmountDueOperationCompleted = AddressOf Me.OnGetLevyAmountDueOperationCompleted
            End If
            Me.InvokeAsync("GetLevyAmountDue", New Object() {dsSendData, dsReceData, strErr}, Me.GetLevyAmountDueOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyAmountDueOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyAmountDueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyAmountDueCompleted(Me, New GetLevyAmountDueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyQuotationHaveEnv", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyQuotationHaveEnv( _
                    ByVal pCompID As String,  _
                    ByVal pStrEnv As String,  _
                    ByVal pUserID As String,  _
                    ByVal pContractNo As String,  _
                    ByVal pContractCurrency As String,  _
                    ByVal pReceiptAmount As Double,  _
                    ByVal pPropsalDate As Date,  _
                    ByVal pAnniversaryDate As Date,  _
                    ByVal pModalPremium As Double,  _
                    ByVal pIsNew As Boolean,  _
                    ByVal pPaymentType As String,  _
                    ByVal pLevySystem As String,  _
                    ByRef permiumAmountAllocated As String,  _
                    ByRef permiumAmountDue As String,  _
                    ByRef currentIiaLevyAmountAllocated As String,  _
                    ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyQuotationHaveEnv", New Object() {pCompID, pStrEnv, pUserID, pContractNo, pContractCurrency, pReceiptAmount, pPropsalDate, pAnniversaryDate, pModalPremium, pIsNew, pPaymentType, pLevySystem, permiumAmountAllocated, permiumAmountDue, currentIiaLevyAmountAllocated, strErr})
            permiumAmountAllocated = CType(results(1),String)
            permiumAmountDue = CType(results(2),String)
            currentIiaLevyAmountAllocated = CType(results(3),String)
            strErr = CType(results(4),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyQuotationHaveEnvAsync( _
                    ByVal pCompID As String,  _
                    ByVal pStrEnv As String,  _
                    ByVal pUserID As String,  _
                    ByVal pContractNo As String,  _
                    ByVal pContractCurrency As String,  _
                    ByVal pReceiptAmount As Double,  _
                    ByVal pPropsalDate As Date,  _
                    ByVal pAnniversaryDate As Date,  _
                    ByVal pModalPremium As Double,  _
                    ByVal pIsNew As Boolean,  _
                    ByVal pPaymentType As String,  _
                    ByVal pLevySystem As String,  _
                    ByVal permiumAmountAllocated As String,  _
                    ByVal permiumAmountDue As String,  _
                    ByVal currentIiaLevyAmountAllocated As String,  _
                    ByVal strErr As String)
            Me.GetLevyQuotationHaveEnvAsync(pCompID, pStrEnv, pUserID, pContractNo, pContractCurrency, pReceiptAmount, pPropsalDate, pAnniversaryDate, pModalPremium, pIsNew, pPaymentType, pLevySystem, permiumAmountAllocated, permiumAmountDue, currentIiaLevyAmountAllocated, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyQuotationHaveEnvAsync( _
                    ByVal pCompID As String,  _
                    ByVal pStrEnv As String,  _
                    ByVal pUserID As String,  _
                    ByVal pContractNo As String,  _
                    ByVal pContractCurrency As String,  _
                    ByVal pReceiptAmount As Double,  _
                    ByVal pPropsalDate As Date,  _
                    ByVal pAnniversaryDate As Date,  _
                    ByVal pModalPremium As Double,  _
                    ByVal pIsNew As Boolean,  _
                    ByVal pPaymentType As String,  _
                    ByVal pLevySystem As String,  _
                    ByVal permiumAmountAllocated As String,  _
                    ByVal permiumAmountDue As String,  _
                    ByVal currentIiaLevyAmountAllocated As String,  _
                    ByVal strErr As String,  _
                    ByVal userState As Object)
            If (Me.GetLevyQuotationHaveEnvOperationCompleted Is Nothing) Then
                Me.GetLevyQuotationHaveEnvOperationCompleted = AddressOf Me.OnGetLevyQuotationHaveEnvOperationCompleted
            End If
            Me.InvokeAsync("GetLevyQuotationHaveEnv", New Object() {pCompID, pStrEnv, pUserID, pContractNo, pContractCurrency, pReceiptAmount, pPropsalDate, pAnniversaryDate, pModalPremium, pIsNew, pPaymentType, pLevySystem, permiumAmountAllocated, permiumAmountDue, currentIiaLevyAmountAllocated, strErr}, Me.GetLevyQuotationHaveEnvOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyQuotationHaveEnvOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyQuotationHaveEnvCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyQuotationHaveEnvCompleted(Me, New GetLevyQuotationHaveEnvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyQuotationForIFEFAPP", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyQuotationForIFEFAPP(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal pContractCurrency As String, ByVal pCommencingDate As Date, ByVal pModalPremiumInContractCurreny As Double, ByRef pLevyAmountByHKD As Double, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyQuotationForIFEFAPP", New Object() {pCompID, pStrEnv, pUserID, pContractNo, pContractCurrency, pCommencingDate, pModalPremiumInContractCurreny, pLevyAmountByHKD, strErr})
            pLevyAmountByHKD = CType(results(1),Double)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyQuotationForIFEFAPPAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal pContractCurrency As String, ByVal pCommencingDate As Date, ByVal pModalPremiumInContractCurreny As Double, ByVal pLevyAmountByHKD As Double, ByVal strErr As String)
            Me.GetLevyQuotationForIFEFAPPAsync(pCompID, pStrEnv, pUserID, pContractNo, pContractCurrency, pCommencingDate, pModalPremiumInContractCurreny, pLevyAmountByHKD, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyQuotationForIFEFAPPAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal pContractCurrency As String, ByVal pCommencingDate As Date, ByVal pModalPremiumInContractCurreny As Double, ByVal pLevyAmountByHKD As Double, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyQuotationForIFEFAPPOperationCompleted Is Nothing) Then
                Me.GetLevyQuotationForIFEFAPPOperationCompleted = AddressOf Me.OnGetLevyQuotationForIFEFAPPOperationCompleted
            End If
            Me.InvokeAsync("GetLevyQuotationForIFEFAPP", New Object() {pCompID, pStrEnv, pUserID, pContractNo, pContractCurrency, pCommencingDate, pModalPremiumInContractCurreny, pLevyAmountByHKD, strErr}, Me.GetLevyQuotationForIFEFAPPOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyQuotationForIFEFAPPOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyQuotationForIFEFAPPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyQuotationForIFEFAPPCompleted(Me, New GetLevyQuotationForIFEFAPPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyQuotationForIFWD", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyQuotationForIFWD(ByVal pUserID As String, ByVal pContractNo As String, ByVal pContractCurrency As String, ByVal pCommencingDate As Date, ByVal pModalPremiumInContractCurreny As Double, ByRef pLevyAmountByHKD As Double, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyQuotationForIFWD", New Object() {pUserID, pContractNo, pContractCurrency, pCommencingDate, pModalPremiumInContractCurreny, pLevyAmountByHKD, strErr})
            pLevyAmountByHKD = CType(results(1),Double)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyQuotationForIFWDAsync(ByVal pUserID As String, ByVal pContractNo As String, ByVal pContractCurrency As String, ByVal pCommencingDate As Date, ByVal pModalPremiumInContractCurreny As Double, ByVal pLevyAmountByHKD As Double, ByVal strErr As String)
            Me.GetLevyQuotationForIFWDAsync(pUserID, pContractNo, pContractCurrency, pCommencingDate, pModalPremiumInContractCurreny, pLevyAmountByHKD, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyQuotationForIFWDAsync(ByVal pUserID As String, ByVal pContractNo As String, ByVal pContractCurrency As String, ByVal pCommencingDate As Date, ByVal pModalPremiumInContractCurreny As Double, ByVal pLevyAmountByHKD As Double, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyQuotationForIFWDOperationCompleted Is Nothing) Then
                Me.GetLevyQuotationForIFWDOperationCompleted = AddressOf Me.OnGetLevyQuotationForIFWDOperationCompleted
            End If
            Me.InvokeAsync("GetLevyQuotationForIFWD", New Object() {pUserID, pContractNo, pContractCurrency, pCommencingDate, pModalPremiumInContractCurreny, pLevyAmountByHKD, strErr}, Me.GetLevyQuotationForIFWDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyQuotationForIFWDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyQuotationForIFWDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyQuotationForIFWDCompleted(Me, New GetLevyQuotationForIFWDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyAmountSuspense", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyAmountSuspense(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByRef levyAmountSuspense As Double, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyAmountSuspense", New Object() {pCompID, pStrEnv, pUserID, pContractNo, levyAmountSuspense, strErr})
            levyAmountSuspense = CType(results(1),Double)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyAmountSuspenseAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal levyAmountSuspense As Double, ByVal strErr As String)
            Me.GetLevyAmountSuspenseAsync(pCompID, pStrEnv, pUserID, pContractNo, levyAmountSuspense, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyAmountSuspenseAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal levyAmountSuspense As Double, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyAmountSuspenseOperationCompleted Is Nothing) Then
                Me.GetLevyAmountSuspenseOperationCompleted = AddressOf Me.OnGetLevyAmountSuspenseOperationCompleted
            End If
            Me.InvokeAsync("GetLevyAmountSuspense", New Object() {pCompID, pStrEnv, pUserID, pContractNo, levyAmountSuspense, strErr}, Me.GetLevyAmountSuspenseOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyAmountSuspenseOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyAmountSuspenseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyAmountSuspenseCompleted(Me, New GetLevyAmountSuspenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyAmountOutstanding", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyAmountOutstanding(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByRef levyAmountOutstanding As Double, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyAmountOutstanding", New Object() {pCompID, pStrEnv, pUserID, pContractNo, levyAmountOutstanding, strErr})
            levyAmountOutstanding = CType(results(1),Double)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyAmountOutstandingAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal levyAmountOutstanding As Double, ByVal strErr As String)
            Me.GetLevyAmountOutstandingAsync(pCompID, pStrEnv, pUserID, pContractNo, levyAmountOutstanding, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyAmountOutstandingAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal levyAmountOutstanding As Double, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyAmountOutstandingOperationCompleted Is Nothing) Then
                Me.GetLevyAmountOutstandingOperationCompleted = AddressOf Me.OnGetLevyAmountOutstandingOperationCompleted
            End If
            Me.InvokeAsync("GetLevyAmountOutstanding", New Object() {pCompID, pStrEnv, pUserID, pContractNo, levyAmountOutstanding, strErr}, Me.GetLevyAmountOutstandingOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyAmountOutstandingOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyAmountOutstandingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyAmountOutstandingCompleted(Me, New GetLevyAmountOutstandingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyAmountCCSOutstanding", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyAmountCCSOutstanding(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByRef levyAmountOutstanding As Double, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyAmountCCSOutstanding", New Object() {pCompID, pStrEnv, pUserID, pContractNo, levyAmountOutstanding, strErr})
            levyAmountOutstanding = CType(results(1),Double)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyAmountCCSOutstandingAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal levyAmountOutstanding As Double, ByVal strErr As String)
            Me.GetLevyAmountCCSOutstandingAsync(pCompID, pStrEnv, pUserID, pContractNo, levyAmountOutstanding, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyAmountCCSOutstandingAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal levyAmountOutstanding As Double, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyAmountCCSOutstandingOperationCompleted Is Nothing) Then
                Me.GetLevyAmountCCSOutstandingOperationCompleted = AddressOf Me.OnGetLevyAmountCCSOutstandingOperationCompleted
            End If
            Me.InvokeAsync("GetLevyAmountCCSOutstanding", New Object() {pCompID, pStrEnv, pUserID, pContractNo, levyAmountOutstanding, strErr}, Me.GetLevyAmountCCSOutstandingOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyAmountCCSOutstandingOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyAmountCCSOutstandingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyAmountCCSOutstandingCompleted(Me, New GetLevyAmountCCSOutstandingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetNextLevyQuotation", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNextLevyQuotation(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal pContractCurrency As String, ByVal pReceiptAmount As Double, ByVal pPropsalDate As Date, ByVal pAnniversaryDate As Date, ByVal pModalPremium As Double, ByVal pIsNew As Boolean, ByVal pPaymentType As String, ByVal pLevySystem As String, ByRef nextLevyQuotationAmount As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetNextLevyQuotation", New Object() {pCompID, pStrEnv, pUserID, pContractNo, pContractCurrency, pReceiptAmount, pPropsalDate, pAnniversaryDate, pModalPremium, pIsNew, pPaymentType, pLevySystem, nextLevyQuotationAmount, strErr})
            nextLevyQuotationAmount = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNextLevyQuotationAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal pContractCurrency As String, ByVal pReceiptAmount As Double, ByVal pPropsalDate As Date, ByVal pAnniversaryDate As Date, ByVal pModalPremium As Double, ByVal pIsNew As Boolean, ByVal pPaymentType As String, ByVal pLevySystem As String, ByVal nextLevyQuotationAmount As String, ByVal strErr As String)
            Me.GetNextLevyQuotationAsync(pCompID, pStrEnv, pUserID, pContractNo, pContractCurrency, pReceiptAmount, pPropsalDate, pAnniversaryDate, pModalPremium, pIsNew, pPaymentType, pLevySystem, nextLevyQuotationAmount, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNextLevyQuotationAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal pContractCurrency As String, ByVal pReceiptAmount As Double, ByVal pPropsalDate As Date, ByVal pAnniversaryDate As Date, ByVal pModalPremium As Double, ByVal pIsNew As Boolean, ByVal pPaymentType As String, ByVal pLevySystem As String, ByVal nextLevyQuotationAmount As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetNextLevyQuotationOperationCompleted Is Nothing) Then
                Me.GetNextLevyQuotationOperationCompleted = AddressOf Me.OnGetNextLevyQuotationOperationCompleted
            End If
            Me.InvokeAsync("GetNextLevyQuotation", New Object() {pCompID, pStrEnv, pUserID, pContractNo, pContractCurrency, pReceiptAmount, pPropsalDate, pAnniversaryDate, pModalPremium, pIsNew, pPaymentType, pLevySystem, nextLevyQuotationAmount, strErr}, Me.GetNextLevyQuotationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNextLevyQuotationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNextLevyQuotationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNextLevyQuotationCompleted(Me, New GetNextLevyQuotationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyAmountCapsil", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyAmountCapsil(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByRef levyAmountSuspense As Double, ByRef levyAmountOutstanding As Double, ByRef levyAmountPayable As Double, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyAmountCapsil", New Object() {pCompID, pStrEnv, pUserID, pContractNo, levyAmountSuspense, levyAmountOutstanding, levyAmountPayable, strErr})
            levyAmountSuspense = CType(results(1),Double)
            levyAmountOutstanding = CType(results(2),Double)
            levyAmountPayable = CType(results(3),Double)
            strErr = CType(results(4),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyAmountCapsilAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal levyAmountSuspense As Double, ByVal levyAmountOutstanding As Double, ByVal levyAmountPayable As Double, ByVal strErr As String)
            Me.GetLevyAmountCapsilAsync(pCompID, pStrEnv, pUserID, pContractNo, levyAmountSuspense, levyAmountOutstanding, levyAmountPayable, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyAmountCapsilAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal levyAmountSuspense As Double, ByVal levyAmountOutstanding As Double, ByVal levyAmountPayable As Double, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyAmountCapsilOperationCompleted Is Nothing) Then
                Me.GetLevyAmountCapsilOperationCompleted = AddressOf Me.OnGetLevyAmountCapsilOperationCompleted
            End If
            Me.InvokeAsync("GetLevyAmountCapsil", New Object() {pCompID, pStrEnv, pUserID, pContractNo, levyAmountSuspense, levyAmountOutstanding, levyAmountPayable, strErr}, Me.GetLevyAmountCapsilOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyAmountCapsilOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyAmountCapsilCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyAmountCapsilCompleted(Me, New GetLevyAmountCapsilCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetProposalPremiumAmountDue", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProposalPremiumAmountDue(ByVal strPolicyNo As String, ByRef premiumAmountDue As Double, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetProposalPremiumAmountDue", New Object() {strPolicyNo, premiumAmountDue, strErr})
            premiumAmountDue = CType(results(1),Double)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProposalPremiumAmountDueAsync(ByVal strPolicyNo As String, ByVal premiumAmountDue As Double, ByVal strErr As String)
            Me.GetProposalPremiumAmountDueAsync(strPolicyNo, premiumAmountDue, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProposalPremiumAmountDueAsync(ByVal strPolicyNo As String, ByVal premiumAmountDue As Double, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetProposalPremiumAmountDueOperationCompleted Is Nothing) Then
                Me.GetProposalPremiumAmountDueOperationCompleted = AddressOf Me.OnGetProposalPremiumAmountDueOperationCompleted
            End If
            Me.InvokeAsync("GetProposalPremiumAmountDue", New Object() {strPolicyNo, premiumAmountDue, strErr}, Me.GetProposalPremiumAmountDueOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProposalPremiumAmountDueOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProposalPremiumAmountDueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProposalPremiumAmountDueCompleted(Me, New GetProposalPremiumAmountDueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetNBEnquiryValueByCNB", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNBEnquiryValueByCNB(ByVal strPolicyNo As String, ByRef pContractCurrency As String, ByRef pReceiptAmount As Double, ByRef pPropsalDate As Date, ByRef pAnniversaryDate As Date, ByRef pPremiumAmountDue As Double, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetNBEnquiryValueByCNB", New Object() {strPolicyNo, pContractCurrency, pReceiptAmount, pPropsalDate, pAnniversaryDate, pPremiumAmountDue, strErr})
            pContractCurrency = CType(results(1),String)
            pReceiptAmount = CType(results(2),Double)
            pPropsalDate = CType(results(3),Date)
            pAnniversaryDate = CType(results(4),Date)
            pPremiumAmountDue = CType(results(5),Double)
            strErr = CType(results(6),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNBEnquiryValueByCNBAsync(ByVal strPolicyNo As String, ByVal pContractCurrency As String, ByVal pReceiptAmount As Double, ByVal pPropsalDate As Date, ByVal pAnniversaryDate As Date, ByVal pPremiumAmountDue As Double, ByVal strErr As String)
            Me.GetNBEnquiryValueByCNBAsync(strPolicyNo, pContractCurrency, pReceiptAmount, pPropsalDate, pAnniversaryDate, pPremiumAmountDue, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNBEnquiryValueByCNBAsync(ByVal strPolicyNo As String, ByVal pContractCurrency As String, ByVal pReceiptAmount As Double, ByVal pPropsalDate As Date, ByVal pAnniversaryDate As Date, ByVal pPremiumAmountDue As Double, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetNBEnquiryValueByCNBOperationCompleted Is Nothing) Then
                Me.GetNBEnquiryValueByCNBOperationCompleted = AddressOf Me.OnGetNBEnquiryValueByCNBOperationCompleted
            End If
            Me.InvokeAsync("GetNBEnquiryValueByCNB", New Object() {strPolicyNo, pContractCurrency, pReceiptAmount, pPropsalDate, pAnniversaryDate, pPremiumAmountDue, strErr}, Me.GetNBEnquiryValueByCNBOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNBEnquiryValueByCNBOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNBEnquiryValueByCNBCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNBEnquiryValueByCNBCompleted(Me, New GetNBEnquiryValueByCNBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetNBEnquiryValue", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNBEnquiryValue(ByVal strPolicyNo As String, ByRef pContractCurrency As String, ByRef pReceiptAmount As Double, ByRef pPropsalDate As Date, ByRef pAnniversaryDate As Date, ByRef pPremiumAmountDue As Double, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetNBEnquiryValue", New Object() {strPolicyNo, pContractCurrency, pReceiptAmount, pPropsalDate, pAnniversaryDate, pPremiumAmountDue, strErr})
            pContractCurrency = CType(results(1),String)
            pReceiptAmount = CType(results(2),Double)
            pPropsalDate = CType(results(3),Date)
            pAnniversaryDate = CType(results(4),Date)
            pPremiumAmountDue = CType(results(5),Double)
            strErr = CType(results(6),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNBEnquiryValueAsync(ByVal strPolicyNo As String, ByVal pContractCurrency As String, ByVal pReceiptAmount As Double, ByVal pPropsalDate As Date, ByVal pAnniversaryDate As Date, ByVal pPremiumAmountDue As Double, ByVal strErr As String)
            Me.GetNBEnquiryValueAsync(strPolicyNo, pContractCurrency, pReceiptAmount, pPropsalDate, pAnniversaryDate, pPremiumAmountDue, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNBEnquiryValueAsync(ByVal strPolicyNo As String, ByVal pContractCurrency As String, ByVal pReceiptAmount As Double, ByVal pPropsalDate As Date, ByVal pAnniversaryDate As Date, ByVal pPremiumAmountDue As Double, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetNBEnquiryValueOperationCompleted Is Nothing) Then
                Me.GetNBEnquiryValueOperationCompleted = AddressOf Me.OnGetNBEnquiryValueOperationCompleted
            End If
            Me.InvokeAsync("GetNBEnquiryValue", New Object() {strPolicyNo, pContractCurrency, pReceiptAmount, pPropsalDate, pAnniversaryDate, pPremiumAmountDue, strErr}, Me.GetNBEnquiryValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNBEnquiryValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNBEnquiryValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNBEnquiryValueCompleted(Me, New GetNBEnquiryValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLifeAsiaEnquiryValue", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLifeAsiaEnquiryValue(ByVal strPolicyNo As String, ByRef pContractCurrency As String, ByRef pReceiptAmount As Double, ByRef pPropsalDate As Date, ByRef pAnniversaryDate As Date, ByRef pPremiumAmountDue As Double, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLifeAsiaEnquiryValue", New Object() {strPolicyNo, pContractCurrency, pReceiptAmount, pPropsalDate, pAnniversaryDate, pPremiumAmountDue, strErr})
            pContractCurrency = CType(results(1),String)
            pReceiptAmount = CType(results(2),Double)
            pPropsalDate = CType(results(3),Date)
            pAnniversaryDate = CType(results(4),Date)
            pPremiumAmountDue = CType(results(5),Double)
            strErr = CType(results(6),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLifeAsiaEnquiryValueAsync(ByVal strPolicyNo As String, ByVal pContractCurrency As String, ByVal pReceiptAmount As Double, ByVal pPropsalDate As Date, ByVal pAnniversaryDate As Date, ByVal pPremiumAmountDue As Double, ByVal strErr As String)
            Me.GetLifeAsiaEnquiryValueAsync(strPolicyNo, pContractCurrency, pReceiptAmount, pPropsalDate, pAnniversaryDate, pPremiumAmountDue, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLifeAsiaEnquiryValueAsync(ByVal strPolicyNo As String, ByVal pContractCurrency As String, ByVal pReceiptAmount As Double, ByVal pPropsalDate As Date, ByVal pAnniversaryDate As Date, ByVal pPremiumAmountDue As Double, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLifeAsiaEnquiryValueOperationCompleted Is Nothing) Then
                Me.GetLifeAsiaEnquiryValueOperationCompleted = AddressOf Me.OnGetLifeAsiaEnquiryValueOperationCompleted
            End If
            Me.InvokeAsync("GetLifeAsiaEnquiryValue", New Object() {strPolicyNo, pContractCurrency, pReceiptAmount, pPropsalDate, pAnniversaryDate, pPremiumAmountDue, strErr}, Me.GetLifeAsiaEnquiryValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLifeAsiaEnquiryValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLifeAsiaEnquiryValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLifeAsiaEnquiryValueCompleted(Me, New GetLifeAsiaEnquiryValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCNBTotalLevyAmount", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCNBTotalLevyAmount(ByVal strPolicyNo As String, ByRef totalLevyAmount As Double, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCNBTotalLevyAmount", New Object() {strPolicyNo, totalLevyAmount, strErr})
            totalLevyAmount = CType(results(1),Double)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCNBTotalLevyAmountAsync(ByVal strPolicyNo As String, ByVal totalLevyAmount As Double, ByVal strErr As String)
            Me.GetCNBTotalLevyAmountAsync(strPolicyNo, totalLevyAmount, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCNBTotalLevyAmountAsync(ByVal strPolicyNo As String, ByVal totalLevyAmount As Double, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCNBTotalLevyAmountOperationCompleted Is Nothing) Then
                Me.GetCNBTotalLevyAmountOperationCompleted = AddressOf Me.OnGetCNBTotalLevyAmountOperationCompleted
            End If
            Me.InvokeAsync("GetCNBTotalLevyAmount", New Object() {strPolicyNo, totalLevyAmount, strErr}, Me.GetCNBTotalLevyAmountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCNBTotalLevyAmountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCNBTotalLevyAmountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCNBTotalLevyAmountCompleted(Me, New GetCNBTotalLevyAmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyHistoryHeader", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyHistoryHeader(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pPolicyNo As String, ByRef pLevyHeaderDataSet As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyHistoryHeader", New Object() {pCompID, pStrEnv, pPolicyNo, pLevyHeaderDataSet, strErr})
            pLevyHeaderDataSet = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyHistoryHeaderAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pPolicyNo As String, ByVal pLevyHeaderDataSet As System.Data.DataSet, ByVal strErr As String)
            Me.GetLevyHistoryHeaderAsync(pCompID, pStrEnv, pPolicyNo, pLevyHeaderDataSet, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyHistoryHeaderAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pPolicyNo As String, ByVal pLevyHeaderDataSet As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyHistoryHeaderOperationCompleted Is Nothing) Then
                Me.GetLevyHistoryHeaderOperationCompleted = AddressOf Me.OnGetLevyHistoryHeaderOperationCompleted
            End If
            Me.InvokeAsync("GetLevyHistoryHeader", New Object() {pCompID, pStrEnv, pPolicyNo, pLevyHeaderDataSet, strErr}, Me.GetLevyHistoryHeaderOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyHistoryHeaderOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyHistoryHeaderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyHistoryHeaderCompleted(Me, New GetLevyHistoryHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyHistoryBillingRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyHistoryBillingRecord(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pPolicyNo As String, ByVal pZLVSYS As String, ByVal pCCDate As Date, ByRef pLevyHeaderDataSet As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyHistoryBillingRecord", New Object() {pCompID, pStrEnv, pPolicyNo, pZLVSYS, pCCDate, pLevyHeaderDataSet, strErr})
            pLevyHeaderDataSet = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyHistoryBillingRecordAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pPolicyNo As String, ByVal pZLVSYS As String, ByVal pCCDate As Date, ByVal pLevyHeaderDataSet As System.Data.DataSet, ByVal strErr As String)
            Me.GetLevyHistoryBillingRecordAsync(pCompID, pStrEnv, pPolicyNo, pZLVSYS, pCCDate, pLevyHeaderDataSet, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyHistoryBillingRecordAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pPolicyNo As String, ByVal pZLVSYS As String, ByVal pCCDate As Date, ByVal pLevyHeaderDataSet As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyHistoryBillingRecordOperationCompleted Is Nothing) Then
                Me.GetLevyHistoryBillingRecordOperationCompleted = AddressOf Me.OnGetLevyHistoryBillingRecordOperationCompleted
            End If
            Me.InvokeAsync("GetLevyHistoryBillingRecord", New Object() {pCompID, pStrEnv, pPolicyNo, pZLVSYS, pCCDate, pLevyHeaderDataSet, strErr}, Me.GetLevyHistoryBillingRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyHistoryBillingRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyHistoryBillingRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyHistoryBillingRecordCompleted(Me, New GetLevyHistoryBillingRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyHistorySettlementRecord", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyHistorySettlementRecord(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pPolicyNo As String, ByVal pTranNo As String, ByRef pLevySettlementRecordDataSet As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyHistorySettlementRecord", New Object() {pCompID, pStrEnv, pPolicyNo, pTranNo, pLevySettlementRecordDataSet, strErr})
            pLevySettlementRecordDataSet = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyHistorySettlementRecordAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pPolicyNo As String, ByVal pTranNo As String, ByVal pLevySettlementRecordDataSet As System.Data.DataSet, ByVal strErr As String)
            Me.GetLevyHistorySettlementRecordAsync(pCompID, pStrEnv, pPolicyNo, pTranNo, pLevySettlementRecordDataSet, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyHistorySettlementRecordAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pPolicyNo As String, ByVal pTranNo As String, ByVal pLevySettlementRecordDataSet As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyHistorySettlementRecordOperationCompleted Is Nothing) Then
                Me.GetLevyHistorySettlementRecordOperationCompleted = AddressOf Me.OnGetLevyHistorySettlementRecordOperationCompleted
            End If
            Me.InvokeAsync("GetLevyHistorySettlementRecord", New Object() {pCompID, pStrEnv, pPolicyNo, pTranNo, pLevySettlementRecordDataSet, strErr}, Me.GetLevyHistorySettlementRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyHistorySettlementRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyHistorySettlementRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyHistorySettlementRecordCompleted(Me, New GetLevyHistorySettlementRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetCCSInformationForCNB", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCCSInformationForCNB(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal policyNumber As String, ByVal branch As String, ByVal dpptdDateTime As Date, ByVal currency As String, ByVal amount As String, ByVal payerName As String, ByVal payType As String, ByRef receiptNumber As String, ByRef payCode As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCCSInformationForCNB", New Object() {pCompID, pStrEnv, pUserID, policyNumber, branch, dpptdDateTime, currency, amount, payerName, payType, receiptNumber, payCode, strErr})
            receiptNumber = CType(results(1),String)
            payCode = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCCSInformationForCNBAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal policyNumber As String, ByVal branch As String, ByVal dpptdDateTime As Date, ByVal currency As String, ByVal amount As String, ByVal payerName As String, ByVal payType As String, ByVal receiptNumber As String, ByVal payCode As String, ByVal strErr As String)
            Me.GetCCSInformationForCNBAsync(pCompID, pStrEnv, pUserID, policyNumber, branch, dpptdDateTime, currency, amount, payerName, payType, receiptNumber, payCode, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCCSInformationForCNBAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal policyNumber As String, ByVal branch As String, ByVal dpptdDateTime As Date, ByVal currency As String, ByVal amount As String, ByVal payerName As String, ByVal payType As String, ByVal receiptNumber As String, ByVal payCode As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCCSInformationForCNBOperationCompleted Is Nothing) Then
                Me.GetCCSInformationForCNBOperationCompleted = AddressOf Me.OnGetCCSInformationForCNBOperationCompleted
            End If
            Me.InvokeAsync("GetCCSInformationForCNB", New Object() {pCompID, pStrEnv, pUserID, policyNumber, branch, dpptdDateTime, currency, amount, payerName, payType, receiptNumber, payCode, strErr}, Me.GetCCSInformationForCNBOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCCSInformationForCNBOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCCSInformationForCNBCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCCSInformationForCNBCompleted(Me, New GetCCSInformationForCNBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyQuotationForCRS", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyQuotationForCRS(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal pContractCurrency As String, ByVal pReceiptAmount As Double, ByVal pPTDDate As Date, ByVal pRCDDate As Date, ByVal pModalPremium As Double, ByVal pIsNew As Boolean, ByVal pPaymentType As String, ByVal pLevySystem As String, ByRef levyAmount As Double, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyQuotationForCRS", New Object() {pCompID, pStrEnv, pUserID, pContractNo, pContractCurrency, pReceiptAmount, pPTDDate, pRCDDate, pModalPremium, pIsNew, pPaymentType, pLevySystem, levyAmount, strErr})
            levyAmount = CType(results(1),Double)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyQuotationForCRSAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal pContractCurrency As String, ByVal pReceiptAmount As Double, ByVal pPTDDate As Date, ByVal pRCDDate As Date, ByVal pModalPremium As Double, ByVal pIsNew As Boolean, ByVal pPaymentType As String, ByVal pLevySystem As String, ByVal levyAmount As Double, ByVal strErr As String)
            Me.GetLevyQuotationForCRSAsync(pCompID, pStrEnv, pUserID, pContractNo, pContractCurrency, pReceiptAmount, pPTDDate, pRCDDate, pModalPremium, pIsNew, pPaymentType, pLevySystem, levyAmount, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyQuotationForCRSAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal pContractCurrency As String, ByVal pReceiptAmount As Double, ByVal pPTDDate As Date, ByVal pRCDDate As Date, ByVal pModalPremium As Double, ByVal pIsNew As Boolean, ByVal pPaymentType As String, ByVal pLevySystem As String, ByVal levyAmount As Double, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyQuotationForCRSOperationCompleted Is Nothing) Then
                Me.GetLevyQuotationForCRSOperationCompleted = AddressOf Me.OnGetLevyQuotationForCRSOperationCompleted
            End If
            Me.InvokeAsync("GetLevyQuotationForCRS", New Object() {pCompID, pStrEnv, pUserID, pContractNo, pContractCurrency, pReceiptAmount, pPTDDate, pRCDDate, pModalPremium, pIsNew, pPaymentType, pLevySystem, levyAmount, strErr}, Me.GetLevyQuotationForCRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyQuotationForCRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyQuotationForCRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyQuotationForCRSCompleted(Me, New GetLevyQuotationForCRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyQuotationForAES", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyQuotationForAES(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal pContractCurrency As String, ByVal pReceiptAmount As Double, ByVal pPTDDate As Date, ByVal pRCDDate As Date, ByVal pModalPremium As Double, ByVal pIsNew As Boolean, ByVal pPaymentType As String, ByVal pLevySystem As String, ByRef levyAmount As Double, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyQuotationForAES", New Object() {pCompID, pStrEnv, pUserID, pContractNo, pContractCurrency, pReceiptAmount, pPTDDate, pRCDDate, pModalPremium, pIsNew, pPaymentType, pLevySystem, levyAmount, strErr})
            levyAmount = CType(results(1),Double)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyQuotationForAESAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal pContractCurrency As String, ByVal pReceiptAmount As Double, ByVal pPTDDate As Date, ByVal pRCDDate As Date, ByVal pModalPremium As Double, ByVal pIsNew As Boolean, ByVal pPaymentType As String, ByVal pLevySystem As String, ByVal levyAmount As Double, ByVal strErr As String)
            Me.GetLevyQuotationForAESAsync(pCompID, pStrEnv, pUserID, pContractNo, pContractCurrency, pReceiptAmount, pPTDDate, pRCDDate, pModalPremium, pIsNew, pPaymentType, pLevySystem, levyAmount, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyQuotationForAESAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal pContractCurrency As String, ByVal pReceiptAmount As Double, ByVal pPTDDate As Date, ByVal pRCDDate As Date, ByVal pModalPremium As Double, ByVal pIsNew As Boolean, ByVal pPaymentType As String, ByVal pLevySystem As String, ByVal levyAmount As Double, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyQuotationForAESOperationCompleted Is Nothing) Then
                Me.GetLevyQuotationForAESOperationCompleted = AddressOf Me.OnGetLevyQuotationForAESOperationCompleted
            End If
            Me.InvokeAsync("GetLevyQuotationForAES", New Object() {pCompID, pStrEnv, pUserID, pContractNo, pContractCurrency, pReceiptAmount, pPTDDate, pRCDDate, pModalPremium, pIsNew, pPaymentType, pLevySystem, levyAmount, strErr}, Me.GetLevyQuotationForAESOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyQuotationForAESOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyQuotationForAESCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyQuotationForAESCompleted(Me, New GetLevyQuotationForAESCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyQuotationForCNB", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyQuotationForCNB(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal pContractCurrency As String, ByVal pReceiptAmount As Double, ByVal pPTDDate As Date, ByVal pRCDDate As Date, ByVal pModalPremium As Double, ByVal pIsNew As Boolean, ByVal pPaymentType As String, ByVal pLevySystem As String, ByRef levyAmount As Double, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyQuotationForCNB", New Object() {pCompID, pStrEnv, pUserID, pContractNo, pContractCurrency, pReceiptAmount, pPTDDate, pRCDDate, pModalPremium, pIsNew, pPaymentType, pLevySystem, levyAmount, strErr})
            levyAmount = CType(results(1),Double)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyQuotationForCNBAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal pContractCurrency As String, ByVal pReceiptAmount As Double, ByVal pPTDDate As Date, ByVal pRCDDate As Date, ByVal pModalPremium As Double, ByVal pIsNew As Boolean, ByVal pPaymentType As String, ByVal pLevySystem As String, ByVal levyAmount As Double, ByVal strErr As String)
            Me.GetLevyQuotationForCNBAsync(pCompID, pStrEnv, pUserID, pContractNo, pContractCurrency, pReceiptAmount, pPTDDate, pRCDDate, pModalPremium, pIsNew, pPaymentType, pLevySystem, levyAmount, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyQuotationForCNBAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal pContractCurrency As String, ByVal pReceiptAmount As Double, ByVal pPTDDate As Date, ByVal pRCDDate As Date, ByVal pModalPremium As Double, ByVal pIsNew As Boolean, ByVal pPaymentType As String, ByVal pLevySystem As String, ByVal levyAmount As Double, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyQuotationForCNBOperationCompleted Is Nothing) Then
                Me.GetLevyQuotationForCNBOperationCompleted = AddressOf Me.OnGetLevyQuotationForCNBOperationCompleted
            End If
            Me.InvokeAsync("GetLevyQuotationForCNB", New Object() {pCompID, pStrEnv, pUserID, pContractNo, pContractCurrency, pReceiptAmount, pPTDDate, pRCDDate, pModalPremium, pIsNew, pPaymentType, pLevySystem, levyAmount, strErr}, Me.GetLevyQuotationForCNBOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyQuotationForCNBOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyQuotationForCNBCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyQuotationForCNBCompleted(Me, New GetLevyQuotationForCNBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyQuotationBillingChange", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyQuotationBillingChange(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal pReceiptAmount As Double, ByVal pBillingDate As Date, ByVal pModalPremium As Double, ByRef levyAmount As Double, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyQuotationBillingChange", New Object() {pCompID, pStrEnv, pUserID, pContractNo, pReceiptAmount, pBillingDate, pModalPremium, levyAmount, strErr})
            levyAmount = CType(results(1),Double)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyQuotationBillingChangeAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal pReceiptAmount As Double, ByVal pBillingDate As Date, ByVal pModalPremium As Double, ByVal levyAmount As Double, ByVal strErr As String)
            Me.GetLevyQuotationBillingChangeAsync(pCompID, pStrEnv, pUserID, pContractNo, pReceiptAmount, pBillingDate, pModalPremium, levyAmount, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyQuotationBillingChangeAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserID As String, ByVal pContractNo As String, ByVal pReceiptAmount As Double, ByVal pBillingDate As Date, ByVal pModalPremium As Double, ByVal levyAmount As Double, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyQuotationBillingChangeOperationCompleted Is Nothing) Then
                Me.GetLevyQuotationBillingChangeOperationCompleted = AddressOf Me.OnGetLevyQuotationBillingChangeOperationCompleted
            End If
            Me.InvokeAsync("GetLevyQuotationBillingChange", New Object() {pCompID, pStrEnv, pUserID, pContractNo, pReceiptAmount, pBillingDate, pModalPremium, levyAmount, strErr}, Me.GetLevyQuotationBillingChangeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyQuotationBillingChangeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyQuotationBillingChangeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyQuotationBillingChangeCompleted(Me, New GetLevyQuotationBillingChangeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/InsertLevyOverdueFollowUp", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertLevyOverdueFollowUp(ByVal pCompID As String, ByVal pStrEnv As String, ByVal ZLVYSYS As String, ByVal policyNumber As String, ByVal CCDATE As String, ByVal TRANNO As String, ByVal means As String, ByVal remarks As String, ByVal IsSucess As Boolean, ByVal pUserId As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("InsertLevyOverdueFollowUp", New Object() {pCompID, pStrEnv, ZLVYSYS, policyNumber, CCDATE, TRANNO, means, remarks, IsSucess, pUserId, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertLevyOverdueFollowUpAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal ZLVYSYS As String, ByVal policyNumber As String, ByVal CCDATE As String, ByVal TRANNO As String, ByVal means As String, ByVal remarks As String, ByVal IsSucess As Boolean, ByVal pUserId As String, ByVal strErr As String)
            Me.InsertLevyOverdueFollowUpAsync(pCompID, pStrEnv, ZLVYSYS, policyNumber, CCDATE, TRANNO, means, remarks, IsSucess, pUserId, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertLevyOverdueFollowUpAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal ZLVYSYS As String, ByVal policyNumber As String, ByVal CCDATE As String, ByVal TRANNO As String, ByVal means As String, ByVal remarks As String, ByVal IsSucess As Boolean, ByVal pUserId As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.InsertLevyOverdueFollowUpOperationCompleted Is Nothing) Then
                Me.InsertLevyOverdueFollowUpOperationCompleted = AddressOf Me.OnInsertLevyOverdueFollowUpOperationCompleted
            End If
            Me.InvokeAsync("InsertLevyOverdueFollowUp", New Object() {pCompID, pStrEnv, ZLVYSYS, policyNumber, CCDATE, TRANNO, means, remarks, IsSucess, pUserId, strErr}, Me.InsertLevyOverdueFollowUpOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertLevyOverdueFollowUpOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertLevyOverdueFollowUpCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertLevyOverdueFollowUpCompleted(Me, New InsertLevyOverdueFollowUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdateLevyOverdueFollowUp", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateLevyOverdueFollowUp(ByVal pCompID As String, ByVal pStrEnv As String, ByVal policyNumber As String, ByVal OverDueId As String, ByVal means As String, ByVal remarks As String, ByVal IsSucess As Boolean, ByVal pUserId As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateLevyOverdueFollowUp", New Object() {pCompID, pStrEnv, policyNumber, OverDueId, means, remarks, IsSucess, pUserId, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateLevyOverdueFollowUpAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal policyNumber As String, ByVal OverDueId As String, ByVal means As String, ByVal remarks As String, ByVal IsSucess As Boolean, ByVal pUserId As String, ByVal strErr As String)
            Me.UpdateLevyOverdueFollowUpAsync(pCompID, pStrEnv, policyNumber, OverDueId, means, remarks, IsSucess, pUserId, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateLevyOverdueFollowUpAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal policyNumber As String, ByVal OverDueId As String, ByVal means As String, ByVal remarks As String, ByVal IsSucess As Boolean, ByVal pUserId As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateLevyOverdueFollowUpOperationCompleted Is Nothing) Then
                Me.UpdateLevyOverdueFollowUpOperationCompleted = AddressOf Me.OnUpdateLevyOverdueFollowUpOperationCompleted
            End If
            Me.InvokeAsync("UpdateLevyOverdueFollowUp", New Object() {pCompID, pStrEnv, policyNumber, OverDueId, means, remarks, IsSucess, pUserId, strErr}, Me.UpdateLevyOverdueFollowUpOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateLevyOverdueFollowUpOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateLevyOverdueFollowUpCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateLevyOverdueFollowUpCompleted(Me, New UpdateLevyOverdueFollowUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyOverdueFollowUp", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyOverdueFollowUp(ByVal pCompID As String, ByVal pStrEnv As String, ByVal ZLVYSYS As String, ByVal policyNumber As String, ByVal CCDATE As String, ByVal TRANNO As String, ByRef levyOverdueFollowUpDataSet As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyOverdueFollowUp", New Object() {pCompID, pStrEnv, ZLVYSYS, policyNumber, CCDATE, TRANNO, levyOverdueFollowUpDataSet, strErr})
            levyOverdueFollowUpDataSet = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyOverdueFollowUpAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal ZLVYSYS As String, ByVal policyNumber As String, ByVal CCDATE As String, ByVal TRANNO As String, ByVal levyOverdueFollowUpDataSet As System.Data.DataSet, ByVal strErr As String)
            Me.GetLevyOverdueFollowUpAsync(pCompID, pStrEnv, ZLVYSYS, policyNumber, CCDATE, TRANNO, levyOverdueFollowUpDataSet, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyOverdueFollowUpAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal ZLVYSYS As String, ByVal policyNumber As String, ByVal CCDATE As String, ByVal TRANNO As String, ByVal levyOverdueFollowUpDataSet As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyOverdueFollowUpOperationCompleted Is Nothing) Then
                Me.GetLevyOverdueFollowUpOperationCompleted = AddressOf Me.OnGetLevyOverdueFollowUpOperationCompleted
            End If
            Me.InvokeAsync("GetLevyOverdueFollowUp", New Object() {pCompID, pStrEnv, ZLVYSYS, policyNumber, CCDATE, TRANNO, levyOverdueFollowUpDataSet, strErr}, Me.GetLevyOverdueFollowUpOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyOverdueFollowUpOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyOverdueFollowUpCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyOverdueFollowUpCompleted(Me, New GetLevyOverdueFollowUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyOverdueFollowUpType", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyOverdueFollowUpType(ByVal pCompID As String, ByVal pStrEnv As String, ByRef levyOverdueFollowUpType As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyOverdueFollowUpType", New Object() {pCompID, pStrEnv, levyOverdueFollowUpType, strErr})
            levyOverdueFollowUpType = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyOverdueFollowUpTypeAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal levyOverdueFollowUpType As System.Data.DataSet, ByVal strErr As String)
            Me.GetLevyOverdueFollowUpTypeAsync(pCompID, pStrEnv, levyOverdueFollowUpType, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyOverdueFollowUpTypeAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal levyOverdueFollowUpType As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyOverdueFollowUpTypeOperationCompleted Is Nothing) Then
                Me.GetLevyOverdueFollowUpTypeOperationCompleted = AddressOf Me.OnGetLevyOverdueFollowUpTypeOperationCompleted
            End If
            Me.InvokeAsync("GetLevyOverdueFollowUpType", New Object() {pCompID, pStrEnv, levyOverdueFollowUpType, strErr}, Me.GetLevyOverdueFollowUpTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyOverdueFollowUpTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyOverdueFollowUpTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyOverdueFollowUpTypeCompleted(Me, New GetLevyOverdueFollowUpTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyOverDueList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyOverDueList(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pCutOffDate As Date, ByRef pLevyOverDueList As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyOverDueList", New Object() {pCompID, pStrEnv, pCutOffDate, pLevyOverDueList, strErr})
            pLevyOverDueList = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyOverDueListAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pCutOffDate As Date, ByVal pLevyOverDueList As System.Data.DataSet, ByVal strErr As String)
            Me.GetLevyOverDueListAsync(pCompID, pStrEnv, pCutOffDate, pLevyOverDueList, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyOverDueListAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pCutOffDate As Date, ByVal pLevyOverDueList As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyOverDueListOperationCompleted Is Nothing) Then
                Me.GetLevyOverDueListOperationCompleted = AddressOf Me.OnGetLevyOverDueListOperationCompleted
            End If
            Me.InvokeAsync("GetLevyOverDueList", New Object() {pCompID, pStrEnv, pCutOffDate, pLevyOverDueList, strErr}, Me.GetLevyOverDueListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyOverDueListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyOverDueListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyOverDueListCompleted(Me, New GetLevyOverDueListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyOverDueSubList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyOverDueSubList(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pCutOffDate As Date, ByVal pPolicyNumber As String, ByRef pLevyOverDueList As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyOverDueSubList", New Object() {pCompID, pStrEnv, pCutOffDate, pPolicyNumber, pLevyOverDueList, strErr})
            pLevyOverDueList = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyOverDueSubListAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pCutOffDate As Date, ByVal pPolicyNumber As String, ByVal pLevyOverDueList As System.Data.DataSet, ByVal strErr As String)
            Me.GetLevyOverDueSubListAsync(pCompID, pStrEnv, pCutOffDate, pPolicyNumber, pLevyOverDueList, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyOverDueSubListAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pCutOffDate As Date, ByVal pPolicyNumber As String, ByVal pLevyOverDueList As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyOverDueSubListOperationCompleted Is Nothing) Then
                Me.GetLevyOverDueSubListOperationCompleted = AddressOf Me.OnGetLevyOverDueSubListOperationCompleted
            End If
            Me.InvokeAsync("GetLevyOverDueSubList", New Object() {pCompID, pStrEnv, pCutOffDate, pPolicyNumber, pLevyOverDueList, strErr}, Me.GetLevyOverDueSubListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyOverDueSubListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyOverDueSubListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyOverDueSubListCompleted(Me, New GetLevyOverDueSubListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/InsertLevyOverdueListLog", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertLevyOverdueListLog( _
                    ByVal pCompID As String,  _
                    ByVal pStrEnv As String,  _
                    ByVal policyNumber As String,  _
                    ByVal TotalOS As Double,  _
                    ByVal CustomerID As String,  _
                    ByVal PhoneMobile As String,  _
                    ByVal EmailAddr As String,  _
                    ByVal NameSuffix As String,  _
                    ByVal FirstName As String,  _
                    ByVal Gender As String,  _
                    ByVal UseChiInd As String,  _
                    ByVal ChiFstNm As String,  _
                    ByVal ChiLstNm As String,  _
                    ByVal cswpad_add1 As String,  _
                    ByVal cswpad_add2 As String,  _
                    ByVal cswpad_add3 As String,  _
                    ByVal RunningDate As Date,  _
                    ByVal SendingType As Integer,  _
                    ByVal IsSuccess As Boolean,  _
                    ByVal CreatedDate As Date,  _
                    ByVal PolicyCurrency As String,  _
                    ByVal BillToDate As Date,  _
                    ByVal PaidToDate As Date,  _
                    ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("InsertLevyOverdueListLog", New Object() {pCompID, pStrEnv, policyNumber, TotalOS, CustomerID, PhoneMobile, EmailAddr, NameSuffix, FirstName, Gender, UseChiInd, ChiFstNm, ChiLstNm, cswpad_add1, cswpad_add2, cswpad_add3, RunningDate, SendingType, IsSuccess, CreatedDate, PolicyCurrency, BillToDate, PaidToDate, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertLevyOverdueListLogAsync( _
                    ByVal pCompID As String,  _
                    ByVal pStrEnv As String,  _
                    ByVal policyNumber As String,  _
                    ByVal TotalOS As Double,  _
                    ByVal CustomerID As String,  _
                    ByVal PhoneMobile As String,  _
                    ByVal EmailAddr As String,  _
                    ByVal NameSuffix As String,  _
                    ByVal FirstName As String,  _
                    ByVal Gender As String,  _
                    ByVal UseChiInd As String,  _
                    ByVal ChiFstNm As String,  _
                    ByVal ChiLstNm As String,  _
                    ByVal cswpad_add1 As String,  _
                    ByVal cswpad_add2 As String,  _
                    ByVal cswpad_add3 As String,  _
                    ByVal RunningDate As Date,  _
                    ByVal SendingType As Integer,  _
                    ByVal IsSuccess As Boolean,  _
                    ByVal CreatedDate As Date,  _
                    ByVal PolicyCurrency As String,  _
                    ByVal BillToDate As Date,  _
                    ByVal PaidToDate As Date,  _
                    ByVal strErr As String)
            Me.InsertLevyOverdueListLogAsync(pCompID, pStrEnv, policyNumber, TotalOS, CustomerID, PhoneMobile, EmailAddr, NameSuffix, FirstName, Gender, UseChiInd, ChiFstNm, ChiLstNm, cswpad_add1, cswpad_add2, cswpad_add3, RunningDate, SendingType, IsSuccess, CreatedDate, PolicyCurrency, BillToDate, PaidToDate, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertLevyOverdueListLogAsync( _
                    ByVal pCompID As String,  _
                    ByVal pStrEnv As String,  _
                    ByVal policyNumber As String,  _
                    ByVal TotalOS As Double,  _
                    ByVal CustomerID As String,  _
                    ByVal PhoneMobile As String,  _
                    ByVal EmailAddr As String,  _
                    ByVal NameSuffix As String,  _
                    ByVal FirstName As String,  _
                    ByVal Gender As String,  _
                    ByVal UseChiInd As String,  _
                    ByVal ChiFstNm As String,  _
                    ByVal ChiLstNm As String,  _
                    ByVal cswpad_add1 As String,  _
                    ByVal cswpad_add2 As String,  _
                    ByVal cswpad_add3 As String,  _
                    ByVal RunningDate As Date,  _
                    ByVal SendingType As Integer,  _
                    ByVal IsSuccess As Boolean,  _
                    ByVal CreatedDate As Date,  _
                    ByVal PolicyCurrency As String,  _
                    ByVal BillToDate As Date,  _
                    ByVal PaidToDate As Date,  _
                    ByVal strErr As String,  _
                    ByVal userState As Object)
            If (Me.InsertLevyOverdueListLogOperationCompleted Is Nothing) Then
                Me.InsertLevyOverdueListLogOperationCompleted = AddressOf Me.OnInsertLevyOverdueListLogOperationCompleted
            End If
            Me.InvokeAsync("InsertLevyOverdueListLog", New Object() {pCompID, pStrEnv, policyNumber, TotalOS, CustomerID, PhoneMobile, EmailAddr, NameSuffix, FirstName, Gender, UseChiInd, ChiFstNm, ChiLstNm, cswpad_add1, cswpad_add2, cswpad_add3, RunningDate, SendingType, IsSuccess, CreatedDate, PolicyCurrency, BillToDate, PaidToDate, strErr}, Me.InsertLevyOverdueListLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertLevyOverdueListLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertLevyOverdueListLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertLevyOverdueListLogCompleted(Me, New InsertLevyOverdueListLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/InsertLevyOverdueListLogTemp", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertLevyOverdueListLogTemp( _
                    ByVal pCompID As String,  _
                    ByVal pStrEnv As String,  _
                    ByVal policyNumber As String,  _
                    ByVal TotalOS As Double,  _
                    ByVal CustomerID As String,  _
                    ByVal PhoneMobile As String,  _
                    ByVal EmailAddr As String,  _
                    ByVal NameSuffix As String,  _
                    ByVal FirstName As String,  _
                    ByVal Gender As String,  _
                    ByVal UseChiInd As String,  _
                    ByVal ChiFstNm As String,  _
                    ByVal ChiLstNm As String,  _
                    ByVal cswpad_add1 As String,  _
                    ByVal cswpad_add2 As String,  _
                    ByVal cswpad_add3 As String,  _
                    ByVal RunningDate As Date,  _
                    ByVal SendingType As Integer,  _
                    ByVal IsSuccess As Boolean,  _
                    ByVal CreatedDate As Date,  _
                    ByVal PolicyCurrency As String,  _
                    ByVal BillToDate As Date,  _
                    ByVal PaidToDate As Date,  _
                    ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("InsertLevyOverdueListLogTemp", New Object() {pCompID, pStrEnv, policyNumber, TotalOS, CustomerID, PhoneMobile, EmailAddr, NameSuffix, FirstName, Gender, UseChiInd, ChiFstNm, ChiLstNm, cswpad_add1, cswpad_add2, cswpad_add3, RunningDate, SendingType, IsSuccess, CreatedDate, PolicyCurrency, BillToDate, PaidToDate, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertLevyOverdueListLogTempAsync( _
                    ByVal pCompID As String,  _
                    ByVal pStrEnv As String,  _
                    ByVal policyNumber As String,  _
                    ByVal TotalOS As Double,  _
                    ByVal CustomerID As String,  _
                    ByVal PhoneMobile As String,  _
                    ByVal EmailAddr As String,  _
                    ByVal NameSuffix As String,  _
                    ByVal FirstName As String,  _
                    ByVal Gender As String,  _
                    ByVal UseChiInd As String,  _
                    ByVal ChiFstNm As String,  _
                    ByVal ChiLstNm As String,  _
                    ByVal cswpad_add1 As String,  _
                    ByVal cswpad_add2 As String,  _
                    ByVal cswpad_add3 As String,  _
                    ByVal RunningDate As Date,  _
                    ByVal SendingType As Integer,  _
                    ByVal IsSuccess As Boolean,  _
                    ByVal CreatedDate As Date,  _
                    ByVal PolicyCurrency As String,  _
                    ByVal BillToDate As Date,  _
                    ByVal PaidToDate As Date,  _
                    ByVal strErr As String)
            Me.InsertLevyOverdueListLogTempAsync(pCompID, pStrEnv, policyNumber, TotalOS, CustomerID, PhoneMobile, EmailAddr, NameSuffix, FirstName, Gender, UseChiInd, ChiFstNm, ChiLstNm, cswpad_add1, cswpad_add2, cswpad_add3, RunningDate, SendingType, IsSuccess, CreatedDate, PolicyCurrency, BillToDate, PaidToDate, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertLevyOverdueListLogTempAsync( _
                    ByVal pCompID As String,  _
                    ByVal pStrEnv As String,  _
                    ByVal policyNumber As String,  _
                    ByVal TotalOS As Double,  _
                    ByVal CustomerID As String,  _
                    ByVal PhoneMobile As String,  _
                    ByVal EmailAddr As String,  _
                    ByVal NameSuffix As String,  _
                    ByVal FirstName As String,  _
                    ByVal Gender As String,  _
                    ByVal UseChiInd As String,  _
                    ByVal ChiFstNm As String,  _
                    ByVal ChiLstNm As String,  _
                    ByVal cswpad_add1 As String,  _
                    ByVal cswpad_add2 As String,  _
                    ByVal cswpad_add3 As String,  _
                    ByVal RunningDate As Date,  _
                    ByVal SendingType As Integer,  _
                    ByVal IsSuccess As Boolean,  _
                    ByVal CreatedDate As Date,  _
                    ByVal PolicyCurrency As String,  _
                    ByVal BillToDate As Date,  _
                    ByVal PaidToDate As Date,  _
                    ByVal strErr As String,  _
                    ByVal userState As Object)
            If (Me.InsertLevyOverdueListLogTempOperationCompleted Is Nothing) Then
                Me.InsertLevyOverdueListLogTempOperationCompleted = AddressOf Me.OnInsertLevyOverdueListLogTempOperationCompleted
            End If
            Me.InvokeAsync("InsertLevyOverdueListLogTemp", New Object() {pCompID, pStrEnv, policyNumber, TotalOS, CustomerID, PhoneMobile, EmailAddr, NameSuffix, FirstName, Gender, UseChiInd, ChiFstNm, ChiLstNm, cswpad_add1, cswpad_add2, cswpad_add3, RunningDate, SendingType, IsSuccess, CreatedDate, PolicyCurrency, BillToDate, PaidToDate, strErr}, Me.InsertLevyOverdueListLogTempOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertLevyOverdueListLogTempOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertLevyOverdueListLogTempCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertLevyOverdueListLogTempCompleted(Me, New InsertLevyOverdueListLogTempCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetIsOpenPosBatchLevyOutsanding", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIsOpenPosBatchLevyOutsanding(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByRef pIsOpenPosBatchLevyOutsanding As Boolean, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetIsOpenPosBatchLevyOutsanding", New Object() {pCompID, pStrEnv, pstrUserId, pIsOpenPosBatchLevyOutsanding, strErr})
            pIsOpenPosBatchLevyOutsanding = CType(results(1),Boolean)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIsOpenPosBatchLevyOutsandingAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal pIsOpenPosBatchLevyOutsanding As Boolean, ByVal strErr As String)
            Me.GetIsOpenPosBatchLevyOutsandingAsync(pCompID, pStrEnv, pstrUserId, pIsOpenPosBatchLevyOutsanding, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIsOpenPosBatchLevyOutsandingAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal pIsOpenPosBatchLevyOutsanding As Boolean, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetIsOpenPosBatchLevyOutsandingOperationCompleted Is Nothing) Then
                Me.GetIsOpenPosBatchLevyOutsandingOperationCompleted = AddressOf Me.OnGetIsOpenPosBatchLevyOutsandingOperationCompleted
            End If
            Me.InvokeAsync("GetIsOpenPosBatchLevyOutsanding", New Object() {pCompID, pStrEnv, pstrUserId, pIsOpenPosBatchLevyOutsanding, strErr}, Me.GetIsOpenPosBatchLevyOutsandingOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIsOpenPosBatchLevyOutsandingOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIsOpenPosBatchLevyOutsandingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIsOpenPosBatchLevyOutsandingCompleted(Me, New GetIsOpenPosBatchLevyOutsandingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/InsertFsurLevyInfoCap", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertFsurLevyInfoCap(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal CHDRNUM As String, ByVal TRANNO As String, ByVal ZLEVYRCV As Double, ByVal ZLEVYSUSP As Double, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("InsertFsurLevyInfoCap", New Object() {pCompID, pStrEnv, pstrUserId, CHDRNUM, TRANNO, ZLEVYRCV, ZLEVYSUSP, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertFsurLevyInfoCapAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal CHDRNUM As String, ByVal TRANNO As String, ByVal ZLEVYRCV As Double, ByVal ZLEVYSUSP As Double, ByVal strErr As String)
            Me.InsertFsurLevyInfoCapAsync(pCompID, pStrEnv, pstrUserId, CHDRNUM, TRANNO, ZLEVYRCV, ZLEVYSUSP, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertFsurLevyInfoCapAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal CHDRNUM As String, ByVal TRANNO As String, ByVal ZLEVYRCV As Double, ByVal ZLEVYSUSP As Double, ByVal strErr As String, ByVal userState As Object)
            If (Me.InsertFsurLevyInfoCapOperationCompleted Is Nothing) Then
                Me.InsertFsurLevyInfoCapOperationCompleted = AddressOf Me.OnInsertFsurLevyInfoCapOperationCompleted
            End If
            Me.InvokeAsync("InsertFsurLevyInfoCap", New Object() {pCompID, pStrEnv, pstrUserId, CHDRNUM, TRANNO, ZLEVYRCV, ZLEVYSUSP, strErr}, Me.InsertFsurLevyInfoCapOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertFsurLevyInfoCapOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertFsurLevyInfoCapCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertFsurLevyInfoCapCompleted(Me, New InsertFsurLevyInfoCapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetRunningDateList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRunningDateList(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByRef pRunningDateList As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetRunningDateList", New Object() {pCompID, pStrEnv, pstrUserId, pRunningDateList, strErr})
            pRunningDateList = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRunningDateListAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal pRunningDateList As System.Data.DataSet, ByVal strErr As String)
            Me.GetRunningDateListAsync(pCompID, pStrEnv, pstrUserId, pRunningDateList, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRunningDateListAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal pRunningDateList As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetRunningDateListOperationCompleted Is Nothing) Then
                Me.GetRunningDateListOperationCompleted = AddressOf Me.OnGetRunningDateListOperationCompleted
            End If
            Me.InvokeAsync("GetRunningDateList", New Object() {pCompID, pStrEnv, pstrUserId, pRunningDateList, strErr}, Me.GetRunningDateListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRunningDateListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRunningDateListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRunningDateListCompleted(Me, New GetRunningDateListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyOverLetterData", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyOverLetterData(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal pPolicyNumber As String, ByRef pRunningDateList As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyOverLetterData", New Object() {pCompID, pStrEnv, pstrUserId, pPolicyNumber, pRunningDateList, strErr})
            pRunningDateList = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyOverLetterDataAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal pPolicyNumber As String, ByVal pRunningDateList As System.Data.DataSet, ByVal strErr As String)
            Me.GetLevyOverLetterDataAsync(pCompID, pStrEnv, pstrUserId, pPolicyNumber, pRunningDateList, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyOverLetterDataAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal pPolicyNumber As String, ByVal pRunningDateList As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyOverLetterDataOperationCompleted Is Nothing) Then
                Me.GetLevyOverLetterDataOperationCompleted = AddressOf Me.OnGetLevyOverLetterDataOperationCompleted
            End If
            Me.InvokeAsync("GetLevyOverLetterData", New Object() {pCompID, pStrEnv, pstrUserId, pPolicyNumber, pRunningDateList, strErr}, Me.GetLevyOverLetterDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyOverLetterDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyOverLetterDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyOverLetterDataCompleted(Me, New GetLevyOverLetterDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/InsertLevyOverduePrintList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertLevyOverduePrintList(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal policyNumber As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("InsertLevyOverduePrintList", New Object() {pCompID, pStrEnv, pstrUserId, policyNumber, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertLevyOverduePrintListAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal policyNumber As String, ByVal strErr As String)
            Me.InsertLevyOverduePrintListAsync(pCompID, pStrEnv, pstrUserId, policyNumber, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertLevyOverduePrintListAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal policyNumber As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.InsertLevyOverduePrintListOperationCompleted Is Nothing) Then
                Me.InsertLevyOverduePrintListOperationCompleted = AddressOf Me.OnInsertLevyOverduePrintListOperationCompleted
            End If
            Me.InvokeAsync("InsertLevyOverduePrintList", New Object() {pCompID, pStrEnv, pstrUserId, policyNumber, strErr}, Me.InsertLevyOverduePrintListOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertLevyOverduePrintListOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertLevyOverduePrintListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertLevyOverduePrintListCompleted(Me, New InsertLevyOverduePrintListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyOverLetterRound3PrintLists", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyOverLetterRound3PrintLists(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal pCutOffDate As Date, ByRef pLevyOverLetterPrintLists As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyOverLetterRound3PrintLists", New Object() {pCompID, pStrEnv, pstrUserId, pCutOffDate, pLevyOverLetterPrintLists, strErr})
            pLevyOverLetterPrintLists = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyOverLetterRound3PrintListsAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal pCutOffDate As Date, ByVal pLevyOverLetterPrintLists As System.Data.DataSet, ByVal strErr As String)
            Me.GetLevyOverLetterRound3PrintListsAsync(pCompID, pStrEnv, pstrUserId, pCutOffDate, pLevyOverLetterPrintLists, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyOverLetterRound3PrintListsAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal pCutOffDate As Date, ByVal pLevyOverLetterPrintLists As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyOverLetterRound3PrintListsOperationCompleted Is Nothing) Then
                Me.GetLevyOverLetterRound3PrintListsOperationCompleted = AddressOf Me.OnGetLevyOverLetterRound3PrintListsOperationCompleted
            End If
            Me.InvokeAsync("GetLevyOverLetterRound3PrintLists", New Object() {pCompID, pStrEnv, pstrUserId, pCutOffDate, pLevyOverLetterPrintLists, strErr}, Me.GetLevyOverLetterRound3PrintListsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyOverLetterRound3PrintListsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyOverLetterRound3PrintListsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyOverLetterRound3PrintListsCompleted(Me, New GetLevyOverLetterRound3PrintListsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdateLevyOverLetterPrintedDate", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateLevyOverLetterPrintedDate(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal policyNumber As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateLevyOverLetterPrintedDate", New Object() {pCompID, pStrEnv, pstrUserId, policyNumber, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateLevyOverLetterPrintedDateAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal policyNumber As String, ByVal strErr As String)
            Me.UpdateLevyOverLetterPrintedDateAsync(pCompID, pStrEnv, pstrUserId, policyNumber, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateLevyOverLetterPrintedDateAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal policyNumber As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateLevyOverLetterPrintedDateOperationCompleted Is Nothing) Then
                Me.UpdateLevyOverLetterPrintedDateOperationCompleted = AddressOf Me.OnUpdateLevyOverLetterPrintedDateOperationCompleted
            End If
            Me.InvokeAsync("UpdateLevyOverLetterPrintedDate", New Object() {pCompID, pStrEnv, pstrUserId, policyNumber, strErr}, Me.UpdateLevyOverLetterPrintedDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateLevyOverLetterPrintedDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateLevyOverLetterPrintedDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateLevyOverLetterPrintedDateCompleted(Me, New UpdateLevyOverLetterPrintedDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetInsertLevyOverdueFollowUpId", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInsertLevyOverdueFollowUpId(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal policyNumber As String, ByRef overdueId As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetInsertLevyOverdueFollowUpId", New Object() {pCompID, pStrEnv, pstrUserId, policyNumber, overdueId, strErr})
            overdueId = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInsertLevyOverdueFollowUpIdAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal policyNumber As String, ByVal overdueId As String, ByVal strErr As String)
            Me.GetInsertLevyOverdueFollowUpIdAsync(pCompID, pStrEnv, pstrUserId, policyNumber, overdueId, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInsertLevyOverdueFollowUpIdAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal policyNumber As String, ByVal overdueId As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetInsertLevyOverdueFollowUpIdOperationCompleted Is Nothing) Then
                Me.GetInsertLevyOverdueFollowUpIdOperationCompleted = AddressOf Me.OnGetInsertLevyOverdueFollowUpIdOperationCompleted
            End If
            Me.InvokeAsync("GetInsertLevyOverdueFollowUpId", New Object() {pCompID, pStrEnv, pstrUserId, policyNumber, overdueId, strErr}, Me.GetInsertLevyOverdueFollowUpIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInsertLevyOverdueFollowUpIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInsertLevyOverdueFollowUpIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInsertLevyOverdueFollowUpIdCompleted(Me, New GetInsertLevyOverdueFollowUpIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetInsertLevyOverdueListLogId", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInsertLevyOverdueListLogId(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal policyNumber As String, ByRef levyOverdueListLogId As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetInsertLevyOverdueListLogId", New Object() {pCompID, pStrEnv, pstrUserId, policyNumber, levyOverdueListLogId, strErr})
            levyOverdueListLogId = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInsertLevyOverdueListLogIdAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal policyNumber As String, ByVal levyOverdueListLogId As String, ByVal strErr As String)
            Me.GetInsertLevyOverdueListLogIdAsync(pCompID, pStrEnv, pstrUserId, policyNumber, levyOverdueListLogId, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInsertLevyOverdueListLogIdAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal policyNumber As String, ByVal levyOverdueListLogId As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetInsertLevyOverdueListLogIdOperationCompleted Is Nothing) Then
                Me.GetInsertLevyOverdueListLogIdOperationCompleted = AddressOf Me.OnGetInsertLevyOverdueListLogIdOperationCompleted
            End If
            Me.InvokeAsync("GetInsertLevyOverdueListLogId", New Object() {pCompID, pStrEnv, pstrUserId, policyNumber, levyOverdueListLogId, strErr}, Me.GetInsertLevyOverdueListLogIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInsertLevyOverdueListLogIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInsertLevyOverdueListLogIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInsertLevyOverdueListLogIdCompleted(Me, New GetInsertLevyOverdueListLogIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetSMSsdMsgId", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSMSsdMsgId(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal SMSsdMsgString As String, ByVal policyNumber As String, ByRef SMSsdMsgId As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSMSsdMsgId", New Object() {pCompID, pStrEnv, pstrUserId, SMSsdMsgString, policyNumber, SMSsdMsgId, strErr})
            SMSsdMsgId = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSMSsdMsgIdAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal SMSsdMsgString As String, ByVal policyNumber As String, ByVal SMSsdMsgId As String, ByVal strErr As String)
            Me.GetSMSsdMsgIdAsync(pCompID, pStrEnv, pstrUserId, SMSsdMsgString, policyNumber, SMSsdMsgId, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSMSsdMsgIdAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal SMSsdMsgString As String, ByVal policyNumber As String, ByVal SMSsdMsgId As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetSMSsdMsgIdOperationCompleted Is Nothing) Then
                Me.GetSMSsdMsgIdOperationCompleted = AddressOf Me.OnGetSMSsdMsgIdOperationCompleted
            End If
            Me.InvokeAsync("GetSMSsdMsgId", New Object() {pCompID, pStrEnv, pstrUserId, SMSsdMsgString, policyNumber, SMSsdMsgId, strErr}, Me.GetSMSsdMsgIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSMSsdMsgIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSMSsdMsgIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSMSsdMsgIdCompleted(Me, New GetSMSsdMsgIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/InsertLevyOverdueFollowUpSms", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertLevyOverdueFollowUpSms(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal overdueId As String, ByVal smsmsd_msg_id As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("InsertLevyOverdueFollowUpSms", New Object() {pCompID, pStrEnv, pstrUserId, overdueId, smsmsd_msg_id, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertLevyOverdueFollowUpSmsAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal overdueId As String, ByVal smsmsd_msg_id As String, ByVal strErr As String)
            Me.InsertLevyOverdueFollowUpSmsAsync(pCompID, pStrEnv, pstrUserId, overdueId, smsmsd_msg_id, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertLevyOverdueFollowUpSmsAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal overdueId As String, ByVal smsmsd_msg_id As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.InsertLevyOverdueFollowUpSmsOperationCompleted Is Nothing) Then
                Me.InsertLevyOverdueFollowUpSmsOperationCompleted = AddressOf Me.OnInsertLevyOverdueFollowUpSmsOperationCompleted
            End If
            Me.InvokeAsync("InsertLevyOverdueFollowUpSms", New Object() {pCompID, pStrEnv, pstrUserId, overdueId, smsmsd_msg_id, strErr}, Me.InsertLevyOverdueFollowUpSmsOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertLevyOverdueFollowUpSmsOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertLevyOverdueFollowUpSmsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertLevyOverdueFollowUpSmsCompleted(Me, New InsertLevyOverdueFollowUpSmsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/InsertLevyOverdueListLogSms", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertLevyOverdueListLogSms(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal levyOverdueListLogId As String, ByVal smsmsd_msg_id As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("InsertLevyOverdueListLogSms", New Object() {pCompID, pStrEnv, pstrUserId, levyOverdueListLogId, smsmsd_msg_id, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertLevyOverdueListLogSmsAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal levyOverdueListLogId As String, ByVal smsmsd_msg_id As String, ByVal strErr As String)
            Me.InsertLevyOverdueListLogSmsAsync(pCompID, pStrEnv, pstrUserId, levyOverdueListLogId, smsmsd_msg_id, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertLevyOverdueListLogSmsAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal levyOverdueListLogId As String, ByVal smsmsd_msg_id As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.InsertLevyOverdueListLogSmsOperationCompleted Is Nothing) Then
                Me.InsertLevyOverdueListLogSmsOperationCompleted = AddressOf Me.OnInsertLevyOverdueListLogSmsOperationCompleted
            End If
            Me.InvokeAsync("InsertLevyOverdueListLogSms", New Object() {pCompID, pStrEnv, pstrUserId, levyOverdueListLogId, smsmsd_msg_id, strErr}, Me.InsertLevyOverdueListLogSmsOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertLevyOverdueListLogSmsOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertLevyOverdueListLogSmsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertLevyOverdueListLogSmsCompleted(Me, New InsertLevyOverdueListLogSmsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyOverdueListLogSMSList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyOverdueListLogSMSList(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByRef levyOverdueFollowUpSmsList As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyOverdueListLogSMSList", New Object() {pCompID, pStrEnv, pstrUserId, levyOverdueFollowUpSmsList, strErr})
            levyOverdueFollowUpSmsList = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyOverdueListLogSMSListAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal levyOverdueFollowUpSmsList As System.Data.DataSet, ByVal strErr As String)
            Me.GetLevyOverdueListLogSMSListAsync(pCompID, pStrEnv, pstrUserId, levyOverdueFollowUpSmsList, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyOverdueListLogSMSListAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal levyOverdueFollowUpSmsList As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyOverdueListLogSMSListOperationCompleted Is Nothing) Then
                Me.GetLevyOverdueListLogSMSListOperationCompleted = AddressOf Me.OnGetLevyOverdueListLogSMSListOperationCompleted
            End If
            Me.InvokeAsync("GetLevyOverdueListLogSMSList", New Object() {pCompID, pStrEnv, pstrUserId, levyOverdueFollowUpSmsList, strErr}, Me.GetLevyOverdueListLogSMSListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyOverdueListLogSMSListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyOverdueListLogSMSListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyOverdueListLogSMSListCompleted(Me, New GetLevyOverdueListLogSMSListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetSMSResultStatus", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSMSResultStatus(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal smsmsd_msg_id As String, ByRef smsResultStatus As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSMSResultStatus", New Object() {pCompID, pStrEnv, pstrUserId, smsmsd_msg_id, smsResultStatus, strErr})
            smsResultStatus = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSMSResultStatusAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal smsmsd_msg_id As String, ByVal smsResultStatus As String, ByVal strErr As String)
            Me.GetSMSResultStatusAsync(pCompID, pStrEnv, pstrUserId, smsmsd_msg_id, smsResultStatus, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSMSResultStatusAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal smsmsd_msg_id As String, ByVal smsResultStatus As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetSMSResultStatusOperationCompleted Is Nothing) Then
                Me.GetSMSResultStatusOperationCompleted = AddressOf Me.OnGetSMSResultStatusOperationCompleted
            End If
            Me.InvokeAsync("GetSMSResultStatus", New Object() {pCompID, pStrEnv, pstrUserId, smsmsd_msg_id, smsResultStatus, strErr}, Me.GetSMSResultStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSMSResultStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSMSResultStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSMSResultStatusCompleted(Me, New GetSMSResultStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdateLevyOverdueListLogFlag", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateLevyOverdueListLogFlag(ByVal pCompID As String, ByVal pStrEnv As String, ByVal policyNumber As String, ByVal LevyOverdueListLogId As String, ByVal LevyOverdueListLogSMSId As String, ByVal smsResultStatus As String, ByVal pUserId As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateLevyOverdueListLogFlag", New Object() {pCompID, pStrEnv, policyNumber, LevyOverdueListLogId, LevyOverdueListLogSMSId, smsResultStatus, pUserId, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateLevyOverdueListLogFlagAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal policyNumber As String, ByVal LevyOverdueListLogId As String, ByVal LevyOverdueListLogSMSId As String, ByVal smsResultStatus As String, ByVal pUserId As String, ByVal strErr As String)
            Me.UpdateLevyOverdueListLogFlagAsync(pCompID, pStrEnv, policyNumber, LevyOverdueListLogId, LevyOverdueListLogSMSId, smsResultStatus, pUserId, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateLevyOverdueListLogFlagAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal policyNumber As String, ByVal LevyOverdueListLogId As String, ByVal LevyOverdueListLogSMSId As String, ByVal smsResultStatus As String, ByVal pUserId As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateLevyOverdueListLogFlagOperationCompleted Is Nothing) Then
                Me.UpdateLevyOverdueListLogFlagOperationCompleted = AddressOf Me.OnUpdateLevyOverdueListLogFlagOperationCompleted
            End If
            Me.InvokeAsync("UpdateLevyOverdueListLogFlag", New Object() {pCompID, pStrEnv, policyNumber, LevyOverdueListLogId, LevyOverdueListLogSMSId, smsResultStatus, pUserId, strErr}, Me.UpdateLevyOverdueListLogFlagOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateLevyOverdueListLogFlagOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateLevyOverdueListLogFlagCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateLevyOverdueListLogFlagCompleted(Me, New UpdateLevyOverdueListLogFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyOverdueFollowUpSmsList", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyOverdueFollowUpSmsList(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal smsmsd_msg_id As String, ByRef levyOverdueFollowUpSmsList As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyOverdueFollowUpSmsList", New Object() {pCompID, pStrEnv, pstrUserId, smsmsd_msg_id, levyOverdueFollowUpSmsList, strErr})
            levyOverdueFollowUpSmsList = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyOverdueFollowUpSmsListAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal smsmsd_msg_id As String, ByVal levyOverdueFollowUpSmsList As System.Data.DataSet, ByVal strErr As String)
            Me.GetLevyOverdueFollowUpSmsListAsync(pCompID, pStrEnv, pstrUserId, smsmsd_msg_id, levyOverdueFollowUpSmsList, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyOverdueFollowUpSmsListAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal smsmsd_msg_id As String, ByVal levyOverdueFollowUpSmsList As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyOverdueFollowUpSmsListOperationCompleted Is Nothing) Then
                Me.GetLevyOverdueFollowUpSmsListOperationCompleted = AddressOf Me.OnGetLevyOverdueFollowUpSmsListOperationCompleted
            End If
            Me.InvokeAsync("GetLevyOverdueFollowUpSmsList", New Object() {pCompID, pStrEnv, pstrUserId, smsmsd_msg_id, levyOverdueFollowUpSmsList, strErr}, Me.GetLevyOverdueFollowUpSmsListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyOverdueFollowUpSmsListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyOverdueFollowUpSmsListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyOverdueFollowUpSmsListCompleted(Me, New GetLevyOverdueFollowUpSmsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/UpdateLevyOverdueFollowUpFlag", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateLevyOverdueFollowUpFlag(ByVal pCompID As String, ByVal pStrEnv As String, ByVal policyNumber As String, ByVal OverdueId As String, ByVal OverdueFollowUpSMSId As String, ByVal smsResultStatus As String, ByVal pUserId As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateLevyOverdueFollowUpFlag", New Object() {pCompID, pStrEnv, policyNumber, OverdueId, OverdueFollowUpSMSId, smsResultStatus, pUserId, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateLevyOverdueFollowUpFlagAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal policyNumber As String, ByVal OverdueId As String, ByVal OverdueFollowUpSMSId As String, ByVal smsResultStatus As String, ByVal pUserId As String, ByVal strErr As String)
            Me.UpdateLevyOverdueFollowUpFlagAsync(pCompID, pStrEnv, policyNumber, OverdueId, OverdueFollowUpSMSId, smsResultStatus, pUserId, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateLevyOverdueFollowUpFlagAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal policyNumber As String, ByVal OverdueId As String, ByVal OverdueFollowUpSMSId As String, ByVal smsResultStatus As String, ByVal pUserId As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateLevyOverdueFollowUpFlagOperationCompleted Is Nothing) Then
                Me.UpdateLevyOverdueFollowUpFlagOperationCompleted = AddressOf Me.OnUpdateLevyOverdueFollowUpFlagOperationCompleted
            End If
            Me.InvokeAsync("UpdateLevyOverdueFollowUpFlag", New Object() {pCompID, pStrEnv, policyNumber, OverdueId, OverdueFollowUpSMSId, smsResultStatus, pUserId, strErr}, Me.UpdateLevyOverdueFollowUpFlagOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateLevyOverdueFollowUpFlagOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateLevyOverdueFollowUpFlagCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateLevyOverdueFollowUpFlagCompleted(Me, New UpdateLevyOverdueFollowUpFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyOverLetterPolicyAccountInformation", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyOverLetterPolicyAccountInformation(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal policyNumber As String, ByRef pLevyOverLetterPrintLists As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyOverLetterPolicyAccountInformation", New Object() {pCompID, pStrEnv, pstrUserId, policyNumber, pLevyOverLetterPrintLists, strErr})
            pLevyOverLetterPrintLists = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyOverLetterPolicyAccountInformationAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal policyNumber As String, ByVal pLevyOverLetterPrintLists As System.Data.DataSet, ByVal strErr As String)
            Me.GetLevyOverLetterPolicyAccountInformationAsync(pCompID, pStrEnv, pstrUserId, policyNumber, pLevyOverLetterPrintLists, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyOverLetterPolicyAccountInformationAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal policyNumber As String, ByVal pLevyOverLetterPrintLists As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyOverLetterPolicyAccountInformationOperationCompleted Is Nothing) Then
                Me.GetLevyOverLetterPolicyAccountInformationOperationCompleted = AddressOf Me.OnGetLevyOverLetterPolicyAccountInformationOperationCompleted
            End If
            Me.InvokeAsync("GetLevyOverLetterPolicyAccountInformation", New Object() {pCompID, pStrEnv, pstrUserId, policyNumber, pLevyOverLetterPrintLists, strErr}, Me.GetLevyOverLetterPolicyAccountInformationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyOverLetterPolicyAccountInformationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyOverLetterPolicyAccountInformationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyOverLetterPolicyAccountInformationCompleted(Me, New GetLevyOverLetterPolicyAccountInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyArbDetailAB", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyArbDetailAB(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByVal pDateOfRemittance As Date, ByVal pPaymentReferencePeriod As String, ByVal pTotalLevyRemittanceHKD As String, ByVal pTotalLevyRemittanceRMB As String, ByVal pTotalLevyRemittanceUSD As String, ByRef pLevyArbCsvLog As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyArbDetailAB", New Object() {pCompID, pStrEnv, pUserId, pDateOfRemittance, pPaymentReferencePeriod, pTotalLevyRemittanceHKD, pTotalLevyRemittanceRMB, pTotalLevyRemittanceUSD, pLevyArbCsvLog, strErr})
            pLevyArbCsvLog = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyArbDetailABAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByVal pDateOfRemittance As Date, ByVal pPaymentReferencePeriod As String, ByVal pTotalLevyRemittanceHKD As String, ByVal pTotalLevyRemittanceRMB As String, ByVal pTotalLevyRemittanceUSD As String, ByVal pLevyArbCsvLog As System.Data.DataSet, ByVal strErr As String)
            Me.GetLevyArbDetailABAsync(pCompID, pStrEnv, pUserId, pDateOfRemittance, pPaymentReferencePeriod, pTotalLevyRemittanceHKD, pTotalLevyRemittanceRMB, pTotalLevyRemittanceUSD, pLevyArbCsvLog, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyArbDetailABAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByVal pDateOfRemittance As Date, ByVal pPaymentReferencePeriod As String, ByVal pTotalLevyRemittanceHKD As String, ByVal pTotalLevyRemittanceRMB As String, ByVal pTotalLevyRemittanceUSD As String, ByVal pLevyArbCsvLog As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyArbDetailABOperationCompleted Is Nothing) Then
                Me.GetLevyArbDetailABOperationCompleted = AddressOf Me.OnGetLevyArbDetailABOperationCompleted
            End If
            Me.InvokeAsync("GetLevyArbDetailAB", New Object() {pCompID, pStrEnv, pUserId, pDateOfRemittance, pPaymentReferencePeriod, pTotalLevyRemittanceHKD, pTotalLevyRemittanceRMB, pTotalLevyRemittanceUSD, pLevyArbCsvLog, strErr}, Me.GetLevyArbDetailABOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyArbDetailABOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyArbDetailABCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyArbDetailABCompleted(Me, New GetLevyArbDetailABCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/HandleLevyArbCsvSummary", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HandleLevyArbCsvSummary(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByVal pDateOfRemittance As Date, ByVal pPaymentReferenceNum As String, ByVal pTotalLevyRemittanceHKD As String, ByVal pTotalLevyRemittanceRMB As String, ByVal pTotalLevyRemittanceUSD As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("HandleLevyArbCsvSummary", New Object() {pCompID, pStrEnv, pUserId, pDateOfRemittance, pPaymentReferenceNum, pTotalLevyRemittanceHKD, pTotalLevyRemittanceRMB, pTotalLevyRemittanceUSD, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HandleLevyArbCsvSummaryAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByVal pDateOfRemittance As Date, ByVal pPaymentReferenceNum As String, ByVal pTotalLevyRemittanceHKD As String, ByVal pTotalLevyRemittanceRMB As String, ByVal pTotalLevyRemittanceUSD As String, ByVal strErr As String)
            Me.HandleLevyArbCsvSummaryAsync(pCompID, pStrEnv, pUserId, pDateOfRemittance, pPaymentReferenceNum, pTotalLevyRemittanceHKD, pTotalLevyRemittanceRMB, pTotalLevyRemittanceUSD, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HandleLevyArbCsvSummaryAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByVal pDateOfRemittance As Date, ByVal pPaymentReferenceNum As String, ByVal pTotalLevyRemittanceHKD As String, ByVal pTotalLevyRemittanceRMB As String, ByVal pTotalLevyRemittanceUSD As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.HandleLevyArbCsvSummaryOperationCompleted Is Nothing) Then
                Me.HandleLevyArbCsvSummaryOperationCompleted = AddressOf Me.OnHandleLevyArbCsvSummaryOperationCompleted
            End If
            Me.InvokeAsync("HandleLevyArbCsvSummary", New Object() {pCompID, pStrEnv, pUserId, pDateOfRemittance, pPaymentReferenceNum, pTotalLevyRemittanceHKD, pTotalLevyRemittanceRMB, pTotalLevyRemittanceUSD, strErr}, Me.HandleLevyArbCsvSummaryOperationCompleted, userState)
        End Sub
        
        Private Sub OnHandleLevyArbCsvSummaryOperationCompleted(ByVal arg As Object)
            If (Not (Me.HandleLevyArbCsvSummaryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HandleLevyArbCsvSummaryCompleted(Me, New HandleLevyArbCsvSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyArbCsvDetail", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyArbCsvDetail(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByVal currency As String, ByRef pLevyArbCsvLog As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyArbCsvDetail", New Object() {pCompID, pStrEnv, pUserId, currency, pLevyArbCsvLog, strErr})
            pLevyArbCsvLog = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyArbCsvDetailAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByVal currency As String, ByVal pLevyArbCsvLog As System.Data.DataSet, ByVal strErr As String)
            Me.GetLevyArbCsvDetailAsync(pCompID, pStrEnv, pUserId, currency, pLevyArbCsvLog, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyArbCsvDetailAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByVal currency As String, ByVal pLevyArbCsvLog As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyArbCsvDetailOperationCompleted Is Nothing) Then
                Me.GetLevyArbCsvDetailOperationCompleted = AddressOf Me.OnGetLevyArbCsvDetailOperationCompleted
            End If
            Me.InvokeAsync("GetLevyArbCsvDetail", New Object() {pCompID, pStrEnv, pUserId, currency, pLevyArbCsvLog, strErr}, Me.GetLevyArbCsvDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyArbCsvDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyArbCsvDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyArbCsvDetailCompleted(Me, New GetLevyArbCsvDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/InsertLevyArbCsvLog", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertLevyArbCsvLog(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByVal pRelevantPeriodFrom As Date, ByVal pRelevantPeriodTo As Date, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("InsertLevyArbCsvLog", New Object() {pCompID, pStrEnv, pUserId, pRelevantPeriodFrom, pRelevantPeriodTo, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertLevyArbCsvLogAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByVal pRelevantPeriodFrom As Date, ByVal pRelevantPeriodTo As Date, ByVal strErr As String)
            Me.InsertLevyArbCsvLogAsync(pCompID, pStrEnv, pUserId, pRelevantPeriodFrom, pRelevantPeriodTo, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertLevyArbCsvLogAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByVal pRelevantPeriodFrom As Date, ByVal pRelevantPeriodTo As Date, ByVal strErr As String, ByVal userState As Object)
            If (Me.InsertLevyArbCsvLogOperationCompleted Is Nothing) Then
                Me.InsertLevyArbCsvLogOperationCompleted = AddressOf Me.OnInsertLevyArbCsvLogOperationCompleted
            End If
            Me.InvokeAsync("InsertLevyArbCsvLog", New Object() {pCompID, pStrEnv, pUserId, pRelevantPeriodFrom, pRelevantPeriodTo, strErr}, Me.InsertLevyArbCsvLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertLevyArbCsvLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertLevyArbCsvLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertLevyArbCsvLogCompleted(Me, New InsertLevyArbCsvLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/InsertIntoLevyArbDetailHistory", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertIntoLevyArbDetailHistory(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("InsertIntoLevyArbDetailHistory", New Object() {pCompID, pStrEnv, pUserId, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertIntoLevyArbDetailHistoryAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByVal strErr As String)
            Me.InsertIntoLevyArbDetailHistoryAsync(pCompID, pStrEnv, pUserId, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertIntoLevyArbDetailHistoryAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.InsertIntoLevyArbDetailHistoryOperationCompleted Is Nothing) Then
                Me.InsertIntoLevyArbDetailHistoryOperationCompleted = AddressOf Me.OnInsertIntoLevyArbDetailHistoryOperationCompleted
            End If
            Me.InvokeAsync("InsertIntoLevyArbDetailHistory", New Object() {pCompID, pStrEnv, pUserId, strErr}, Me.InsertIntoLevyArbDetailHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertIntoLevyArbDetailHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertIntoLevyArbDetailHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertIntoLevyArbDetailHistoryCompleted(Me, New InsertIntoLevyArbDetailHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyArbPath", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyArbPath(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByRef levyArbPath As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyArbPath", New Object() {pCompID, pStrEnv, pUserId, levyArbPath, strErr})
            levyArbPath = CType(results(1),String)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyArbPathAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByVal levyArbPath As String, ByVal strErr As String)
            Me.GetLevyArbPathAsync(pCompID, pStrEnv, pUserId, levyArbPath, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyArbPathAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByVal levyArbPath As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyArbPathOperationCompleted Is Nothing) Then
                Me.GetLevyArbPathOperationCompleted = AddressOf Me.OnGetLevyArbPathOperationCompleted
            End If
            Me.InvokeAsync("GetLevyArbPath", New Object() {pCompID, pStrEnv, pUserId, levyArbPath, strErr}, Me.GetLevyArbPathOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyArbPathOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyArbPathCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyArbPathCompleted(Me, New GetLevyArbPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/TruncateLevyArbDetail", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TruncateLevyArbDetail(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("TruncateLevyArbDetail", New Object() {pCompID, pStrEnv, pUserId, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TruncateLevyArbDetailAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByVal strErr As String)
            Me.TruncateLevyArbDetailAsync(pCompID, pStrEnv, pUserId, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TruncateLevyArbDetailAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.TruncateLevyArbDetailOperationCompleted Is Nothing) Then
                Me.TruncateLevyArbDetailOperationCompleted = AddressOf Me.OnTruncateLevyArbDetailOperationCompleted
            End If
            Me.InvokeAsync("TruncateLevyArbDetail", New Object() {pCompID, pStrEnv, pUserId, strErr}, Me.TruncateLevyArbDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnTruncateLevyArbDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.TruncateLevyArbDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TruncateLevyArbDetailCompleted(Me, New TruncateLevyArbDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetSumLevyAmountInPolcurr", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSumLevyAmountInPolcurr(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal pExchangeDate As Date, ByRef dsLevyAmountInPolcurr As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSumLevyAmountInPolcurr", New Object() {pCompID, pStrEnv, pstrUserId, pExchangeDate, dsLevyAmountInPolcurr, strErr})
            dsLevyAmountInPolcurr = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSumLevyAmountInPolcurrAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal pExchangeDate As Date, ByVal dsLevyAmountInPolcurr As System.Data.DataSet, ByVal strErr As String)
            Me.GetSumLevyAmountInPolcurrAsync(pCompID, pStrEnv, pstrUserId, pExchangeDate, dsLevyAmountInPolcurr, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSumLevyAmountInPolcurrAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal pExchangeDate As Date, ByVal dsLevyAmountInPolcurr As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetSumLevyAmountInPolcurrOperationCompleted Is Nothing) Then
                Me.GetSumLevyAmountInPolcurrOperationCompleted = AddressOf Me.OnGetSumLevyAmountInPolcurrOperationCompleted
            End If
            Me.InvokeAsync("GetSumLevyAmountInPolcurr", New Object() {pCompID, pStrEnv, pstrUserId, pExchangeDate, dsLevyAmountInPolcurr, strErr}, Me.GetSumLevyAmountInPolcurrOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSumLevyAmountInPolcurrOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSumLevyAmountInPolcurrCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSumLevyAmountInPolcurrCompleted(Me, New GetSumLevyAmountInPolcurrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyaArbTorrence", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyaArbTorrence(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByRef levyArbTorrence As Double, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyaArbTorrence", New Object() {pCompID, pStrEnv, pstrUserId, levyArbTorrence, strErr})
            levyArbTorrence = CType(results(1),Double)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyaArbTorrenceAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal levyArbTorrence As Double, ByVal strErr As String)
            Me.GetLevyaArbTorrenceAsync(pCompID, pStrEnv, pstrUserId, levyArbTorrence, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyaArbTorrenceAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal levyArbTorrence As Double, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyaArbTorrenceOperationCompleted Is Nothing) Then
                Me.GetLevyaArbTorrenceOperationCompleted = AddressOf Me.OnGetLevyaArbTorrenceOperationCompleted
            End If
            Me.InvokeAsync("GetLevyaArbTorrence", New Object() {pCompID, pStrEnv, pstrUserId, levyArbTorrence, strErr}, Me.GetLevyaArbTorrenceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyaArbTorrenceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyaArbTorrenceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyaArbTorrenceCompleted(Me, New GetLevyaArbTorrenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetLevyArbExcelLog", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLevyArbExcelLog(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal pWhereStr As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLevyArbExcelLog", New Object() {pCompID, pStrEnv, pstrUserId, pWhereStr, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLevyArbExcelLogAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal pWhereStr As String, ByVal strErr As String)
            Me.GetLevyArbExcelLogAsync(pCompID, pStrEnv, pstrUserId, pWhereStr, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLevyArbExcelLogAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal pWhereStr As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetLevyArbExcelLogOperationCompleted Is Nothing) Then
                Me.GetLevyArbExcelLogOperationCompleted = AddressOf Me.OnGetLevyArbExcelLogOperationCompleted
            End If
            Me.InvokeAsync("GetLevyArbExcelLog", New Object() {pCompID, pStrEnv, pstrUserId, pWhereStr, strErr}, Me.GetLevyArbExcelLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLevyArbExcelLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLevyArbExcelLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLevyArbExcelLogCompleted(Me, New GetLevyArbExcelLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/GetRefExchangeRate", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRefExchangeRate(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal pExchangeDate As Date, ByRef dsLevyAmountInPolcurr As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetRefExchangeRate", New Object() {pCompID, pStrEnv, pstrUserId, pExchangeDate, dsLevyAmountInPolcurr, strErr})
            dsLevyAmountInPolcurr = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRefExchangeRateAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal pExchangeDate As Date, ByVal dsLevyAmountInPolcurr As System.Data.DataSet, ByVal strErr As String)
            Me.GetRefExchangeRateAsync(pCompID, pStrEnv, pstrUserId, pExchangeDate, dsLevyAmountInPolcurr, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRefExchangeRateAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pstrUserId As String, ByVal pExchangeDate As Date, ByVal dsLevyAmountInPolcurr As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetRefExchangeRateOperationCompleted Is Nothing) Then
                Me.GetRefExchangeRateOperationCompleted = AddressOf Me.OnGetRefExchangeRateOperationCompleted
            End If
            Me.InvokeAsync("GetRefExchangeRate", New Object() {pCompID, pStrEnv, pstrUserId, pExchangeDate, dsLevyAmountInPolcurr, strErr}, Me.GetRefExchangeRateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRefExchangeRateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRefExchangeRateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRefExchangeRateCompleted(Me, New GetRefExchangeRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/IsLevyArbDetailABData", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsLevyArbDetailABData(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByRef pIsLevyArbDetailABData As Boolean, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("IsLevyArbDetailABData", New Object() {pCompID, pStrEnv, pUserId, pIsLevyArbDetailABData, strErr})
            pIsLevyArbDetailABData = CType(results(1),Boolean)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsLevyArbDetailABDataAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByVal pIsLevyArbDetailABData As Boolean, ByVal strErr As String)
            Me.IsLevyArbDetailABDataAsync(pCompID, pStrEnv, pUserId, pIsLevyArbDetailABData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsLevyArbDetailABDataAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pUserId As String, ByVal pIsLevyArbDetailABData As Boolean, ByVal strErr As String, ByVal userState As Object)
            If (Me.IsLevyArbDetailABDataOperationCompleted Is Nothing) Then
                Me.IsLevyArbDetailABDataOperationCompleted = AddressOf Me.OnIsLevyArbDetailABDataOperationCompleted
            End If
            Me.InvokeAsync("IsLevyArbDetailABData", New Object() {pCompID, pStrEnv, pUserId, pIsLevyArbDetailABData, strErr}, Me.IsLevyArbDetailABDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsLevyArbDetailABDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsLevyArbDetailABDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsLevyArbDetailABDataCompleted(Me, New IsLevyArbDetailABDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://inglife.com.hk/InsertLevyOverdueFollowUpLetterLog", RequestNamespace:="http://inglife.com.hk/", ResponseNamespace:="http://inglife.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertLevyOverdueFollowUpLetterLog(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pStrUserId As String, ByVal pPolicyNumber As String, ByVal pMessage As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("InsertLevyOverdueFollowUpLetterLog", New Object() {pCompID, pStrEnv, pStrUserId, pPolicyNumber, pMessage, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertLevyOverdueFollowUpLetterLogAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pStrUserId As String, ByVal pPolicyNumber As String, ByVal pMessage As String, ByVal strErr As String)
            Me.InsertLevyOverdueFollowUpLetterLogAsync(pCompID, pStrEnv, pStrUserId, pPolicyNumber, pMessage, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertLevyOverdueFollowUpLetterLogAsync(ByVal pCompID As String, ByVal pStrEnv As String, ByVal pStrUserId As String, ByVal pPolicyNumber As String, ByVal pMessage As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.InsertLevyOverdueFollowUpLetterLogOperationCompleted Is Nothing) Then
                Me.InsertLevyOverdueFollowUpLetterLogOperationCompleted = AddressOf Me.OnInsertLevyOverdueFollowUpLetterLogOperationCompleted
            End If
            Me.InvokeAsync("InsertLevyOverdueFollowUpLetterLog", New Object() {pCompID, pStrEnv, pStrUserId, pPolicyNumber, pMessage, strErr}, Me.InsertLevyOverdueFollowUpLetterLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertLevyOverdueFollowUpLetterLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertLevyOverdueFollowUpLetterLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertLevyOverdueFollowUpLetterLogCompleted(Me, New InsertLevyOverdueFollowUpLetterLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://inglife.com.hk/"),  _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="http://inglife.com.hk/", IsNullable:=false)>  _
    Partial Public Class DBSOAPHeader
        Inherits System.Web.Services.Protocols.SoapHeader
        
        Private projectField As String
        
        Private connectionAliasField As String
        
        Private userField As String
        
        Private userTypeField As String
        
        Private envField As String
        
        Private compField As String
        
        Private cIWProjectField As String
        
        Private cIWConnectionAliasField As String
        
        Private cIWUserField As String
        
        Private cIWEnvField As String
        
        Private cIWCompField As String
        
        Private anyAttrField() As System.Xml.XmlAttribute
        
        '''<remarks/>
        Public Property Project() As String
            Get
                Return Me.projectField
            End Get
            Set
                Me.projectField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ConnectionAlias() As String
            Get
                Return Me.connectionAliasField
            End Get
            Set
                Me.connectionAliasField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property User() As String
            Get
                Return Me.userField
            End Get
            Set
                Me.userField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserType() As String
            Get
                Return Me.userTypeField
            End Get
            Set
                Me.userTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Env() As String
            Get
                Return Me.envField
            End Get
            Set
                Me.envField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Comp() As String
            Get
                Return Me.compField
            End Get
            Set
                Me.compField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CIWProject() As String
            Get
                Return Me.cIWProjectField
            End Get
            Set
                Me.cIWProjectField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CIWConnectionAlias() As String
            Get
                Return Me.cIWConnectionAliasField
            End Get
            Set
                Me.cIWConnectionAliasField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CIWUser() As String
            Get
                Return Me.cIWUserField
            End Get
            Set
                Me.cIWUserField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CIWEnv() As String
            Get
                Return Me.cIWEnvField
            End Get
            Set
                Me.cIWEnvField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CIWComp() As String
            Get
                Return Me.cIWCompField
            End Get
            Set
                Me.cIWCompField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyAttributeAttribute()>  _
        Public Property AnyAttr() As System.Xml.XmlAttribute()
            Get
                Return Me.anyAttrField
            End Get
            Set
                Me.anyAttrField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://inglife.com.hk/"),  _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="http://inglife.com.hk/", IsNullable:=false)>  _
    Partial Public Class MQSOAPHeader
        Inherits System.Web.Services.Protocols.SoapHeader
        
        Private queueManagerField As String
        
        Private remoteQueueField As String
        
        Private replyToQueueField As String
        
        Private localQueueField As String
        
        Private timeoutField As Integer
        
        Private projectAliasField As String
        
        Private connectionAliasField As String
        
        Private userTypeField As String
        
        Private environmentUseField As String
        
        Private companyIDField As String
        
        Private userIDField As String
        
        Private machineIDField As String
        
        Private versionNoField As String
        
        Private libraryNameField As String
        
        Private anyAttrField() As System.Xml.XmlAttribute
        
        '''<remarks/>
        Public Property QueueManager() As String
            Get
                Return Me.queueManagerField
            End Get
            Set
                Me.queueManagerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RemoteQueue() As String
            Get
                Return Me.remoteQueueField
            End Get
            Set
                Me.remoteQueueField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ReplyToQueue() As String
            Get
                Return Me.replyToQueueField
            End Get
            Set
                Me.replyToQueueField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LocalQueue() As String
            Get
                Return Me.localQueueField
            End Get
            Set
                Me.localQueueField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Timeout() As Integer
            Get
                Return Me.timeoutField
            End Get
            Set
                Me.timeoutField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectAlias() As String
            Get
                Return Me.projectAliasField
            End Get
            Set
                Me.projectAliasField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ConnectionAlias() As String
            Get
                Return Me.connectionAliasField
            End Get
            Set
                Me.connectionAliasField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserType() As String
            Get
                Return Me.userTypeField
            End Get
            Set
                Me.userTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EnvironmentUse() As String
            Get
                Return Me.environmentUseField
            End Get
            Set
                Me.environmentUseField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompanyID() As String
            Get
                Return Me.companyIDField
            End Get
            Set
                Me.companyIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As String
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MachineID() As String
            Get
                Return Me.machineIDField
            End Get
            Set
                Me.machineIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property VersionNo() As String
            Get
                Return Me.versionNoField
            End Get
            Set
                Me.versionNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LibraryName() As String
            Get
                Return Me.libraryNameField
            End Get
            Set
                Me.libraryNameField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyAttributeAttribute()>  _
        Public Property AnyAttr() As System.Xml.XmlAttribute()
            Get
                Return Me.anyAttrField
            End Get
            Set
                Me.anyAttrField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub HelloWorldCompletedEventHandler(ByVal sender As Object, ByVal e As HelloWorldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HelloWorldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyQuotationCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyQuotationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyQuotationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyAmountDueCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyAmountDueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyAmountDueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyQuotationHaveEnvCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyQuotationHaveEnvCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyQuotationHaveEnvCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property permiumAmountAllocated() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property permiumAmountDue() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property currentIiaLevyAmountAllocated() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyQuotationForIFEFAPPCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyQuotationForIFEFAPPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyQuotationForIFEFAPPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pLevyAmountByHKD() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyQuotationForIFWDCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyQuotationForIFWDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyQuotationForIFWDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pLevyAmountByHKD() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyAmountSuspenseCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyAmountSuspenseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyAmountSuspenseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property levyAmountSuspense() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyAmountOutstandingCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyAmountOutstandingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyAmountOutstandingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property levyAmountOutstanding() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyAmountCCSOutstandingCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyAmountCCSOutstandingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyAmountCCSOutstandingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property levyAmountOutstanding() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetNextLevyQuotationCompletedEventHandler(ByVal sender As Object, ByVal e As GetNextLevyQuotationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNextLevyQuotationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property nextLevyQuotationAmount() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyAmountCapsilCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyAmountCapsilCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyAmountCapsilCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property levyAmountSuspense() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property levyAmountOutstanding() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property levyAmountPayable() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetProposalPremiumAmountDueCompletedEventHandler(ByVal sender As Object, ByVal e As GetProposalPremiumAmountDueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProposalPremiumAmountDueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property premiumAmountDue() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetNBEnquiryValueByCNBCompletedEventHandler(ByVal sender As Object, ByVal e As GetNBEnquiryValueByCNBCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNBEnquiryValueByCNBCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pContractCurrency() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pReceiptAmount() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pPropsalDate() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Date)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pAnniversaryDate() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),Date)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pPremiumAmountDue() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetNBEnquiryValueCompletedEventHandler(ByVal sender As Object, ByVal e As GetNBEnquiryValueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNBEnquiryValueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pContractCurrency() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pReceiptAmount() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pPropsalDate() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Date)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pAnniversaryDate() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),Date)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pPremiumAmountDue() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLifeAsiaEnquiryValueCompletedEventHandler(ByVal sender As Object, ByVal e As GetLifeAsiaEnquiryValueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLifeAsiaEnquiryValueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pContractCurrency() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pReceiptAmount() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pPropsalDate() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Date)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pAnniversaryDate() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),Date)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pPremiumAmountDue() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetCNBTotalLevyAmountCompletedEventHandler(ByVal sender As Object, ByVal e As GetCNBTotalLevyAmountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCNBTotalLevyAmountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property totalLevyAmount() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyHistoryHeaderCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyHistoryHeaderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyHistoryHeaderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pLevyHeaderDataSet() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyHistoryBillingRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyHistoryBillingRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyHistoryBillingRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pLevyHeaderDataSet() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyHistorySettlementRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyHistorySettlementRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyHistorySettlementRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pLevySettlementRecordDataSet() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetCCSInformationForCNBCompletedEventHandler(ByVal sender As Object, ByVal e As GetCCSInformationForCNBCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCCSInformationForCNBCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property receiptNumber() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property payCode() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyQuotationForCRSCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyQuotationForCRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyQuotationForCRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property levyAmount() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyQuotationForAESCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyQuotationForAESCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyQuotationForAESCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property levyAmount() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyQuotationForCNBCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyQuotationForCNBCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyQuotationForCNBCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property levyAmount() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyQuotationBillingChangeCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyQuotationBillingChangeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyQuotationBillingChangeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property levyAmount() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub InsertLevyOverdueFollowUpCompletedEventHandler(ByVal sender As Object, ByVal e As InsertLevyOverdueFollowUpCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertLevyOverdueFollowUpCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UpdateLevyOverdueFollowUpCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateLevyOverdueFollowUpCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateLevyOverdueFollowUpCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyOverdueFollowUpCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyOverdueFollowUpCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyOverdueFollowUpCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property levyOverdueFollowUpDataSet() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyOverdueFollowUpTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyOverdueFollowUpTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyOverdueFollowUpTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property levyOverdueFollowUpType() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyOverDueListCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyOverDueListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyOverDueListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pLevyOverDueList() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyOverDueSubListCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyOverDueSubListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyOverDueSubListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pLevyOverDueList() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub InsertLevyOverdueListLogCompletedEventHandler(ByVal sender As Object, ByVal e As InsertLevyOverdueListLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertLevyOverdueListLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub InsertLevyOverdueListLogTempCompletedEventHandler(ByVal sender As Object, ByVal e As InsertLevyOverdueListLogTempCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertLevyOverdueListLogTempCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetIsOpenPosBatchLevyOutsandingCompletedEventHandler(ByVal sender As Object, ByVal e As GetIsOpenPosBatchLevyOutsandingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIsOpenPosBatchLevyOutsandingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pIsOpenPosBatchLevyOutsanding() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub InsertFsurLevyInfoCapCompletedEventHandler(ByVal sender As Object, ByVal e As InsertFsurLevyInfoCapCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertFsurLevyInfoCapCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetRunningDateListCompletedEventHandler(ByVal sender As Object, ByVal e As GetRunningDateListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRunningDateListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pRunningDateList() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyOverLetterDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyOverLetterDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyOverLetterDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pRunningDateList() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub InsertLevyOverduePrintListCompletedEventHandler(ByVal sender As Object, ByVal e As InsertLevyOverduePrintListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertLevyOverduePrintListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyOverLetterRound3PrintListsCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyOverLetterRound3PrintListsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyOverLetterRound3PrintListsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pLevyOverLetterPrintLists() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UpdateLevyOverLetterPrintedDateCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateLevyOverLetterPrintedDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateLevyOverLetterPrintedDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetInsertLevyOverdueFollowUpIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetInsertLevyOverdueFollowUpIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInsertLevyOverdueFollowUpIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property overdueId() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetInsertLevyOverdueListLogIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetInsertLevyOverdueListLogIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInsertLevyOverdueListLogIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property levyOverdueListLogId() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetSMSsdMsgIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetSMSsdMsgIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSMSsdMsgIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property SMSsdMsgId() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub InsertLevyOverdueFollowUpSmsCompletedEventHandler(ByVal sender As Object, ByVal e As InsertLevyOverdueFollowUpSmsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertLevyOverdueFollowUpSmsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub InsertLevyOverdueListLogSmsCompletedEventHandler(ByVal sender As Object, ByVal e As InsertLevyOverdueListLogSmsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertLevyOverdueListLogSmsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyOverdueListLogSMSListCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyOverdueListLogSMSListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyOverdueListLogSMSListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property levyOverdueFollowUpSmsList() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetSMSResultStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetSMSResultStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSMSResultStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property smsResultStatus() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UpdateLevyOverdueListLogFlagCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateLevyOverdueListLogFlagCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateLevyOverdueListLogFlagCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyOverdueFollowUpSmsListCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyOverdueFollowUpSmsListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyOverdueFollowUpSmsListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property levyOverdueFollowUpSmsList() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UpdateLevyOverdueFollowUpFlagCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateLevyOverdueFollowUpFlagCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateLevyOverdueFollowUpFlagCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyOverLetterPolicyAccountInformationCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyOverLetterPolicyAccountInformationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyOverLetterPolicyAccountInformationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pLevyOverLetterPrintLists() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyArbDetailABCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyArbDetailABCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyArbDetailABCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pLevyArbCsvLog() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub HandleLevyArbCsvSummaryCompletedEventHandler(ByVal sender As Object, ByVal e As HandleLevyArbCsvSummaryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HandleLevyArbCsvSummaryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyArbCsvDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyArbCsvDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyArbCsvDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pLevyArbCsvLog() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub InsertLevyArbCsvLogCompletedEventHandler(ByVal sender As Object, ByVal e As InsertLevyArbCsvLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertLevyArbCsvLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub InsertIntoLevyArbDetailHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As InsertIntoLevyArbDetailHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertIntoLevyArbDetailHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyArbPathCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyArbPathCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyArbPathCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property levyArbPath() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub TruncateLevyArbDetailCompletedEventHandler(ByVal sender As Object, ByVal e As TruncateLevyArbDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TruncateLevyArbDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetSumLevyAmountInPolcurrCompletedEventHandler(ByVal sender As Object, ByVal e As GetSumLevyAmountInPolcurrCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSumLevyAmountInPolcurrCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsLevyAmountInPolcurr() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyaArbTorrenceCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyaArbTorrenceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyaArbTorrenceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property levyArbTorrence() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetLevyArbExcelLogCompletedEventHandler(ByVal sender As Object, ByVal e As GetLevyArbExcelLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLevyArbExcelLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetRefExchangeRateCompletedEventHandler(ByVal sender As Object, ByVal e As GetRefExchangeRateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRefExchangeRateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsLevyAmountInPolcurr() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub IsLevyArbDetailABDataCompletedEventHandler(ByVal sender As Object, ByVal e As IsLevyArbDetailABDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsLevyArbDetailABDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property pIsLevyArbDetailABData() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub InsertLevyOverdueFollowUpLetterLogCompletedEventHandler(ByVal sender As Object, ByVal e As InsertLevyOverdueFollowUpLetterLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertLevyOverdueFollowUpLetterLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
End Namespace
