'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace MCSWS
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="MCSWSSoap", [Namespace]:="http://mcs.ing.com.hk/"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(DataAccessBase))>  _
    Partial Public Class MCSWS
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private dBSOAPHeaderValueField As DBSOAPHeader
        
        Private mQSOAPHeaderValueField As MQSOAPHeader
        
        Private PrintSTPRequestByLetterRequestIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOracleGLVersionNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateOracleGLVersionNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimsMarkInRecordsByMarkInIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMcsClaimParamOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpsertMcsClaimParamOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendEmailByCCMSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendEmailWithAttachmentByCCMSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isTheOneStandardByClaimNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsAMCClaimValidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMcsFPSDailyTotalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMcsFPSLastCallHSBCDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCIWSysValOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFPSSettlementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEmailSettingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateAppLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPresentationSettingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimEligibleBenefitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSettlementDetailsChineseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimPaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDeductibleClaimPresentationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CarryForwardClaimOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetHighEndMedicalLifeTimePaidAmountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPlaceOfHospitalCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOperationCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSurValueDiffOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCapsilSurValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCompanyIDbyPolicyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMcstransactionDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateICClaimAmountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPreClaimAmtOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckCapsilPlanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNotMsgWordingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertNotificationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSettledClaimsWithFpsHistOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FPSBatchVerifyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFPSMaintOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetFPSMaintOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FPSDataFeedSetProcessStageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FPSDataFeedGetProcessStageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FPSDataFeedProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FPSFINReportProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFPSPaymentSettlementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFPSPaymentRejectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPrintFPSPaymentReverseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimsAuditTrailDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveAuditTrailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintClaimsAuditTrailReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAuditClaimReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAuditEventNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NeedRefreshClaimPolicyInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CapConvSpecialHandleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsCapsilConvertPolicyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimPolicyNMappingCAPPOLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckPolicyDateValueNStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyHistoryForAggregationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAggregateMasterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAggregateDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBenefitValidateRelateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBenefitRelateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateClaimPaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRCSRegisterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RCSClaimRegisterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTranExclusionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RCSClaimApprovalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RcsGenSettlementLetterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RCSClaimReversalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMcsDeclineEmailItemsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddMcsDeclineEmailLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsValidConditionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetACFBatchIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateACFBatchIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RCSBookClaim2BEOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFraudPreventionListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFraudPreventionInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveFraudPreventionLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateFraudPreventionLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReactivatePaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateClaimPaidTermOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimPaidTermDataTableOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateClaimPaidTermOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateClaimPaidTermStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimPaidTermQueueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyValueEnqOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreatePosSurrReqOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSavingABalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPayeeClaimPaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCLTLetterPrintStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getLAClientNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckIsPaidAmtEligible2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimPaidTermQueueByPolicyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetChequeByPaymentNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GenerateSettlementLetterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateSettlementCCMRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateUserAmountLimitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAmountLimitnOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTopActAgcyClaimSummaryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPendingClaimOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimExpensesAnalysisOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccessorProductivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDeclineExgratiaReasonAnalysisOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetChequePaymentSummaryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTurnaroundTimeAnalysisOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTopAgentSummaryPaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTopAgentSummarySubmissionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSystemChequeSettlementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get711SettlementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIscSettlementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReverseSystemChequeSettlementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetForcibleErrorOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimPaymentSummaryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInsuredAccumulatedPaidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCodeValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCorrespondenceLetterListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCorrespondenceRecipientListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCorrespondenceHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BatchSaveCorrespondenceHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCorrespondenceRecipientOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCorrespondenceRecipientByUUIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimsMarkInRecordsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimsMarkInRecordsFromPortalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllIncompletedClaimsMarkInRecordsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteClaimsMarkInRecordsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimTypeByTransCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertMarkInRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMcsPaymentDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPreAssessmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRemainBalanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private isTheOneStandardOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSunAccountExchangeRateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSunAccountEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMcsMarkInEmailItemsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMcsMarkInSmsItemsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddMcsMarkInEmailLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddMcsMarkInSmsLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsMcsMarkInSmsSentForSamePolicyOnSameDayOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMcsPaymentEmailItemsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMcsPaymentSmsItemsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddMcsPaymentEmailLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddMcsPaymentSmsLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsMcsPaymentSmsSentForSamePolicyOnSameDayOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMcsPaymentSmsLogCountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyLifetimeBalanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInsuredLifetimeBalanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckAggregateLimitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckAggregateLimitClaimMaintOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReinstatementDateByPolicyNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HasAggregateSettingByPlanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get7ElevenPaymentRuleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMcs7ElevenMobilePaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMcs7ElevenContactInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidateMcs7ElevenMobileNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMcs7ElevenEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckMcs7ElevenVisitCsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckMcsIscUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrepareISCRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GenerateOnlineChequePaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReverse7ElevenPaymentSettlementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Get7ElevenPaymentSettlementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIscRefNoByClaimNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIscChequeByRefNumOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIscChqPaymentByChequeIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateIscChqStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckIscChequeNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIscNoOfPolicyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIscReportPathOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateIscCmRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIscChequeLotOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckIscPlanTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReverseInstantChequeSettlementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInstantChequeSettlementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckIsIscOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FPSPayoutAPIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProxyTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFPSTransactionStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AllowCallFPSAPIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMcsFPSPayoutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMcsFPSPayoutWithMobiCntryCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMcsFPSProxyInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLetterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNextPendSeqNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteClaimAllOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReverseClaimOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BatchSavePendRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ClaimFinalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ClaimCheckOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckIsPaidAmtEligibleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReverseApprovalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCompanyNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTitleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckClaimApprovalStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetApprovedFlag2ndOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTitleListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAuthGroupByTitleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDepartmentListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAuthGroupInfoByUIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddUpdateUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTitleWithAuthGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAuthGroupListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimNatureListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddTitleWithAuthGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateTitleWithAuthGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteTitleWithAuthGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private iNG_SOAPHeaderValueField As ING_SOAPHeader
        
        Private CheckIsTitleInUseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAuthRuleWithAuthGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAuthRuleListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddAuthorityRuleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAuthorityRuleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteAuthorityRuleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddUpdateClaimNatureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteClaimNatureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddUpdateAuthGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteAuthGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimNatureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimNatureMappingInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAuthGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimNatureCodeListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimNaturePlanOrClaimTypeListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserGroupListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getLogoImgOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DCADataHeaderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DCADataDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DCADataFooterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DCALetterInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GenerateMemoDetailsMOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GenerateMemoDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAddressByPolicyNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAddressByCustomerNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerByRelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerIDByRelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOwnerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCoverageChineseNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsPolicySurrenderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEligibleBenefitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsRefundableHospitalIncomeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLifeTimeClaimBalanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLifeTimeBenefitByInsuredIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInsuredMaxBenefitAmountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInsuredTotalPaidAmountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSugClassCountByPlanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSurClassMappingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HasPropDevelopedCountryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HasPropSpecialEndorsementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOutstandingRptOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveRptOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDeclineCloseClaimAnalysisOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFinalClaimAnalysisOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOnlineStatusReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMarkInReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDirectCreditTransactionControlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDirectCreditTransactionSuspiciousCaseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReverseDirectPaymentSettlementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetManualChequeSettlementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEServiceSettlementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReverseManualChequeSettlementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetImpairmentCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetChequeRemarkOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAmountLimitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DelAmountLimitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserAmountLimitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DelUserAmountLimitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetEnvOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOutstandingClaimOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSettledClaimOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMastiDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LockClaimOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerByIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCurrentDDAByPolicyIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMCSChannelContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCodeValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetExchangeRateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimByClaimNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HasMjcCrisisClaimOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HasLifeStyleIndOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HasLifeEnrichmentIndOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HasHealthScreenPaymentHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveCalLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CalculateClaimPaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AppendCommentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UnLockClaimOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAgentByAgentIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEmptyClaimHeaderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInsuredByPolicyCoverageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPendingReasonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPendingCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetServerCurrentDateTimeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPlanByIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimPolicyNCoverageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getClaimBeneHisByClaimNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getClaimBenefitHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimBenefit1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimMessageByNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsLockedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsPolicyExistedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEmptyClaimMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEmptyClaimPaymentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetResolveRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccPosFurClaimOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBenefitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckClaimOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccidentCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveClaimHeaderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEmptyClaimPresentationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPaymentMethodOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyByClaimOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimPresentationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEmptyClaimPendingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetExgratiaReasonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTotalPaidByPlanTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTotalPaidByPolicyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPlanFeatureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPlanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyByIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPolicyCoverageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGrpByUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMceGrpByUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsClaimFinalApprovedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsClaimOverApprovalLimitMJCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsInforcePly_CIWOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsValidBankBranchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateClaimDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateMemoPrintDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateReminderPrintDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdatePaymentDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getClaimProxyLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClientHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCurrencyCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDeclineReasonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetHospFurClaimOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetHospitalTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLOAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIllnessCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClaimTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInsuredByPolicyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCoverageStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLetterTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLogMessageByNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.CS2005.My.MySettings.Default.CS2005_MCSWS_MCSWS
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Property DBSOAPHeaderValue() As DBSOAPHeader
            Get
                Return Me.dBSOAPHeaderValueField
            End Get
            Set
                Me.dBSOAPHeaderValueField = value
            End Set
        End Property
        
        Public Property MQSOAPHeaderValue() As MQSOAPHeader
            Get
                Return Me.mQSOAPHeaderValueField
            End Get
            Set
                Me.mQSOAPHeaderValueField = value
            End Set
        End Property
        
        Public Property ING_SOAPHeaderValue() As ING_SOAPHeader
            Get
                Return Me.iNG_SOAPHeaderValueField
            End Get
            Set
                Me.iNG_SOAPHeaderValueField = value
            End Set
        End Property
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event PrintSTPRequestByLetterRequestIDCompleted As PrintSTPRequestByLetterRequestIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOracleGLVersionNoCompleted As GetOracleGLVersionNoCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateOracleGLVersionNoCompleted As UpdateOracleGLVersionNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimsMarkInRecordsByMarkInIDCompleted As GetClaimsMarkInRecordsByMarkInIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMcsClaimParamCompleted As GetMcsClaimParamCompletedEventHandler
        
        '''<remarks/>
        Public Event UpsertMcsClaimParamCompleted As UpsertMcsClaimParamCompletedEventHandler
        
        '''<remarks/>
        Public Event SendEmailByCCMSCompleted As SendEmailByCCMSCompletedEventHandler
        
        '''<remarks/>
        Public Event SendEmailWithAttachmentByCCMSCompleted As SendEmailWithAttachmentByCCMSCompletedEventHandler
        
        '''<remarks/>
        Public Event isTheOneStandardByClaimNoCompleted As isTheOneStandardByClaimNoCompletedEventHandler
        
        '''<remarks/>
        Public Event IsAMCClaimValidCompleted As IsAMCClaimValidCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMcsFPSDailyTotalCompleted As GetMcsFPSDailyTotalCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMcsFPSLastCallHSBCDateCompleted As GetMcsFPSLastCallHSBCDateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCIWSysValCompleted As GetCIWSysValCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFPSSettlementCompleted As GetFPSSettlementCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEmailSettingCompleted As GetEmailSettingCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateAppLogCompleted As CreateAppLogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPresentationSettingCompleted As GetPresentationSettingCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimEligibleBenefitCompleted As GetClaimEligibleBenefitCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSettlementDetailsChineseCompleted As GetSettlementDetailsChineseCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimPaymentCompleted As GetClaimPaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDeductibleClaimPresentationCompleted As GetDeductibleClaimPresentationCompletedEventHandler
        
        '''<remarks/>
        Public Event CarryForwardClaimCompleted As CarryForwardClaimCompletedEventHandler
        
        '''<remarks/>
        Public Event GetHighEndMedicalLifeTimePaidAmountCompleted As GetHighEndMedicalLifeTimePaidAmountCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPlaceOfHospitalCodeCompleted As GetPlaceOfHospitalCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOperationCodeCompleted As GetOperationCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSurValueDiffCompleted As UpdateSurValueDiffCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCapsilSurValueCompleted As GetCapsilSurValueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCompanyIDbyPolicyCompleted As GetCompanyIDbyPolicyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMcstransactionDetailsCompleted As GetMcstransactionDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateICClaimAmountCompleted As UpdateICClaimAmountCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPreClaimAmtCompleted As GetPreClaimAmtCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckCapsilPlanCompleted As CheckCapsilPlanCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNotMsgWordingCompleted As GetNotMsgWordingCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertNotificationCompleted As InsertNotificationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSettledClaimsWithFpsHistCompleted As GetSettledClaimsWithFpsHistCompletedEventHandler
        
        '''<remarks/>
        Public Event FPSBatchVerifyCompleted As FPSBatchVerifyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFPSMaintCompleted As GetFPSMaintCompletedEventHandler
        
        '''<remarks/>
        Public Event SetFPSMaintCompleted As SetFPSMaintCompletedEventHandler
        
        '''<remarks/>
        Public Event FPSDataFeedSetProcessStageCompleted As FPSDataFeedSetProcessStageCompletedEventHandler
        
        '''<remarks/>
        Public Event FPSDataFeedGetProcessStageCompleted As FPSDataFeedGetProcessStageCompletedEventHandler
        
        '''<remarks/>
        Public Event FPSDataFeedProcessCompleted As FPSDataFeedProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event AddMessageCompleted As AddMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event FPSFINReportProcessCompleted As FPSFINReportProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFPSPaymentSettlementCompleted As GetFPSPaymentSettlementCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFPSPaymentRejectCompleted As GetFPSPaymentRejectCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPrintFPSPaymentReverseCompleted As GetPrintFPSPaymentReverseCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimsAuditTrailDataCompleted As GetClaimsAuditTrailDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveAuditTrailCompleted As SaveAuditTrailCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintClaimsAuditTrailReportCompleted As PrintClaimsAuditTrailReportCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAuditClaimReportCompleted As GetAuditClaimReportCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAuditEventNameCompleted As GetAuditEventNameCompletedEventHandler
        
        '''<remarks/>
        Public Event NeedRefreshClaimPolicyInfoCompleted As NeedRefreshClaimPolicyInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event CapConvSpecialHandleCompleted As CapConvSpecialHandleCompletedEventHandler
        
        '''<remarks/>
        Public Event IsCapsilConvertPolicyCompleted As IsCapsilConvertPolicyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimPolicyNMappingCAPPOLCompleted As GetClaimPolicyNMappingCAPPOLCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckPolicyDateValueNStatusCompleted As CheckPolicyDateValueNStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyHistoryForAggregationCompleted As GetPolicyHistoryForAggregationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAggregateMasterCompleted As GetAggregateMasterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAggregateDetailCompleted As GetAggregateDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBenefitValidateRelateCompleted As GetBenefitValidateRelateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBenefitRelateCompleted As GetBenefitRelateCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateClaimPaymentCompleted As UpdateClaimPaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRCSRegisterCompleted As GetRCSRegisterCompletedEventHandler
        
        '''<remarks/>
        Public Event RCSClaimRegisterCompleted As RCSClaimRegisterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTranExclusionCompleted As GetTranExclusionCompletedEventHandler
        
        '''<remarks/>
        Public Event RCSClaimApprovalCompleted As RCSClaimApprovalCompletedEventHandler
        
        '''<remarks/>
        Public Event RcsGenSettlementLetterCompleted As RcsGenSettlementLetterCompletedEventHandler
        
        '''<remarks/>
        Public Event RCSClaimReversalCompleted As RCSClaimReversalCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMcsDeclineEmailItemsCompleted As GetMcsDeclineEmailItemsCompletedEventHandler
        
        '''<remarks/>
        Public Event AddMcsDeclineEmailLogCompleted As AddMcsDeclineEmailLogCompletedEventHandler
        
        '''<remarks/>
        Public Event IsValidConditionCompleted As IsValidConditionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetACFBatchIDCompleted As GetACFBatchIDCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateACFBatchIDCompleted As UpdateACFBatchIDCompletedEventHandler
        
        '''<remarks/>
        Public Event RCSBookClaim2BECompleted As RCSBookClaim2BECompletedEventHandler
        
        '''<remarks/>
        Public Event GetFraudPreventionListCompleted As GetFraudPreventionListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFraudPreventionInfoCompleted As GetFraudPreventionInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveFraudPreventionLogCompleted As SaveFraudPreventionLogCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateFraudPreventionLogCompleted As UpdateFraudPreventionLogCompletedEventHandler
        
        '''<remarks/>
        Public Event ReactivatePaymentCompleted As ReactivatePaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateClaimPaidTermCompleted As UpdateClaimPaidTermCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimPaidTermDataTableCompleted As GetClaimPaidTermDataTableCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateClaimPaidTermCompleted As CreateClaimPaidTermCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateClaimPaidTermStatusCompleted As UpdateClaimPaidTermStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimPaidTermQueueCompleted As GetClaimPaidTermQueueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyValueEnqCompleted As GetPolicyValueEnqCompletedEventHandler
        
        '''<remarks/>
        Public Event CreatePosSurrReqCompleted As CreatePosSurrReqCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSavingABalCompleted As GetSavingABalCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPayeeClaimPaymentCompleted As GetPayeeClaimPaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCLTLetterPrintStatusCompleted As UpdateCLTLetterPrintStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event getLAClientNoCompleted As getLAClientNoCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckIsPaidAmtEligible2Completed As CheckIsPaidAmtEligible2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimPaidTermQueueByPolicyCompleted As GetClaimPaidTermQueueByPolicyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetChequeByPaymentNoCompleted As GetChequeByPaymentNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GenerateSettlementLetterCompleted As GenerateSettlementLetterCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateSettlementCCMRequestCompleted As CreateSettlementCCMRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateUserAmountLimitCompleted As UpdateUserAmountLimitCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAmountLimitnCompleted As GetAmountLimitnCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTopActAgcyClaimSummaryCompleted As GetTopActAgcyClaimSummaryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPendingClaimCompleted As GetPendingClaimCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimExpensesAnalysisCompleted As GetClaimExpensesAnalysisCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccessorProductivityCompleted As GetAccessorProductivityCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDeclineExgratiaReasonAnalysisCompleted As GetDeclineExgratiaReasonAnalysisCompletedEventHandler
        
        '''<remarks/>
        Public Event GetChequePaymentSummaryCompleted As GetChequePaymentSummaryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTurnaroundTimeAnalysisCompleted As GetTurnaroundTimeAnalysisCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTopAgentSummaryPaymentCompleted As GetTopAgentSummaryPaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTopAgentSummarySubmissionCompleted As GetTopAgentSummarySubmissionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSystemChequeSettlementCompleted As GetSystemChequeSettlementCompletedEventHandler
        
        '''<remarks/>
        Public Event Get711SettlementCompleted As Get711SettlementCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIscSettlementCompleted As GetIscSettlementCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReverseSystemChequeSettlementCompleted As GetReverseSystemChequeSettlementCompletedEventHandler
        
        '''<remarks/>
        Public Event GetForcibleErrorCompleted As GetForcibleErrorCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimPaymentSummaryCompleted As GetClaimPaymentSummaryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInsuredAccumulatedPaidCompleted As GetInsuredAccumulatedPaidCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCodeValueCompleted As UpdateCodeValueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCorrespondenceLetterListCompleted As GetCorrespondenceLetterListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCorrespondenceRecipientListCompleted As GetCorrespondenceRecipientListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCorrespondenceHistoryCompleted As GetCorrespondenceHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event BatchSaveCorrespondenceHistoryCompleted As BatchSaveCorrespondenceHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCorrespondenceRecipientCompleted As GetCorrespondenceRecipientCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCorrespondenceRecipientByUUIDCompleted As GetCorrespondenceRecipientByUUIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimsMarkInRecordsCompleted As GetClaimsMarkInRecordsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimsMarkInRecordsFromPortalCompleted As GetClaimsMarkInRecordsFromPortalCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllIncompletedClaimsMarkInRecordsCompleted As GetAllIncompletedClaimsMarkInRecordsCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteClaimsMarkInRecordsCompleted As DeleteClaimsMarkInRecordsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimTypeByTransCodeCompleted As GetClaimTypeByTransCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertMarkInRecordCompleted As InsertMarkInRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMcsPaymentDetailsCompleted As GetMcsPaymentDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPreAssessmentCompleted As GetPreAssessmentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRemainBalanceCompleted As GetRemainBalanceCompletedEventHandler
        
        '''<remarks/>
        Public Event isTheOneStandardCompleted As isTheOneStandardCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSunAccountExchangeRateCompleted As GetSunAccountExchangeRateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSunAccountEmailCompleted As GetSunAccountEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMcsMarkInEmailItemsCompleted As GetMcsMarkInEmailItemsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMcsMarkInSmsItemsCompleted As GetMcsMarkInSmsItemsCompletedEventHandler
        
        '''<remarks/>
        Public Event AddMcsMarkInEmailLogCompleted As AddMcsMarkInEmailLogCompletedEventHandler
        
        '''<remarks/>
        Public Event AddMcsMarkInSmsLogCompleted As AddMcsMarkInSmsLogCompletedEventHandler
        
        '''<remarks/>
        Public Event IsMcsMarkInSmsSentForSamePolicyOnSameDayCompleted As IsMcsMarkInSmsSentForSamePolicyOnSameDayCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMcsPaymentEmailItemsCompleted As GetMcsPaymentEmailItemsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMcsPaymentSmsItemsCompleted As GetMcsPaymentSmsItemsCompletedEventHandler
        
        '''<remarks/>
        Public Event AddMcsPaymentEmailLogCompleted As AddMcsPaymentEmailLogCompletedEventHandler
        
        '''<remarks/>
        Public Event AddMcsPaymentSmsLogCompleted As AddMcsPaymentSmsLogCompletedEventHandler
        
        '''<remarks/>
        Public Event IsMcsPaymentSmsSentForSamePolicyOnSameDayCompleted As IsMcsPaymentSmsSentForSamePolicyOnSameDayCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMcsPaymentSmsLogCountCompleted As GetMcsPaymentSmsLogCountCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyLifetimeBalanceCompleted As GetPolicyLifetimeBalanceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInsuredLifetimeBalanceCompleted As GetInsuredLifetimeBalanceCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckAggregateLimitCompleted As CheckAggregateLimitCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckAggregateLimitClaimMaintCompleted As CheckAggregateLimitClaimMaintCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReinstatementDateByPolicyNoCompleted As GetReinstatementDateByPolicyNoCompletedEventHandler
        
        '''<remarks/>
        Public Event HasAggregateSettingByPlanCompleted As HasAggregateSettingByPlanCompletedEventHandler
        
        '''<remarks/>
        Public Event Get7ElevenPaymentRuleCompleted As Get7ElevenPaymentRuleCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMcs7ElevenMobilePaymentCompleted As UpdateMcs7ElevenMobilePaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMcs7ElevenContactInfoCompleted As GetMcs7ElevenContactInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidateMcs7ElevenMobileNoCompleted As ValidateMcs7ElevenMobileNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMcs7ElevenEmailCompleted As GetMcs7ElevenEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckMcs7ElevenVisitCsCompleted As CheckMcs7ElevenVisitCsCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckMcsIscUserCompleted As CheckMcsIscUserCompletedEventHandler
        
        '''<remarks/>
        Public Event PrepareISCRecordCompleted As PrepareISCRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GenerateOnlineChequePaymentCompleted As GenerateOnlineChequePaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReverse7ElevenPaymentSettlementCompleted As GetReverse7ElevenPaymentSettlementCompletedEventHandler
        
        '''<remarks/>
        Public Event Get7ElevenPaymentSettlementCompleted As Get7ElevenPaymentSettlementCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIscRefNoByClaimNoCompleted As GetIscRefNoByClaimNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIscChequeByRefNumCompleted As GetIscChequeByRefNumCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIscChqPaymentByChequeIdCompleted As GetIscChqPaymentByChequeIdCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateIscChqStatusCompleted As UpdateIscChqStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckIscChequeNoCompleted As CheckIscChequeNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIscNoOfPolicyCompleted As GetIscNoOfPolicyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIscReportPathCompleted As GetIscReportPathCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateIscCmRecordCompleted As UpdateIscCmRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIscChequeLotCompleted As GetIscChequeLotCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckIscPlanTypeCompleted As CheckIscPlanTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReverseInstantChequeSettlementCompleted As GetReverseInstantChequeSettlementCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInstantChequeSettlementCompleted As GetInstantChequeSettlementCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckIsIscCompleted As CheckIsIscCompletedEventHandler
        
        '''<remarks/>
        Public Event FPSPayoutAPICompleted As FPSPayoutAPICompletedEventHandler
        
        '''<remarks/>
        Public Event GetProxyTypeCompleted As GetProxyTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFPSTransactionStatusCompleted As GetFPSTransactionStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event AllowCallFPSAPICompleted As AllowCallFPSAPICompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMcsFPSPayoutCompleted As UpdateMcsFPSPayoutCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMcsFPSPayoutWithMobiCntryCodeCompleted As UpdateMcsFPSPayoutWithMobiCntryCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMcsFPSProxyInfoCompleted As GetMcsFPSProxyInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLetterCompleted As GetLetterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNextPendSeqNoCompleted As GetNextPendSeqNoCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteClaimAllCompleted As DeleteClaimAllCompletedEventHandler
        
        '''<remarks/>
        Public Event ReverseClaimCompleted As ReverseClaimCompletedEventHandler
        
        '''<remarks/>
        Public Event BatchSavePendRSCompleted As BatchSavePendRSCompletedEventHandler
        
        '''<remarks/>
        Public Event ClaimFinalCompleted As ClaimFinalCompletedEventHandler
        
        '''<remarks/>
        Public Event ClaimCheckCompleted As ClaimCheckCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckIsPaidAmtEligibleCompleted As CheckIsPaidAmtEligibleCompletedEventHandler
        
        '''<remarks/>
        Public Event ReverseApprovalCompleted As ReverseApprovalCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCompanyNameCompleted As GetCompanyNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTitleCompleted As GetTitleCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckClaimApprovalStatusCompleted As CheckClaimApprovalStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event SetApprovedFlag2ndCompleted As SetApprovedFlag2ndCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTitleListCompleted As GetTitleListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAuthGroupByTitleCompleted As GetAuthGroupByTitleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDepartmentListCompleted As GetDepartmentListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserInfoCompleted As GetUserInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAuthGroupInfoByUIDCompleted As GetAuthGroupInfoByUIDCompletedEventHandler
        
        '''<remarks/>
        Public Event AddUpdateUserCompleted As AddUpdateUserCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteUserCompleted As DeleteUserCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTitleWithAuthGroupCompleted As GetTitleWithAuthGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAuthGroupListCompleted As GetAuthGroupListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimNatureListCompleted As GetClaimNatureListCompletedEventHandler
        
        '''<remarks/>
        Public Event AddTitleWithAuthGroupCompleted As AddTitleWithAuthGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateTitleWithAuthGroupCompleted As UpdateTitleWithAuthGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteTitleWithAuthGroupCompleted As DeleteTitleWithAuthGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckIsTitleInUseCompleted As CheckIsTitleInUseCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAuthRuleWithAuthGroupCompleted As GetAuthRuleWithAuthGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAuthRuleListCompleted As GetAuthRuleListCompletedEventHandler
        
        '''<remarks/>
        Public Event AddAuthorityRuleCompleted As AddAuthorityRuleCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAuthorityRuleCompleted As UpdateAuthorityRuleCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteAuthorityRuleCompleted As DeleteAuthorityRuleCompletedEventHandler
        
        '''<remarks/>
        Public Event AddUpdateClaimNatureCompleted As AddUpdateClaimNatureCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteClaimNatureCompleted As DeleteClaimNatureCompletedEventHandler
        
        '''<remarks/>
        Public Event AddUpdateAuthGroupCompleted As AddUpdateAuthGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteAuthGroupCompleted As DeleteAuthGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimNatureCompleted As GetClaimNatureCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimNatureMappingInfoCompleted As GetClaimNatureMappingInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAuthGroupCompleted As GetAuthGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimNatureCodeListCompleted As GetClaimNatureCodeListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimNaturePlanOrClaimTypeListCompleted As GetClaimNaturePlanOrClaimTypeListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserGroupListCompleted As GetUserGroupListCompletedEventHandler
        
        '''<remarks/>
        Public Event getLogoImgCompleted As getLogoImgCompletedEventHandler
        
        '''<remarks/>
        Public Event DCADataHeaderCompleted As DCADataHeaderCompletedEventHandler
        
        '''<remarks/>
        Public Event DCADataDetailCompleted As DCADataDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event DCADataFooterCompleted As DCADataFooterCompletedEventHandler
        
        '''<remarks/>
        Public Event DCALetterInfoCompleted As DCALetterInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event GenerateMemoDetailsMCompleted As GenerateMemoDetailsMCompletedEventHandler
        
        '''<remarks/>
        Public Event GenerateMemoDetailsCompleted As GenerateMemoDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAddressByPolicyNoCompleted As GetAddressByPolicyNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAddressByCustomerNoCompleted As GetAddressByCustomerNoCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerByRelCompleted As GetCustomerByRelCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerIDByRelCompleted As GetCustomerIDByRelCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOwnerCompleted As GetOwnerCompletedEventHandler
        
        '''<remarks/>
        Public Event getCoverageChineseNameCompleted As getCoverageChineseNameCompletedEventHandler
        
        '''<remarks/>
        Public Event IsPolicySurrenderCompleted As IsPolicySurrenderCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEligibleBenefitCompleted As GetEligibleBenefitCompletedEventHandler
        
        '''<remarks/>
        Public Event IsRefundableHospitalIncomeCompleted As IsRefundableHospitalIncomeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLifeTimeClaimBalanceCompleted As GetLifeTimeClaimBalanceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLifeTimeBenefitByInsuredIdCompleted As GetLifeTimeBenefitByInsuredIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInsuredMaxBenefitAmountCompleted As GetInsuredMaxBenefitAmountCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInsuredTotalPaidAmountCompleted As GetInsuredTotalPaidAmountCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSugClassCountByPlanCompleted As GetSugClassCountByPlanCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSurClassMappingCompleted As GetSurClassMappingCompletedEventHandler
        
        '''<remarks/>
        Public Event HasPropDevelopedCountryCompleted As HasPropDevelopedCountryCompletedEventHandler
        
        '''<remarks/>
        Public Event HasPropSpecialEndorsementCompleted As HasPropSpecialEndorsementCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOutstandingRptOrderCompleted As GetOutstandingRptOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveRptOrderCompleted As SaveRptOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReportCompleted As GetReportCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDeclineCloseClaimAnalysisCompleted As GetDeclineCloseClaimAnalysisCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFinalClaimAnalysisCompleted As GetFinalClaimAnalysisCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOnlineStatusReportCompleted As GetOnlineStatusReportCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMarkInReportCompleted As GetMarkInReportCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDirectCreditTransactionControlCompleted As GetDirectCreditTransactionControlCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDirectCreditTransactionSuspiciousCaseCompleted As GetDirectCreditTransactionSuspiciousCaseCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReverseDirectPaymentSettlementCompleted As GetReverseDirectPaymentSettlementCompletedEventHandler
        
        '''<remarks/>
        Public Event GetManualChequeSettlementCompleted As GetManualChequeSettlementCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEServiceSettlementCompleted As GetEServiceSettlementCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReverseManualChequeSettlementCompleted As GetReverseManualChequeSettlementCompletedEventHandler
        
        '''<remarks/>
        Public Event GetImpairmentCodeCompleted As GetImpairmentCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetChequeRemarkCompleted As GetChequeRemarkCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAmountLimitCompleted As GetAmountLimitCompletedEventHandler
        
        '''<remarks/>
        Public Event DelAmountLimitCompleted As DelAmountLimitCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserAmountLimitCompleted As GetUserAmountLimitCompletedEventHandler
        
        '''<remarks/>
        Public Event DelUserAmountLimitCompleted As DelUserAmountLimitCompletedEventHandler
        
        '''<remarks/>
        Public Event SetEnvCompleted As SetEnvCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimsCompleted As GetClaimsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOutstandingClaimCompleted As GetOutstandingClaimCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSettledClaimCompleted As GetSettledClaimCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMastiDateCompleted As GetMastiDateCompletedEventHandler
        
        '''<remarks/>
        Public Event LockClaimCompleted As LockClaimCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerByIdCompleted As GetCustomerByIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCurrentDDAByPolicyIdCompleted As GetCurrentDDAByPolicyIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMCSChannelContactCompleted As GetMCSChannelContactCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCodeValueCompleted As GetCodeValueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetExchangeRateCompleted As GetExchangeRateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimByClaimNoCompleted As GetClaimByClaimNoCompletedEventHandler
        
        '''<remarks/>
        Public Event HasMjcCrisisClaimCompleted As HasMjcCrisisClaimCompletedEventHandler
        
        '''<remarks/>
        Public Event HasLifeStyleIndCompleted As HasLifeStyleIndCompletedEventHandler
        
        '''<remarks/>
        Public Event HasLifeEnrichmentIndCompleted As HasLifeEnrichmentIndCompletedEventHandler
        
        '''<remarks/>
        Public Event HasHealthScreenPaymentHistoryCompleted As HasHealthScreenPaymentHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveCalLogCompleted As SaveCalLogCompletedEventHandler
        
        '''<remarks/>
        Public Event CalculateClaimPaymentCompleted As CalculateClaimPaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event AppendCommentCompleted As AppendCommentCompletedEventHandler
        
        '''<remarks/>
        Public Event UnLockClaimCompleted As UnLockClaimCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAgentByAgentIdCompleted As GetAgentByAgentIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEmptyClaimHeaderCompleted As GetEmptyClaimHeaderCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInsuredByPolicyCoverageCompleted As GetInsuredByPolicyCoverageCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPendingReasonCompleted As GetPendingReasonCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPendingCodeCompleted As GetPendingCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetServerCurrentDateTimeCompleted As GetServerCurrentDateTimeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPlanByIDCompleted As GetPlanByIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimPolicyNCoverageCompleted As GetClaimPolicyNCoverageCompletedEventHandler
        
        '''<remarks/>
        Public Event getClaimBeneHisByClaimNoCompleted As getClaimBeneHisByClaimNoCompletedEventHandler
        
        '''<remarks/>
        Public Event getClaimBenefitHistoryCompleted As getClaimBenefitHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimBenefit1Completed As GetClaimBenefit1CompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimMessageByNoCompleted As GetClaimMessageByNoCompletedEventHandler
        
        '''<remarks/>
        Public Event IsLockedCompleted As IsLockedCompletedEventHandler
        
        '''<remarks/>
        Public Event IsPolicyExistedCompleted As IsPolicyExistedCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEmptyClaimMessageCompleted As GetEmptyClaimMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEmptyClaimPaymentCompleted As GetEmptyClaimPaymentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetResolveRecordCompleted As GetResolveRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccPosFurClaimCompleted As GetAccPosFurClaimCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBenefitCompleted As GetBenefitCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckClaimCompleted As CheckClaimCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccidentCodeCompleted As GetAccidentCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveClaimHeaderCompleted As SaveClaimHeaderCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimDetailsCompleted As GetClaimDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEmptyClaimPresentationCompleted As GetEmptyClaimPresentationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPaymentMethodCompleted As GetPaymentMethodCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyByClaimCompleted As GetPolicyByClaimCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimPresentationCompleted As GetClaimPresentationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimStatusCompleted As GetClaimStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEmptyClaimPendingCompleted As GetEmptyClaimPendingCompletedEventHandler
        
        '''<remarks/>
        Public Event GetExgratiaReasonCompleted As GetExgratiaReasonCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTotalPaidByPlanTypeCompleted As GetTotalPaidByPlanTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTotalPaidByPolicyCompleted As GetTotalPaidByPolicyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPlanFeatureCompleted As GetPlanFeatureCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPlanCompleted As GetPlanCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyByIdCompleted As GetPolicyByIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPolicyCoverageCompleted As GetPolicyCoverageCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserCompleted As GetUserCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGrpByUserCompleted As GetGrpByUserCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMceGrpByUserCompleted As GetMceGrpByUserCompletedEventHandler
        
        '''<remarks/>
        Public Event IsClaimFinalApprovedCompleted As IsClaimFinalApprovedCompletedEventHandler
        
        '''<remarks/>
        Public Event IsClaimOverApprovalLimitMJCCompleted As IsClaimOverApprovalLimitMJCCompletedEventHandler
        
        '''<remarks/>
        Public Event IsInforcePly_CIWCompleted As IsInforcePly_CIWCompletedEventHandler
        
        '''<remarks/>
        Public Event IsValidBankBranchCompleted As IsValidBankBranchCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateClaimDetailsCompleted As UpdateClaimDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateMemoPrintDateCompleted As UpdateMemoPrintDateCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateReminderPrintDateCompleted As UpdateReminderPrintDateCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdatePaymentDetailsCompleted As UpdatePaymentDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event getClaimProxyLogCompleted As getClaimProxyLogCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClientHistoryCompleted As GetClientHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCurrencyCodeCompleted As GetCurrencyCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDeclineReasonCompleted As GetDeclineReasonCompletedEventHandler
        
        '''<remarks/>
        Public Event GetHospFurClaimCompleted As GetHospFurClaimCompletedEventHandler
        
        '''<remarks/>
        Public Event GetHospitalTypeCompleted As GetHospitalTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLOACompleted As GetLOACompletedEventHandler
        
        '''<remarks/>
        Public Event GetIllnessCodeCompleted As GetIllnessCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClaimTypeCompleted As GetClaimTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInsuredByPolicyCompleted As GetInsuredByPolicyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCoverageStatusCompleted As GetCoverageStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDocumentCompleted As GetDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLetterTypeCompleted As GetLetterTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLogMessageByNoCompleted As GetLogMessageByNoCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/PrintSTPRequestByLetterRequestID", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintSTPRequestByLetterRequestID(ByVal ltrRequestId As String, ByRef errMsg As String, ByRef stackTrace As String) As Integer
            Dim results() As Object = Me.Invoke("PrintSTPRequestByLetterRequestID", New Object() {ltrRequestId, errMsg, stackTrace})
            errMsg = CType(results(1),String)
            stackTrace = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintSTPRequestByLetterRequestIDAsync(ByVal ltrRequestId As String, ByVal errMsg As String, ByVal stackTrace As String)
            Me.PrintSTPRequestByLetterRequestIDAsync(ltrRequestId, errMsg, stackTrace, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintSTPRequestByLetterRequestIDAsync(ByVal ltrRequestId As String, ByVal errMsg As String, ByVal stackTrace As String, ByVal userState As Object)
            If (Me.PrintSTPRequestByLetterRequestIDOperationCompleted Is Nothing) Then
                Me.PrintSTPRequestByLetterRequestIDOperationCompleted = AddressOf Me.OnPrintSTPRequestByLetterRequestIDOperationCompleted
            End If
            Me.InvokeAsync("PrintSTPRequestByLetterRequestID", New Object() {ltrRequestId, errMsg, stackTrace}, Me.PrintSTPRequestByLetterRequestIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintSTPRequestByLetterRequestIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintSTPRequestByLetterRequestIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintSTPRequestByLetterRequestIDCompleted(Me, New PrintSTPRequestByLetterRequestIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetOracleGLVersionNo", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOracleGLVersionNo(ByVal report As String, ByVal transactionDate As Date, ByRef versionNo As Integer, ByRef strMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("GetOracleGLVersionNo", New Object() {report, transactionDate, versionNo, strMsg})
            versionNo = CType(results(1),Integer)
            strMsg = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOracleGLVersionNoAsync(ByVal report As String, ByVal transactionDate As Date, ByVal versionNo As Integer, ByVal strMsg As String)
            Me.GetOracleGLVersionNoAsync(report, transactionDate, versionNo, strMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOracleGLVersionNoAsync(ByVal report As String, ByVal transactionDate As Date, ByVal versionNo As Integer, ByVal strMsg As String, ByVal userState As Object)
            If (Me.GetOracleGLVersionNoOperationCompleted Is Nothing) Then
                Me.GetOracleGLVersionNoOperationCompleted = AddressOf Me.OnGetOracleGLVersionNoOperationCompleted
            End If
            Me.InvokeAsync("GetOracleGLVersionNo", New Object() {report, transactionDate, versionNo, strMsg}, Me.GetOracleGLVersionNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOracleGLVersionNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOracleGLVersionNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOracleGLVersionNoCompleted(Me, New GetOracleGLVersionNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UpdateOracleGLVersionNo", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateOracleGLVersionNo(ByVal report As String, ByVal transactionDate As Date, ByVal versionNo As Integer, ByRef strMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateOracleGLVersionNo", New Object() {report, transactionDate, versionNo, strMsg})
            strMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateOracleGLVersionNoAsync(ByVal report As String, ByVal transactionDate As Date, ByVal versionNo As Integer, ByVal strMsg As String)
            Me.UpdateOracleGLVersionNoAsync(report, transactionDate, versionNo, strMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateOracleGLVersionNoAsync(ByVal report As String, ByVal transactionDate As Date, ByVal versionNo As Integer, ByVal strMsg As String, ByVal userState As Object)
            If (Me.UpdateOracleGLVersionNoOperationCompleted Is Nothing) Then
                Me.UpdateOracleGLVersionNoOperationCompleted = AddressOf Me.OnUpdateOracleGLVersionNoOperationCompleted
            End If
            Me.InvokeAsync("UpdateOracleGLVersionNo", New Object() {report, transactionDate, versionNo, strMsg}, Me.UpdateOracleGLVersionNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateOracleGLVersionNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateOracleGLVersionNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateOracleGLVersionNoCompleted(Me, New UpdateOracleGLVersionNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimsMarkInRecordsByMarkInID", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimsMarkInRecordsByMarkInID(ByVal markInID As String, ByRef strMessage As String, ByRef dtRs As System.Data.DataTable) As Boolean
            Dim results() As Object = Me.Invoke("GetClaimsMarkInRecordsByMarkInID", New Object() {markInID, strMessage, dtRs})
            strMessage = CType(results(1),String)
            dtRs = CType(results(2),System.Data.DataTable)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimsMarkInRecordsByMarkInIDAsync(ByVal markInID As String, ByVal strMessage As String, ByVal dtRs As System.Data.DataTable)
            Me.GetClaimsMarkInRecordsByMarkInIDAsync(markInID, strMessage, dtRs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimsMarkInRecordsByMarkInIDAsync(ByVal markInID As String, ByVal strMessage As String, ByVal dtRs As System.Data.DataTable, ByVal userState As Object)
            If (Me.GetClaimsMarkInRecordsByMarkInIDOperationCompleted Is Nothing) Then
                Me.GetClaimsMarkInRecordsByMarkInIDOperationCompleted = AddressOf Me.OnGetClaimsMarkInRecordsByMarkInIDOperationCompleted
            End If
            Me.InvokeAsync("GetClaimsMarkInRecordsByMarkInID", New Object() {markInID, strMessage, dtRs}, Me.GetClaimsMarkInRecordsByMarkInIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimsMarkInRecordsByMarkInIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimsMarkInRecordsByMarkInIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimsMarkInRecordsByMarkInIDCompleted(Me, New GetClaimsMarkInRecordsByMarkInIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetMcsClaimParam", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMcsClaimParam(ByVal claimNo As String, ByVal claimOccur As String, ByVal category As String, ByVal name As String, ByRef strMessage As String, ByRef dtRs As System.Data.DataTable) As Boolean
            Dim results() As Object = Me.Invoke("GetMcsClaimParam", New Object() {claimNo, claimOccur, category, name, strMessage, dtRs})
            strMessage = CType(results(1),String)
            dtRs = CType(results(2),System.Data.DataTable)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMcsClaimParamAsync(ByVal claimNo As String, ByVal claimOccur As String, ByVal category As String, ByVal name As String, ByVal strMessage As String, ByVal dtRs As System.Data.DataTable)
            Me.GetMcsClaimParamAsync(claimNo, claimOccur, category, name, strMessage, dtRs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMcsClaimParamAsync(ByVal claimNo As String, ByVal claimOccur As String, ByVal category As String, ByVal name As String, ByVal strMessage As String, ByVal dtRs As System.Data.DataTable, ByVal userState As Object)
            If (Me.GetMcsClaimParamOperationCompleted Is Nothing) Then
                Me.GetMcsClaimParamOperationCompleted = AddressOf Me.OnGetMcsClaimParamOperationCompleted
            End If
            Me.InvokeAsync("GetMcsClaimParam", New Object() {claimNo, claimOccur, category, name, strMessage, dtRs}, Me.GetMcsClaimParamOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMcsClaimParamOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMcsClaimParamCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMcsClaimParamCompleted(Me, New GetMcsClaimParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UpsertMcsClaimParam", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpsertMcsClaimParam(ByVal claimNo As String, ByVal claimOccur As String, ByVal category As String, ByVal name As String, ByVal value As String, ByVal userID As String, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("UpsertMcsClaimParam", New Object() {claimNo, claimOccur, category, name, value, userID, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpsertMcsClaimParamAsync(ByVal claimNo As String, ByVal claimOccur As String, ByVal category As String, ByVal name As String, ByVal value As String, ByVal userID As String, ByVal strMessage As String)
            Me.UpsertMcsClaimParamAsync(claimNo, claimOccur, category, name, value, userID, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpsertMcsClaimParamAsync(ByVal claimNo As String, ByVal claimOccur As String, ByVal category As String, ByVal name As String, ByVal value As String, ByVal userID As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.UpsertMcsClaimParamOperationCompleted Is Nothing) Then
                Me.UpsertMcsClaimParamOperationCompleted = AddressOf Me.OnUpsertMcsClaimParamOperationCompleted
            End If
            Me.InvokeAsync("UpsertMcsClaimParam", New Object() {claimNo, claimOccur, category, name, value, userID, strMessage}, Me.UpsertMcsClaimParamOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpsertMcsClaimParamOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpsertMcsClaimParamCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpsertMcsClaimParamCompleted(Me, New UpsertMcsClaimParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/SendEmailByCCMS", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendEmailByCCMS(ByVal smtpServer As String, ByVal emailFrom As String, ByVal emailFromDisplay As String, ByVal emailTo As String, ByVal emailCc As String, ByVal emailBcc As String, ByVal emailSubject As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal emailBody() As Byte, ByVal emailStatus As String, ByVal createUser As String, ByRef strError As String, ByRef strStackTrace As String) As Boolean
            Dim results() As Object = Me.Invoke("SendEmailByCCMS", New Object() {smtpServer, emailFrom, emailFromDisplay, emailTo, emailCc, emailBcc, emailSubject, emailBody, emailStatus, createUser, strError, strStackTrace})
            strError = CType(results(1),String)
            strStackTrace = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendEmailByCCMSAsync(ByVal smtpServer As String, ByVal emailFrom As String, ByVal emailFromDisplay As String, ByVal emailTo As String, ByVal emailCc As String, ByVal emailBcc As String, ByVal emailSubject As String, ByVal emailBody() As Byte, ByVal emailStatus As String, ByVal createUser As String, ByVal strError As String, ByVal strStackTrace As String)
            Me.SendEmailByCCMSAsync(smtpServer, emailFrom, emailFromDisplay, emailTo, emailCc, emailBcc, emailSubject, emailBody, emailStatus, createUser, strError, strStackTrace, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendEmailByCCMSAsync(ByVal smtpServer As String, ByVal emailFrom As String, ByVal emailFromDisplay As String, ByVal emailTo As String, ByVal emailCc As String, ByVal emailBcc As String, ByVal emailSubject As String, ByVal emailBody() As Byte, ByVal emailStatus As String, ByVal createUser As String, ByVal strError As String, ByVal strStackTrace As String, ByVal userState As Object)
            If (Me.SendEmailByCCMSOperationCompleted Is Nothing) Then
                Me.SendEmailByCCMSOperationCompleted = AddressOf Me.OnSendEmailByCCMSOperationCompleted
            End If
            Me.InvokeAsync("SendEmailByCCMS", New Object() {smtpServer, emailFrom, emailFromDisplay, emailTo, emailCc, emailBcc, emailSubject, emailBody, emailStatus, createUser, strError, strStackTrace}, Me.SendEmailByCCMSOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendEmailByCCMSOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendEmailByCCMSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendEmailByCCMSCompleted(Me, New SendEmailByCCMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/SendEmailWithAttachmentByCCMS", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendEmailWithAttachmentByCCMS(ByVal smtpServer As String, ByVal emailFrom As String, ByVal emailFromDisplay As String, ByVal emailTo As String, ByVal emailCc As String, ByVal emailBcc As String, ByVal emailSubject As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal emailBody() As Byte, ByVal emailAttachName As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal emailAttach() As Byte, ByVal emailStatus As String, ByVal createUser As String, ByRef strError As String, ByRef strStackTrace As String) As Boolean
            Dim results() As Object = Me.Invoke("SendEmailWithAttachmentByCCMS", New Object() {smtpServer, emailFrom, emailFromDisplay, emailTo, emailCc, emailBcc, emailSubject, emailBody, emailAttachName, emailAttach, emailStatus, createUser, strError, strStackTrace})
            strError = CType(results(1),String)
            strStackTrace = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendEmailWithAttachmentByCCMSAsync(ByVal smtpServer As String, ByVal emailFrom As String, ByVal emailFromDisplay As String, ByVal emailTo As String, ByVal emailCc As String, ByVal emailBcc As String, ByVal emailSubject As String, ByVal emailBody() As Byte, ByVal emailAttachName As String, ByVal emailAttach() As Byte, ByVal emailStatus As String, ByVal createUser As String, ByVal strError As String, ByVal strStackTrace As String)
            Me.SendEmailWithAttachmentByCCMSAsync(smtpServer, emailFrom, emailFromDisplay, emailTo, emailCc, emailBcc, emailSubject, emailBody, emailAttachName, emailAttach, emailStatus, createUser, strError, strStackTrace, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendEmailWithAttachmentByCCMSAsync(ByVal smtpServer As String, ByVal emailFrom As String, ByVal emailFromDisplay As String, ByVal emailTo As String, ByVal emailCc As String, ByVal emailBcc As String, ByVal emailSubject As String, ByVal emailBody() As Byte, ByVal emailAttachName As String, ByVal emailAttach() As Byte, ByVal emailStatus As String, ByVal createUser As String, ByVal strError As String, ByVal strStackTrace As String, ByVal userState As Object)
            If (Me.SendEmailWithAttachmentByCCMSOperationCompleted Is Nothing) Then
                Me.SendEmailWithAttachmentByCCMSOperationCompleted = AddressOf Me.OnSendEmailWithAttachmentByCCMSOperationCompleted
            End If
            Me.InvokeAsync("SendEmailWithAttachmentByCCMS", New Object() {smtpServer, emailFrom, emailFromDisplay, emailTo, emailCc, emailBcc, emailSubject, emailBody, emailAttachName, emailAttach, emailStatus, createUser, strError, strStackTrace}, Me.SendEmailWithAttachmentByCCMSOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendEmailWithAttachmentByCCMSOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendEmailWithAttachmentByCCMSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendEmailWithAttachmentByCCMSCompleted(Me, New SendEmailWithAttachmentByCCMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/isTheOneStandardByClaimNo", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isTheOneStandardByClaimNo(ByRef strErrMsg As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long) As Boolean
            Dim results() As Object = Me.Invoke("isTheOneStandardByClaimNo", New Object() {strErrMsg, lngClaimNo, lngOccurNo})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isTheOneStandardByClaimNoAsync(ByVal strErrMsg As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long)
            Me.isTheOneStandardByClaimNoAsync(strErrMsg, lngClaimNo, lngOccurNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isTheOneStandardByClaimNoAsync(ByVal strErrMsg As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal userState As Object)
            If (Me.isTheOneStandardByClaimNoOperationCompleted Is Nothing) Then
                Me.isTheOneStandardByClaimNoOperationCompleted = AddressOf Me.OnisTheOneStandardByClaimNoOperationCompleted
            End If
            Me.InvokeAsync("isTheOneStandardByClaimNo", New Object() {strErrMsg, lngClaimNo, lngOccurNo}, Me.isTheOneStandardByClaimNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnisTheOneStandardByClaimNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.isTheOneStandardByClaimNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isTheOneStandardByClaimNoCompleted(Me, New isTheOneStandardByClaimNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/IsAMCClaimValid", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsAMCClaimValid(ByVal sPolicyNo As String, ByVal busDate As Date, ByRef blnIncDate As Boolean, ByRef blnRemainAmt As Boolean, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("IsAMCClaimValid", New Object() {sPolicyNo, busDate, blnIncDate, blnRemainAmt, strErr})
            blnIncDate = CType(results(1),Boolean)
            blnRemainAmt = CType(results(2),Boolean)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsAMCClaimValidAsync(ByVal sPolicyNo As String, ByVal busDate As Date, ByVal blnIncDate As Boolean, ByVal blnRemainAmt As Boolean, ByVal strErr As String)
            Me.IsAMCClaimValidAsync(sPolicyNo, busDate, blnIncDate, blnRemainAmt, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsAMCClaimValidAsync(ByVal sPolicyNo As String, ByVal busDate As Date, ByVal blnIncDate As Boolean, ByVal blnRemainAmt As Boolean, ByVal strErr As String, ByVal userState As Object)
            If (Me.IsAMCClaimValidOperationCompleted Is Nothing) Then
                Me.IsAMCClaimValidOperationCompleted = AddressOf Me.OnIsAMCClaimValidOperationCompleted
            End If
            Me.InvokeAsync("IsAMCClaimValid", New Object() {sPolicyNo, busDate, blnIncDate, blnRemainAmt, strErr}, Me.IsAMCClaimValidOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsAMCClaimValidOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsAMCClaimValidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsAMCClaimValidCompleted(Me, New IsAMCClaimValidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetMcsFPSDailyTotal", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMcsFPSDailyTotal(ByRef strMessage As String, ByRef totalDailyAmount As Double, ByVal ParaDate As Date) As Boolean
            Dim results() As Object = Me.Invoke("GetMcsFPSDailyTotal", New Object() {strMessage, totalDailyAmount, ParaDate})
            strMessage = CType(results(1),String)
            totalDailyAmount = CType(results(2),Double)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMcsFPSDailyTotalAsync(ByVal strMessage As String, ByVal totalDailyAmount As Double, ByVal ParaDate As Date)
            Me.GetMcsFPSDailyTotalAsync(strMessage, totalDailyAmount, ParaDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMcsFPSDailyTotalAsync(ByVal strMessage As String, ByVal totalDailyAmount As Double, ByVal ParaDate As Date, ByVal userState As Object)
            If (Me.GetMcsFPSDailyTotalOperationCompleted Is Nothing) Then
                Me.GetMcsFPSDailyTotalOperationCompleted = AddressOf Me.OnGetMcsFPSDailyTotalOperationCompleted
            End If
            Me.InvokeAsync("GetMcsFPSDailyTotal", New Object() {strMessage, totalDailyAmount, ParaDate}, Me.GetMcsFPSDailyTotalOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMcsFPSDailyTotalOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMcsFPSDailyTotalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMcsFPSDailyTotalCompleted(Me, New GetMcsFPSDailyTotalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetMcsFPSLastCallHSBCDate", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMcsFPSLastCallHSBCDate(ByRef strMessage As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByRef LastCallAPIDate As Date) As Boolean
            Dim results() As Object = Me.Invoke("GetMcsFPSLastCallHSBCDate", New Object() {strMessage, strClaimNo, strClaimOccur, LastCallAPIDate})
            strMessage = CType(results(1),String)
            LastCallAPIDate = CType(results(2),Date)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMcsFPSLastCallHSBCDateAsync(ByVal strMessage As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal LastCallAPIDate As Date)
            Me.GetMcsFPSLastCallHSBCDateAsync(strMessage, strClaimNo, strClaimOccur, LastCallAPIDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMcsFPSLastCallHSBCDateAsync(ByVal strMessage As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal LastCallAPIDate As Date, ByVal userState As Object)
            If (Me.GetMcsFPSLastCallHSBCDateOperationCompleted Is Nothing) Then
                Me.GetMcsFPSLastCallHSBCDateOperationCompleted = AddressOf Me.OnGetMcsFPSLastCallHSBCDateOperationCompleted
            End If
            Me.InvokeAsync("GetMcsFPSLastCallHSBCDate", New Object() {strMessage, strClaimNo, strClaimOccur, LastCallAPIDate}, Me.GetMcsFPSLastCallHSBCDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMcsFPSLastCallHSBCDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMcsFPSLastCallHSBCDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMcsFPSLastCallHSBCDateCompleted(Me, New GetMcsFPSLastCallHSBCDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetCIWSysVal", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCIWSysVal(ByVal strKey As String, ByRef strVal As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCIWSysVal", New Object() {strKey, strVal, strError})
            strVal = CType(results(1),String)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCIWSysValAsync(ByVal strKey As String, ByVal strVal As String, ByVal strError As String)
            Me.GetCIWSysValAsync(strKey, strVal, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCIWSysValAsync(ByVal strKey As String, ByVal strVal As String, ByVal strError As String, ByVal userState As Object)
            If (Me.GetCIWSysValOperationCompleted Is Nothing) Then
                Me.GetCIWSysValOperationCompleted = AddressOf Me.OnGetCIWSysValOperationCompleted
            End If
            Me.InvokeAsync("GetCIWSysVal", New Object() {strKey, strVal, strError}, Me.GetCIWSysValOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCIWSysValOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCIWSysValCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCIWSysValCompleted(Me, New GetCIWSysValCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetFPSSettlement", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFPSSettlement(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetFPSSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFPSSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.GetFPSSettlementAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFPSSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetFPSSettlementOperationCompleted Is Nothing) Then
                Me.GetFPSSettlementOperationCompleted = AddressOf Me.OnGetFPSSettlementOperationCompleted
            End If
            Me.InvokeAsync("GetFPSSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.GetFPSSettlementOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFPSSettlementOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFPSSettlementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFPSSettlementCompleted(Me, New GetFPSSettlementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetEmailSetting", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEmailSetting(ByVal strKey As String, ByRef strVal As String, ByRef strError As String) As Boolean
            Dim results() As Object = Me.Invoke("GetEmailSetting", New Object() {strKey, strVal, strError})
            strVal = CType(results(1),String)
            strError = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEmailSettingAsync(ByVal strKey As String, ByVal strVal As String, ByVal strError As String)
            Me.GetEmailSettingAsync(strKey, strVal, strError, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEmailSettingAsync(ByVal strKey As String, ByVal strVal As String, ByVal strError As String, ByVal userState As Object)
            If (Me.GetEmailSettingOperationCompleted Is Nothing) Then
                Me.GetEmailSettingOperationCompleted = AddressOf Me.OnGetEmailSettingOperationCompleted
            End If
            Me.InvokeAsync("GetEmailSetting", New Object() {strKey, strVal, strError}, Me.GetEmailSettingOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEmailSettingOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEmailSettingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEmailSettingCompleted(Me, New GetEmailSettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/CreateAppLog", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateAppLog(ByVal AL_Type As String, ByVal AL_Userid As String, ByVal AL_System As String, ByVal AL_Machine As String, ByVal AL_Err_Msg As String, ByVal AL_StackTrace As String, ByVal AL_Reference As String, ByVal AL_Info_Value As String) As Boolean
            Dim results() As Object = Me.Invoke("CreateAppLog", New Object() {AL_Type, AL_Userid, AL_System, AL_Machine, AL_Err_Msg, AL_StackTrace, AL_Reference, AL_Info_Value})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateAppLogAsync(ByVal AL_Type As String, ByVal AL_Userid As String, ByVal AL_System As String, ByVal AL_Machine As String, ByVal AL_Err_Msg As String, ByVal AL_StackTrace As String, ByVal AL_Reference As String, ByVal AL_Info_Value As String)
            Me.CreateAppLogAsync(AL_Type, AL_Userid, AL_System, AL_Machine, AL_Err_Msg, AL_StackTrace, AL_Reference, AL_Info_Value, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateAppLogAsync(ByVal AL_Type As String, ByVal AL_Userid As String, ByVal AL_System As String, ByVal AL_Machine As String, ByVal AL_Err_Msg As String, ByVal AL_StackTrace As String, ByVal AL_Reference As String, ByVal AL_Info_Value As String, ByVal userState As Object)
            If (Me.CreateAppLogOperationCompleted Is Nothing) Then
                Me.CreateAppLogOperationCompleted = AddressOf Me.OnCreateAppLogOperationCompleted
            End If
            Me.InvokeAsync("CreateAppLog", New Object() {AL_Type, AL_Userid, AL_System, AL_Machine, AL_Err_Msg, AL_StackTrace, AL_Reference, AL_Info_Value}, Me.CreateAppLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateAppLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateAppLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateAppLogCompleted(Me, New CreateAppLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetPresentationSetting", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPresentationSetting(ByRef strMessage As String, ByRef dsReturn As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("GetPresentationSetting", New Object() {strMessage, dsReturn})
            strMessage = CType(results(1),String)
            dsReturn = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPresentationSettingAsync(ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet)
            Me.GetPresentationSettingAsync(strMessage, dsReturn, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPresentationSettingAsync(ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal userState As Object)
            If (Me.GetPresentationSettingOperationCompleted Is Nothing) Then
                Me.GetPresentationSettingOperationCompleted = AddressOf Me.OnGetPresentationSettingOperationCompleted
            End If
            Me.InvokeAsync("GetPresentationSetting", New Object() {strMessage, dsReturn}, Me.GetPresentationSettingOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPresentationSettingOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPresentationSettingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPresentationSettingCompleted(Me, New GetPresentationSettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimEligibleBenefit", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimEligibleBenefit(ByVal dtClmCoverage As System.Data.DataTable, ByRef dtBenefit As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetClaimEligibleBenefit", New Object() {dtClmCoverage, dtBenefit, strErr})
            dtBenefit = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimEligibleBenefitAsync(ByVal dtClmCoverage As System.Data.DataTable, ByVal dtBenefit As System.Data.DataTable, ByVal strErr As String)
            Me.GetClaimEligibleBenefitAsync(dtClmCoverage, dtBenefit, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimEligibleBenefitAsync(ByVal dtClmCoverage As System.Data.DataTable, ByVal dtBenefit As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetClaimEligibleBenefitOperationCompleted Is Nothing) Then
                Me.GetClaimEligibleBenefitOperationCompleted = AddressOf Me.OnGetClaimEligibleBenefitOperationCompleted
            End If
            Me.InvokeAsync("GetClaimEligibleBenefit", New Object() {dtClmCoverage, dtBenefit, strErr}, Me.GetClaimEligibleBenefitOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimEligibleBenefitOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimEligibleBenefitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimEligibleBenefitCompleted(Me, New GetClaimEligibleBenefitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetSettlementDetailsChinese", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSettlementDetailsChinese(ByVal claimNo As Integer, ByVal claimOcc As Integer, ByVal strPolicyNo As String, ByRef dtLetterDetail As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSettlementDetailsChinese", New Object() {claimNo, claimOcc, strPolicyNo, dtLetterDetail, strErr})
            dtLetterDetail = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSettlementDetailsChineseAsync(ByVal claimNo As Integer, ByVal claimOcc As Integer, ByVal strPolicyNo As String, ByVal dtLetterDetail As System.Data.DataTable, ByVal strErr As String)
            Me.GetSettlementDetailsChineseAsync(claimNo, claimOcc, strPolicyNo, dtLetterDetail, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSettlementDetailsChineseAsync(ByVal claimNo As Integer, ByVal claimOcc As Integer, ByVal strPolicyNo As String, ByVal dtLetterDetail As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetSettlementDetailsChineseOperationCompleted Is Nothing) Then
                Me.GetSettlementDetailsChineseOperationCompleted = AddressOf Me.OnGetSettlementDetailsChineseOperationCompleted
            End If
            Me.InvokeAsync("GetSettlementDetailsChinese", New Object() {claimNo, claimOcc, strPolicyNo, dtLetterDetail, strErr}, Me.GetSettlementDetailsChineseOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSettlementDetailsChineseOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSettlementDetailsChineseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSettlementDetailsChineseCompleted(Me, New GetSettlementDetailsChineseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimPayment", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimPayment(ByVal claimNo As Integer, ByVal claimOccur As Integer, ByVal strPolicy As String, ByRef dtPayment As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetClaimPayment", New Object() {claimNo, claimOccur, strPolicy, dtPayment, strErr})
            dtPayment = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimPaymentAsync(ByVal claimNo As Integer, ByVal claimOccur As Integer, ByVal strPolicy As String, ByVal dtPayment As System.Data.DataTable, ByVal strErr As String)
            Me.GetClaimPaymentAsync(claimNo, claimOccur, strPolicy, dtPayment, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimPaymentAsync(ByVal claimNo As Integer, ByVal claimOccur As Integer, ByVal strPolicy As String, ByVal dtPayment As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetClaimPaymentOperationCompleted Is Nothing) Then
                Me.GetClaimPaymentOperationCompleted = AddressOf Me.OnGetClaimPaymentOperationCompleted
            End If
            Me.InvokeAsync("GetClaimPayment", New Object() {claimNo, claimOccur, strPolicy, dtPayment, strErr}, Me.GetClaimPaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimPaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimPaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimPaymentCompleted(Me, New GetClaimPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetDeductibleClaimPresentation", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDeductibleClaimPresentation(ByVal claimNo As Integer, ByVal claimOcc As Integer, ByVal strPolicy As String, ByRef dtPresentItems As System.Data.DataTable, ByRef decActualDeductible As Decimal, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetDeductibleClaimPresentation", New Object() {claimNo, claimOcc, strPolicy, dtPresentItems, decActualDeductible, strErr})
            dtPresentItems = CType(results(1),System.Data.DataTable)
            decActualDeductible = CType(results(2),Decimal)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDeductibleClaimPresentationAsync(ByVal claimNo As Integer, ByVal claimOcc As Integer, ByVal strPolicy As String, ByVal dtPresentItems As System.Data.DataTable, ByVal decActualDeductible As Decimal, ByVal strErr As String)
            Me.GetDeductibleClaimPresentationAsync(claimNo, claimOcc, strPolicy, dtPresentItems, decActualDeductible, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDeductibleClaimPresentationAsync(ByVal claimNo As Integer, ByVal claimOcc As Integer, ByVal strPolicy As String, ByVal dtPresentItems As System.Data.DataTable, ByVal decActualDeductible As Decimal, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetDeductibleClaimPresentationOperationCompleted Is Nothing) Then
                Me.GetDeductibleClaimPresentationOperationCompleted = AddressOf Me.OnGetDeductibleClaimPresentationOperationCompleted
            End If
            Me.InvokeAsync("GetDeductibleClaimPresentation", New Object() {claimNo, claimOcc, strPolicy, dtPresentItems, decActualDeductible, strErr}, Me.GetDeductibleClaimPresentationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDeductibleClaimPresentationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDeductibleClaimPresentationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDeductibleClaimPresentationCompleted(Me, New GetDeductibleClaimPresentationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/CarryForwardClaim", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CarryForwardClaim(ByVal srcClaimNo As Long, ByVal srcClaimOcc As Long, ByVal srcPolicyNo As String, ByVal strClaimType As String, ByRef newClaimNo As Long, ByRef newClaimOcc As Long, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CarryForwardClaim", New Object() {srcClaimNo, srcClaimOcc, srcPolicyNo, strClaimType, newClaimNo, newClaimOcc, strErr})
            newClaimNo = CType(results(1),Long)
            newClaimOcc = CType(results(2),Long)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CarryForwardClaimAsync(ByVal srcClaimNo As Long, ByVal srcClaimOcc As Long, ByVal srcPolicyNo As String, ByVal strClaimType As String, ByVal newClaimNo As Long, ByVal newClaimOcc As Long, ByVal strErr As String)
            Me.CarryForwardClaimAsync(srcClaimNo, srcClaimOcc, srcPolicyNo, strClaimType, newClaimNo, newClaimOcc, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CarryForwardClaimAsync(ByVal srcClaimNo As Long, ByVal srcClaimOcc As Long, ByVal srcPolicyNo As String, ByVal strClaimType As String, ByVal newClaimNo As Long, ByVal newClaimOcc As Long, ByVal strErr As String, ByVal userState As Object)
            If (Me.CarryForwardClaimOperationCompleted Is Nothing) Then
                Me.CarryForwardClaimOperationCompleted = AddressOf Me.OnCarryForwardClaimOperationCompleted
            End If
            Me.InvokeAsync("CarryForwardClaim", New Object() {srcClaimNo, srcClaimOcc, srcPolicyNo, strClaimType, newClaimNo, newClaimOcc, strErr}, Me.CarryForwardClaimOperationCompleted, userState)
        End Sub
        
        Private Sub OnCarryForwardClaimOperationCompleted(ByVal arg As Object)
            If (Not (Me.CarryForwardClaimCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CarryForwardClaimCompleted(Me, New CarryForwardClaimCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetHighEndMedicalLifeTimePaidAmount", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetHighEndMedicalLifeTimePaidAmount(ByVal claimNo As Long, ByVal claimOccur As Long, ByRef paidCurrency As String, ByRef paidAmt As Decimal, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetHighEndMedicalLifeTimePaidAmount", New Object() {claimNo, claimOccur, paidCurrency, paidAmt, strErr})
            paidCurrency = CType(results(1),String)
            paidAmt = CType(results(2),Decimal)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetHighEndMedicalLifeTimePaidAmountAsync(ByVal claimNo As Long, ByVal claimOccur As Long, ByVal paidCurrency As String, ByVal paidAmt As Decimal, ByVal strErr As String)
            Me.GetHighEndMedicalLifeTimePaidAmountAsync(claimNo, claimOccur, paidCurrency, paidAmt, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetHighEndMedicalLifeTimePaidAmountAsync(ByVal claimNo As Long, ByVal claimOccur As Long, ByVal paidCurrency As String, ByVal paidAmt As Decimal, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetHighEndMedicalLifeTimePaidAmountOperationCompleted Is Nothing) Then
                Me.GetHighEndMedicalLifeTimePaidAmountOperationCompleted = AddressOf Me.OnGetHighEndMedicalLifeTimePaidAmountOperationCompleted
            End If
            Me.InvokeAsync("GetHighEndMedicalLifeTimePaidAmount", New Object() {claimNo, claimOccur, paidCurrency, paidAmt, strErr}, Me.GetHighEndMedicalLifeTimePaidAmountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetHighEndMedicalLifeTimePaidAmountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetHighEndMedicalLifeTimePaidAmountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetHighEndMedicalLifeTimePaidAmountCompleted(Me, New GetHighEndMedicalLifeTimePaidAmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetPlaceOfHospitalCode", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPlaceOfHospitalCode(ByVal sCode As String, ByVal sStatus As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPlaceOfHospitalCode", New Object() {sCode, sStatus})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPlaceOfHospitalCodeAsync(ByVal sCode As String, ByVal sStatus As String)
            Me.GetPlaceOfHospitalCodeAsync(sCode, sStatus, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPlaceOfHospitalCodeAsync(ByVal sCode As String, ByVal sStatus As String, ByVal userState As Object)
            If (Me.GetPlaceOfHospitalCodeOperationCompleted Is Nothing) Then
                Me.GetPlaceOfHospitalCodeOperationCompleted = AddressOf Me.OnGetPlaceOfHospitalCodeOperationCompleted
            End If
            Me.InvokeAsync("GetPlaceOfHospitalCode", New Object() {sCode, sStatus}, Me.GetPlaceOfHospitalCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPlaceOfHospitalCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPlaceOfHospitalCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPlaceOfHospitalCodeCompleted(Me, New GetPlaceOfHospitalCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetOperationCode", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOperationCode(ByVal sCode As String, ByVal sStatus As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetOperationCode", New Object() {sCode, sStatus})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOperationCodeAsync(ByVal sCode As String, ByVal sStatus As String)
            Me.GetOperationCodeAsync(sCode, sStatus, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOperationCodeAsync(ByVal sCode As String, ByVal sStatus As String, ByVal userState As Object)
            If (Me.GetOperationCodeOperationCompleted Is Nothing) Then
                Me.GetOperationCodeOperationCompleted = AddressOf Me.OnGetOperationCodeOperationCompleted
            End If
            Me.InvokeAsync("GetOperationCode", New Object() {sCode, sStatus}, Me.GetOperationCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOperationCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOperationCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOperationCodeCompleted(Me, New GetOperationCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UpdateSurValueDiff", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateSurValueDiff(ByVal PolicyNo As String, ByVal ClaimNo As Integer, ByVal ClaimOccur As Integer, ByVal Delta As Double, ByVal Approvaldate As Date, ByRef Remarkmsg As String, ByRef errstr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateSurValueDiff", New Object() {PolicyNo, ClaimNo, ClaimOccur, Delta, Approvaldate, Remarkmsg, errstr})
            Remarkmsg = CType(results(1),String)
            errstr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateSurValueDiffAsync(ByVal PolicyNo As String, ByVal ClaimNo As Integer, ByVal ClaimOccur As Integer, ByVal Delta As Double, ByVal Approvaldate As Date, ByVal Remarkmsg As String, ByVal errstr As String)
            Me.UpdateSurValueDiffAsync(PolicyNo, ClaimNo, ClaimOccur, Delta, Approvaldate, Remarkmsg, errstr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSurValueDiffAsync(ByVal PolicyNo As String, ByVal ClaimNo As Integer, ByVal ClaimOccur As Integer, ByVal Delta As Double, ByVal Approvaldate As Date, ByVal Remarkmsg As String, ByVal errstr As String, ByVal userState As Object)
            If (Me.UpdateSurValueDiffOperationCompleted Is Nothing) Then
                Me.UpdateSurValueDiffOperationCompleted = AddressOf Me.OnUpdateSurValueDiffOperationCompleted
            End If
            Me.InvokeAsync("UpdateSurValueDiff", New Object() {PolicyNo, ClaimNo, ClaimOccur, Delta, Approvaldate, Remarkmsg, errstr}, Me.UpdateSurValueDiffOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSurValueDiffOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSurValueDiffCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSurValueDiffCompleted(Me, New UpdateSurValueDiffCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetCapsilSurValue", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCapsilSurValue(ByVal policyNo As String, ByRef SurValue As Decimal, ByRef errstr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCapsilSurValue", New Object() {policyNo, SurValue, errstr})
            SurValue = CType(results(1),Decimal)
            errstr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCapsilSurValueAsync(ByVal policyNo As String, ByVal SurValue As Decimal, ByVal errstr As String)
            Me.GetCapsilSurValueAsync(policyNo, SurValue, errstr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCapsilSurValueAsync(ByVal policyNo As String, ByVal SurValue As Decimal, ByVal errstr As String, ByVal userState As Object)
            If (Me.GetCapsilSurValueOperationCompleted Is Nothing) Then
                Me.GetCapsilSurValueOperationCompleted = AddressOf Me.OnGetCapsilSurValueOperationCompleted
            End If
            Me.InvokeAsync("GetCapsilSurValue", New Object() {policyNo, SurValue, errstr}, Me.GetCapsilSurValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCapsilSurValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCapsilSurValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCapsilSurValueCompleted(Me, New GetCapsilSurValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetCompanyIDbyPolicy", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCompanyIDbyPolicy(ByVal policyNo As String, ByRef companyID As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCompanyIDbyPolicy", New Object() {policyNo, companyID, strErr})
            companyID = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCompanyIDbyPolicyAsync(ByVal policyNo As String, ByVal companyID As System.Data.DataTable, ByVal strErr As String)
            Me.GetCompanyIDbyPolicyAsync(policyNo, companyID, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCompanyIDbyPolicyAsync(ByVal policyNo As String, ByVal companyID As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCompanyIDbyPolicyOperationCompleted Is Nothing) Then
                Me.GetCompanyIDbyPolicyOperationCompleted = AddressOf Me.OnGetCompanyIDbyPolicyOperationCompleted
            End If
            Me.InvokeAsync("GetCompanyIDbyPolicy", New Object() {policyNo, companyID, strErr}, Me.GetCompanyIDbyPolicyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCompanyIDbyPolicyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCompanyIDbyPolicyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCompanyIDbyPolicyCompleted(Me, New GetCompanyIDbyPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetMcstransactionDetails", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMcstransactionDetails(ByVal year As Integer, ByVal month As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMcstransactionDetails", New Object() {year, month})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMcstransactionDetailsAsync(ByVal year As Integer, ByVal month As Integer)
            Me.GetMcstransactionDetailsAsync(year, month, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMcstransactionDetailsAsync(ByVal year As Integer, ByVal month As Integer, ByVal userState As Object)
            If (Me.GetMcstransactionDetailsOperationCompleted Is Nothing) Then
                Me.GetMcstransactionDetailsOperationCompleted = AddressOf Me.OnGetMcstransactionDetailsOperationCompleted
            End If
            Me.InvokeAsync("GetMcstransactionDetails", New Object() {year, month}, Me.GetMcstransactionDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMcstransactionDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMcstransactionDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMcstransactionDetailsCompleted(Me, New GetMcstransactionDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UpdateICClaimAmount", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateICClaimAmount(ByRef strMessage As String, ByVal ClaimPolicyno As String, ByVal lngClaimNo As Long, ByVal lngClaimOccu As Long, ByVal strUser As String, ByVal Delta As Double) As Boolean
            Dim results() As Object = Me.Invoke("UpdateICClaimAmount", New Object() {strMessage, ClaimPolicyno, lngClaimNo, lngClaimOccu, strUser, Delta})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateICClaimAmountAsync(ByVal strMessage As String, ByVal ClaimPolicyno As String, ByVal lngClaimNo As Long, ByVal lngClaimOccu As Long, ByVal strUser As String, ByVal Delta As Double)
            Me.UpdateICClaimAmountAsync(strMessage, ClaimPolicyno, lngClaimNo, lngClaimOccu, strUser, Delta, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateICClaimAmountAsync(ByVal strMessage As String, ByVal ClaimPolicyno As String, ByVal lngClaimNo As Long, ByVal lngClaimOccu As Long, ByVal strUser As String, ByVal Delta As Double, ByVal userState As Object)
            If (Me.UpdateICClaimAmountOperationCompleted Is Nothing) Then
                Me.UpdateICClaimAmountOperationCompleted = AddressOf Me.OnUpdateICClaimAmountOperationCompleted
            End If
            Me.InvokeAsync("UpdateICClaimAmount", New Object() {strMessage, ClaimPolicyno, lngClaimNo, lngClaimOccu, strUser, Delta}, Me.UpdateICClaimAmountOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateICClaimAmountOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateICClaimAmountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateICClaimAmountCompleted(Me, New UpdateICClaimAmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetPreClaimAmt", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPreClaimAmt(ByVal policyNo As String, ByVal claimNo As Decimal, ByVal claimOccr As Decimal, ByVal paidAmt As Decimal, ByRef preClaimAmt As Decimal, ByRef ErrStr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPreClaimAmt", New Object() {policyNo, claimNo, claimOccr, paidAmt, preClaimAmt, ErrStr})
            preClaimAmt = CType(results(1),Decimal)
            ErrStr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPreClaimAmtAsync(ByVal policyNo As String, ByVal claimNo As Decimal, ByVal claimOccr As Decimal, ByVal paidAmt As Decimal, ByVal preClaimAmt As Decimal, ByVal ErrStr As String)
            Me.GetPreClaimAmtAsync(policyNo, claimNo, claimOccr, paidAmt, preClaimAmt, ErrStr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPreClaimAmtAsync(ByVal policyNo As String, ByVal claimNo As Decimal, ByVal claimOccr As Decimal, ByVal paidAmt As Decimal, ByVal preClaimAmt As Decimal, ByVal ErrStr As String, ByVal userState As Object)
            If (Me.GetPreClaimAmtOperationCompleted Is Nothing) Then
                Me.GetPreClaimAmtOperationCompleted = AddressOf Me.OnGetPreClaimAmtOperationCompleted
            End If
            Me.InvokeAsync("GetPreClaimAmt", New Object() {policyNo, claimNo, claimOccr, paidAmt, preClaimAmt, ErrStr}, Me.GetPreClaimAmtOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPreClaimAmtOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPreClaimAmtCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPreClaimAmtCompleted(Me, New GetPreClaimAmtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/CheckCapsilPlan", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckCapsilPlan(ByVal policyNo As String, ByVal claimNo As Decimal, ByVal TargetPlan As String, ByRef StrErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckCapsilPlan", New Object() {policyNo, claimNo, TargetPlan, StrErr})
            StrErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckCapsilPlanAsync(ByVal policyNo As String, ByVal claimNo As Decimal, ByVal TargetPlan As String, ByVal StrErr As String)
            Me.CheckCapsilPlanAsync(policyNo, claimNo, TargetPlan, StrErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckCapsilPlanAsync(ByVal policyNo As String, ByVal claimNo As Decimal, ByVal TargetPlan As String, ByVal StrErr As String, ByVal userState As Object)
            If (Me.CheckCapsilPlanOperationCompleted Is Nothing) Then
                Me.CheckCapsilPlanOperationCompleted = AddressOf Me.OnCheckCapsilPlanOperationCompleted
            End If
            Me.InvokeAsync("CheckCapsilPlan", New Object() {policyNo, claimNo, TargetPlan, StrErr}, Me.CheckCapsilPlanOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckCapsilPlanOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckCapsilPlanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckCapsilPlanCompleted(Me, New CheckCapsilPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetNotMsgWording", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNotMsgWording(ByVal notMsgCode As String, ByRef dsResult As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetNotMsgWording", New Object() {notMsgCode, dsResult, strErr})
            dsResult = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNotMsgWordingAsync(ByVal notMsgCode As String, ByVal dsResult As System.Data.DataSet, ByVal strErr As String)
            Me.GetNotMsgWordingAsync(notMsgCode, dsResult, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNotMsgWordingAsync(ByVal notMsgCode As String, ByVal dsResult As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetNotMsgWordingOperationCompleted Is Nothing) Then
                Me.GetNotMsgWordingOperationCompleted = AddressOf Me.OnGetNotMsgWordingOperationCompleted
            End If
            Me.InvokeAsync("GetNotMsgWording", New Object() {notMsgCode, dsResult, strErr}, Me.GetNotMsgWordingOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNotMsgWordingOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNotMsgWordingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNotMsgWordingCompleted(Me, New GetNotMsgWordingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/InsertNotification", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertNotification(ByVal strcustomerid As String, ByVal strusername As String, ByVal strlang As String, ByVal strpolicyno As String, ByVal NotificationEngString As String, ByVal NotificationTCString As String, ByVal NotificationSCString As String, ByVal strRemindertype As String, ByVal strDB As String, ByVal strTable As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("InsertNotification", New Object() {strcustomerid, strusername, strlang, strpolicyno, NotificationEngString, NotificationTCString, NotificationSCString, strRemindertype, strDB, strTable, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertNotificationAsync(ByVal strcustomerid As String, ByVal strusername As String, ByVal strlang As String, ByVal strpolicyno As String, ByVal NotificationEngString As String, ByVal NotificationTCString As String, ByVal NotificationSCString As String, ByVal strRemindertype As String, ByVal strDB As String, ByVal strTable As String, ByVal strErr As String)
            Me.InsertNotificationAsync(strcustomerid, strusername, strlang, strpolicyno, NotificationEngString, NotificationTCString, NotificationSCString, strRemindertype, strDB, strTable, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertNotificationAsync(ByVal strcustomerid As String, ByVal strusername As String, ByVal strlang As String, ByVal strpolicyno As String, ByVal NotificationEngString As String, ByVal NotificationTCString As String, ByVal NotificationSCString As String, ByVal strRemindertype As String, ByVal strDB As String, ByVal strTable As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.InsertNotificationOperationCompleted Is Nothing) Then
                Me.InsertNotificationOperationCompleted = AddressOf Me.OnInsertNotificationOperationCompleted
            End If
            Me.InvokeAsync("InsertNotification", New Object() {strcustomerid, strusername, strlang, strpolicyno, NotificationEngString, NotificationTCString, NotificationSCString, strRemindertype, strDB, strTable, strErr}, Me.InsertNotificationOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertNotificationOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertNotificationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertNotificationCompleted(Me, New InsertNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetSettledClaimsWithFpsHist", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSettledClaimsWithFpsHist(ByVal sysdt As Date, ByRef dsResult As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSettledClaimsWithFpsHist", New Object() {sysdt, dsResult, strErr})
            dsResult = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSettledClaimsWithFpsHistAsync(ByVal sysdt As Date, ByVal dsResult As System.Data.DataSet, ByVal strErr As String)
            Me.GetSettledClaimsWithFpsHistAsync(sysdt, dsResult, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSettledClaimsWithFpsHistAsync(ByVal sysdt As Date, ByVal dsResult As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetSettledClaimsWithFpsHistOperationCompleted Is Nothing) Then
                Me.GetSettledClaimsWithFpsHistOperationCompleted = AddressOf Me.OnGetSettledClaimsWithFpsHistOperationCompleted
            End If
            Me.InvokeAsync("GetSettledClaimsWithFpsHist", New Object() {sysdt, dsResult, strErr}, Me.GetSettledClaimsWithFpsHistOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSettledClaimsWithFpsHistOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSettledClaimsWithFpsHistCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSettledClaimsWithFpsHistCompleted(Me, New GetSettledClaimsWithFpsHistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/FPSBatchVerify", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FPSBatchVerify(ByRef errstr As String, ByVal dtProcessDate As Date) As Boolean
            Dim results() As Object = Me.Invoke("FPSBatchVerify", New Object() {errstr, dtProcessDate})
            errstr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FPSBatchVerifyAsync(ByVal errstr As String, ByVal dtProcessDate As Date)
            Me.FPSBatchVerifyAsync(errstr, dtProcessDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FPSBatchVerifyAsync(ByVal errstr As String, ByVal dtProcessDate As Date, ByVal userState As Object)
            If (Me.FPSBatchVerifyOperationCompleted Is Nothing) Then
                Me.FPSBatchVerifyOperationCompleted = AddressOf Me.OnFPSBatchVerifyOperationCompleted
            End If
            Me.InvokeAsync("FPSBatchVerify", New Object() {errstr, dtProcessDate}, Me.FPSBatchVerifyOperationCompleted, userState)
        End Sub
        
        Private Sub OnFPSBatchVerifyOperationCompleted(ByVal arg As Object)
            If (Not (Me.FPSBatchVerifyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FPSBatchVerifyCompleted(Me, New FPSBatchVerifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetFPSMaint", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFPSMaint(ByRef FPSMaintValue As System.Data.DataTable, ByVal UserId As String, ByVal Machine As String, ByRef errstr As String, ByRef lastUpdateDate As String, ByRef lastUpdateUser As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFPSMaint", New Object() {FPSMaintValue, UserId, Machine, errstr, lastUpdateDate, lastUpdateUser})
            FPSMaintValue = CType(results(1),System.Data.DataTable)
            errstr = CType(results(2),String)
            lastUpdateDate = CType(results(3),String)
            lastUpdateUser = CType(results(4),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFPSMaintAsync(ByVal FPSMaintValue As System.Data.DataTable, ByVal UserId As String, ByVal Machine As String, ByVal errstr As String, ByVal lastUpdateDate As String, ByVal lastUpdateUser As String)
            Me.GetFPSMaintAsync(FPSMaintValue, UserId, Machine, errstr, lastUpdateDate, lastUpdateUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFPSMaintAsync(ByVal FPSMaintValue As System.Data.DataTable, ByVal UserId As String, ByVal Machine As String, ByVal errstr As String, ByVal lastUpdateDate As String, ByVal lastUpdateUser As String, ByVal userState As Object)
            If (Me.GetFPSMaintOperationCompleted Is Nothing) Then
                Me.GetFPSMaintOperationCompleted = AddressOf Me.OnGetFPSMaintOperationCompleted
            End If
            Me.InvokeAsync("GetFPSMaint", New Object() {FPSMaintValue, UserId, Machine, errstr, lastUpdateDate, lastUpdateUser}, Me.GetFPSMaintOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFPSMaintOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFPSMaintCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFPSMaintCompleted(Me, New GetFPSMaintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/SetFPSMaint", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetFPSMaint(ByRef FPSMaintValue As System.Data.DataTable, ByVal UserId As String, ByVal Machine As String, ByRef errstr As String) As Boolean
            Dim results() As Object = Me.Invoke("SetFPSMaint", New Object() {FPSMaintValue, UserId, Machine, errstr})
            FPSMaintValue = CType(results(1),System.Data.DataTable)
            errstr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetFPSMaintAsync(ByVal FPSMaintValue As System.Data.DataTable, ByVal UserId As String, ByVal Machine As String, ByVal errstr As String)
            Me.SetFPSMaintAsync(FPSMaintValue, UserId, Machine, errstr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetFPSMaintAsync(ByVal FPSMaintValue As System.Data.DataTable, ByVal UserId As String, ByVal Machine As String, ByVal errstr As String, ByVal userState As Object)
            If (Me.SetFPSMaintOperationCompleted Is Nothing) Then
                Me.SetFPSMaintOperationCompleted = AddressOf Me.OnSetFPSMaintOperationCompleted
            End If
            Me.InvokeAsync("SetFPSMaint", New Object() {FPSMaintValue, UserId, Machine, errstr}, Me.SetFPSMaintOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetFPSMaintOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetFPSMaintCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetFPSMaintCompleted(Me, New SetFPSMaintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/FPSDataFeedSetProcessStage", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FPSDataFeedSetProcessStage(ByVal processStage As Integer, ByRef errMessage As String, ByVal dtProcessDate As Date) As Boolean
            Dim results() As Object = Me.Invoke("FPSDataFeedSetProcessStage", New Object() {processStage, errMessage, dtProcessDate})
            errMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FPSDataFeedSetProcessStageAsync(ByVal processStage As Integer, ByVal errMessage As String, ByVal dtProcessDate As Date)
            Me.FPSDataFeedSetProcessStageAsync(processStage, errMessage, dtProcessDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FPSDataFeedSetProcessStageAsync(ByVal processStage As Integer, ByVal errMessage As String, ByVal dtProcessDate As Date, ByVal userState As Object)
            If (Me.FPSDataFeedSetProcessStageOperationCompleted Is Nothing) Then
                Me.FPSDataFeedSetProcessStageOperationCompleted = AddressOf Me.OnFPSDataFeedSetProcessStageOperationCompleted
            End If
            Me.InvokeAsync("FPSDataFeedSetProcessStage", New Object() {processStage, errMessage, dtProcessDate}, Me.FPSDataFeedSetProcessStageOperationCompleted, userState)
        End Sub
        
        Private Sub OnFPSDataFeedSetProcessStageOperationCompleted(ByVal arg As Object)
            If (Not (Me.FPSDataFeedSetProcessStageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FPSDataFeedSetProcessStageCompleted(Me, New FPSDataFeedSetProcessStageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/FPSDataFeedGetProcessStage", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FPSDataFeedGetProcessStage(ByRef errMessage As String, ByVal dtProcessDate As Date) As Integer
            Dim results() As Object = Me.Invoke("FPSDataFeedGetProcessStage", New Object() {errMessage, dtProcessDate})
            errMessage = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FPSDataFeedGetProcessStageAsync(ByVal errMessage As String, ByVal dtProcessDate As Date)
            Me.FPSDataFeedGetProcessStageAsync(errMessage, dtProcessDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FPSDataFeedGetProcessStageAsync(ByVal errMessage As String, ByVal dtProcessDate As Date, ByVal userState As Object)
            If (Me.FPSDataFeedGetProcessStageOperationCompleted Is Nothing) Then
                Me.FPSDataFeedGetProcessStageOperationCompleted = AddressOf Me.OnFPSDataFeedGetProcessStageOperationCompleted
            End If
            Me.InvokeAsync("FPSDataFeedGetProcessStage", New Object() {errMessage, dtProcessDate}, Me.FPSDataFeedGetProcessStageOperationCompleted, userState)
        End Sub
        
        Private Sub OnFPSDataFeedGetProcessStageOperationCompleted(ByVal arg As Object)
            If (Not (Me.FPSDataFeedGetProcessStageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FPSDataFeedGetProcessStageCompleted(Me, New FPSDataFeedGetProcessStageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/FPSDataFeedProcess", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FPSDataFeedProcess(ByVal locatFileName As String, ByRef errMessage As String, ByVal dtProcessDate As Date) As Boolean
            Dim results() As Object = Me.Invoke("FPSDataFeedProcess", New Object() {locatFileName, errMessage, dtProcessDate})
            errMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FPSDataFeedProcessAsync(ByVal locatFileName As String, ByVal errMessage As String, ByVal dtProcessDate As Date)
            Me.FPSDataFeedProcessAsync(locatFileName, errMessage, dtProcessDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FPSDataFeedProcessAsync(ByVal locatFileName As String, ByVal errMessage As String, ByVal dtProcessDate As Date, ByVal userState As Object)
            If (Me.FPSDataFeedProcessOperationCompleted Is Nothing) Then
                Me.FPSDataFeedProcessOperationCompleted = AddressOf Me.OnFPSDataFeedProcessOperationCompleted
            End If
            Me.InvokeAsync("FPSDataFeedProcess", New Object() {locatFileName, errMessage, dtProcessDate}, Me.FPSDataFeedProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnFPSDataFeedProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.FPSDataFeedProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FPSDataFeedProcessCompleted(Me, New FPSDataFeedProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/AddMessage", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddMessage(ByVal strMsg As String, ByVal strFnName As String) As Boolean
            Dim results() As Object = Me.Invoke("AddMessage", New Object() {strMsg, strFnName})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddMessageAsync(ByVal strMsg As String, ByVal strFnName As String)
            Me.AddMessageAsync(strMsg, strFnName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddMessageAsync(ByVal strMsg As String, ByVal strFnName As String, ByVal userState As Object)
            If (Me.AddMessageOperationCompleted Is Nothing) Then
                Me.AddMessageOperationCompleted = AddressOf Me.OnAddMessageOperationCompleted
            End If
            Me.InvokeAsync("AddMessage", New Object() {strMsg, strFnName}, Me.AddMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddMessageCompleted(Me, New AddMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/FPSFINReportProcess", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FPSFINReportProcess(ByVal channel As Integer, ByRef errMessage As String, ByVal dtProcessDate As Date) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("FPSFINReportProcess", New Object() {channel, errMessage, dtProcessDate})
            errMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FPSFINReportProcessAsync(ByVal channel As Integer, ByVal errMessage As String, ByVal dtProcessDate As Date)
            Me.FPSFINReportProcessAsync(channel, errMessage, dtProcessDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FPSFINReportProcessAsync(ByVal channel As Integer, ByVal errMessage As String, ByVal dtProcessDate As Date, ByVal userState As Object)
            If (Me.FPSFINReportProcessOperationCompleted Is Nothing) Then
                Me.FPSFINReportProcessOperationCompleted = AddressOf Me.OnFPSFINReportProcessOperationCompleted
            End If
            Me.InvokeAsync("FPSFINReportProcess", New Object() {channel, errMessage, dtProcessDate}, Me.FPSFINReportProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnFPSFINReportProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.FPSFINReportProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FPSFINReportProcessCompleted(Me, New FPSFINReportProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetFPSPaymentSettlement", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFPSPaymentSettlement(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetFPSPaymentSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFPSPaymentSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.GetFPSPaymentSettlementAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFPSPaymentSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetFPSPaymentSettlementOperationCompleted Is Nothing) Then
                Me.GetFPSPaymentSettlementOperationCompleted = AddressOf Me.OnGetFPSPaymentSettlementOperationCompleted
            End If
            Me.InvokeAsync("GetFPSPaymentSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.GetFPSPaymentSettlementOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFPSPaymentSettlementOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFPSPaymentSettlementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFPSPaymentSettlementCompleted(Me, New GetFPSPaymentSettlementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetFPSPaymentReject", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFPSPaymentReject(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetFPSPaymentReject", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFPSPaymentRejectAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.GetFPSPaymentRejectAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFPSPaymentRejectAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetFPSPaymentRejectOperationCompleted Is Nothing) Then
                Me.GetFPSPaymentRejectOperationCompleted = AddressOf Me.OnGetFPSPaymentRejectOperationCompleted
            End If
            Me.InvokeAsync("GetFPSPaymentReject", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.GetFPSPaymentRejectOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFPSPaymentRejectOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFPSPaymentRejectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFPSPaymentRejectCompleted(Me, New GetFPSPaymentRejectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetPrintFPSPaymentReverse", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPrintFPSPaymentReverse(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetPrintFPSPaymentReverse", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPrintFPSPaymentReverseAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.GetPrintFPSPaymentReverseAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPrintFPSPaymentReverseAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetPrintFPSPaymentReverseOperationCompleted Is Nothing) Then
                Me.GetPrintFPSPaymentReverseOperationCompleted = AddressOf Me.OnGetPrintFPSPaymentReverseOperationCompleted
            End If
            Me.InvokeAsync("GetPrintFPSPaymentReverse", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.GetPrintFPSPaymentReverseOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPrintFPSPaymentReverseOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPrintFPSPaymentReverseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPrintFPSPaymentReverseCompleted(Me, New GetPrintFPSPaymentReverseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimsAuditTrailData", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimsAuditTrailData(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strClaimNo As String, ByVal strPolicyNo As String, ByVal strInsuredName As String, ByVal strPolicyHolderName As String, ByVal AuditEventName As String, ByVal strUserID As String, ByRef strRtnMsg As String, ByRef strWherePhase As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetClaimsAuditTrailData", New Object() {dtStartDate, dtEndDate, strClaimNo, strPolicyNo, strInsuredName, strPolicyHolderName, AuditEventName, strUserID, strRtnMsg, strWherePhase})
            strRtnMsg = CType(results(1),String)
            strWherePhase = CType(results(2),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimsAuditTrailDataAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strClaimNo As String, ByVal strPolicyNo As String, ByVal strInsuredName As String, ByVal strPolicyHolderName As String, ByVal AuditEventName As String, ByVal strUserID As String, ByVal strRtnMsg As String, ByVal strWherePhase As String)
            Me.GetClaimsAuditTrailDataAsync(dtStartDate, dtEndDate, strClaimNo, strPolicyNo, strInsuredName, strPolicyHolderName, AuditEventName, strUserID, strRtnMsg, strWherePhase, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimsAuditTrailDataAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strClaimNo As String, ByVal strPolicyNo As String, ByVal strInsuredName As String, ByVal strPolicyHolderName As String, ByVal AuditEventName As String, ByVal strUserID As String, ByVal strRtnMsg As String, ByVal strWherePhase As String, ByVal userState As Object)
            If (Me.GetClaimsAuditTrailDataOperationCompleted Is Nothing) Then
                Me.GetClaimsAuditTrailDataOperationCompleted = AddressOf Me.OnGetClaimsAuditTrailDataOperationCompleted
            End If
            Me.InvokeAsync("GetClaimsAuditTrailData", New Object() {dtStartDate, dtEndDate, strClaimNo, strPolicyNo, strInsuredName, strPolicyHolderName, AuditEventName, strUserID, strRtnMsg, strWherePhase}, Me.GetClaimsAuditTrailDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimsAuditTrailDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimsAuditTrailDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimsAuditTrailDataCompleted(Me, New GetClaimsAuditTrailDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/SaveAuditTrail", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveAuditTrail(ByVal parameters As McsClsAuditTrail) As Boolean
            Dim results() As Object = Me.Invoke("SaveAuditTrail", New Object() {parameters})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveAuditTrailAsync(ByVal parameters As McsClsAuditTrail)
            Me.SaveAuditTrailAsync(parameters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveAuditTrailAsync(ByVal parameters As McsClsAuditTrail, ByVal userState As Object)
            If (Me.SaveAuditTrailOperationCompleted Is Nothing) Then
                Me.SaveAuditTrailOperationCompleted = AddressOf Me.OnSaveAuditTrailOperationCompleted
            End If
            Me.InvokeAsync("SaveAuditTrail", New Object() {parameters}, Me.SaveAuditTrailOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveAuditTrailOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveAuditTrailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveAuditTrailCompleted(Me, New SaveAuditTrailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/PrintClaimsAuditTrailReport", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintClaimsAuditTrailReport(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strClaimNo As String, ByVal strPolicyNo As String, ByVal strInsuredName As String, ByVal strPolicyHolderName As String, ByVal AuditEventName As String, ByVal strUserID As String, ByRef strRtnMsg As String, ByRef strWherePhase As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("PrintClaimsAuditTrailReport", New Object() {dtStartDate, dtEndDate, strClaimNo, strPolicyNo, strInsuredName, strPolicyHolderName, AuditEventName, strUserID, strRtnMsg, strWherePhase})
            strRtnMsg = CType(results(1),String)
            strWherePhase = CType(results(2),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintClaimsAuditTrailReportAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strClaimNo As String, ByVal strPolicyNo As String, ByVal strInsuredName As String, ByVal strPolicyHolderName As String, ByVal AuditEventName As String, ByVal strUserID As String, ByVal strRtnMsg As String, ByVal strWherePhase As String)
            Me.PrintClaimsAuditTrailReportAsync(dtStartDate, dtEndDate, strClaimNo, strPolicyNo, strInsuredName, strPolicyHolderName, AuditEventName, strUserID, strRtnMsg, strWherePhase, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintClaimsAuditTrailReportAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strClaimNo As String, ByVal strPolicyNo As String, ByVal strInsuredName As String, ByVal strPolicyHolderName As String, ByVal AuditEventName As String, ByVal strUserID As String, ByVal strRtnMsg As String, ByVal strWherePhase As String, ByVal userState As Object)
            If (Me.PrintClaimsAuditTrailReportOperationCompleted Is Nothing) Then
                Me.PrintClaimsAuditTrailReportOperationCompleted = AddressOf Me.OnPrintClaimsAuditTrailReportOperationCompleted
            End If
            Me.InvokeAsync("PrintClaimsAuditTrailReport", New Object() {dtStartDate, dtEndDate, strClaimNo, strPolicyNo, strInsuredName, strPolicyHolderName, AuditEventName, strUserID, strRtnMsg, strWherePhase}, Me.PrintClaimsAuditTrailReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintClaimsAuditTrailReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintClaimsAuditTrailReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintClaimsAuditTrailReportCompleted(Me, New PrintClaimsAuditTrailReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetAuditClaimReport", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAuditClaimReport(ByRef strMessage As String, ByRef dsReturn As System.Data.DataSet, ByVal strType As String, ByVal strCategory As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAuditClaimReport", New Object() {strMessage, dsReturn, strType, strCategory})
            strMessage = CType(results(1),String)
            dsReturn = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAuditClaimReportAsync(ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal strType As String, ByVal strCategory As String)
            Me.GetAuditClaimReportAsync(strMessage, dsReturn, strType, strCategory, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAuditClaimReportAsync(ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal strType As String, ByVal strCategory As String, ByVal userState As Object)
            If (Me.GetAuditClaimReportOperationCompleted Is Nothing) Then
                Me.GetAuditClaimReportOperationCompleted = AddressOf Me.OnGetAuditClaimReportOperationCompleted
            End If
            Me.InvokeAsync("GetAuditClaimReport", New Object() {strMessage, dsReturn, strType, strCategory}, Me.GetAuditClaimReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAuditClaimReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAuditClaimReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAuditClaimReportCompleted(Me, New GetAuditClaimReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetAuditEventName", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAuditEventName(ByRef strMessage As String, ByRef dsReturn As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("GetAuditEventName", New Object() {strMessage, dsReturn})
            strMessage = CType(results(1),String)
            dsReturn = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAuditEventNameAsync(ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet)
            Me.GetAuditEventNameAsync(strMessage, dsReturn, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAuditEventNameAsync(ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal userState As Object)
            If (Me.GetAuditEventNameOperationCompleted Is Nothing) Then
                Me.GetAuditEventNameOperationCompleted = AddressOf Me.OnGetAuditEventNameOperationCompleted
            End If
            Me.InvokeAsync("GetAuditEventName", New Object() {strMessage, dsReturn}, Me.GetAuditEventNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAuditEventNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAuditEventNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAuditEventNameCompleted(Me, New GetAuditEventNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/NeedRefreshClaimPolicyInfo", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NeedRefreshClaimPolicyInfo(ByRef dtClaimNoList As System.Data.DataTable, ByRef strMessage As String) As Integer
            Dim results() As Object = Me.Invoke("NeedRefreshClaimPolicyInfo", New Object() {dtClaimNoList, strMessage})
            dtClaimNoList = CType(results(1),System.Data.DataTable)
            strMessage = CType(results(2),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NeedRefreshClaimPolicyInfoAsync(ByVal dtClaimNoList As System.Data.DataTable, ByVal strMessage As String)
            Me.NeedRefreshClaimPolicyInfoAsync(dtClaimNoList, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NeedRefreshClaimPolicyInfoAsync(ByVal dtClaimNoList As System.Data.DataTable, ByVal strMessage As String, ByVal userState As Object)
            If (Me.NeedRefreshClaimPolicyInfoOperationCompleted Is Nothing) Then
                Me.NeedRefreshClaimPolicyInfoOperationCompleted = AddressOf Me.OnNeedRefreshClaimPolicyInfoOperationCompleted
            End If
            Me.InvokeAsync("NeedRefreshClaimPolicyInfo", New Object() {dtClaimNoList, strMessage}, Me.NeedRefreshClaimPolicyInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnNeedRefreshClaimPolicyInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.NeedRefreshClaimPolicyInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NeedRefreshClaimPolicyInfoCompleted(Me, New NeedRefreshClaimPolicyInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/CapConvSpecialHandle", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CapConvSpecialHandle(ByVal strSysName As String, ByVal strUser As String, ByVal dtClaimNoList As System.Data.DataTable, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("CapConvSpecialHandle", New Object() {strSysName, strUser, dtClaimNoList, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CapConvSpecialHandleAsync(ByVal strSysName As String, ByVal strUser As String, ByVal dtClaimNoList As System.Data.DataTable, ByVal strMessage As String)
            Me.CapConvSpecialHandleAsync(strSysName, strUser, dtClaimNoList, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CapConvSpecialHandleAsync(ByVal strSysName As String, ByVal strUser As String, ByVal dtClaimNoList As System.Data.DataTable, ByVal strMessage As String, ByVal userState As Object)
            If (Me.CapConvSpecialHandleOperationCompleted Is Nothing) Then
                Me.CapConvSpecialHandleOperationCompleted = AddressOf Me.OnCapConvSpecialHandleOperationCompleted
            End If
            Me.InvokeAsync("CapConvSpecialHandle", New Object() {strSysName, strUser, dtClaimNoList, strMessage}, Me.CapConvSpecialHandleOperationCompleted, userState)
        End Sub
        
        Private Sub OnCapConvSpecialHandleOperationCompleted(ByVal arg As Object)
            If (Not (Me.CapConvSpecialHandleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CapConvSpecialHandleCompleted(Me, New CapConvSpecialHandleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/IsCapsilConvertPolicy", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsCapsilConvertPolicy(ByVal strPolicyNo As String, ByRef strErr As String, ByVal sSysCateOfPolicy As String) As Boolean
            Dim results() As Object = Me.Invoke("IsCapsilConvertPolicy", New Object() {strPolicyNo, strErr, sSysCateOfPolicy})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsCapsilConvertPolicyAsync(ByVal strPolicyNo As String, ByVal strErr As String, ByVal sSysCateOfPolicy As String)
            Me.IsCapsilConvertPolicyAsync(strPolicyNo, strErr, sSysCateOfPolicy, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsCapsilConvertPolicyAsync(ByVal strPolicyNo As String, ByVal strErr As String, ByVal sSysCateOfPolicy As String, ByVal userState As Object)
            If (Me.IsCapsilConvertPolicyOperationCompleted Is Nothing) Then
                Me.IsCapsilConvertPolicyOperationCompleted = AddressOf Me.OnIsCapsilConvertPolicyOperationCompleted
            End If
            Me.InvokeAsync("IsCapsilConvertPolicy", New Object() {strPolicyNo, strErr, sSysCateOfPolicy}, Me.IsCapsilConvertPolicyOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsCapsilConvertPolicyOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsCapsilConvertPolicyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsCapsilConvertPolicyCompleted(Me, New IsCapsilConvertPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimPolicyNMappingCAPPOL", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimPolicyNMappingCAPPOL(ByRef strMessage As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetClaimPolicyNMappingCAPPOL", New Object() {strMessage, lngClaimNo, lngOccurNo})
            strMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimPolicyNMappingCAPPOLAsync(ByVal strMessage As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long)
            Me.GetClaimPolicyNMappingCAPPOLAsync(strMessage, lngClaimNo, lngOccurNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimPolicyNMappingCAPPOLAsync(ByVal strMessage As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal userState As Object)
            If (Me.GetClaimPolicyNMappingCAPPOLOperationCompleted Is Nothing) Then
                Me.GetClaimPolicyNMappingCAPPOLOperationCompleted = AddressOf Me.OnGetClaimPolicyNMappingCAPPOLOperationCompleted
            End If
            Me.InvokeAsync("GetClaimPolicyNMappingCAPPOL", New Object() {strMessage, lngClaimNo, lngOccurNo}, Me.GetClaimPolicyNMappingCAPPOLOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimPolicyNMappingCAPPOLOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimPolicyNMappingCAPPOLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimPolicyNMappingCAPPOLCompleted(Me, New GetClaimPolicyNMappingCAPPOLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/CheckPolicyDateValueNStatus", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckPolicyDateValueNStatus(ByVal sClaimNo As String, ByVal sOccur As String, ByVal datHospitalOutDate As Date, ByVal datAccidentDate As Date, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckPolicyDateValueNStatus", New Object() {sClaimNo, sOccur, datHospitalOutDate, datAccidentDate, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckPolicyDateValueNStatusAsync(ByVal sClaimNo As String, ByVal sOccur As String, ByVal datHospitalOutDate As Date, ByVal datAccidentDate As Date, ByVal strErr As String)
            Me.CheckPolicyDateValueNStatusAsync(sClaimNo, sOccur, datHospitalOutDate, datAccidentDate, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckPolicyDateValueNStatusAsync(ByVal sClaimNo As String, ByVal sOccur As String, ByVal datHospitalOutDate As Date, ByVal datAccidentDate As Date, ByVal strErr As String, ByVal userState As Object)
            If (Me.CheckPolicyDateValueNStatusOperationCompleted Is Nothing) Then
                Me.CheckPolicyDateValueNStatusOperationCompleted = AddressOf Me.OnCheckPolicyDateValueNStatusOperationCompleted
            End If
            Me.InvokeAsync("CheckPolicyDateValueNStatus", New Object() {sClaimNo, sOccur, datHospitalOutDate, datAccidentDate, strErr}, Me.CheckPolicyDateValueNStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckPolicyDateValueNStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckPolicyDateValueNStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckPolicyDateValueNStatusCompleted(Me, New CheckPolicyDateValueNStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetPolicyHistoryForAggregation", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyHistoryForAggregation(ByVal strPolicyNo As String, ByRef dtCalTotalPerBenefit As System.Data.DataTable, ByVal bIsFinalStatus As Boolean, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPolicyHistoryForAggregation", New Object() {strPolicyNo, dtCalTotalPerBenefit, bIsFinalStatus, strMessage})
            dtCalTotalPerBenefit = CType(results(1),System.Data.DataTable)
            strMessage = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyHistoryForAggregationAsync(ByVal strPolicyNo As String, ByVal dtCalTotalPerBenefit As System.Data.DataTable, ByVal bIsFinalStatus As Boolean, ByVal strMessage As String)
            Me.GetPolicyHistoryForAggregationAsync(strPolicyNo, dtCalTotalPerBenefit, bIsFinalStatus, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyHistoryForAggregationAsync(ByVal strPolicyNo As String, ByVal dtCalTotalPerBenefit As System.Data.DataTable, ByVal bIsFinalStatus As Boolean, ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetPolicyHistoryForAggregationOperationCompleted Is Nothing) Then
                Me.GetPolicyHistoryForAggregationOperationCompleted = AddressOf Me.OnGetPolicyHistoryForAggregationOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyHistoryForAggregation", New Object() {strPolicyNo, dtCalTotalPerBenefit, bIsFinalStatus, strMessage}, Me.GetPolicyHistoryForAggregationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyHistoryForAggregationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyHistoryForAggregationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyHistoryForAggregationCompleted(Me, New GetPolicyHistoryForAggregationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetAggregateMaster", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAggregateMaster(ByVal strRuleType As String, ByRef dtAggregateMaster As System.Data.DataTable, ByRef strErrMsg As String, ByVal strClaimNo As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAggregateMaster", New Object() {strRuleType, dtAggregateMaster, strErrMsg, strClaimNo})
            dtAggregateMaster = CType(results(1),System.Data.DataTable)
            strErrMsg = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAggregateMasterAsync(ByVal strRuleType As String, ByVal dtAggregateMaster As System.Data.DataTable, ByVal strErrMsg As String, ByVal strClaimNo As String)
            Me.GetAggregateMasterAsync(strRuleType, dtAggregateMaster, strErrMsg, strClaimNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAggregateMasterAsync(ByVal strRuleType As String, ByVal dtAggregateMaster As System.Data.DataTable, ByVal strErrMsg As String, ByVal strClaimNo As String, ByVal userState As Object)
            If (Me.GetAggregateMasterOperationCompleted Is Nothing) Then
                Me.GetAggregateMasterOperationCompleted = AddressOf Me.OnGetAggregateMasterOperationCompleted
            End If
            Me.InvokeAsync("GetAggregateMaster", New Object() {strRuleType, dtAggregateMaster, strErrMsg, strClaimNo}, Me.GetAggregateMasterOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAggregateMasterOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAggregateMasterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAggregateMasterCompleted(Me, New GetAggregateMasterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetAggregateDetail", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAggregateDetail(ByRef strErrMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetAggregateDetail", New Object() {strErrMsg})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAggregateDetailAsync(ByVal strErrMsg As String)
            Me.GetAggregateDetailAsync(strErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAggregateDetailAsync(ByVal strErrMsg As String, ByVal userState As Object)
            If (Me.GetAggregateDetailOperationCompleted Is Nothing) Then
                Me.GetAggregateDetailOperationCompleted = AddressOf Me.OnGetAggregateDetailOperationCompleted
            End If
            Me.InvokeAsync("GetAggregateDetail", New Object() {strErrMsg}, Me.GetAggregateDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAggregateDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAggregateDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAggregateDetailCompleted(Me, New GetAggregateDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetBenefitValidateRelate", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBenefitValidateRelate(ByRef dtBenefitValidateRelate As System.Data.DataTable, ByRef strErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("GetBenefitValidateRelate", New Object() {dtBenefitValidateRelate, strErrMsg})
            dtBenefitValidateRelate = CType(results(1),System.Data.DataTable)
            strErrMsg = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBenefitValidateRelateAsync(ByVal dtBenefitValidateRelate As System.Data.DataTable, ByVal strErrMsg As String)
            Me.GetBenefitValidateRelateAsync(dtBenefitValidateRelate, strErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBenefitValidateRelateAsync(ByVal dtBenefitValidateRelate As System.Data.DataTable, ByVal strErrMsg As String, ByVal userState As Object)
            If (Me.GetBenefitValidateRelateOperationCompleted Is Nothing) Then
                Me.GetBenefitValidateRelateOperationCompleted = AddressOf Me.OnGetBenefitValidateRelateOperationCompleted
            End If
            Me.InvokeAsync("GetBenefitValidateRelate", New Object() {dtBenefitValidateRelate, strErrMsg}, Me.GetBenefitValidateRelateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBenefitValidateRelateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBenefitValidateRelateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBenefitValidateRelateCompleted(Me, New GetBenefitValidateRelateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetBenefitRelate", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBenefitRelate(ByRef dtBenefitRelate As System.Data.DataTable, ByRef strErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("GetBenefitRelate", New Object() {dtBenefitRelate, strErrMsg})
            dtBenefitRelate = CType(results(1),System.Data.DataTable)
            strErrMsg = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBenefitRelateAsync(ByVal dtBenefitRelate As System.Data.DataTable, ByVal strErrMsg As String)
            Me.GetBenefitRelateAsync(dtBenefitRelate, strErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBenefitRelateAsync(ByVal dtBenefitRelate As System.Data.DataTable, ByVal strErrMsg As String, ByVal userState As Object)
            If (Me.GetBenefitRelateOperationCompleted Is Nothing) Then
                Me.GetBenefitRelateOperationCompleted = AddressOf Me.OnGetBenefitRelateOperationCompleted
            End If
            Me.InvokeAsync("GetBenefitRelate", New Object() {dtBenefitRelate, strErrMsg}, Me.GetBenefitRelateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBenefitRelateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBenefitRelateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBenefitRelateCompleted(Me, New GetBenefitRelateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UpdateClaimPayment", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateClaimPayment(ByVal strSysName As String, ByRef strMessage As String, ByRef dsPayment As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngClaimOccu As Long, ByVal strUser As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateClaimPayment", New Object() {strSysName, strMessage, dsPayment, lngClaimNo, lngClaimOccu, strUser})
            strMessage = CType(results(1),String)
            dsPayment = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateClaimPaymentAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsPayment As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngClaimOccu As Long, ByVal strUser As String)
            Me.UpdateClaimPaymentAsync(strSysName, strMessage, dsPayment, lngClaimNo, lngClaimOccu, strUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateClaimPaymentAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsPayment As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngClaimOccu As Long, ByVal strUser As String, ByVal userState As Object)
            If (Me.UpdateClaimPaymentOperationCompleted Is Nothing) Then
                Me.UpdateClaimPaymentOperationCompleted = AddressOf Me.OnUpdateClaimPaymentOperationCompleted
            End If
            Me.InvokeAsync("UpdateClaimPayment", New Object() {strSysName, strMessage, dsPayment, lngClaimNo, lngClaimOccu, strUser}, Me.UpdateClaimPaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateClaimPaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateClaimPaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateClaimPaymentCompleted(Me, New UpdateClaimPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetRCSRegister", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRCSRegister(ByVal strClaimType As String, ByVal lngClaim As Long, ByVal lngClaimOccur As Long, ByRef strMessage As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetRCSRegister", New Object() {strClaimType, lngClaim, lngClaimOccur, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRCSRegisterAsync(ByVal strClaimType As String, ByVal lngClaim As Long, ByVal lngClaimOccur As Long, ByVal strMessage As String)
            Me.GetRCSRegisterAsync(strClaimType, lngClaim, lngClaimOccur, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRCSRegisterAsync(ByVal strClaimType As String, ByVal lngClaim As Long, ByVal lngClaimOccur As Long, ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetRCSRegisterOperationCompleted Is Nothing) Then
                Me.GetRCSRegisterOperationCompleted = AddressOf Me.OnGetRCSRegisterOperationCompleted
            End If
            Me.InvokeAsync("GetRCSRegister", New Object() {strClaimType, lngClaim, lngClaimOccur, strMessage}, Me.GetRCSRegisterOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRCSRegisterOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRCSRegisterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRCSRegisterCompleted(Me, New GetRCSRegisterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/RCSClaimRegister", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RCSClaimRegister(ByVal dsRCSClaim As System.Data.DataSet, ByRef dsErrRs As System.Data.DataSet, ByRef dsLogRs As System.Data.DataSet, ByRef claimNo As Long, ByRef claimOccur As Long, ByRef clmStatus As String, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("RCSClaimRegister", New Object() {dsRCSClaim, dsErrRs, dsLogRs, claimNo, claimOccur, clmStatus, strMessage})
            dsErrRs = CType(results(1),System.Data.DataSet)
            dsLogRs = CType(results(2),System.Data.DataSet)
            claimNo = CType(results(3),Long)
            claimOccur = CType(results(4),Long)
            clmStatus = CType(results(5),String)
            strMessage = CType(results(6),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RCSClaimRegisterAsync(ByVal dsRCSClaim As System.Data.DataSet, ByVal dsErrRs As System.Data.DataSet, ByVal dsLogRs As System.Data.DataSet, ByVal claimNo As Long, ByVal claimOccur As Long, ByVal clmStatus As String, ByVal strMessage As String)
            Me.RCSClaimRegisterAsync(dsRCSClaim, dsErrRs, dsLogRs, claimNo, claimOccur, clmStatus, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RCSClaimRegisterAsync(ByVal dsRCSClaim As System.Data.DataSet, ByVal dsErrRs As System.Data.DataSet, ByVal dsLogRs As System.Data.DataSet, ByVal claimNo As Long, ByVal claimOccur As Long, ByVal clmStatus As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.RCSClaimRegisterOperationCompleted Is Nothing) Then
                Me.RCSClaimRegisterOperationCompleted = AddressOf Me.OnRCSClaimRegisterOperationCompleted
            End If
            Me.InvokeAsync("RCSClaimRegister", New Object() {dsRCSClaim, dsErrRs, dsLogRs, claimNo, claimOccur, clmStatus, strMessage}, Me.RCSClaimRegisterOperationCompleted, userState)
        End Sub
        
        Private Sub OnRCSClaimRegisterOperationCompleted(ByVal arg As Object)
            If (Not (Me.RCSClaimRegisterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RCSClaimRegisterCompleted(Me, New RCSClaimRegisterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetTranExclusion", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTranExclusion(ByVal dsPolicy As System.Data.DataSet, ByRef dsErrRs As System.Data.DataSet, ByRef dsLogRs As System.Data.DataSet, ByRef strMessage As String, ByRef dtTransation As System.Data.DataTable, ByRef dtSpecialExclusion As System.Data.DataTable) As Boolean
            Dim results() As Object = Me.Invoke("GetTranExclusion", New Object() {dsPolicy, dsErrRs, dsLogRs, strMessage, dtTransation, dtSpecialExclusion})
            dsErrRs = CType(results(1),System.Data.DataSet)
            dsLogRs = CType(results(2),System.Data.DataSet)
            strMessage = CType(results(3),String)
            dtTransation = CType(results(4),System.Data.DataTable)
            dtSpecialExclusion = CType(results(5),System.Data.DataTable)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTranExclusionAsync(ByVal dsPolicy As System.Data.DataSet, ByVal dsErrRs As System.Data.DataSet, ByVal dsLogRs As System.Data.DataSet, ByVal strMessage As String, ByVal dtTransation As System.Data.DataTable, ByVal dtSpecialExclusion As System.Data.DataTable)
            Me.GetTranExclusionAsync(dsPolicy, dsErrRs, dsLogRs, strMessage, dtTransation, dtSpecialExclusion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTranExclusionAsync(ByVal dsPolicy As System.Data.DataSet, ByVal dsErrRs As System.Data.DataSet, ByVal dsLogRs As System.Data.DataSet, ByVal strMessage As String, ByVal dtTransation As System.Data.DataTable, ByVal dtSpecialExclusion As System.Data.DataTable, ByVal userState As Object)
            If (Me.GetTranExclusionOperationCompleted Is Nothing) Then
                Me.GetTranExclusionOperationCompleted = AddressOf Me.OnGetTranExclusionOperationCompleted
            End If
            Me.InvokeAsync("GetTranExclusion", New Object() {dsPolicy, dsErrRs, dsLogRs, strMessage, dtTransation, dtSpecialExclusion}, Me.GetTranExclusionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTranExclusionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTranExclusionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTranExclusionCompleted(Me, New GetTranExclusionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/RCSClaimApproval", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RCSClaimApproval(ByVal dsRCSClaim As System.Data.DataSet, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("RCSClaimApproval", New Object() {dsRCSClaim, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RCSClaimApprovalAsync(ByVal dsRCSClaim As System.Data.DataSet, ByVal strMessage As String)
            Me.RCSClaimApprovalAsync(dsRCSClaim, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RCSClaimApprovalAsync(ByVal dsRCSClaim As System.Data.DataSet, ByVal strMessage As String, ByVal userState As Object)
            If (Me.RCSClaimApprovalOperationCompleted Is Nothing) Then
                Me.RCSClaimApprovalOperationCompleted = AddressOf Me.OnRCSClaimApprovalOperationCompleted
            End If
            Me.InvokeAsync("RCSClaimApproval", New Object() {dsRCSClaim, strMessage}, Me.RCSClaimApprovalOperationCompleted, userState)
        End Sub
        
        Private Sub OnRCSClaimApprovalOperationCompleted(ByVal arg As Object)
            If (Not (Me.RCSClaimApprovalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RCSClaimApprovalCompleted(Me, New RCSClaimApprovalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/RcsGenSettlementLetter", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RcsGenSettlementLetter(ByVal claimNo As String, ByVal claimOccur As String, ByVal paymentMethod As String, ByRef returnMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("RcsGenSettlementLetter", New Object() {claimNo, claimOccur, paymentMethod, returnMessage})
            returnMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RcsGenSettlementLetterAsync(ByVal claimNo As String, ByVal claimOccur As String, ByVal paymentMethod As String, ByVal returnMessage As String)
            Me.RcsGenSettlementLetterAsync(claimNo, claimOccur, paymentMethod, returnMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RcsGenSettlementLetterAsync(ByVal claimNo As String, ByVal claimOccur As String, ByVal paymentMethod As String, ByVal returnMessage As String, ByVal userState As Object)
            If (Me.RcsGenSettlementLetterOperationCompleted Is Nothing) Then
                Me.RcsGenSettlementLetterOperationCompleted = AddressOf Me.OnRcsGenSettlementLetterOperationCompleted
            End If
            Me.InvokeAsync("RcsGenSettlementLetter", New Object() {claimNo, claimOccur, paymentMethod, returnMessage}, Me.RcsGenSettlementLetterOperationCompleted, userState)
        End Sub
        
        Private Sub OnRcsGenSettlementLetterOperationCompleted(ByVal arg As Object)
            If (Not (Me.RcsGenSettlementLetterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RcsGenSettlementLetterCompleted(Me, New RcsGenSettlementLetterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/RCSClaimReversal", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RCSClaimReversal(ByVal claimNo As Long, ByVal claimOccur As Long, ByVal updateBy As String, ByRef returnMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("RCSClaimReversal", New Object() {claimNo, claimOccur, updateBy, returnMessage})
            returnMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RCSClaimReversalAsync(ByVal claimNo As Long, ByVal claimOccur As Long, ByVal updateBy As String, ByVal returnMessage As String)
            Me.RCSClaimReversalAsync(claimNo, claimOccur, updateBy, returnMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RCSClaimReversalAsync(ByVal claimNo As Long, ByVal claimOccur As Long, ByVal updateBy As String, ByVal returnMessage As String, ByVal userState As Object)
            If (Me.RCSClaimReversalOperationCompleted Is Nothing) Then
                Me.RCSClaimReversalOperationCompleted = AddressOf Me.OnRCSClaimReversalOperationCompleted
            End If
            Me.InvokeAsync("RCSClaimReversal", New Object() {claimNo, claimOccur, updateBy, returnMessage}, Me.RCSClaimReversalOperationCompleted, userState)
        End Sub
        
        Private Sub OnRCSClaimReversalOperationCompleted(ByVal arg As Object)
            If (Not (Me.RCSClaimReversalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RCSClaimReversalCompleted(Me, New RCSClaimReversalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetMcsDeclineEmailItems", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMcsDeclineEmailItems(ByVal startDate As Date, ByVal endDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMcsDeclineEmailItems", New Object() {startDate, endDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMcsDeclineEmailItemsAsync(ByVal startDate As Date, ByVal endDate As Date)
            Me.GetMcsDeclineEmailItemsAsync(startDate, endDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMcsDeclineEmailItemsAsync(ByVal startDate As Date, ByVal endDate As Date, ByVal userState As Object)
            If (Me.GetMcsDeclineEmailItemsOperationCompleted Is Nothing) Then
                Me.GetMcsDeclineEmailItemsOperationCompleted = AddressOf Me.OnGetMcsDeclineEmailItemsOperationCompleted
            End If
            Me.InvokeAsync("GetMcsDeclineEmailItems", New Object() {startDate, endDate}, Me.GetMcsDeclineEmailItemsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMcsDeclineEmailItemsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMcsDeclineEmailItemsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMcsDeclineEmailItemsCompleted(Me, New GetMcsDeclineEmailItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/AddMcsDeclineEmailLog", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddMcsDeclineEmailLog(ByVal claimNo As String, ByVal claimOccur As String, ByVal settledDate As Date, ByVal policyNo As String, ByVal agentCode As String, ByVal agentEmail As String, ByVal customerId As Integer, ByVal customerEmail As String, ByVal insuredName As String, ByVal emailToAgentStatus As String, ByVal emailToCustomerStatus As String, ByVal emailRemark As String) As Boolean
            Dim results() As Object = Me.Invoke("AddMcsDeclineEmailLog", New Object() {claimNo, claimOccur, settledDate, policyNo, agentCode, agentEmail, customerId, customerEmail, insuredName, emailToAgentStatus, emailToCustomerStatus, emailRemark})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddMcsDeclineEmailLogAsync(ByVal claimNo As String, ByVal claimOccur As String, ByVal settledDate As Date, ByVal policyNo As String, ByVal agentCode As String, ByVal agentEmail As String, ByVal customerId As Integer, ByVal customerEmail As String, ByVal insuredName As String, ByVal emailToAgentStatus As String, ByVal emailToCustomerStatus As String, ByVal emailRemark As String)
            Me.AddMcsDeclineEmailLogAsync(claimNo, claimOccur, settledDate, policyNo, agentCode, agentEmail, customerId, customerEmail, insuredName, emailToAgentStatus, emailToCustomerStatus, emailRemark, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddMcsDeclineEmailLogAsync(ByVal claimNo As String, ByVal claimOccur As String, ByVal settledDate As Date, ByVal policyNo As String, ByVal agentCode As String, ByVal agentEmail As String, ByVal customerId As Integer, ByVal customerEmail As String, ByVal insuredName As String, ByVal emailToAgentStatus As String, ByVal emailToCustomerStatus As String, ByVal emailRemark As String, ByVal userState As Object)
            If (Me.AddMcsDeclineEmailLogOperationCompleted Is Nothing) Then
                Me.AddMcsDeclineEmailLogOperationCompleted = AddressOf Me.OnAddMcsDeclineEmailLogOperationCompleted
            End If
            Me.InvokeAsync("AddMcsDeclineEmailLog", New Object() {claimNo, claimOccur, settledDate, policyNo, agentCode, agentEmail, customerId, customerEmail, insuredName, emailToAgentStatus, emailToCustomerStatus, emailRemark}, Me.AddMcsDeclineEmailLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddMcsDeclineEmailLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddMcsDeclineEmailLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddMcsDeclineEmailLogCompleted(Me, New AddMcsDeclineEmailLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/IsValidCondition", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsValidCondition(ByVal strGroupID As String, ByVal dsFieldValue As System.Data.DataSet, ByRef strRtnMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("IsValidCondition", New Object() {strGroupID, dsFieldValue, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsValidConditionAsync(ByVal strGroupID As String, ByVal dsFieldValue As System.Data.DataSet, ByVal strRtnMsg As String)
            Me.IsValidConditionAsync(strGroupID, dsFieldValue, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsValidConditionAsync(ByVal strGroupID As String, ByVal dsFieldValue As System.Data.DataSet, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.IsValidConditionOperationCompleted Is Nothing) Then
                Me.IsValidConditionOperationCompleted = AddressOf Me.OnIsValidConditionOperationCompleted
            End If
            Me.InvokeAsync("IsValidCondition", New Object() {strGroupID, dsFieldValue, strRtnMsg}, Me.IsValidConditionOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsValidConditionOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsValidConditionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsValidConditionCompleted(Me, New IsValidConditionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetACFBatchID", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetACFBatchID(ByVal sysDate As String, ByVal sys As String, ByRef dtBatch As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetACFBatchID", New Object() {sysDate, sys, dtBatch, strErr})
            dtBatch = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetACFBatchIDAsync(ByVal sysDate As String, ByVal sys As String, ByVal dtBatch As System.Data.DataTable, ByVal strErr As String)
            Me.GetACFBatchIDAsync(sysDate, sys, dtBatch, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetACFBatchIDAsync(ByVal sysDate As String, ByVal sys As String, ByVal dtBatch As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetACFBatchIDOperationCompleted Is Nothing) Then
                Me.GetACFBatchIDOperationCompleted = AddressOf Me.OnGetACFBatchIDOperationCompleted
            End If
            Me.InvokeAsync("GetACFBatchID", New Object() {sysDate, sys, dtBatch, strErr}, Me.GetACFBatchIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetACFBatchIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetACFBatchIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetACFBatchIDCompleted(Me, New GetACFBatchIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UpdateACFBatchID", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateACFBatchID(ByVal sysDate As String, ByVal sys As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateACFBatchID", New Object() {sysDate, sys, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateACFBatchIDAsync(ByVal sysDate As String, ByVal sys As String, ByVal strErr As String)
            Me.UpdateACFBatchIDAsync(sysDate, sys, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateACFBatchIDAsync(ByVal sysDate As String, ByVal sys As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateACFBatchIDOperationCompleted Is Nothing) Then
                Me.UpdateACFBatchIDOperationCompleted = AddressOf Me.OnUpdateACFBatchIDOperationCompleted
            End If
            Me.InvokeAsync("UpdateACFBatchID", New Object() {sysDate, sys, strErr}, Me.UpdateACFBatchIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateACFBatchIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateACFBatchIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateACFBatchIDCompleted(Me, New UpdateACFBatchIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/RCSBookClaim2BE", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RCSBookClaim2BE(ByRef dsRCSClaim As System.Data.DataSet, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("RCSBookClaim2BE", New Object() {dsRCSClaim, strMessage})
            dsRCSClaim = CType(results(1),System.Data.DataSet)
            strMessage = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RCSBookClaim2BEAsync(ByVal dsRCSClaim As System.Data.DataSet, ByVal strMessage As String)
            Me.RCSBookClaim2BEAsync(dsRCSClaim, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RCSBookClaim2BEAsync(ByVal dsRCSClaim As System.Data.DataSet, ByVal strMessage As String, ByVal userState As Object)
            If (Me.RCSBookClaim2BEOperationCompleted Is Nothing) Then
                Me.RCSBookClaim2BEOperationCompleted = AddressOf Me.OnRCSBookClaim2BEOperationCompleted
            End If
            Me.InvokeAsync("RCSBookClaim2BE", New Object() {dsRCSClaim, strMessage}, Me.RCSBookClaim2BEOperationCompleted, userState)
        End Sub
        
        Private Sub OnRCSBookClaim2BEOperationCompleted(ByVal arg As Object)
            If (Not (Me.RCSBookClaim2BECompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RCSBookClaim2BECompleted(Me, New RCSBookClaim2BECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetFraudPreventionList", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFraudPreventionList(ByRef dsResult As System.Data.DataSet, ByRef strMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFraudPreventionList", New Object() {dsResult, strMsg})
            dsResult = CType(results(1),System.Data.DataSet)
            strMsg = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFraudPreventionListAsync(ByVal dsResult As System.Data.DataSet, ByVal strMsg As String)
            Me.GetFraudPreventionListAsync(dsResult, strMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFraudPreventionListAsync(ByVal dsResult As System.Data.DataSet, ByVal strMsg As String, ByVal userState As Object)
            If (Me.GetFraudPreventionListOperationCompleted Is Nothing) Then
                Me.GetFraudPreventionListOperationCompleted = AddressOf Me.OnGetFraudPreventionListOperationCompleted
            End If
            Me.InvokeAsync("GetFraudPreventionList", New Object() {dsResult, strMsg}, Me.GetFraudPreventionListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFraudPreventionListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFraudPreventionListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFraudPreventionListCompleted(Me, New GetFraudPreventionListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetFraudPreventionInfo", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFraudPreventionInfo(ByVal strPolicyNo As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByRef dsResult As System.Data.DataSet, ByRef strMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("GetFraudPreventionInfo", New Object() {strPolicyNo, strClaimNo, strClaimOccur, dsResult, strMsg})
            dsResult = CType(results(1),System.Data.DataSet)
            strMsg = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFraudPreventionInfoAsync(ByVal strPolicyNo As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal dsResult As System.Data.DataSet, ByVal strMsg As String)
            Me.GetFraudPreventionInfoAsync(strPolicyNo, strClaimNo, strClaimOccur, dsResult, strMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFraudPreventionInfoAsync(ByVal strPolicyNo As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal dsResult As System.Data.DataSet, ByVal strMsg As String, ByVal userState As Object)
            If (Me.GetFraudPreventionInfoOperationCompleted Is Nothing) Then
                Me.GetFraudPreventionInfoOperationCompleted = AddressOf Me.OnGetFraudPreventionInfoOperationCompleted
            End If
            Me.InvokeAsync("GetFraudPreventionInfo", New Object() {strPolicyNo, strClaimNo, strClaimOccur, dsResult, strMsg}, Me.GetFraudPreventionInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFraudPreventionInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFraudPreventionInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFraudPreventionInfoCompleted(Me, New GetFraudPreventionInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/SaveFraudPreventionLog", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveFraudPreventionLog(ByVal ds As System.Data.DataSet, ByRef strMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveFraudPreventionLog", New Object() {ds, strMsg})
            strMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveFraudPreventionLogAsync(ByVal ds As System.Data.DataSet, ByVal strMsg As String)
            Me.SaveFraudPreventionLogAsync(ds, strMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveFraudPreventionLogAsync(ByVal ds As System.Data.DataSet, ByVal strMsg As String, ByVal userState As Object)
            If (Me.SaveFraudPreventionLogOperationCompleted Is Nothing) Then
                Me.SaveFraudPreventionLogOperationCompleted = AddressOf Me.OnSaveFraudPreventionLogOperationCompleted
            End If
            Me.InvokeAsync("SaveFraudPreventionLog", New Object() {ds, strMsg}, Me.SaveFraudPreventionLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveFraudPreventionLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveFraudPreventionLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveFraudPreventionLogCompleted(Me, New SaveFraudPreventionLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UpdateFraudPreventionLog", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateFraudPreventionLog(ByVal strBatchId As String, ByVal strBatchSeqNo As String, ByVal strPolicyNo As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal strUploadPath As String, ByVal strUploadStatus As String, ByRef strMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateFraudPreventionLog", New Object() {strBatchId, strBatchSeqNo, strPolicyNo, strClaimNo, strClaimOccur, strUploadPath, strUploadStatus, strMsg})
            strMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateFraudPreventionLogAsync(ByVal strBatchId As String, ByVal strBatchSeqNo As String, ByVal strPolicyNo As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal strUploadPath As String, ByVal strUploadStatus As String, ByVal strMsg As String)
            Me.UpdateFraudPreventionLogAsync(strBatchId, strBatchSeqNo, strPolicyNo, strClaimNo, strClaimOccur, strUploadPath, strUploadStatus, strMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateFraudPreventionLogAsync(ByVal strBatchId As String, ByVal strBatchSeqNo As String, ByVal strPolicyNo As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal strUploadPath As String, ByVal strUploadStatus As String, ByVal strMsg As String, ByVal userState As Object)
            If (Me.UpdateFraudPreventionLogOperationCompleted Is Nothing) Then
                Me.UpdateFraudPreventionLogOperationCompleted = AddressOf Me.OnUpdateFraudPreventionLogOperationCompleted
            End If
            Me.InvokeAsync("UpdateFraudPreventionLog", New Object() {strBatchId, strBatchSeqNo, strPolicyNo, strClaimNo, strClaimOccur, strUploadPath, strUploadStatus, strMsg}, Me.UpdateFraudPreventionLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateFraudPreventionLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateFraudPreventionLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateFraudPreventionLogCompleted(Me, New UpdateFraudPreventionLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/ReactivatePayment", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReactivatePayment(ByVal strPolicyNo As String, ByVal strClaimType As String, ByVal strInsuredId As String, ByVal dtNewStartDate As Date, ByVal dtNewEndDate As Date, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("ReactivatePayment", New Object() {strPolicyNo, strClaimType, strInsuredId, dtNewStartDate, dtNewEndDate, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReactivatePaymentAsync(ByVal strPolicyNo As String, ByVal strClaimType As String, ByVal strInsuredId As String, ByVal dtNewStartDate As Date, ByVal dtNewEndDate As Date, ByVal strErr As String)
            Me.ReactivatePaymentAsync(strPolicyNo, strClaimType, strInsuredId, dtNewStartDate, dtNewEndDate, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReactivatePaymentAsync(ByVal strPolicyNo As String, ByVal strClaimType As String, ByVal strInsuredId As String, ByVal dtNewStartDate As Date, ByVal dtNewEndDate As Date, ByVal strErr As String, ByVal userState As Object)
            If (Me.ReactivatePaymentOperationCompleted Is Nothing) Then
                Me.ReactivatePaymentOperationCompleted = AddressOf Me.OnReactivatePaymentOperationCompleted
            End If
            Me.InvokeAsync("ReactivatePayment", New Object() {strPolicyNo, strClaimType, strInsuredId, dtNewStartDate, dtNewEndDate, strErr}, Me.ReactivatePaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnReactivatePaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReactivatePaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReactivatePaymentCompleted(Me, New ReactivatePaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UpdateClaimPaidTerm", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateClaimPaidTerm(ByVal strPolicy As String, ByVal effDate As Date, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal gsUser As String, ByRef iTransID As Long, ByVal DeductCharge As Boolean, ByRef dblFundVal As Double, ByRef dsSur As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateClaimPaidTerm", New Object() {strPolicy, effDate, lngClaimNo, lngOccurNo, gsUser, iTransID, DeductCharge, dblFundVal, dsSur, strErr})
            iTransID = CType(results(1),Long)
            dblFundVal = CType(results(2),Double)
            dsSur = CType(results(3),System.Data.DataSet)
            strErr = CType(results(4),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateClaimPaidTermAsync(ByVal strPolicy As String, ByVal effDate As Date, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal gsUser As String, ByVal iTransID As Long, ByVal DeductCharge As Boolean, ByVal dblFundVal As Double, ByVal dsSur As System.Data.DataSet, ByVal strErr As String)
            Me.UpdateClaimPaidTermAsync(strPolicy, effDate, lngClaimNo, lngOccurNo, gsUser, iTransID, DeductCharge, dblFundVal, dsSur, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateClaimPaidTermAsync(ByVal strPolicy As String, ByVal effDate As Date, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal gsUser As String, ByVal iTransID As Long, ByVal DeductCharge As Boolean, ByVal dblFundVal As Double, ByVal dsSur As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateClaimPaidTermOperationCompleted Is Nothing) Then
                Me.UpdateClaimPaidTermOperationCompleted = AddressOf Me.OnUpdateClaimPaidTermOperationCompleted
            End If
            Me.InvokeAsync("UpdateClaimPaidTerm", New Object() {strPolicy, effDate, lngClaimNo, lngOccurNo, gsUser, iTransID, DeductCharge, dblFundVal, dsSur, strErr}, Me.UpdateClaimPaidTermOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateClaimPaidTermOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateClaimPaidTermCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateClaimPaidTermCompleted(Me, New UpdateClaimPaidTermCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimPaidTermDataTable", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimPaidTermDataTable(ByVal sql As String, ByRef dsReceData As System.Data.DataSet, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetClaimPaidTermDataTable", New Object() {sql, dsReceData, strErr})
            dsReceData = CType(results(1),System.Data.DataSet)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimPaidTermDataTableAsync(ByVal sql As String, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String)
            Me.GetClaimPaidTermDataTableAsync(sql, dsReceData, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimPaidTermDataTableAsync(ByVal sql As String, ByVal dsReceData As System.Data.DataSet, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetClaimPaidTermDataTableOperationCompleted Is Nothing) Then
                Me.GetClaimPaidTermDataTableOperationCompleted = AddressOf Me.OnGetClaimPaidTermDataTableOperationCompleted
            End If
            Me.InvokeAsync("GetClaimPaidTermDataTable", New Object() {sql, dsReceData, strErr}, Me.GetClaimPaidTermDataTableOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimPaidTermDataTableOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimPaidTermDataTableCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimPaidTermDataTableCompleted(Me, New GetClaimPaidTermDataTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/CreateClaimPaidTerm", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateClaimPaidTerm(ByVal ds As System.Data.DataSet, ByVal strPolicy As String, ByVal effDate As Date, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByRef iSurrReqTransID As Long, ByRef iValHistTransID As Long, ByVal gsUser As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CreateClaimPaidTerm", New Object() {ds, strPolicy, effDate, lngClaimNo, lngOccurNo, iSurrReqTransID, iValHistTransID, gsUser, strErr})
            iSurrReqTransID = CType(results(1),Long)
            iValHistTransID = CType(results(2),Long)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateClaimPaidTermAsync(ByVal ds As System.Data.DataSet, ByVal strPolicy As String, ByVal effDate As Date, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal iSurrReqTransID As Long, ByVal iValHistTransID As Long, ByVal gsUser As String, ByVal strErr As String)
            Me.CreateClaimPaidTermAsync(ds, strPolicy, effDate, lngClaimNo, lngOccurNo, iSurrReqTransID, iValHistTransID, gsUser, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateClaimPaidTermAsync(ByVal ds As System.Data.DataSet, ByVal strPolicy As String, ByVal effDate As Date, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal iSurrReqTransID As Long, ByVal iValHistTransID As Long, ByVal gsUser As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.CreateClaimPaidTermOperationCompleted Is Nothing) Then
                Me.CreateClaimPaidTermOperationCompleted = AddressOf Me.OnCreateClaimPaidTermOperationCompleted
            End If
            Me.InvokeAsync("CreateClaimPaidTerm", New Object() {ds, strPolicy, effDate, lngClaimNo, lngOccurNo, iSurrReqTransID, iValHistTransID, gsUser, strErr}, Me.CreateClaimPaidTermOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateClaimPaidTermOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateClaimPaidTermCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateClaimPaidTermCompleted(Me, New CreateClaimPaidTermCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UpdateClaimPaidTermStatus", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateClaimPaidTermStatus(ByVal strPolicy As String, ByRef iTransID As Long, ByVal gsUser As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateClaimPaidTermStatus", New Object() {strPolicy, iTransID, gsUser, strErr})
            iTransID = CType(results(1),Long)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateClaimPaidTermStatusAsync(ByVal strPolicy As String, ByVal iTransID As Long, ByVal gsUser As String, ByVal strErr As String)
            Me.UpdateClaimPaidTermStatusAsync(strPolicy, iTransID, gsUser, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateClaimPaidTermStatusAsync(ByVal strPolicy As String, ByVal iTransID As Long, ByVal gsUser As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.UpdateClaimPaidTermStatusOperationCompleted Is Nothing) Then
                Me.UpdateClaimPaidTermStatusOperationCompleted = AddressOf Me.OnUpdateClaimPaidTermStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateClaimPaidTermStatus", New Object() {strPolicy, iTransID, gsUser, strErr}, Me.UpdateClaimPaidTermStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateClaimPaidTermStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateClaimPaidTermStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateClaimPaidTermStatusCompleted(Me, New UpdateClaimPaidTermStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimPaidTermQueue", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimPaidTermQueue(ByRef strErrMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetClaimPaidTermQueue", New Object() {strErrMsg})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimPaidTermQueueAsync(ByVal strErrMsg As String)
            Me.GetClaimPaidTermQueueAsync(strErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimPaidTermQueueAsync(ByVal strErrMsg As String, ByVal userState As Object)
            If (Me.GetClaimPaidTermQueueOperationCompleted Is Nothing) Then
                Me.GetClaimPaidTermQueueOperationCompleted = AddressOf Me.OnGetClaimPaidTermQueueOperationCompleted
            End If
            Me.InvokeAsync("GetClaimPaidTermQueue", New Object() {strErrMsg}, Me.GetClaimPaidTermQueueOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimPaidTermQueueOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimPaidTermQueueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimPaidTermQueueCompleted(Me, New GetClaimPaidTermQueueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetPolicyValueEnq", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyValueEnq(ByVal strPolicyNo As String, ByVal dtEffDate As Date, ByRef strErrMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetPolicyValueEnq", New Object() {strPolicyNo, dtEffDate, strErrMsg})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyValueEnqAsync(ByVal strPolicyNo As String, ByVal dtEffDate As Date, ByVal strErrMsg As String)
            Me.GetPolicyValueEnqAsync(strPolicyNo, dtEffDate, strErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyValueEnqAsync(ByVal strPolicyNo As String, ByVal dtEffDate As Date, ByVal strErrMsg As String, ByVal userState As Object)
            If (Me.GetPolicyValueEnqOperationCompleted Is Nothing) Then
                Me.GetPolicyValueEnqOperationCompleted = AddressOf Me.OnGetPolicyValueEnqOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyValueEnq", New Object() {strPolicyNo, dtEffDate, strErrMsg}, Me.GetPolicyValueEnqOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyValueEnqOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyValueEnqCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyValueEnqCompleted(Me, New GetPolicyValueEnqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/CreatePosSurrReq", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreatePosSurrReq(ByVal strSQL As String, ByRef strErr As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("CreatePosSurrReq", New Object() {strSQL, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreatePosSurrReqAsync(ByVal strSQL As String, ByVal strErr As String)
            Me.CreatePosSurrReqAsync(strSQL, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreatePosSurrReqAsync(ByVal strSQL As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.CreatePosSurrReqOperationCompleted Is Nothing) Then
                Me.CreatePosSurrReqOperationCompleted = AddressOf Me.OnCreatePosSurrReqOperationCompleted
            End If
            Me.InvokeAsync("CreatePosSurrReq", New Object() {strSQL, strErr}, Me.CreatePosSurrReqOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreatePosSurrReqOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreatePosSurrReqCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreatePosSurrReqCompleted(Me, New CreatePosSurrReqCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetSavingABal", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSavingABal(ByVal strPolicy As String, ByVal strCoverage As String, ByRef strMessage As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSavingABal", New Object() {strPolicy, strCoverage, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSavingABalAsync(ByVal strPolicy As String, ByVal strCoverage As String, ByVal strMessage As String)
            Me.GetSavingABalAsync(strPolicy, strCoverage, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSavingABalAsync(ByVal strPolicy As String, ByVal strCoverage As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetSavingABalOperationCompleted Is Nothing) Then
                Me.GetSavingABalOperationCompleted = AddressOf Me.OnGetSavingABalOperationCompleted
            End If
            Me.InvokeAsync("GetSavingABal", New Object() {strPolicy, strCoverage, strMessage}, Me.GetSavingABalOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSavingABalOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSavingABalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSavingABalCompleted(Me, New GetSavingABalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetPayeeClaimPayment", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPayeeClaimPayment(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicyNo As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByRef strMsg As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPayeeClaimPayment", New Object() {strSysName, strUser, strPolicyNo, strClaimNo, strClaimOccur, strMsg})
            strMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPayeeClaimPaymentAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicyNo As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal strMsg As String)
            Me.GetPayeeClaimPaymentAsync(strSysName, strUser, strPolicyNo, strClaimNo, strClaimOccur, strMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPayeeClaimPaymentAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicyNo As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal strMsg As String, ByVal userState As Object)
            If (Me.GetPayeeClaimPaymentOperationCompleted Is Nothing) Then
                Me.GetPayeeClaimPaymentOperationCompleted = AddressOf Me.OnGetPayeeClaimPaymentOperationCompleted
            End If
            Me.InvokeAsync("GetPayeeClaimPayment", New Object() {strSysName, strUser, strPolicyNo, strClaimNo, strClaimOccur, strMsg}, Me.GetPayeeClaimPaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPayeeClaimPaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPayeeClaimPaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPayeeClaimPaymentCompleted(Me, New GetPayeeClaimPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UpdateCLTLetterPrintStatus", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateCLTLetterPrintStatus(ByVal logId As Decimal, ByVal policyNo As String)
            Me.Invoke("UpdateCLTLetterPrintStatus", New Object() {logId, policyNo})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCLTLetterPrintStatusAsync(ByVal logId As Decimal, ByVal policyNo As String)
            Me.UpdateCLTLetterPrintStatusAsync(logId, policyNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCLTLetterPrintStatusAsync(ByVal logId As Decimal, ByVal policyNo As String, ByVal userState As Object)
            If (Me.UpdateCLTLetterPrintStatusOperationCompleted Is Nothing) Then
                Me.UpdateCLTLetterPrintStatusOperationCompleted = AddressOf Me.OnUpdateCLTLetterPrintStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateCLTLetterPrintStatus", New Object() {logId, policyNo}, Me.UpdateCLTLetterPrintStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCLTLetterPrintStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCLTLetterPrintStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCLTLetterPrintStatusCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/getLAClientNo", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getLAClientNo(ByVal pstrUserId As String, ByVal iCustNo As String, ByVal sCustType As String, ByRef strErr As String, ByRef sLAClientNo_Client As String) As Boolean
            Dim results() As Object = Me.Invoke("getLAClientNo", New Object() {pstrUserId, iCustNo, sCustType, strErr, sLAClientNo_Client})
            strErr = CType(results(1),String)
            sLAClientNo_Client = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getLAClientNoAsync(ByVal pstrUserId As String, ByVal iCustNo As String, ByVal sCustType As String, ByVal strErr As String, ByVal sLAClientNo_Client As String)
            Me.getLAClientNoAsync(pstrUserId, iCustNo, sCustType, strErr, sLAClientNo_Client, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getLAClientNoAsync(ByVal pstrUserId As String, ByVal iCustNo As String, ByVal sCustType As String, ByVal strErr As String, ByVal sLAClientNo_Client As String, ByVal userState As Object)
            If (Me.getLAClientNoOperationCompleted Is Nothing) Then
                Me.getLAClientNoOperationCompleted = AddressOf Me.OngetLAClientNoOperationCompleted
            End If
            Me.InvokeAsync("getLAClientNo", New Object() {pstrUserId, iCustNo, sCustType, strErr, sLAClientNo_Client}, Me.getLAClientNoOperationCompleted, userState)
        End Sub
        
        Private Sub OngetLAClientNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.getLAClientNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getLAClientNoCompleted(Me, New getLAClientNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/CheckIsPaidAmtEligible2", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckIsPaidAmtEligible2(ByVal dtBenefit As System.Data.DataTable, ByRef strMessage As String, ByRef decElgBal As Decimal) As Boolean
            Dim results() As Object = Me.Invoke("CheckIsPaidAmtEligible2", New Object() {dtBenefit, strMessage, decElgBal})
            strMessage = CType(results(1),String)
            decElgBal = CType(results(2),Decimal)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckIsPaidAmtEligible2Async(ByVal dtBenefit As System.Data.DataTable, ByVal strMessage As String, ByVal decElgBal As Decimal)
            Me.CheckIsPaidAmtEligible2Async(dtBenefit, strMessage, decElgBal, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckIsPaidAmtEligible2Async(ByVal dtBenefit As System.Data.DataTable, ByVal strMessage As String, ByVal decElgBal As Decimal, ByVal userState As Object)
            If (Me.CheckIsPaidAmtEligible2OperationCompleted Is Nothing) Then
                Me.CheckIsPaidAmtEligible2OperationCompleted = AddressOf Me.OnCheckIsPaidAmtEligible2OperationCompleted
            End If
            Me.InvokeAsync("CheckIsPaidAmtEligible2", New Object() {dtBenefit, strMessage, decElgBal}, Me.CheckIsPaidAmtEligible2OperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckIsPaidAmtEligible2OperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckIsPaidAmtEligible2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckIsPaidAmtEligible2Completed(Me, New CheckIsPaidAmtEligible2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimPaidTermQueueByPolicy", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimPaidTermQueueByPolicy(ByVal strPolicyNo As String, ByRef strErrMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetClaimPaidTermQueueByPolicy", New Object() {strPolicyNo, strErrMsg})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimPaidTermQueueByPolicyAsync(ByVal strPolicyNo As String, ByVal strErrMsg As String)
            Me.GetClaimPaidTermQueueByPolicyAsync(strPolicyNo, strErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimPaidTermQueueByPolicyAsync(ByVal strPolicyNo As String, ByVal strErrMsg As String, ByVal userState As Object)
            If (Me.GetClaimPaidTermQueueByPolicyOperationCompleted Is Nothing) Then
                Me.GetClaimPaidTermQueueByPolicyOperationCompleted = AddressOf Me.OnGetClaimPaidTermQueueByPolicyOperationCompleted
            End If
            Me.InvokeAsync("GetClaimPaidTermQueueByPolicy", New Object() {strPolicyNo, strErrMsg}, Me.GetClaimPaidTermQueueByPolicyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimPaidTermQueueByPolicyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimPaidTermQueueByPolicyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimPaidTermQueueByPolicyCompleted(Me, New GetClaimPaidTermQueueByPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetChequeByPaymentNo", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetChequeByPaymentNo(ByVal paymentNum As Long, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetChequeByPaymentNo", New Object() {paymentNum, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetChequeByPaymentNoAsync(ByVal paymentNum As Long, ByVal strRtnMsg As String)
            Me.GetChequeByPaymentNoAsync(paymentNum, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetChequeByPaymentNoAsync(ByVal paymentNum As Long, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetChequeByPaymentNoOperationCompleted Is Nothing) Then
                Me.GetChequeByPaymentNoOperationCompleted = AddressOf Me.OnGetChequeByPaymentNoOperationCompleted
            End If
            Me.InvokeAsync("GetChequeByPaymentNo", New Object() {paymentNum, strRtnMsg}, Me.GetChequeByPaymentNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetChequeByPaymentNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetChequeByPaymentNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetChequeByPaymentNoCompleted(Me, New GetChequeByPaymentNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GenerateSettlementLetter", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GenerateSettlementLetter(ByVal claimNo As Long, ByVal claimOccur As Long, ByVal policyNo As String, ByRef dtDetails As System.Data.DataTable, ByRef strErr As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GenerateSettlementLetter", New Object() {claimNo, claimOccur, policyNo, dtDetails, strErr})
            dtDetails = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GenerateSettlementLetterAsync(ByVal claimNo As Long, ByVal claimOccur As Long, ByVal policyNo As String, ByVal dtDetails As System.Data.DataTable, ByVal strErr As String)
            Me.GenerateSettlementLetterAsync(claimNo, claimOccur, policyNo, dtDetails, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GenerateSettlementLetterAsync(ByVal claimNo As Long, ByVal claimOccur As Long, ByVal policyNo As String, ByVal dtDetails As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GenerateSettlementLetterOperationCompleted Is Nothing) Then
                Me.GenerateSettlementLetterOperationCompleted = AddressOf Me.OnGenerateSettlementLetterOperationCompleted
            End If
            Me.InvokeAsync("GenerateSettlementLetter", New Object() {claimNo, claimOccur, policyNo, dtDetails, strErr}, Me.GenerateSettlementLetterOperationCompleted, userState)
        End Sub
        
        Private Sub OnGenerateSettlementLetterOperationCompleted(ByVal arg As Object)
            If (Not (Me.GenerateSettlementLetterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GenerateSettlementLetterCompleted(Me, New GenerateSettlementLetterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/CreateSettlementCCMRequest", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateSettlementCCMRequest(ByVal source As System.Data.DataTable, ByVal ltrCode As String, ByVal benTable As System.Data.DataTable, ByVal printMode As String, ByVal printStatus As String, ByRef strErr As String) As Integer
            Dim results() As Object = Me.Invoke("CreateSettlementCCMRequest", New Object() {source, ltrCode, benTable, printMode, printStatus, strErr})
            strErr = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateSettlementCCMRequestAsync(ByVal source As System.Data.DataTable, ByVal ltrCode As String, ByVal benTable As System.Data.DataTable, ByVal printMode As String, ByVal printStatus As String, ByVal strErr As String)
            Me.CreateSettlementCCMRequestAsync(source, ltrCode, benTable, printMode, printStatus, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateSettlementCCMRequestAsync(ByVal source As System.Data.DataTable, ByVal ltrCode As String, ByVal benTable As System.Data.DataTable, ByVal printMode As String, ByVal printStatus As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.CreateSettlementCCMRequestOperationCompleted Is Nothing) Then
                Me.CreateSettlementCCMRequestOperationCompleted = AddressOf Me.OnCreateSettlementCCMRequestOperationCompleted
            End If
            Me.InvokeAsync("CreateSettlementCCMRequest", New Object() {source, ltrCode, benTable, printMode, printStatus, strErr}, Me.CreateSettlementCCMRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateSettlementCCMRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateSettlementCCMRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateSettlementCCMRequestCompleted(Me, New CreateSettlementCCMRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UpdateUserAmountLimit", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateUserAmountLimit(ByRef strMessage As String, ByVal strUser As String, ByVal oDsUserAmtLtd As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("UpdateUserAmountLimit", New Object() {strMessage, strUser, oDsUserAmtLtd})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateUserAmountLimitAsync(ByVal strMessage As String, ByVal strUser As String, ByVal oDsUserAmtLtd As System.Data.DataSet)
            Me.UpdateUserAmountLimitAsync(strMessage, strUser, oDsUserAmtLtd, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUserAmountLimitAsync(ByVal strMessage As String, ByVal strUser As String, ByVal oDsUserAmtLtd As System.Data.DataSet, ByVal userState As Object)
            If (Me.UpdateUserAmountLimitOperationCompleted Is Nothing) Then
                Me.UpdateUserAmountLimitOperationCompleted = AddressOf Me.OnUpdateUserAmountLimitOperationCompleted
            End If
            Me.InvokeAsync("UpdateUserAmountLimit", New Object() {strMessage, strUser, oDsUserAmtLtd}, Me.UpdateUserAmountLimitOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateUserAmountLimitOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateUserAmountLimitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateUserAmountLimitCompleted(Me, New UpdateUserAmountLimitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetAmountLimitn", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAmountLimitn(ByRef strMessage As String, ByVal strLimitCode As String, ByVal strType As String, ByVal strCurr As String, ByVal lngDay As Long, ByVal lngTrxAmt As Long) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAmountLimitn", New Object() {strMessage, strLimitCode, strType, strCurr, lngDay, lngTrxAmt})
            strMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAmountLimitnAsync(ByVal strMessage As String, ByVal strLimitCode As String, ByVal strType As String, ByVal strCurr As String, ByVal lngDay As Long, ByVal lngTrxAmt As Long)
            Me.GetAmountLimitnAsync(strMessage, strLimitCode, strType, strCurr, lngDay, lngTrxAmt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAmountLimitnAsync(ByVal strMessage As String, ByVal strLimitCode As String, ByVal strType As String, ByVal strCurr As String, ByVal lngDay As Long, ByVal lngTrxAmt As Long, ByVal userState As Object)
            If (Me.GetAmountLimitnOperationCompleted Is Nothing) Then
                Me.GetAmountLimitnOperationCompleted = AddressOf Me.OnGetAmountLimitnOperationCompleted
            End If
            Me.InvokeAsync("GetAmountLimitn", New Object() {strMessage, strLimitCode, strType, strCurr, lngDay, lngTrxAmt}, Me.GetAmountLimitnOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAmountLimitnOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAmountLimitnCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAmountLimitnCompleted(Me, New GetAmountLimitnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetTopActAgcyClaimSummary", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTopActAgcyClaimSummary(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal intTopNAgent As Integer, ByVal blnEarlyClaim As Boolean, ByRef dsReport As System.Data.DataSet, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetTopActAgcyClaimSummary", New Object() {dtStartDate, dtEndDate, intTopNAgent, blnEarlyClaim, dsReport, strRtnMsg})
            dsReport = CType(results(1),System.Data.DataSet)
            strRtnMsg = CType(results(2),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTopActAgcyClaimSummaryAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal intTopNAgent As Integer, ByVal blnEarlyClaim As Boolean, ByVal dsReport As System.Data.DataSet, ByVal strRtnMsg As String)
            Me.GetTopActAgcyClaimSummaryAsync(dtStartDate, dtEndDate, intTopNAgent, blnEarlyClaim, dsReport, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTopActAgcyClaimSummaryAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal intTopNAgent As Integer, ByVal blnEarlyClaim As Boolean, ByVal dsReport As System.Data.DataSet, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetTopActAgcyClaimSummaryOperationCompleted Is Nothing) Then
                Me.GetTopActAgcyClaimSummaryOperationCompleted = AddressOf Me.OnGetTopActAgcyClaimSummaryOperationCompleted
            End If
            Me.InvokeAsync("GetTopActAgcyClaimSummary", New Object() {dtStartDate, dtEndDate, intTopNAgent, blnEarlyClaim, dsReport, strRtnMsg}, Me.GetTopActAgcyClaimSummaryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTopActAgcyClaimSummaryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTopActAgcyClaimSummaryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTopActAgcyClaimSummaryCompleted(Me, New GetTopActAgcyClaimSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetPendingClaim", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPendingClaim(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetPendingClaim", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPendingClaimAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.GetPendingClaimAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPendingClaimAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetPendingClaimOperationCompleted Is Nothing) Then
                Me.GetPendingClaimOperationCompleted = AddressOf Me.OnGetPendingClaimOperationCompleted
            End If
            Me.InvokeAsync("GetPendingClaim", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.GetPendingClaimOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPendingClaimOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPendingClaimCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPendingClaimCompleted(Me, New GetPendingClaimCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimExpensesAnalysis", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimExpensesAnalysis(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strPlanType As String, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetClaimExpensesAnalysis", New Object() {dtStartDate, dtEndDate, strPlanType, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimExpensesAnalysisAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strPlanType As String, ByVal strRtnMsg As String)
            Me.GetClaimExpensesAnalysisAsync(dtStartDate, dtEndDate, strPlanType, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimExpensesAnalysisAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strPlanType As String, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetClaimExpensesAnalysisOperationCompleted Is Nothing) Then
                Me.GetClaimExpensesAnalysisOperationCompleted = AddressOf Me.OnGetClaimExpensesAnalysisOperationCompleted
            End If
            Me.InvokeAsync("GetClaimExpensesAnalysis", New Object() {dtStartDate, dtEndDate, strPlanType, strRtnMsg}, Me.GetClaimExpensesAnalysisOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimExpensesAnalysisOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimExpensesAnalysisCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimExpensesAnalysisCompleted(Me, New GetClaimExpensesAnalysisCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetAccessorProductivity", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccessorProductivity(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetAccessorProductivity", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccessorProductivityAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.GetAccessorProductivityAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccessorProductivityAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetAccessorProductivityOperationCompleted Is Nothing) Then
                Me.GetAccessorProductivityOperationCompleted = AddressOf Me.OnGetAccessorProductivityOperationCompleted
            End If
            Me.InvokeAsync("GetAccessorProductivity", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.GetAccessorProductivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccessorProductivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccessorProductivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccessorProductivityCompleted(Me, New GetAccessorProductivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetDeclineExgratiaReasonAnalysis", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDeclineExgratiaReasonAnalysis(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetDeclineExgratiaReasonAnalysis", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDeclineExgratiaReasonAnalysisAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.GetDeclineExgratiaReasonAnalysisAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDeclineExgratiaReasonAnalysisAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetDeclineExgratiaReasonAnalysisOperationCompleted Is Nothing) Then
                Me.GetDeclineExgratiaReasonAnalysisOperationCompleted = AddressOf Me.OnGetDeclineExgratiaReasonAnalysisOperationCompleted
            End If
            Me.InvokeAsync("GetDeclineExgratiaReasonAnalysis", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.GetDeclineExgratiaReasonAnalysisOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDeclineExgratiaReasonAnalysisOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDeclineExgratiaReasonAnalysisCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDeclineExgratiaReasonAnalysisCompleted(Me, New GetDeclineExgratiaReasonAnalysisCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetChequePaymentSummary", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetChequePaymentSummary(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strChequeOpt As String, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetChequePaymentSummary", New Object() {dtStartDate, dtEndDate, strChequeOpt, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetChequePaymentSummaryAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strChequeOpt As String, ByVal strRtnMsg As String)
            Me.GetChequePaymentSummaryAsync(dtStartDate, dtEndDate, strChequeOpt, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetChequePaymentSummaryAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strChequeOpt As String, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetChequePaymentSummaryOperationCompleted Is Nothing) Then
                Me.GetChequePaymentSummaryOperationCompleted = AddressOf Me.OnGetChequePaymentSummaryOperationCompleted
            End If
            Me.InvokeAsync("GetChequePaymentSummary", New Object() {dtStartDate, dtEndDate, strChequeOpt, strRtnMsg}, Me.GetChequePaymentSummaryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetChequePaymentSummaryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetChequePaymentSummaryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetChequePaymentSummaryCompleted(Me, New GetChequePaymentSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetTurnaroundTimeAnalysis", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTurnaroundTimeAnalysis(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal arrClaimType() As String, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetTurnaroundTimeAnalysis", New Object() {dtStartDate, dtEndDate, arrClaimType, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTurnaroundTimeAnalysisAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal arrClaimType() As String, ByVal strRtnMsg As String)
            Me.GetTurnaroundTimeAnalysisAsync(dtStartDate, dtEndDate, arrClaimType, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTurnaroundTimeAnalysisAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal arrClaimType() As String, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetTurnaroundTimeAnalysisOperationCompleted Is Nothing) Then
                Me.GetTurnaroundTimeAnalysisOperationCompleted = AddressOf Me.OnGetTurnaroundTimeAnalysisOperationCompleted
            End If
            Me.InvokeAsync("GetTurnaroundTimeAnalysis", New Object() {dtStartDate, dtEndDate, arrClaimType, strRtnMsg}, Me.GetTurnaroundTimeAnalysisOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTurnaroundTimeAnalysisOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTurnaroundTimeAnalysisCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTurnaroundTimeAnalysisCompleted(Me, New GetTurnaroundTimeAnalysisCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetTopAgentSummaryPayment", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTopAgentSummaryPayment(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal intTop As Integer, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetTopAgentSummaryPayment", New Object() {dtStartDate, dtEndDate, intTop, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTopAgentSummaryPaymentAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal intTop As Integer, ByVal strRtnMsg As String)
            Me.GetTopAgentSummaryPaymentAsync(dtStartDate, dtEndDate, intTop, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTopAgentSummaryPaymentAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal intTop As Integer, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetTopAgentSummaryPaymentOperationCompleted Is Nothing) Then
                Me.GetTopAgentSummaryPaymentOperationCompleted = AddressOf Me.OnGetTopAgentSummaryPaymentOperationCompleted
            End If
            Me.InvokeAsync("GetTopAgentSummaryPayment", New Object() {dtStartDate, dtEndDate, intTop, strRtnMsg}, Me.GetTopAgentSummaryPaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTopAgentSummaryPaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTopAgentSummaryPaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTopAgentSummaryPaymentCompleted(Me, New GetTopAgentSummaryPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetTopAgentSummarySubmission", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTopAgentSummarySubmission(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal intTop As Integer, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetTopAgentSummarySubmission", New Object() {dtStartDate, dtEndDate, intTop, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTopAgentSummarySubmissionAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal intTop As Integer, ByVal strRtnMsg As String)
            Me.GetTopAgentSummarySubmissionAsync(dtStartDate, dtEndDate, intTop, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTopAgentSummarySubmissionAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal intTop As Integer, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetTopAgentSummarySubmissionOperationCompleted Is Nothing) Then
                Me.GetTopAgentSummarySubmissionOperationCompleted = AddressOf Me.OnGetTopAgentSummarySubmissionOperationCompleted
            End If
            Me.InvokeAsync("GetTopAgentSummarySubmission", New Object() {dtStartDate, dtEndDate, intTop, strRtnMsg}, Me.GetTopAgentSummarySubmissionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTopAgentSummarySubmissionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTopAgentSummarySubmissionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTopAgentSummarySubmissionCompleted(Me, New GetTopAgentSummarySubmissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetSystemChequeSettlement", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSystemChequeSettlement(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetSystemChequeSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSystemChequeSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.GetSystemChequeSettlementAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSystemChequeSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetSystemChequeSettlementOperationCompleted Is Nothing) Then
                Me.GetSystemChequeSettlementOperationCompleted = AddressOf Me.OnGetSystemChequeSettlementOperationCompleted
            End If
            Me.InvokeAsync("GetSystemChequeSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.GetSystemChequeSettlementOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSystemChequeSettlementOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSystemChequeSettlementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSystemChequeSettlementCompleted(Me, New GetSystemChequeSettlementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/Get711Settlement", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get711Settlement(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("Get711Settlement", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get711SettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.Get711SettlementAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get711SettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.Get711SettlementOperationCompleted Is Nothing) Then
                Me.Get711SettlementOperationCompleted = AddressOf Me.OnGet711SettlementOperationCompleted
            End If
            Me.InvokeAsync("Get711Settlement", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.Get711SettlementOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet711SettlementOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get711SettlementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get711SettlementCompleted(Me, New Get711SettlementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetIscSettlement", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIscSettlement(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetIscSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIscSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.GetIscSettlementAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIscSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetIscSettlementOperationCompleted Is Nothing) Then
                Me.GetIscSettlementOperationCompleted = AddressOf Me.OnGetIscSettlementOperationCompleted
            End If
            Me.InvokeAsync("GetIscSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.GetIscSettlementOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIscSettlementOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIscSettlementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIscSettlementCompleted(Me, New GetIscSettlementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetReverseSystemChequeSettlement", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReverseSystemChequeSettlement(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetReverseSystemChequeSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReverseSystemChequeSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.GetReverseSystemChequeSettlementAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReverseSystemChequeSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetReverseSystemChequeSettlementOperationCompleted Is Nothing) Then
                Me.GetReverseSystemChequeSettlementOperationCompleted = AddressOf Me.OnGetReverseSystemChequeSettlementOperationCompleted
            End If
            Me.InvokeAsync("GetReverseSystemChequeSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.GetReverseSystemChequeSettlementOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReverseSystemChequeSettlementOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReverseSystemChequeSettlementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReverseSystemChequeSettlementCompleted(Me, New GetReverseSystemChequeSettlementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetForcibleError", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetForcibleError(ByVal dtSettleDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetForcibleError", New Object() {dtSettleDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetForcibleErrorAsync(ByVal dtSettleDate As Date, ByVal strRtnMsg As String)
            Me.GetForcibleErrorAsync(dtSettleDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetForcibleErrorAsync(ByVal dtSettleDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetForcibleErrorOperationCompleted Is Nothing) Then
                Me.GetForcibleErrorOperationCompleted = AddressOf Me.OnGetForcibleErrorOperationCompleted
            End If
            Me.InvokeAsync("GetForcibleError", New Object() {dtSettleDate, strRtnMsg}, Me.GetForcibleErrorOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetForcibleErrorOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetForcibleErrorCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetForcibleErrorCompleted(Me, New GetForcibleErrorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimPaymentSummary", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimPaymentSummary(ByRef strMessage As String, ByRef dsReturn As System.Data.DataSet, ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strPlanType As String, ByVal strPlanFeature As String) As Boolean
            Dim results() As Object = Me.Invoke("GetClaimPaymentSummary", New Object() {strMessage, dsReturn, dtStartDate, dtEndDate, strPlanType, strPlanFeature})
            strMessage = CType(results(1),String)
            dsReturn = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimPaymentSummaryAsync(ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strPlanType As String, ByVal strPlanFeature As String)
            Me.GetClaimPaymentSummaryAsync(strMessage, dsReturn, dtStartDate, dtEndDate, strPlanType, strPlanFeature, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimPaymentSummaryAsync(ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strPlanType As String, ByVal strPlanFeature As String, ByVal userState As Object)
            If (Me.GetClaimPaymentSummaryOperationCompleted Is Nothing) Then
                Me.GetClaimPaymentSummaryOperationCompleted = AddressOf Me.OnGetClaimPaymentSummaryOperationCompleted
            End If
            Me.InvokeAsync("GetClaimPaymentSummary", New Object() {strMessage, dsReturn, dtStartDate, dtEndDate, strPlanType, strPlanFeature}, Me.GetClaimPaymentSummaryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimPaymentSummaryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimPaymentSummaryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimPaymentSummaryCompleted(Me, New GetClaimPaymentSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetInsuredAccumulatedPaid", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInsuredAccumulatedPaid(ByVal insuredId As Long, ByRef dtAccumlatedPaid As System.Data.DataTable, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("GetInsuredAccumulatedPaid", New Object() {insuredId, dtAccumlatedPaid, strMessage})
            dtAccumlatedPaid = CType(results(1),System.Data.DataTable)
            strMessage = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInsuredAccumulatedPaidAsync(ByVal insuredId As Long, ByVal dtAccumlatedPaid As System.Data.DataTable, ByVal strMessage As String)
            Me.GetInsuredAccumulatedPaidAsync(insuredId, dtAccumlatedPaid, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInsuredAccumulatedPaidAsync(ByVal insuredId As Long, ByVal dtAccumlatedPaid As System.Data.DataTable, ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetInsuredAccumulatedPaidOperationCompleted Is Nothing) Then
                Me.GetInsuredAccumulatedPaidOperationCompleted = AddressOf Me.OnGetInsuredAccumulatedPaidOperationCompleted
            End If
            Me.InvokeAsync("GetInsuredAccumulatedPaid", New Object() {insuredId, dtAccumlatedPaid, strMessage}, Me.GetInsuredAccumulatedPaidOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInsuredAccumulatedPaidOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInsuredAccumulatedPaidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInsuredAccumulatedPaidCompleted(Me, New GetInsuredAccumulatedPaidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UpdateCodeValue", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateCodeValue(ByVal strCode As String, ByVal strValue As String)
            Me.Invoke("UpdateCodeValue", New Object() {strCode, strValue})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCodeValueAsync(ByVal strCode As String, ByVal strValue As String)
            Me.UpdateCodeValueAsync(strCode, strValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCodeValueAsync(ByVal strCode As String, ByVal strValue As String, ByVal userState As Object)
            If (Me.UpdateCodeValueOperationCompleted Is Nothing) Then
                Me.UpdateCodeValueOperationCompleted = AddressOf Me.OnUpdateCodeValueOperationCompleted
            End If
            Me.InvokeAsync("UpdateCodeValue", New Object() {strCode, strValue}, Me.UpdateCodeValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCodeValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCodeValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCodeValueCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetCorrespondenceLetterList", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCorrespondenceLetterList(ByRef strMessage As String, ByRef dsLetterList As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("GetCorrespondenceLetterList", New Object() {strMessage, dsLetterList})
            strMessage = CType(results(1),String)
            dsLetterList = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCorrespondenceLetterListAsync(ByVal strMessage As String, ByVal dsLetterList As System.Data.DataSet)
            Me.GetCorrespondenceLetterListAsync(strMessage, dsLetterList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCorrespondenceLetterListAsync(ByVal strMessage As String, ByVal dsLetterList As System.Data.DataSet, ByVal userState As Object)
            If (Me.GetCorrespondenceLetterListOperationCompleted Is Nothing) Then
                Me.GetCorrespondenceLetterListOperationCompleted = AddressOf Me.OnGetCorrespondenceLetterListOperationCompleted
            End If
            Me.InvokeAsync("GetCorrespondenceLetterList", New Object() {strMessage, dsLetterList}, Me.GetCorrespondenceLetterListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCorrespondenceLetterListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCorrespondenceLetterListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCorrespondenceLetterListCompleted(Me, New GetCorrespondenceLetterListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetCorrespondenceRecipientList", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCorrespondenceRecipientList(ByVal recipientType As String, ByRef strMessage As String, ByRef dsRecipientList As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("GetCorrespondenceRecipientList", New Object() {recipientType, strMessage, dsRecipientList})
            strMessage = CType(results(1),String)
            dsRecipientList = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCorrespondenceRecipientListAsync(ByVal recipientType As String, ByVal strMessage As String, ByVal dsRecipientList As System.Data.DataSet)
            Me.GetCorrespondenceRecipientListAsync(recipientType, strMessage, dsRecipientList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCorrespondenceRecipientListAsync(ByVal recipientType As String, ByVal strMessage As String, ByVal dsRecipientList As System.Data.DataSet, ByVal userState As Object)
            If (Me.GetCorrespondenceRecipientListOperationCompleted Is Nothing) Then
                Me.GetCorrespondenceRecipientListOperationCompleted = AddressOf Me.OnGetCorrespondenceRecipientListOperationCompleted
            End If
            Me.InvokeAsync("GetCorrespondenceRecipientList", New Object() {recipientType, strMessage, dsRecipientList}, Me.GetCorrespondenceRecipientListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCorrespondenceRecipientListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCorrespondenceRecipientListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCorrespondenceRecipientListCompleted(Me, New GetCorrespondenceRecipientListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetCorrespondenceHistory", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCorrespondenceHistory(ByVal claimNo As Long, ByRef claimOccur As Long, ByRef strMessage As String, ByRef dsCorrespondenceHistory As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("GetCorrespondenceHistory", New Object() {claimNo, claimOccur, strMessage, dsCorrespondenceHistory})
            claimOccur = CType(results(1),Long)
            strMessage = CType(results(2),String)
            dsCorrespondenceHistory = CType(results(3),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCorrespondenceHistoryAsync(ByVal claimNo As Long, ByVal claimOccur As Long, ByVal strMessage As String, ByVal dsCorrespondenceHistory As System.Data.DataSet)
            Me.GetCorrespondenceHistoryAsync(claimNo, claimOccur, strMessage, dsCorrespondenceHistory, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCorrespondenceHistoryAsync(ByVal claimNo As Long, ByVal claimOccur As Long, ByVal strMessage As String, ByVal dsCorrespondenceHistory As System.Data.DataSet, ByVal userState As Object)
            If (Me.GetCorrespondenceHistoryOperationCompleted Is Nothing) Then
                Me.GetCorrespondenceHistoryOperationCompleted = AddressOf Me.OnGetCorrespondenceHistoryOperationCompleted
            End If
            Me.InvokeAsync("GetCorrespondenceHistory", New Object() {claimNo, claimOccur, strMessage, dsCorrespondenceHistory}, Me.GetCorrespondenceHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCorrespondenceHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCorrespondenceHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCorrespondenceHistoryCompleted(Me, New GetCorrespondenceHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/BatchSaveCorrespondenceHistory", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BatchSaveCorrespondenceHistory(ByRef dsCorrespondenceHistory As System.Data.DataSet, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("BatchSaveCorrespondenceHistory", New Object() {dsCorrespondenceHistory, strMessage})
            dsCorrespondenceHistory = CType(results(1),System.Data.DataSet)
            strMessage = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BatchSaveCorrespondenceHistoryAsync(ByVal dsCorrespondenceHistory As System.Data.DataSet, ByVal strMessage As String)
            Me.BatchSaveCorrespondenceHistoryAsync(dsCorrespondenceHistory, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BatchSaveCorrespondenceHistoryAsync(ByVal dsCorrespondenceHistory As System.Data.DataSet, ByVal strMessage As String, ByVal userState As Object)
            If (Me.BatchSaveCorrespondenceHistoryOperationCompleted Is Nothing) Then
                Me.BatchSaveCorrespondenceHistoryOperationCompleted = AddressOf Me.OnBatchSaveCorrespondenceHistoryOperationCompleted
            End If
            Me.InvokeAsync("BatchSaveCorrespondenceHistory", New Object() {dsCorrespondenceHistory, strMessage}, Me.BatchSaveCorrespondenceHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnBatchSaveCorrespondenceHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.BatchSaveCorrespondenceHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BatchSaveCorrespondenceHistoryCompleted(Me, New BatchSaveCorrespondenceHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetCorrespondenceRecipient", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCorrespondenceRecipient(ByVal recipientCode As String, ByRef strMessage As String, ByRef dsRecipient As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("GetCorrespondenceRecipient", New Object() {recipientCode, strMessage, dsRecipient})
            strMessage = CType(results(1),String)
            dsRecipient = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCorrespondenceRecipientAsync(ByVal recipientCode As String, ByVal strMessage As String, ByVal dsRecipient As System.Data.DataSet)
            Me.GetCorrespondenceRecipientAsync(recipientCode, strMessage, dsRecipient, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCorrespondenceRecipientAsync(ByVal recipientCode As String, ByVal strMessage As String, ByVal dsRecipient As System.Data.DataSet, ByVal userState As Object)
            If (Me.GetCorrespondenceRecipientOperationCompleted Is Nothing) Then
                Me.GetCorrespondenceRecipientOperationCompleted = AddressOf Me.OnGetCorrespondenceRecipientOperationCompleted
            End If
            Me.InvokeAsync("GetCorrespondenceRecipient", New Object() {recipientCode, strMessage, dsRecipient}, Me.GetCorrespondenceRecipientOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCorrespondenceRecipientOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCorrespondenceRecipientCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCorrespondenceRecipientCompleted(Me, New GetCorrespondenceRecipientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetCorrespondenceRecipientByUUID", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCorrespondenceRecipientByUUID(ByVal UUID As Integer, ByRef strMessage As String, ByRef dsRecipient As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("GetCorrespondenceRecipientByUUID", New Object() {UUID, strMessage, dsRecipient})
            strMessage = CType(results(1),String)
            dsRecipient = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCorrespondenceRecipientByUUIDAsync(ByVal UUID As Integer, ByVal strMessage As String, ByVal dsRecipient As System.Data.DataSet)
            Me.GetCorrespondenceRecipientByUUIDAsync(UUID, strMessage, dsRecipient, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCorrespondenceRecipientByUUIDAsync(ByVal UUID As Integer, ByVal strMessage As String, ByVal dsRecipient As System.Data.DataSet, ByVal userState As Object)
            If (Me.GetCorrespondenceRecipientByUUIDOperationCompleted Is Nothing) Then
                Me.GetCorrespondenceRecipientByUUIDOperationCompleted = AddressOf Me.OnGetCorrespondenceRecipientByUUIDOperationCompleted
            End If
            Me.InvokeAsync("GetCorrespondenceRecipientByUUID", New Object() {UUID, strMessage, dsRecipient}, Me.GetCorrespondenceRecipientByUUIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCorrespondenceRecipientByUUIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCorrespondenceRecipientByUUIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCorrespondenceRecipientByUUIDCompleted(Me, New GetCorrespondenceRecipientByUUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimsMarkInRecords", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimsMarkInRecords(ByVal policyNo As String, ByVal markinStatus As String, ByVal excludeMcsLinkedCases As Boolean, ByRef strMessage As String, ByRef dsRs As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("GetClaimsMarkInRecords", New Object() {policyNo, markinStatus, excludeMcsLinkedCases, strMessage, dsRs})
            strMessage = CType(results(1),String)
            dsRs = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimsMarkInRecordsAsync(ByVal policyNo As String, ByVal markinStatus As String, ByVal excludeMcsLinkedCases As Boolean, ByVal strMessage As String, ByVal dsRs As System.Data.DataSet)
            Me.GetClaimsMarkInRecordsAsync(policyNo, markinStatus, excludeMcsLinkedCases, strMessage, dsRs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimsMarkInRecordsAsync(ByVal policyNo As String, ByVal markinStatus As String, ByVal excludeMcsLinkedCases As Boolean, ByVal strMessage As String, ByVal dsRs As System.Data.DataSet, ByVal userState As Object)
            If (Me.GetClaimsMarkInRecordsOperationCompleted Is Nothing) Then
                Me.GetClaimsMarkInRecordsOperationCompleted = AddressOf Me.OnGetClaimsMarkInRecordsOperationCompleted
            End If
            Me.InvokeAsync("GetClaimsMarkInRecords", New Object() {policyNo, markinStatus, excludeMcsLinkedCases, strMessage, dsRs}, Me.GetClaimsMarkInRecordsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimsMarkInRecordsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimsMarkInRecordsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimsMarkInRecordsCompleted(Me, New GetClaimsMarkInRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimsMarkInRecordsFromPortal", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimsMarkInRecordsFromPortal(ByRef strMessage As String, ByRef dsRs As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("GetClaimsMarkInRecordsFromPortal", New Object() {strMessage, dsRs})
            strMessage = CType(results(1),String)
            dsRs = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimsMarkInRecordsFromPortalAsync(ByVal strMessage As String, ByVal dsRs As System.Data.DataSet)
            Me.GetClaimsMarkInRecordsFromPortalAsync(strMessage, dsRs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimsMarkInRecordsFromPortalAsync(ByVal strMessage As String, ByVal dsRs As System.Data.DataSet, ByVal userState As Object)
            If (Me.GetClaimsMarkInRecordsFromPortalOperationCompleted Is Nothing) Then
                Me.GetClaimsMarkInRecordsFromPortalOperationCompleted = AddressOf Me.OnGetClaimsMarkInRecordsFromPortalOperationCompleted
            End If
            Me.InvokeAsync("GetClaimsMarkInRecordsFromPortal", New Object() {strMessage, dsRs}, Me.GetClaimsMarkInRecordsFromPortalOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimsMarkInRecordsFromPortalOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimsMarkInRecordsFromPortalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimsMarkInRecordsFromPortalCompleted(Me, New GetClaimsMarkInRecordsFromPortalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetAllIncompletedClaimsMarkInRecords", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllIncompletedClaimsMarkInRecords(ByVal excludeMcsLinkedCases As Boolean, ByRef strMessage As String, ByRef dsRs As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("GetAllIncompletedClaimsMarkInRecords", New Object() {excludeMcsLinkedCases, strMessage, dsRs})
            strMessage = CType(results(1),String)
            dsRs = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllIncompletedClaimsMarkInRecordsAsync(ByVal excludeMcsLinkedCases As Boolean, ByVal strMessage As String, ByVal dsRs As System.Data.DataSet)
            Me.GetAllIncompletedClaimsMarkInRecordsAsync(excludeMcsLinkedCases, strMessage, dsRs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllIncompletedClaimsMarkInRecordsAsync(ByVal excludeMcsLinkedCases As Boolean, ByVal strMessage As String, ByVal dsRs As System.Data.DataSet, ByVal userState As Object)
            If (Me.GetAllIncompletedClaimsMarkInRecordsOperationCompleted Is Nothing) Then
                Me.GetAllIncompletedClaimsMarkInRecordsOperationCompleted = AddressOf Me.OnGetAllIncompletedClaimsMarkInRecordsOperationCompleted
            End If
            Me.InvokeAsync("GetAllIncompletedClaimsMarkInRecords", New Object() {excludeMcsLinkedCases, strMessage, dsRs}, Me.GetAllIncompletedClaimsMarkInRecordsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllIncompletedClaimsMarkInRecordsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllIncompletedClaimsMarkInRecordsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllIncompletedClaimsMarkInRecordsCompleted(Me, New GetAllIncompletedClaimsMarkInRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/DeleteClaimsMarkInRecords", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteClaimsMarkInRecords(ByVal markinId As Integer) As Boolean
            Dim results() As Object = Me.Invoke("DeleteClaimsMarkInRecords", New Object() {markinId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteClaimsMarkInRecordsAsync(ByVal markinId As Integer)
            Me.DeleteClaimsMarkInRecordsAsync(markinId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteClaimsMarkInRecordsAsync(ByVal markinId As Integer, ByVal userState As Object)
            If (Me.DeleteClaimsMarkInRecordsOperationCompleted Is Nothing) Then
                Me.DeleteClaimsMarkInRecordsOperationCompleted = AddressOf Me.OnDeleteClaimsMarkInRecordsOperationCompleted
            End If
            Me.InvokeAsync("DeleteClaimsMarkInRecords", New Object() {markinId}, Me.DeleteClaimsMarkInRecordsOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteClaimsMarkInRecordsOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteClaimsMarkInRecordsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteClaimsMarkInRecordsCompleted(Me, New DeleteClaimsMarkInRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimTypeByTransCode", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimTypeByTransCode(ByVal markInTransCode As String, ByRef strMessage As String, ByRef claimType As String) As Boolean
            Dim results() As Object = Me.Invoke("GetClaimTypeByTransCode", New Object() {markInTransCode, strMessage, claimType})
            strMessage = CType(results(1),String)
            claimType = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimTypeByTransCodeAsync(ByVal markInTransCode As String, ByVal strMessage As String, ByVal claimType As String)
            Me.GetClaimTypeByTransCodeAsync(markInTransCode, strMessage, claimType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimTypeByTransCodeAsync(ByVal markInTransCode As String, ByVal strMessage As String, ByVal claimType As String, ByVal userState As Object)
            If (Me.GetClaimTypeByTransCodeOperationCompleted Is Nothing) Then
                Me.GetClaimTypeByTransCodeOperationCompleted = AddressOf Me.OnGetClaimTypeByTransCodeOperationCompleted
            End If
            Me.InvokeAsync("GetClaimTypeByTransCode", New Object() {markInTransCode, strMessage, claimType}, Me.GetClaimTypeByTransCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimTypeByTransCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimTypeByTransCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimTypeByTransCodeCompleted(Me, New GetClaimTypeByTransCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/InsertMarkInRecord", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertMarkInRecord(ByVal policyNo As String, ByVal transType As Integer, ByRef errorMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("InsertMarkInRecord", New Object() {policyNo, transType, errorMsg})
            errorMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertMarkInRecordAsync(ByVal policyNo As String, ByVal transType As Integer, ByVal errorMsg As String)
            Me.InsertMarkInRecordAsync(policyNo, transType, errorMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertMarkInRecordAsync(ByVal policyNo As String, ByVal transType As Integer, ByVal errorMsg As String, ByVal userState As Object)
            If (Me.InsertMarkInRecordOperationCompleted Is Nothing) Then
                Me.InsertMarkInRecordOperationCompleted = AddressOf Me.OnInsertMarkInRecordOperationCompleted
            End If
            Me.InvokeAsync("InsertMarkInRecord", New Object() {policyNo, transType, errorMsg}, Me.InsertMarkInRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertMarkInRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertMarkInRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertMarkInRecordCompleted(Me, New InsertMarkInRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetMcsPaymentDetails", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMcsPaymentDetails(ByVal year As Integer, ByVal month As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMcsPaymentDetails", New Object() {year, month})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMcsPaymentDetailsAsync(ByVal year As Integer, ByVal month As Integer)
            Me.GetMcsPaymentDetailsAsync(year, month, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMcsPaymentDetailsAsync(ByVal year As Integer, ByVal month As Integer, ByVal userState As Object)
            If (Me.GetMcsPaymentDetailsOperationCompleted Is Nothing) Then
                Me.GetMcsPaymentDetailsOperationCompleted = AddressOf Me.OnGetMcsPaymentDetailsOperationCompleted
            End If
            Me.InvokeAsync("GetMcsPaymentDetails", New Object() {year, month}, Me.GetMcsPaymentDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMcsPaymentDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMcsPaymentDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMcsPaymentDetailsCompleted(Me, New GetMcsPaymentDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetPreAssessment", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPreAssessment(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetPreAssessment", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPreAssessmentAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.GetPreAssessmentAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPreAssessmentAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetPreAssessmentOperationCompleted Is Nothing) Then
                Me.GetPreAssessmentOperationCompleted = AddressOf Me.OnGetPreAssessmentOperationCompleted
            End If
            Me.InvokeAsync("GetPreAssessment", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.GetPreAssessmentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPreAssessmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPreAssessmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPreAssessmentCompleted(Me, New GetPreAssessmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetRemainBalance", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRemainBalance(ByVal strSysName As String, ByRef strMessage As String, ByRef dsReturn As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngOccur As Long, ByVal strUser As String, ByVal strPolicyNo As String, ByVal datInDate As Date) As Boolean
            Dim results() As Object = Me.Invoke("GetRemainBalance", New Object() {strSysName, strMessage, dsReturn, lngClaimNo, lngOccur, strUser, strPolicyNo, datInDate})
            strMessage = CType(results(1),String)
            dsReturn = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRemainBalanceAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngOccur As Long, ByVal strUser As String, ByVal strPolicyNo As String, ByVal datInDate As Date)
            Me.GetRemainBalanceAsync(strSysName, strMessage, dsReturn, lngClaimNo, lngOccur, strUser, strPolicyNo, datInDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRemainBalanceAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngOccur As Long, ByVal strUser As String, ByVal strPolicyNo As String, ByVal datInDate As Date, ByVal userState As Object)
            If (Me.GetRemainBalanceOperationCompleted Is Nothing) Then
                Me.GetRemainBalanceOperationCompleted = AddressOf Me.OnGetRemainBalanceOperationCompleted
            End If
            Me.InvokeAsync("GetRemainBalance", New Object() {strSysName, strMessage, dsReturn, lngClaimNo, lngOccur, strUser, strPolicyNo, datInDate}, Me.GetRemainBalanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRemainBalanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRemainBalanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRemainBalanceCompleted(Me, New GetRemainBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/isTheOneStandard", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function isTheOneStandard(ByRef strErrMsg As String, ByVal dblCustomerId As Long) As Boolean
            Dim results() As Object = Me.Invoke("isTheOneStandard", New Object() {strErrMsg, dblCustomerId})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isTheOneStandardAsync(ByVal strErrMsg As String, ByVal dblCustomerId As Long)
            Me.isTheOneStandardAsync(strErrMsg, dblCustomerId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isTheOneStandardAsync(ByVal strErrMsg As String, ByVal dblCustomerId As Long, ByVal userState As Object)
            If (Me.isTheOneStandardOperationCompleted Is Nothing) Then
                Me.isTheOneStandardOperationCompleted = AddressOf Me.OnisTheOneStandardOperationCompleted
            End If
            Me.InvokeAsync("isTheOneStandard", New Object() {strErrMsg, dblCustomerId}, Me.isTheOneStandardOperationCompleted, userState)
        End Sub
        
        Private Sub OnisTheOneStandardOperationCompleted(ByVal arg As Object)
            If (Not (Me.isTheOneStandardCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isTheOneStandardCompleted(Me, New isTheOneStandardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetSunAccountExchangeRate", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSunAccountExchangeRate(ByVal year As Integer, ByVal month As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSunAccountExchangeRate", New Object() {year, month})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSunAccountExchangeRateAsync(ByVal year As Integer, ByVal month As Integer)
            Me.GetSunAccountExchangeRateAsync(year, month, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSunAccountExchangeRateAsync(ByVal year As Integer, ByVal month As Integer, ByVal userState As Object)
            If (Me.GetSunAccountExchangeRateOperationCompleted Is Nothing) Then
                Me.GetSunAccountExchangeRateOperationCompleted = AddressOf Me.OnGetSunAccountExchangeRateOperationCompleted
            End If
            Me.InvokeAsync("GetSunAccountExchangeRate", New Object() {year, month}, Me.GetSunAccountExchangeRateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSunAccountExchangeRateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSunAccountExchangeRateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSunAccountExchangeRateCompleted(Me, New GetSunAccountExchangeRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetSunAccountEmail", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSunAccountEmail() As String
            Dim results() As Object = Me.Invoke("GetSunAccountEmail", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSunAccountEmailAsync()
            Me.GetSunAccountEmailAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSunAccountEmailAsync(ByVal userState As Object)
            If (Me.GetSunAccountEmailOperationCompleted Is Nothing) Then
                Me.GetSunAccountEmailOperationCompleted = AddressOf Me.OnGetSunAccountEmailOperationCompleted
            End If
            Me.InvokeAsync("GetSunAccountEmail", New Object(-1) {}, Me.GetSunAccountEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSunAccountEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSunAccountEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSunAccountEmailCompleted(Me, New GetSunAccountEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetMcsMarkInEmailItems", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMcsMarkInEmailItems(ByVal systemDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMcsMarkInEmailItems", New Object() {systemDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMcsMarkInEmailItemsAsync(ByVal systemDate As Date)
            Me.GetMcsMarkInEmailItemsAsync(systemDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMcsMarkInEmailItemsAsync(ByVal systemDate As Date, ByVal userState As Object)
            If (Me.GetMcsMarkInEmailItemsOperationCompleted Is Nothing) Then
                Me.GetMcsMarkInEmailItemsOperationCompleted = AddressOf Me.OnGetMcsMarkInEmailItemsOperationCompleted
            End If
            Me.InvokeAsync("GetMcsMarkInEmailItems", New Object() {systemDate}, Me.GetMcsMarkInEmailItemsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMcsMarkInEmailItemsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMcsMarkInEmailItemsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMcsMarkInEmailItemsCompleted(Me, New GetMcsMarkInEmailItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetMcsMarkInSmsItems", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMcsMarkInSmsItems(ByVal systemDate As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMcsMarkInSmsItems", New Object() {systemDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMcsMarkInSmsItemsAsync(ByVal systemDate As Date)
            Me.GetMcsMarkInSmsItemsAsync(systemDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMcsMarkInSmsItemsAsync(ByVal systemDate As Date, ByVal userState As Object)
            If (Me.GetMcsMarkInSmsItemsOperationCompleted Is Nothing) Then
                Me.GetMcsMarkInSmsItemsOperationCompleted = AddressOf Me.OnGetMcsMarkInSmsItemsOperationCompleted
            End If
            Me.InvokeAsync("GetMcsMarkInSmsItems", New Object() {systemDate}, Me.GetMcsMarkInSmsItemsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMcsMarkInSmsItemsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMcsMarkInSmsItemsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMcsMarkInSmsItemsCompleted(Me, New GetMcsMarkInSmsItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/AddMcsMarkInEmailLog", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddMcsMarkInEmailLog(ByVal markinId As String, ByVal markinDate As Date, ByVal markinType As String, ByVal policyNo As String, ByVal agentCode As String, ByVal agentEmail As String, ByVal customerId As Integer, ByVal customerEmail As String, ByVal insuredName As String, ByVal emailToAgentStatus As String, ByVal emailToCustomerStatus As String, ByVal emailRemark As String) As Boolean
            Dim results() As Object = Me.Invoke("AddMcsMarkInEmailLog", New Object() {markinId, markinDate, markinType, policyNo, agentCode, agentEmail, customerId, customerEmail, insuredName, emailToAgentStatus, emailToCustomerStatus, emailRemark})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddMcsMarkInEmailLogAsync(ByVal markinId As String, ByVal markinDate As Date, ByVal markinType As String, ByVal policyNo As String, ByVal agentCode As String, ByVal agentEmail As String, ByVal customerId As Integer, ByVal customerEmail As String, ByVal insuredName As String, ByVal emailToAgentStatus As String, ByVal emailToCustomerStatus As String, ByVal emailRemark As String)
            Me.AddMcsMarkInEmailLogAsync(markinId, markinDate, markinType, policyNo, agentCode, agentEmail, customerId, customerEmail, insuredName, emailToAgentStatus, emailToCustomerStatus, emailRemark, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddMcsMarkInEmailLogAsync(ByVal markinId As String, ByVal markinDate As Date, ByVal markinType As String, ByVal policyNo As String, ByVal agentCode As String, ByVal agentEmail As String, ByVal customerId As Integer, ByVal customerEmail As String, ByVal insuredName As String, ByVal emailToAgentStatus As String, ByVal emailToCustomerStatus As String, ByVal emailRemark As String, ByVal userState As Object)
            If (Me.AddMcsMarkInEmailLogOperationCompleted Is Nothing) Then
                Me.AddMcsMarkInEmailLogOperationCompleted = AddressOf Me.OnAddMcsMarkInEmailLogOperationCompleted
            End If
            Me.InvokeAsync("AddMcsMarkInEmailLog", New Object() {markinId, markinDate, markinType, policyNo, agentCode, agentEmail, customerId, customerEmail, insuredName, emailToAgentStatus, emailToCustomerStatus, emailRemark}, Me.AddMcsMarkInEmailLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddMcsMarkInEmailLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddMcsMarkInEmailLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddMcsMarkInEmailLogCompleted(Me, New AddMcsMarkInEmailLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/AddMcsMarkInSmsLog", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddMcsMarkInSmsLog(ByVal markinId As String, ByVal markinDate As Date, ByVal markinType As String, ByVal policyNo As String, ByVal agentCode As String, ByVal agentMobile As String, ByVal customerId As Integer, ByVal customerMobile As String, ByVal insuredName As String, ByVal smsToAgentStatus As String, ByVal smsToCustomerStatus As String, ByVal smsRemark As String) As Boolean
            Dim results() As Object = Me.Invoke("AddMcsMarkInSmsLog", New Object() {markinId, markinDate, markinType, policyNo, agentCode, agentMobile, customerId, customerMobile, insuredName, smsToAgentStatus, smsToCustomerStatus, smsRemark})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddMcsMarkInSmsLogAsync(ByVal markinId As String, ByVal markinDate As Date, ByVal markinType As String, ByVal policyNo As String, ByVal agentCode As String, ByVal agentMobile As String, ByVal customerId As Integer, ByVal customerMobile As String, ByVal insuredName As String, ByVal smsToAgentStatus As String, ByVal smsToCustomerStatus As String, ByVal smsRemark As String)
            Me.AddMcsMarkInSmsLogAsync(markinId, markinDate, markinType, policyNo, agentCode, agentMobile, customerId, customerMobile, insuredName, smsToAgentStatus, smsToCustomerStatus, smsRemark, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddMcsMarkInSmsLogAsync(ByVal markinId As String, ByVal markinDate As Date, ByVal markinType As String, ByVal policyNo As String, ByVal agentCode As String, ByVal agentMobile As String, ByVal customerId As Integer, ByVal customerMobile As String, ByVal insuredName As String, ByVal smsToAgentStatus As String, ByVal smsToCustomerStatus As String, ByVal smsRemark As String, ByVal userState As Object)
            If (Me.AddMcsMarkInSmsLogOperationCompleted Is Nothing) Then
                Me.AddMcsMarkInSmsLogOperationCompleted = AddressOf Me.OnAddMcsMarkInSmsLogOperationCompleted
            End If
            Me.InvokeAsync("AddMcsMarkInSmsLog", New Object() {markinId, markinDate, markinType, policyNo, agentCode, agentMobile, customerId, customerMobile, insuredName, smsToAgentStatus, smsToCustomerStatus, smsRemark}, Me.AddMcsMarkInSmsLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddMcsMarkInSmsLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddMcsMarkInSmsLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddMcsMarkInSmsLogCompleted(Me, New AddMcsMarkInSmsLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/IsMcsMarkInSmsSentForSamePolicyOnSameDay", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsMcsMarkInSmsSentForSamePolicyOnSameDay(ByVal markinId As String, ByVal markinDate As Date, ByVal policyNo As String, ByRef smsToAgentStatus As String, ByRef smsToCustomerStatus As String) As Boolean
            Dim results() As Object = Me.Invoke("IsMcsMarkInSmsSentForSamePolicyOnSameDay", New Object() {markinId, markinDate, policyNo, smsToAgentStatus, smsToCustomerStatus})
            smsToAgentStatus = CType(results(1),String)
            smsToCustomerStatus = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsMcsMarkInSmsSentForSamePolicyOnSameDayAsync(ByVal markinId As String, ByVal markinDate As Date, ByVal policyNo As String, ByVal smsToAgentStatus As String, ByVal smsToCustomerStatus As String)
            Me.IsMcsMarkInSmsSentForSamePolicyOnSameDayAsync(markinId, markinDate, policyNo, smsToAgentStatus, smsToCustomerStatus, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsMcsMarkInSmsSentForSamePolicyOnSameDayAsync(ByVal markinId As String, ByVal markinDate As Date, ByVal policyNo As String, ByVal smsToAgentStatus As String, ByVal smsToCustomerStatus As String, ByVal userState As Object)
            If (Me.IsMcsMarkInSmsSentForSamePolicyOnSameDayOperationCompleted Is Nothing) Then
                Me.IsMcsMarkInSmsSentForSamePolicyOnSameDayOperationCompleted = AddressOf Me.OnIsMcsMarkInSmsSentForSamePolicyOnSameDayOperationCompleted
            End If
            Me.InvokeAsync("IsMcsMarkInSmsSentForSamePolicyOnSameDay", New Object() {markinId, markinDate, policyNo, smsToAgentStatus, smsToCustomerStatus}, Me.IsMcsMarkInSmsSentForSamePolicyOnSameDayOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsMcsMarkInSmsSentForSamePolicyOnSameDayOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsMcsMarkInSmsSentForSamePolicyOnSameDayCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsMcsMarkInSmsSentForSamePolicyOnSameDayCompleted(Me, New IsMcsMarkInSmsSentForSamePolicyOnSameDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetMcsPaymentEmailItems", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMcsPaymentEmailItems(ByVal dsMcsPayment As System.Data.DataSet) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMcsPaymentEmailItems", New Object() {dsMcsPayment})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMcsPaymentEmailItemsAsync(ByVal dsMcsPayment As System.Data.DataSet)
            Me.GetMcsPaymentEmailItemsAsync(dsMcsPayment, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMcsPaymentEmailItemsAsync(ByVal dsMcsPayment As System.Data.DataSet, ByVal userState As Object)
            If (Me.GetMcsPaymentEmailItemsOperationCompleted Is Nothing) Then
                Me.GetMcsPaymentEmailItemsOperationCompleted = AddressOf Me.OnGetMcsPaymentEmailItemsOperationCompleted
            End If
            Me.InvokeAsync("GetMcsPaymentEmailItems", New Object() {dsMcsPayment}, Me.GetMcsPaymentEmailItemsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMcsPaymentEmailItemsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMcsPaymentEmailItemsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMcsPaymentEmailItemsCompleted(Me, New GetMcsPaymentEmailItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetMcsPaymentSmsItems", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMcsPaymentSmsItems(ByVal dsMcsPayment As System.Data.DataSet) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMcsPaymentSmsItems", New Object() {dsMcsPayment})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMcsPaymentSmsItemsAsync(ByVal dsMcsPayment As System.Data.DataSet)
            Me.GetMcsPaymentSmsItemsAsync(dsMcsPayment, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMcsPaymentSmsItemsAsync(ByVal dsMcsPayment As System.Data.DataSet, ByVal userState As Object)
            If (Me.GetMcsPaymentSmsItemsOperationCompleted Is Nothing) Then
                Me.GetMcsPaymentSmsItemsOperationCompleted = AddressOf Me.OnGetMcsPaymentSmsItemsOperationCompleted
            End If
            Me.InvokeAsync("GetMcsPaymentSmsItems", New Object() {dsMcsPayment}, Me.GetMcsPaymentSmsItemsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMcsPaymentSmsItemsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMcsPaymentSmsItemsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMcsPaymentSmsItemsCompleted(Me, New GetMcsPaymentSmsItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/AddMcsPaymentEmailLog", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddMcsPaymentEmailLog(ByVal claimNo As String, ByVal claimOccur As String, ByVal settledDate As Date, ByVal paymentType As String, ByVal policyNo As String, ByVal agentCode As String, ByVal agentEmail As String, ByVal customerId As Integer, ByVal customerEmail As String, ByVal insuredName As String, ByVal emailToAgentStatus As String, ByVal emailToCustomerStatus As String, ByVal emailRemark As String) As Boolean
            Dim results() As Object = Me.Invoke("AddMcsPaymentEmailLog", New Object() {claimNo, claimOccur, settledDate, paymentType, policyNo, agentCode, agentEmail, customerId, customerEmail, insuredName, emailToAgentStatus, emailToCustomerStatus, emailRemark})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddMcsPaymentEmailLogAsync(ByVal claimNo As String, ByVal claimOccur As String, ByVal settledDate As Date, ByVal paymentType As String, ByVal policyNo As String, ByVal agentCode As String, ByVal agentEmail As String, ByVal customerId As Integer, ByVal customerEmail As String, ByVal insuredName As String, ByVal emailToAgentStatus As String, ByVal emailToCustomerStatus As String, ByVal emailRemark As String)
            Me.AddMcsPaymentEmailLogAsync(claimNo, claimOccur, settledDate, paymentType, policyNo, agentCode, agentEmail, customerId, customerEmail, insuredName, emailToAgentStatus, emailToCustomerStatus, emailRemark, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddMcsPaymentEmailLogAsync(ByVal claimNo As String, ByVal claimOccur As String, ByVal settledDate As Date, ByVal paymentType As String, ByVal policyNo As String, ByVal agentCode As String, ByVal agentEmail As String, ByVal customerId As Integer, ByVal customerEmail As String, ByVal insuredName As String, ByVal emailToAgentStatus As String, ByVal emailToCustomerStatus As String, ByVal emailRemark As String, ByVal userState As Object)
            If (Me.AddMcsPaymentEmailLogOperationCompleted Is Nothing) Then
                Me.AddMcsPaymentEmailLogOperationCompleted = AddressOf Me.OnAddMcsPaymentEmailLogOperationCompleted
            End If
            Me.InvokeAsync("AddMcsPaymentEmailLog", New Object() {claimNo, claimOccur, settledDate, paymentType, policyNo, agentCode, agentEmail, customerId, customerEmail, insuredName, emailToAgentStatus, emailToCustomerStatus, emailRemark}, Me.AddMcsPaymentEmailLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddMcsPaymentEmailLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddMcsPaymentEmailLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddMcsPaymentEmailLogCompleted(Me, New AddMcsPaymentEmailLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/AddMcsPaymentSmsLog", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddMcsPaymentSmsLog(ByVal claimNo As String, ByVal claimOccur As String, ByVal settledDate As Date, ByVal paymentType As String, ByVal policyNo As String, ByVal agentCode As String, ByVal agentMobile As String, ByVal customerId As Integer, ByVal customerMobile As String, ByVal insuredName As String, ByVal smsToAgentStatus As String, ByVal smsToCustomerStatus As String, ByVal smsRemark As String) As Boolean
            Dim results() As Object = Me.Invoke("AddMcsPaymentSmsLog", New Object() {claimNo, claimOccur, settledDate, paymentType, policyNo, agentCode, agentMobile, customerId, customerMobile, insuredName, smsToAgentStatus, smsToCustomerStatus, smsRemark})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddMcsPaymentSmsLogAsync(ByVal claimNo As String, ByVal claimOccur As String, ByVal settledDate As Date, ByVal paymentType As String, ByVal policyNo As String, ByVal agentCode As String, ByVal agentMobile As String, ByVal customerId As Integer, ByVal customerMobile As String, ByVal insuredName As String, ByVal smsToAgentStatus As String, ByVal smsToCustomerStatus As String, ByVal smsRemark As String)
            Me.AddMcsPaymentSmsLogAsync(claimNo, claimOccur, settledDate, paymentType, policyNo, agentCode, agentMobile, customerId, customerMobile, insuredName, smsToAgentStatus, smsToCustomerStatus, smsRemark, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddMcsPaymentSmsLogAsync(ByVal claimNo As String, ByVal claimOccur As String, ByVal settledDate As Date, ByVal paymentType As String, ByVal policyNo As String, ByVal agentCode As String, ByVal agentMobile As String, ByVal customerId As Integer, ByVal customerMobile As String, ByVal insuredName As String, ByVal smsToAgentStatus As String, ByVal smsToCustomerStatus As String, ByVal smsRemark As String, ByVal userState As Object)
            If (Me.AddMcsPaymentSmsLogOperationCompleted Is Nothing) Then
                Me.AddMcsPaymentSmsLogOperationCompleted = AddressOf Me.OnAddMcsPaymentSmsLogOperationCompleted
            End If
            Me.InvokeAsync("AddMcsPaymentSmsLog", New Object() {claimNo, claimOccur, settledDate, paymentType, policyNo, agentCode, agentMobile, customerId, customerMobile, insuredName, smsToAgentStatus, smsToCustomerStatus, smsRemark}, Me.AddMcsPaymentSmsLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddMcsPaymentSmsLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddMcsPaymentSmsLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddMcsPaymentSmsLogCompleted(Me, New AddMcsPaymentSmsLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/IsMcsPaymentSmsSentForSamePolicyOnSameDay", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsMcsPaymentSmsSentForSamePolicyOnSameDay(ByVal claimNo As String, ByVal claimOccur As String, ByVal settledDate As Date, ByVal policyNo As String) As Boolean
            Dim results() As Object = Me.Invoke("IsMcsPaymentSmsSentForSamePolicyOnSameDay", New Object() {claimNo, claimOccur, settledDate, policyNo})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsMcsPaymentSmsSentForSamePolicyOnSameDayAsync(ByVal claimNo As String, ByVal claimOccur As String, ByVal settledDate As Date, ByVal policyNo As String)
            Me.IsMcsPaymentSmsSentForSamePolicyOnSameDayAsync(claimNo, claimOccur, settledDate, policyNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsMcsPaymentSmsSentForSamePolicyOnSameDayAsync(ByVal claimNo As String, ByVal claimOccur As String, ByVal settledDate As Date, ByVal policyNo As String, ByVal userState As Object)
            If (Me.IsMcsPaymentSmsSentForSamePolicyOnSameDayOperationCompleted Is Nothing) Then
                Me.IsMcsPaymentSmsSentForSamePolicyOnSameDayOperationCompleted = AddressOf Me.OnIsMcsPaymentSmsSentForSamePolicyOnSameDayOperationCompleted
            End If
            Me.InvokeAsync("IsMcsPaymentSmsSentForSamePolicyOnSameDay", New Object() {claimNo, claimOccur, settledDate, policyNo}, Me.IsMcsPaymentSmsSentForSamePolicyOnSameDayOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsMcsPaymentSmsSentForSamePolicyOnSameDayOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsMcsPaymentSmsSentForSamePolicyOnSameDayCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsMcsPaymentSmsSentForSamePolicyOnSameDayCompleted(Me, New IsMcsPaymentSmsSentForSamePolicyOnSameDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetMcsPaymentSmsLogCount", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMcsPaymentSmsLogCount() As Integer
            Dim results() As Object = Me.Invoke("GetMcsPaymentSmsLogCount", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMcsPaymentSmsLogCountAsync()
            Me.GetMcsPaymentSmsLogCountAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMcsPaymentSmsLogCountAsync(ByVal userState As Object)
            If (Me.GetMcsPaymentSmsLogCountOperationCompleted Is Nothing) Then
                Me.GetMcsPaymentSmsLogCountOperationCompleted = AddressOf Me.OnGetMcsPaymentSmsLogCountOperationCompleted
            End If
            Me.InvokeAsync("GetMcsPaymentSmsLogCount", New Object(-1) {}, Me.GetMcsPaymentSmsLogCountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMcsPaymentSmsLogCountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMcsPaymentSmsLogCountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMcsPaymentSmsLogCountCompleted(Me, New GetMcsPaymentSmsLogCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetPolicyLifetimeBalance", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyLifetimeBalance(ByVal strPolicyNo As String, ByVal intCoverageNo As Integer, ByVal insuredID As Integer, ByVal strPlanCode As String, ByVal strCurrency As String, ByVal strTable1 As String, ByVal strTable2 As String, ByVal intClaimNo As Integer, ByVal intClaimOccur As Integer, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef decBalance As System.Nullable(Of Decimal), <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByRef intANB As System.Nullable(Of Integer), ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPolicyLifetimeBalance", New Object() {strPolicyNo, intCoverageNo, insuredID, strPlanCode, strCurrency, strTable1, strTable2, intClaimNo, intClaimOccur, decBalance, intANB, strErr})
            decBalance = CType(results(1),System.Nullable(Of Decimal))
            intANB = CType(results(2),System.Nullable(Of Integer))
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyLifetimeBalanceAsync(ByVal strPolicyNo As String, ByVal intCoverageNo As Integer, ByVal insuredID As Integer, ByVal strPlanCode As String, ByVal strCurrency As String, ByVal strTable1 As String, ByVal strTable2 As String, ByVal intClaimNo As Integer, ByVal intClaimOccur As Integer, ByVal decBalance As System.Nullable(Of Decimal), ByVal intANB As System.Nullable(Of Integer), ByVal strErr As String)
            Me.GetPolicyLifetimeBalanceAsync(strPolicyNo, intCoverageNo, insuredID, strPlanCode, strCurrency, strTable1, strTable2, intClaimNo, intClaimOccur, decBalance, intANB, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyLifetimeBalanceAsync(ByVal strPolicyNo As String, ByVal intCoverageNo As Integer, ByVal insuredID As Integer, ByVal strPlanCode As String, ByVal strCurrency As String, ByVal strTable1 As String, ByVal strTable2 As String, ByVal intClaimNo As Integer, ByVal intClaimOccur As Integer, ByVal decBalance As System.Nullable(Of Decimal), ByVal intANB As System.Nullable(Of Integer), ByVal strErr As String, ByVal userState As Object)
            If (Me.GetPolicyLifetimeBalanceOperationCompleted Is Nothing) Then
                Me.GetPolicyLifetimeBalanceOperationCompleted = AddressOf Me.OnGetPolicyLifetimeBalanceOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyLifetimeBalance", New Object() {strPolicyNo, intCoverageNo, insuredID, strPlanCode, strCurrency, strTable1, strTable2, intClaimNo, intClaimOccur, decBalance, intANB, strErr}, Me.GetPolicyLifetimeBalanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyLifetimeBalanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyLifetimeBalanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyLifetimeBalanceCompleted(Me, New GetPolicyLifetimeBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetInsuredLifetimeBalance", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInsuredLifetimeBalance(ByVal insuredID As Integer, ByVal intClaimNo As Integer, ByVal intClaimOccur As Integer, ByRef dtBalance As System.Data.DataTable, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetInsuredLifetimeBalance", New Object() {insuredID, intClaimNo, intClaimOccur, dtBalance, strErr})
            dtBalance = CType(results(1),System.Data.DataTable)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInsuredLifetimeBalanceAsync(ByVal insuredID As Integer, ByVal intClaimNo As Integer, ByVal intClaimOccur As Integer, ByVal dtBalance As System.Data.DataTable, ByVal strErr As String)
            Me.GetInsuredLifetimeBalanceAsync(insuredID, intClaimNo, intClaimOccur, dtBalance, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInsuredLifetimeBalanceAsync(ByVal insuredID As Integer, ByVal intClaimNo As Integer, ByVal intClaimOccur As Integer, ByVal dtBalance As System.Data.DataTable, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetInsuredLifetimeBalanceOperationCompleted Is Nothing) Then
                Me.GetInsuredLifetimeBalanceOperationCompleted = AddressOf Me.OnGetInsuredLifetimeBalanceOperationCompleted
            End If
            Me.InvokeAsync("GetInsuredLifetimeBalance", New Object() {insuredID, intClaimNo, intClaimOccur, dtBalance, strErr}, Me.GetInsuredLifetimeBalanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInsuredLifetimeBalanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInsuredLifetimeBalanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInsuredLifetimeBalanceCompleted(Me, New GetInsuredLifetimeBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/CheckAggregateLimit", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckAggregateLimit(ByVal lngClaimNo As Long, ByVal intOccur As Integer, ByVal strRuleType As String, ByVal isDouble As Boolean, ByVal hasNoClaimBoosterBenefit As Boolean, ByRef strAggLimitMessage As String, ByVal strClaimTable As String, ByRef strErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckAggregateLimit", New Object() {lngClaimNo, intOccur, strRuleType, isDouble, hasNoClaimBoosterBenefit, strAggLimitMessage, strClaimTable, strErrMsg})
            strAggLimitMessage = CType(results(1),String)
            strErrMsg = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckAggregateLimitAsync(ByVal lngClaimNo As Long, ByVal intOccur As Integer, ByVal strRuleType As String, ByVal isDouble As Boolean, ByVal hasNoClaimBoosterBenefit As Boolean, ByVal strAggLimitMessage As String, ByVal strClaimTable As String, ByVal strErrMsg As String)
            Me.CheckAggregateLimitAsync(lngClaimNo, intOccur, strRuleType, isDouble, hasNoClaimBoosterBenefit, strAggLimitMessage, strClaimTable, strErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckAggregateLimitAsync(ByVal lngClaimNo As Long, ByVal intOccur As Integer, ByVal strRuleType As String, ByVal isDouble As Boolean, ByVal hasNoClaimBoosterBenefit As Boolean, ByVal strAggLimitMessage As String, ByVal strClaimTable As String, ByVal strErrMsg As String, ByVal userState As Object)
            If (Me.CheckAggregateLimitOperationCompleted Is Nothing) Then
                Me.CheckAggregateLimitOperationCompleted = AddressOf Me.OnCheckAggregateLimitOperationCompleted
            End If
            Me.InvokeAsync("CheckAggregateLimit", New Object() {lngClaimNo, intOccur, strRuleType, isDouble, hasNoClaimBoosterBenefit, strAggLimitMessage, strClaimTable, strErrMsg}, Me.CheckAggregateLimitOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckAggregateLimitOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckAggregateLimitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckAggregateLimitCompleted(Me, New CheckAggregateLimitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/CheckAggregateLimitClaimMaint", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckAggregateLimitClaimMaint(ByVal strClaimNo As String, ByVal intOccur As Integer, ByVal strRuleType As String, ByVal isDouble As Boolean, ByVal hasNoClaimBoosterBenefit As Boolean, ByVal strClaimTable As String, ByVal strPayCur As String, ByVal strPolicyNo As String, ByRef strMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckAggregateLimitClaimMaint", New Object() {strClaimNo, intOccur, strRuleType, isDouble, hasNoClaimBoosterBenefit, strClaimTable, strPayCur, strPolicyNo, strMsg})
            strMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckAggregateLimitClaimMaintAsync(ByVal strClaimNo As String, ByVal intOccur As Integer, ByVal strRuleType As String, ByVal isDouble As Boolean, ByVal hasNoClaimBoosterBenefit As Boolean, ByVal strClaimTable As String, ByVal strPayCur As String, ByVal strPolicyNo As String, ByVal strMsg As String)
            Me.CheckAggregateLimitClaimMaintAsync(strClaimNo, intOccur, strRuleType, isDouble, hasNoClaimBoosterBenefit, strClaimTable, strPayCur, strPolicyNo, strMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckAggregateLimitClaimMaintAsync(ByVal strClaimNo As String, ByVal intOccur As Integer, ByVal strRuleType As String, ByVal isDouble As Boolean, ByVal hasNoClaimBoosterBenefit As Boolean, ByVal strClaimTable As String, ByVal strPayCur As String, ByVal strPolicyNo As String, ByVal strMsg As String, ByVal userState As Object)
            If (Me.CheckAggregateLimitClaimMaintOperationCompleted Is Nothing) Then
                Me.CheckAggregateLimitClaimMaintOperationCompleted = AddressOf Me.OnCheckAggregateLimitClaimMaintOperationCompleted
            End If
            Me.InvokeAsync("CheckAggregateLimitClaimMaint", New Object() {strClaimNo, intOccur, strRuleType, isDouble, hasNoClaimBoosterBenefit, strClaimTable, strPayCur, strPolicyNo, strMsg}, Me.CheckAggregateLimitClaimMaintOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckAggregateLimitClaimMaintOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckAggregateLimitClaimMaintCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckAggregateLimitClaimMaintCompleted(Me, New CheckAggregateLimitClaimMaintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetReinstatementDateByPolicyNo", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReinstatementDateByPolicyNo(ByVal strPolicy As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetReinstatementDateByPolicyNo", New Object() {strPolicy})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReinstatementDateByPolicyNoAsync(ByVal strPolicy As String)
            Me.GetReinstatementDateByPolicyNoAsync(strPolicy, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReinstatementDateByPolicyNoAsync(ByVal strPolicy As String, ByVal userState As Object)
            If (Me.GetReinstatementDateByPolicyNoOperationCompleted Is Nothing) Then
                Me.GetReinstatementDateByPolicyNoOperationCompleted = AddressOf Me.OnGetReinstatementDateByPolicyNoOperationCompleted
            End If
            Me.InvokeAsync("GetReinstatementDateByPolicyNo", New Object() {strPolicy}, Me.GetReinstatementDateByPolicyNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReinstatementDateByPolicyNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReinstatementDateByPolicyNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReinstatementDateByPolicyNoCompleted(Me, New GetReinstatementDateByPolicyNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/HasAggregateSettingByPlan", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HasAggregateSettingByPlan(ByVal strPlanCode As String, ByVal strTable1 As String, ByVal strTable2 As String, ByVal strField As String, ByRef strErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("HasAggregateSettingByPlan", New Object() {strPlanCode, strTable1, strTable2, strField, strErrMsg})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HasAggregateSettingByPlanAsync(ByVal strPlanCode As String, ByVal strTable1 As String, ByVal strTable2 As String, ByVal strField As String, ByVal strErrMsg As String)
            Me.HasAggregateSettingByPlanAsync(strPlanCode, strTable1, strTable2, strField, strErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HasAggregateSettingByPlanAsync(ByVal strPlanCode As String, ByVal strTable1 As String, ByVal strTable2 As String, ByVal strField As String, ByVal strErrMsg As String, ByVal userState As Object)
            If (Me.HasAggregateSettingByPlanOperationCompleted Is Nothing) Then
                Me.HasAggregateSettingByPlanOperationCompleted = AddressOf Me.OnHasAggregateSettingByPlanOperationCompleted
            End If
            Me.InvokeAsync("HasAggregateSettingByPlan", New Object() {strPlanCode, strTable1, strTable2, strField, strErrMsg}, Me.HasAggregateSettingByPlanOperationCompleted, userState)
        End Sub
        
        Private Sub OnHasAggregateSettingByPlanOperationCompleted(ByVal arg As Object)
            If (Not (Me.HasAggregateSettingByPlanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HasAggregateSettingByPlanCompleted(Me, New HasAggregateSettingByPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/Get7ElevenPaymentRule", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get7ElevenPaymentRule(ByRef strMessage As String, ByRef dtRule As System.Data.DataTable) As Boolean
            Dim results() As Object = Me.Invoke("Get7ElevenPaymentRule", New Object() {strMessage, dtRule})
            strMessage = CType(results(1),String)
            dtRule = CType(results(2),System.Data.DataTable)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get7ElevenPaymentRuleAsync(ByVal strMessage As String, ByVal dtRule As System.Data.DataTable)
            Me.Get7ElevenPaymentRuleAsync(strMessage, dtRule, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get7ElevenPaymentRuleAsync(ByVal strMessage As String, ByVal dtRule As System.Data.DataTable, ByVal userState As Object)
            If (Me.Get7ElevenPaymentRuleOperationCompleted Is Nothing) Then
                Me.Get7ElevenPaymentRuleOperationCompleted = AddressOf Me.OnGet7ElevenPaymentRuleOperationCompleted
            End If
            Me.InvokeAsync("Get7ElevenPaymentRule", New Object() {strMessage, dtRule}, Me.Get7ElevenPaymentRuleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet7ElevenPaymentRuleOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get7ElevenPaymentRuleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get7ElevenPaymentRuleCompleted(Me, New Get7ElevenPaymentRuleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UpdateMcs7ElevenMobilePayment", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMcs7ElevenMobilePayment(ByRef strMessage As String, ByVal dt711pay As System.Data.DataTable) As Boolean
            Dim results() As Object = Me.Invoke("UpdateMcs7ElevenMobilePayment", New Object() {strMessage, dt711pay})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMcs7ElevenMobilePaymentAsync(ByVal strMessage As String, ByVal dt711pay As System.Data.DataTable)
            Me.UpdateMcs7ElevenMobilePaymentAsync(strMessage, dt711pay, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMcs7ElevenMobilePaymentAsync(ByVal strMessage As String, ByVal dt711pay As System.Data.DataTable, ByVal userState As Object)
            If (Me.UpdateMcs7ElevenMobilePaymentOperationCompleted Is Nothing) Then
                Me.UpdateMcs7ElevenMobilePaymentOperationCompleted = AddressOf Me.OnUpdateMcs7ElevenMobilePaymentOperationCompleted
            End If
            Me.InvokeAsync("UpdateMcs7ElevenMobilePayment", New Object() {strMessage, dt711pay}, Me.UpdateMcs7ElevenMobilePaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMcs7ElevenMobilePaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMcs7ElevenMobilePaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMcs7ElevenMobilePaymentCompleted(Me, New UpdateMcs7ElevenMobilePaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetMcs7ElevenContactInfo", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMcs7ElevenContactInfo(ByRef strMessage As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByRef dtContact As System.Data.DataTable) As Boolean
            Dim results() As Object = Me.Invoke("GetMcs7ElevenContactInfo", New Object() {strMessage, strClaimNo, strClaimOccur, dtContact})
            strMessage = CType(results(1),String)
            dtContact = CType(results(2),System.Data.DataTable)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMcs7ElevenContactInfoAsync(ByVal strMessage As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal dtContact As System.Data.DataTable)
            Me.GetMcs7ElevenContactInfoAsync(strMessage, strClaimNo, strClaimOccur, dtContact, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMcs7ElevenContactInfoAsync(ByVal strMessage As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal dtContact As System.Data.DataTable, ByVal userState As Object)
            If (Me.GetMcs7ElevenContactInfoOperationCompleted Is Nothing) Then
                Me.GetMcs7ElevenContactInfoOperationCompleted = AddressOf Me.OnGetMcs7ElevenContactInfoOperationCompleted
            End If
            Me.InvokeAsync("GetMcs7ElevenContactInfo", New Object() {strMessage, strClaimNo, strClaimOccur, dtContact}, Me.GetMcs7ElevenContactInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMcs7ElevenContactInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMcs7ElevenContactInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMcs7ElevenContactInfoCompleted(Me, New GetMcs7ElevenContactInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/ValidateMcs7ElevenMobileNo", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidateMcs7ElevenMobileNo(ByRef strMessage As String, ByVal strCustomerId As String, ByVal strMobileNo As String) As Boolean
            Dim results() As Object = Me.Invoke("ValidateMcs7ElevenMobileNo", New Object() {strMessage, strCustomerId, strMobileNo})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidateMcs7ElevenMobileNoAsync(ByVal strMessage As String, ByVal strCustomerId As String, ByVal strMobileNo As String)
            Me.ValidateMcs7ElevenMobileNoAsync(strMessage, strCustomerId, strMobileNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidateMcs7ElevenMobileNoAsync(ByVal strMessage As String, ByVal strCustomerId As String, ByVal strMobileNo As String, ByVal userState As Object)
            If (Me.ValidateMcs7ElevenMobileNoOperationCompleted Is Nothing) Then
                Me.ValidateMcs7ElevenMobileNoOperationCompleted = AddressOf Me.OnValidateMcs7ElevenMobileNoOperationCompleted
            End If
            Me.InvokeAsync("ValidateMcs7ElevenMobileNo", New Object() {strMessage, strCustomerId, strMobileNo}, Me.ValidateMcs7ElevenMobileNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidateMcs7ElevenMobileNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidateMcs7ElevenMobileNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidateMcs7ElevenMobileNoCompleted(Me, New ValidateMcs7ElevenMobileNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetMcs7ElevenEmail", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMcs7ElevenEmail(ByRef strMessage As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByRef strEmail As String) As Boolean
            Dim results() As Object = Me.Invoke("GetMcs7ElevenEmail", New Object() {strMessage, strClaimNo, strClaimOccur, strEmail})
            strMessage = CType(results(1),String)
            strEmail = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMcs7ElevenEmailAsync(ByVal strMessage As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal strEmail As String)
            Me.GetMcs7ElevenEmailAsync(strMessage, strClaimNo, strClaimOccur, strEmail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMcs7ElevenEmailAsync(ByVal strMessage As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal strEmail As String, ByVal userState As Object)
            If (Me.GetMcs7ElevenEmailOperationCompleted Is Nothing) Then
                Me.GetMcs7ElevenEmailOperationCompleted = AddressOf Me.OnGetMcs7ElevenEmailOperationCompleted
            End If
            Me.InvokeAsync("GetMcs7ElevenEmail", New Object() {strMessage, strClaimNo, strClaimOccur, strEmail}, Me.GetMcs7ElevenEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMcs7ElevenEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMcs7ElevenEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMcs7ElevenEmailCompleted(Me, New GetMcs7ElevenEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/CheckMcs7ElevenVisitCs", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckMcs7ElevenVisitCs(ByRef strMessage As String, ByVal strPolicyNo As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckMcs7ElevenVisitCs", New Object() {strMessage, strPolicyNo})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckMcs7ElevenVisitCsAsync(ByVal strMessage As String, ByVal strPolicyNo As String)
            Me.CheckMcs7ElevenVisitCsAsync(strMessage, strPolicyNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckMcs7ElevenVisitCsAsync(ByVal strMessage As String, ByVal strPolicyNo As String, ByVal userState As Object)
            If (Me.CheckMcs7ElevenVisitCsOperationCompleted Is Nothing) Then
                Me.CheckMcs7ElevenVisitCsOperationCompleted = AddressOf Me.OnCheckMcs7ElevenVisitCsOperationCompleted
            End If
            Me.InvokeAsync("CheckMcs7ElevenVisitCs", New Object() {strMessage, strPolicyNo}, Me.CheckMcs7ElevenVisitCsOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckMcs7ElevenVisitCsOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckMcs7ElevenVisitCsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckMcs7ElevenVisitCsCompleted(Me, New CheckMcs7ElevenVisitCsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/CheckMcsIscUser", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckMcsIscUser(ByRef strMessage As String, ByVal strUser As String, ByRef blnIscUser As Boolean, ByRef blnPaLimit As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("CheckMcsIscUser", New Object() {strMessage, strUser, blnIscUser, blnPaLimit})
            strMessage = CType(results(1),String)
            blnIscUser = CType(results(2),Boolean)
            blnPaLimit = CType(results(3),Boolean)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckMcsIscUserAsync(ByVal strMessage As String, ByVal strUser As String, ByVal blnIscUser As Boolean, ByVal blnPaLimit As Boolean)
            Me.CheckMcsIscUserAsync(strMessage, strUser, blnIscUser, blnPaLimit, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckMcsIscUserAsync(ByVal strMessage As String, ByVal strUser As String, ByVal blnIscUser As Boolean, ByVal blnPaLimit As Boolean, ByVal userState As Object)
            If (Me.CheckMcsIscUserOperationCompleted Is Nothing) Then
                Me.CheckMcsIscUserOperationCompleted = AddressOf Me.OnCheckMcsIscUserOperationCompleted
            End If
            Me.InvokeAsync("CheckMcsIscUser", New Object() {strMessage, strUser, blnIscUser, blnPaLimit}, Me.CheckMcsIscUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckMcsIscUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckMcsIscUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckMcsIscUserCompleted(Me, New CheckMcsIscUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/PrepareISCRecord", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrepareISCRecord(ByVal datCalanderDate As Date, ByVal claimNo As String, ByVal claimOccur As String, ByRef rstLcp As System.Data.DataTable, ByRef rstChqDetail As System.Data.DataTable, ByRef rstPayment As System.Data.DataTable, ByRef strErrMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("PrepareISCRecord", New Object() {datCalanderDate, claimNo, claimOccur, rstLcp, rstChqDetail, rstPayment, strErrMessage})
            rstLcp = CType(results(1),System.Data.DataTable)
            rstChqDetail = CType(results(2),System.Data.DataTable)
            rstPayment = CType(results(3),System.Data.DataTable)
            strErrMessage = CType(results(4),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrepareISCRecordAsync(ByVal datCalanderDate As Date, ByVal claimNo As String, ByVal claimOccur As String, ByVal rstLcp As System.Data.DataTable, ByVal rstChqDetail As System.Data.DataTable, ByVal rstPayment As System.Data.DataTable, ByVal strErrMessage As String)
            Me.PrepareISCRecordAsync(datCalanderDate, claimNo, claimOccur, rstLcp, rstChqDetail, rstPayment, strErrMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrepareISCRecordAsync(ByVal datCalanderDate As Date, ByVal claimNo As String, ByVal claimOccur As String, ByVal rstLcp As System.Data.DataTable, ByVal rstChqDetail As System.Data.DataTable, ByVal rstPayment As System.Data.DataTable, ByVal strErrMessage As String, ByVal userState As Object)
            If (Me.PrepareISCRecordOperationCompleted Is Nothing) Then
                Me.PrepareISCRecordOperationCompleted = AddressOf Me.OnPrepareISCRecordOperationCompleted
            End If
            Me.InvokeAsync("PrepareISCRecord", New Object() {datCalanderDate, claimNo, claimOccur, rstLcp, rstChqDetail, rstPayment, strErrMessage}, Me.PrepareISCRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrepareISCRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrepareISCRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrepareISCRecordCompleted(Me, New PrepareISCRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GenerateOnlineChequePayment", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GenerateOnlineChequePayment(ByVal oPayRs As System.Data.DataTable, ByVal oChqDtlRs As System.Data.DataTable, ByVal rstPayment As System.Data.DataTable, ByVal strChqNo() As Long, ByVal strBsb As String, ByVal strRefNo() As String, ByVal intLotId As Integer, ByRef strErrMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("GenerateOnlineChequePayment", New Object() {oPayRs, oChqDtlRs, rstPayment, strChqNo, strBsb, strRefNo, intLotId, strErrMessage})
            strErrMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GenerateOnlineChequePaymentAsync(ByVal oPayRs As System.Data.DataTable, ByVal oChqDtlRs As System.Data.DataTable, ByVal rstPayment As System.Data.DataTable, ByVal strChqNo() As Long, ByVal strBsb As String, ByVal strRefNo() As String, ByVal intLotId As Integer, ByVal strErrMessage As String)
            Me.GenerateOnlineChequePaymentAsync(oPayRs, oChqDtlRs, rstPayment, strChqNo, strBsb, strRefNo, intLotId, strErrMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GenerateOnlineChequePaymentAsync(ByVal oPayRs As System.Data.DataTable, ByVal oChqDtlRs As System.Data.DataTable, ByVal rstPayment As System.Data.DataTable, ByVal strChqNo() As Long, ByVal strBsb As String, ByVal strRefNo() As String, ByVal intLotId As Integer, ByVal strErrMessage As String, ByVal userState As Object)
            If (Me.GenerateOnlineChequePaymentOperationCompleted Is Nothing) Then
                Me.GenerateOnlineChequePaymentOperationCompleted = AddressOf Me.OnGenerateOnlineChequePaymentOperationCompleted
            End If
            Me.InvokeAsync("GenerateOnlineChequePayment", New Object() {oPayRs, oChqDtlRs, rstPayment, strChqNo, strBsb, strRefNo, intLotId, strErrMessage}, Me.GenerateOnlineChequePaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGenerateOnlineChequePaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GenerateOnlineChequePaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GenerateOnlineChequePaymentCompleted(Me, New GenerateOnlineChequePaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetReverse7ElevenPaymentSettlement", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReverse7ElevenPaymentSettlement(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetReverse7ElevenPaymentSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReverse7ElevenPaymentSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.GetReverse7ElevenPaymentSettlementAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReverse7ElevenPaymentSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetReverse7ElevenPaymentSettlementOperationCompleted Is Nothing) Then
                Me.GetReverse7ElevenPaymentSettlementOperationCompleted = AddressOf Me.OnGetReverse7ElevenPaymentSettlementOperationCompleted
            End If
            Me.InvokeAsync("GetReverse7ElevenPaymentSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.GetReverse7ElevenPaymentSettlementOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReverse7ElevenPaymentSettlementOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReverse7ElevenPaymentSettlementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReverse7ElevenPaymentSettlementCompleted(Me, New GetReverse7ElevenPaymentSettlementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/Get7ElevenPaymentSettlement", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Get7ElevenPaymentSettlement(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("Get7ElevenPaymentSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Get7ElevenPaymentSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.Get7ElevenPaymentSettlementAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Get7ElevenPaymentSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.Get7ElevenPaymentSettlementOperationCompleted Is Nothing) Then
                Me.Get7ElevenPaymentSettlementOperationCompleted = AddressOf Me.OnGet7ElevenPaymentSettlementOperationCompleted
            End If
            Me.InvokeAsync("Get7ElevenPaymentSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.Get7ElevenPaymentSettlementOperationCompleted, userState)
        End Sub
        
        Private Sub OnGet7ElevenPaymentSettlementOperationCompleted(ByVal arg As Object)
            If (Not (Me.Get7ElevenPaymentSettlementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Get7ElevenPaymentSettlementCompleted(Me, New Get7ElevenPaymentSettlementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetIscRefNoByClaimNo", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIscRefNoByClaimNo(ByVal strClaimNo As String, ByVal strClaimOccur As String, ByRef dt As System.Data.DataTable, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("GetIscRefNoByClaimNo", New Object() {strClaimNo, strClaimOccur, dt, strMessage})
            dt = CType(results(1),System.Data.DataTable)
            strMessage = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIscRefNoByClaimNoAsync(ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal dt As System.Data.DataTable, ByVal strMessage As String)
            Me.GetIscRefNoByClaimNoAsync(strClaimNo, strClaimOccur, dt, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIscRefNoByClaimNoAsync(ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal dt As System.Data.DataTable, ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetIscRefNoByClaimNoOperationCompleted Is Nothing) Then
                Me.GetIscRefNoByClaimNoOperationCompleted = AddressOf Me.OnGetIscRefNoByClaimNoOperationCompleted
            End If
            Me.InvokeAsync("GetIscRefNoByClaimNo", New Object() {strClaimNo, strClaimOccur, dt, strMessage}, Me.GetIscRefNoByClaimNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIscRefNoByClaimNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIscRefNoByClaimNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIscRefNoByClaimNoCompleted(Me, New GetIscRefNoByClaimNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetIscChequeByRefNum", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIscChequeByRefNum(ByVal refNumFrom As String, ByVal refNumTo As String, ByRef dtCheque As System.Data.DataTable, ByRef errorMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("GetIscChequeByRefNum", New Object() {refNumFrom, refNumTo, dtCheque, errorMsg})
            dtCheque = CType(results(1),System.Data.DataTable)
            errorMsg = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIscChequeByRefNumAsync(ByVal refNumFrom As String, ByVal refNumTo As String, ByVal dtCheque As System.Data.DataTable, ByVal errorMsg As String)
            Me.GetIscChequeByRefNumAsync(refNumFrom, refNumTo, dtCheque, errorMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIscChequeByRefNumAsync(ByVal refNumFrom As String, ByVal refNumTo As String, ByVal dtCheque As System.Data.DataTable, ByVal errorMsg As String, ByVal userState As Object)
            If (Me.GetIscChequeByRefNumOperationCompleted Is Nothing) Then
                Me.GetIscChequeByRefNumOperationCompleted = AddressOf Me.OnGetIscChequeByRefNumOperationCompleted
            End If
            Me.InvokeAsync("GetIscChequeByRefNum", New Object() {refNumFrom, refNumTo, dtCheque, errorMsg}, Me.GetIscChequeByRefNumOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIscChequeByRefNumOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIscChequeByRefNumCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIscChequeByRefNumCompleted(Me, New GetIscChequeByRefNumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetIscChqPaymentByChequeId", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIscChqPaymentByChequeId(ByVal chequeId As Long, ByVal system As String, ByRef dtChqPayment As System.Data.DataTable, ByRef errorMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("GetIscChqPaymentByChequeId", New Object() {chequeId, system, dtChqPayment, errorMsg})
            dtChqPayment = CType(results(1),System.Data.DataTable)
            errorMsg = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIscChqPaymentByChequeIdAsync(ByVal chequeId As Long, ByVal system As String, ByVal dtChqPayment As System.Data.DataTable, ByVal errorMsg As String)
            Me.GetIscChqPaymentByChequeIdAsync(chequeId, system, dtChqPayment, errorMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIscChqPaymentByChequeIdAsync(ByVal chequeId As Long, ByVal system As String, ByVal dtChqPayment As System.Data.DataTable, ByVal errorMsg As String, ByVal userState As Object)
            If (Me.GetIscChqPaymentByChequeIdOperationCompleted Is Nothing) Then
                Me.GetIscChqPaymentByChequeIdOperationCompleted = AddressOf Me.OnGetIscChqPaymentByChequeIdOperationCompleted
            End If
            Me.InvokeAsync("GetIscChqPaymentByChequeId", New Object() {chequeId, system, dtChqPayment, errorMsg}, Me.GetIscChqPaymentByChequeIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIscChqPaymentByChequeIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIscChqPaymentByChequeIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIscChqPaymentByChequeIdCompleted(Me, New GetIscChqPaymentByChequeIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UpdateIscChqStatus", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateIscChqStatus(ByVal chequeId As String, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateIscChqStatus", New Object() {chequeId, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateIscChqStatusAsync(ByVal chequeId As String, ByVal strMessage As String)
            Me.UpdateIscChqStatusAsync(chequeId, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateIscChqStatusAsync(ByVal chequeId As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.UpdateIscChqStatusOperationCompleted Is Nothing) Then
                Me.UpdateIscChqStatusOperationCompleted = AddressOf Me.OnUpdateIscChqStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateIscChqStatus", New Object() {chequeId, strMessage}, Me.UpdateIscChqStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateIscChqStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateIscChqStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateIscChqStatusCompleted(Me, New UpdateIscChqStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/CheckIscChequeNo", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckIscChequeNo(ByVal intChqNo() As Long, ByVal strBsbNo As String, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckIscChequeNo", New Object() {intChqNo, strBsbNo, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckIscChequeNoAsync(ByVal intChqNo() As Long, ByVal strBsbNo As String, ByVal strMessage As String)
            Me.CheckIscChequeNoAsync(intChqNo, strBsbNo, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckIscChequeNoAsync(ByVal intChqNo() As Long, ByVal strBsbNo As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.CheckIscChequeNoOperationCompleted Is Nothing) Then
                Me.CheckIscChequeNoOperationCompleted = AddressOf Me.OnCheckIscChequeNoOperationCompleted
            End If
            Me.InvokeAsync("CheckIscChequeNo", New Object() {intChqNo, strBsbNo, strMessage}, Me.CheckIscChequeNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckIscChequeNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckIscChequeNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckIscChequeNoCompleted(Me, New CheckIscChequeNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetIscNoOfPolicy", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIscNoOfPolicy(ByVal strClaimNo As String, ByVal strClaimOccur As String, ByRef strMessage As String) As Integer
            Dim results() As Object = Me.Invoke("GetIscNoOfPolicy", New Object() {strClaimNo, strClaimOccur, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIscNoOfPolicyAsync(ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal strMessage As String)
            Me.GetIscNoOfPolicyAsync(strClaimNo, strClaimOccur, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIscNoOfPolicyAsync(ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetIscNoOfPolicyOperationCompleted Is Nothing) Then
                Me.GetIscNoOfPolicyOperationCompleted = AddressOf Me.OnGetIscNoOfPolicyOperationCompleted
            End If
            Me.InvokeAsync("GetIscNoOfPolicy", New Object() {strClaimNo, strClaimOccur, strMessage}, Me.GetIscNoOfPolicyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIscNoOfPolicyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIscNoOfPolicyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIscNoOfPolicyCompleted(Me, New GetIscNoOfPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetIscReportPath", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIscReportPath(ByRef ds As System.Data.DataSet, ByVal strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("GetIscReportPath", New Object() {ds, strMessage})
            ds = CType(results(1),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIscReportPathAsync(ByVal ds As System.Data.DataSet, ByVal strMessage As String)
            Me.GetIscReportPathAsync(ds, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIscReportPathAsync(ByVal ds As System.Data.DataSet, ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetIscReportPathOperationCompleted Is Nothing) Then
                Me.GetIscReportPathOperationCompleted = AddressOf Me.OnGetIscReportPathOperationCompleted
            End If
            Me.InvokeAsync("GetIscReportPath", New Object() {ds, strMessage}, Me.GetIscReportPathOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIscReportPathOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIscReportPathCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIscReportPathCompleted(Me, New GetIscReportPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UpdateIscCmRecord", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateIscCmRecord(ByVal strUser As String, ByVal strTiffPath As String, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateIscCmRecord", New Object() {strUser, strTiffPath, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateIscCmRecordAsync(ByVal strUser As String, ByVal strTiffPath As String, ByVal strMessage As String)
            Me.UpdateIscCmRecordAsync(strUser, strTiffPath, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateIscCmRecordAsync(ByVal strUser As String, ByVal strTiffPath As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.UpdateIscCmRecordOperationCompleted Is Nothing) Then
                Me.UpdateIscCmRecordOperationCompleted = AddressOf Me.OnUpdateIscCmRecordOperationCompleted
            End If
            Me.InvokeAsync("UpdateIscCmRecord", New Object() {strUser, strTiffPath, strMessage}, Me.UpdateIscCmRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateIscCmRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateIscCmRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateIscCmRecordCompleted(Me, New UpdateIscCmRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetIscChequeLot", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIscChequeLot(ByVal strBsb As String, ByVal strChqNo As String, ByVal strTotChq As String, ByRef intLotId As Long, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("GetIscChequeLot", New Object() {strBsb, strChqNo, strTotChq, intLotId, strMessage})
            intLotId = CType(results(1),Long)
            strMessage = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIscChequeLotAsync(ByVal strBsb As String, ByVal strChqNo As String, ByVal strTotChq As String, ByVal intLotId As Long, ByVal strMessage As String)
            Me.GetIscChequeLotAsync(strBsb, strChqNo, strTotChq, intLotId, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIscChequeLotAsync(ByVal strBsb As String, ByVal strChqNo As String, ByVal strTotChq As String, ByVal intLotId As Long, ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetIscChequeLotOperationCompleted Is Nothing) Then
                Me.GetIscChequeLotOperationCompleted = AddressOf Me.OnGetIscChequeLotOperationCompleted
            End If
            Me.InvokeAsync("GetIscChequeLot", New Object() {strBsb, strChqNo, strTotChq, intLotId, strMessage}, Me.GetIscChequeLotOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIscChequeLotOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIscChequeLotCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIscChequeLotCompleted(Me, New GetIscChequeLotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/CheckIscPlanType", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckIscPlanType(ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckIscPlanType", New Object() {strClaimNo, strClaimOccur, strMessage})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckIscPlanTypeAsync(ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal strMessage As String)
            Me.CheckIscPlanTypeAsync(strClaimNo, strClaimOccur, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckIscPlanTypeAsync(ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.CheckIscPlanTypeOperationCompleted Is Nothing) Then
                Me.CheckIscPlanTypeOperationCompleted = AddressOf Me.OnCheckIscPlanTypeOperationCompleted
            End If
            Me.InvokeAsync("CheckIscPlanType", New Object() {strClaimNo, strClaimOccur, strMessage}, Me.CheckIscPlanTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckIscPlanTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckIscPlanTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckIscPlanTypeCompleted(Me, New CheckIscPlanTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetReverseInstantChequeSettlement", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReverseInstantChequeSettlement(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetReverseInstantChequeSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReverseInstantChequeSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.GetReverseInstantChequeSettlementAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReverseInstantChequeSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetReverseInstantChequeSettlementOperationCompleted Is Nothing) Then
                Me.GetReverseInstantChequeSettlementOperationCompleted = AddressOf Me.OnGetReverseInstantChequeSettlementOperationCompleted
            End If
            Me.InvokeAsync("GetReverseInstantChequeSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.GetReverseInstantChequeSettlementOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReverseInstantChequeSettlementOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReverseInstantChequeSettlementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReverseInstantChequeSettlementCompleted(Me, New GetReverseInstantChequeSettlementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetInstantChequeSettlement", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInstantChequeSettlement(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetInstantChequeSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInstantChequeSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.GetInstantChequeSettlementAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInstantChequeSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetInstantChequeSettlementOperationCompleted Is Nothing) Then
                Me.GetInstantChequeSettlementOperationCompleted = AddressOf Me.OnGetInstantChequeSettlementOperationCompleted
            End If
            Me.InvokeAsync("GetInstantChequeSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.GetInstantChequeSettlementOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInstantChequeSettlementOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInstantChequeSettlementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInstantChequeSettlementCompleted(Me, New GetInstantChequeSettlementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/CheckIsIsc", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckIsIsc(ByVal strClaimNo As String, ByVal strClaimOccur As String, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckIsIsc", New Object() {strClaimNo, strClaimOccur, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckIsIscAsync(ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal strMessage As String)
            Me.CheckIsIscAsync(strClaimNo, strClaimOccur, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckIsIscAsync(ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.CheckIsIscOperationCompleted Is Nothing) Then
                Me.CheckIsIscOperationCompleted = AddressOf Me.OnCheckIsIscOperationCompleted
            End If
            Me.InvokeAsync("CheckIsIsc", New Object() {strClaimNo, strClaimOccur, strMessage}, Me.CheckIsIscOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckIsIscOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckIsIscCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckIsIscCompleted(Me, New CheckIsIscCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/FPSPayoutAPI", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FPSPayoutAPI(ByVal strClaimNo As String, ByVal strClaimOccur As String, ByRef APIResponse As System.Data.DataTable, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("FPSPayoutAPI", New Object() {strClaimNo, strClaimOccur, APIResponse, strMessage})
            APIResponse = CType(results(1),System.Data.DataTable)
            strMessage = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FPSPayoutAPIAsync(ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal APIResponse As System.Data.DataTable, ByVal strMessage As String)
            Me.FPSPayoutAPIAsync(strClaimNo, strClaimOccur, APIResponse, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FPSPayoutAPIAsync(ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal APIResponse As System.Data.DataTable, ByVal strMessage As String, ByVal userState As Object)
            If (Me.FPSPayoutAPIOperationCompleted Is Nothing) Then
                Me.FPSPayoutAPIOperationCompleted = AddressOf Me.OnFPSPayoutAPIOperationCompleted
            End If
            Me.InvokeAsync("FPSPayoutAPI", New Object() {strClaimNo, strClaimOccur, APIResponse, strMessage}, Me.FPSPayoutAPIOperationCompleted, userState)
        End Sub
        
        Private Sub OnFPSPayoutAPIOperationCompleted(ByVal arg As Object)
            If (Not (Me.FPSPayoutAPICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FPSPayoutAPICompleted(Me, New FPSPayoutAPICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetProxyType", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProxyType(ByVal Code As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetProxyType", New Object() {Code})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProxyTypeAsync(ByVal Code As String)
            Me.GetProxyTypeAsync(Code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProxyTypeAsync(ByVal Code As String, ByVal userState As Object)
            If (Me.GetProxyTypeOperationCompleted Is Nothing) Then
                Me.GetProxyTypeOperationCompleted = AddressOf Me.OnGetProxyTypeOperationCompleted
            End If
            Me.InvokeAsync("GetProxyType", New Object() {Code}, Me.GetProxyTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProxyTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProxyTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProxyTypeCompleted(Me, New GetProxyTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetFPSTransactionStatus", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFPSTransactionStatus(ByVal strClaimNo As String, ByVal strClaimOccur As String, ByRef strMessage As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetFPSTransactionStatus", New Object() {strClaimNo, strClaimOccur, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFPSTransactionStatusAsync(ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal strMessage As String)
            Me.GetFPSTransactionStatusAsync(strClaimNo, strClaimOccur, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFPSTransactionStatusAsync(ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetFPSTransactionStatusOperationCompleted Is Nothing) Then
                Me.GetFPSTransactionStatusOperationCompleted = AddressOf Me.OnGetFPSTransactionStatusOperationCompleted
            End If
            Me.InvokeAsync("GetFPSTransactionStatus", New Object() {strClaimNo, strClaimOccur, strMessage}, Me.GetFPSTransactionStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFPSTransactionStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFPSTransactionStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFPSTransactionStatusCompleted(Me, New GetFPSTransactionStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/AllowCallFPSAPI", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AllowCallFPSAPI(ByVal strClaimNo As String, ByVal strClaimOccur As String, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("AllowCallFPSAPI", New Object() {strClaimNo, strClaimOccur, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AllowCallFPSAPIAsync(ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal strMessage As String)
            Me.AllowCallFPSAPIAsync(strClaimNo, strClaimOccur, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AllowCallFPSAPIAsync(ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.AllowCallFPSAPIOperationCompleted Is Nothing) Then
                Me.AllowCallFPSAPIOperationCompleted = AddressOf Me.OnAllowCallFPSAPIOperationCompleted
            End If
            Me.InvokeAsync("AllowCallFPSAPI", New Object() {strClaimNo, strClaimOccur, strMessage}, Me.AllowCallFPSAPIOperationCompleted, userState)
        End Sub
        
        Private Sub OnAllowCallFPSAPIOperationCompleted(ByVal arg As Object)
            If (Not (Me.AllowCallFPSAPICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AllowCallFPSAPICompleted(Me, New AllowCallFPSAPICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UpdateMcsFPSPayout", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMcsFPSPayout(ByRef strMessage As String, ByVal dtFPS As System.Data.DataTable) As Boolean
            Dim results() As Object = Me.Invoke("UpdateMcsFPSPayout", New Object() {strMessage, dtFPS})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMcsFPSPayoutAsync(ByVal strMessage As String, ByVal dtFPS As System.Data.DataTable)
            Me.UpdateMcsFPSPayoutAsync(strMessage, dtFPS, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMcsFPSPayoutAsync(ByVal strMessage As String, ByVal dtFPS As System.Data.DataTable, ByVal userState As Object)
            If (Me.UpdateMcsFPSPayoutOperationCompleted Is Nothing) Then
                Me.UpdateMcsFPSPayoutOperationCompleted = AddressOf Me.OnUpdateMcsFPSPayoutOperationCompleted
            End If
            Me.InvokeAsync("UpdateMcsFPSPayout", New Object() {strMessage, dtFPS}, Me.UpdateMcsFPSPayoutOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMcsFPSPayoutOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMcsFPSPayoutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMcsFPSPayoutCompleted(Me, New UpdateMcsFPSPayoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UpdateMcsFPSPayoutWithMobiCntryCode", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMcsFPSPayoutWithMobiCntryCode(ByRef strMessage As String, ByVal dtFPS As System.Data.DataTable) As Boolean
            Dim results() As Object = Me.Invoke("UpdateMcsFPSPayoutWithMobiCntryCode", New Object() {strMessage, dtFPS})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMcsFPSPayoutWithMobiCntryCodeAsync(ByVal strMessage As String, ByVal dtFPS As System.Data.DataTable)
            Me.UpdateMcsFPSPayoutWithMobiCntryCodeAsync(strMessage, dtFPS, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMcsFPSPayoutWithMobiCntryCodeAsync(ByVal strMessage As String, ByVal dtFPS As System.Data.DataTable, ByVal userState As Object)
            If (Me.UpdateMcsFPSPayoutWithMobiCntryCodeOperationCompleted Is Nothing) Then
                Me.UpdateMcsFPSPayoutWithMobiCntryCodeOperationCompleted = AddressOf Me.OnUpdateMcsFPSPayoutWithMobiCntryCodeOperationCompleted
            End If
            Me.InvokeAsync("UpdateMcsFPSPayoutWithMobiCntryCode", New Object() {strMessage, dtFPS}, Me.UpdateMcsFPSPayoutWithMobiCntryCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMcsFPSPayoutWithMobiCntryCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMcsFPSPayoutWithMobiCntryCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMcsFPSPayoutWithMobiCntryCodeCompleted(Me, New UpdateMcsFPSPayoutWithMobiCntryCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetMcsFPSProxyInfo", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMcsFPSProxyInfo(ByRef strMessage As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByRef dtFPS As System.Data.DataTable) As Boolean
            Dim results() As Object = Me.Invoke("GetMcsFPSProxyInfo", New Object() {strMessage, strClaimNo, strClaimOccur, dtFPS})
            strMessage = CType(results(1),String)
            dtFPS = CType(results(2),System.Data.DataTable)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMcsFPSProxyInfoAsync(ByVal strMessage As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal dtFPS As System.Data.DataTable)
            Me.GetMcsFPSProxyInfoAsync(strMessage, strClaimNo, strClaimOccur, dtFPS, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMcsFPSProxyInfoAsync(ByVal strMessage As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal dtFPS As System.Data.DataTable, ByVal userState As Object)
            If (Me.GetMcsFPSProxyInfoOperationCompleted Is Nothing) Then
                Me.GetMcsFPSProxyInfoOperationCompleted = AddressOf Me.OnGetMcsFPSProxyInfoOperationCompleted
            End If
            Me.InvokeAsync("GetMcsFPSProxyInfo", New Object() {strMessage, strClaimNo, strClaimOccur, dtFPS}, Me.GetMcsFPSProxyInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMcsFPSProxyInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMcsFPSProxyInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMcsFPSProxyInfoCompleted(Me, New GetMcsFPSProxyInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetLetter", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLetter(ByVal strSysName As String, ByRef strMessage As String, ByRef dsReturn As System.Data.DataSet, ByVal strUser As String, ByVal strType As String, ByVal strCategory As String) As Boolean
            Dim results() As Object = Me.Invoke("GetLetter", New Object() {strSysName, strMessage, dsReturn, strUser, strType, strCategory})
            strMessage = CType(results(1),String)
            dsReturn = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLetterAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal strUser As String, ByVal strType As String, ByVal strCategory As String)
            Me.GetLetterAsync(strSysName, strMessage, dsReturn, strUser, strType, strCategory, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLetterAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal strUser As String, ByVal strType As String, ByVal strCategory As String, ByVal userState As Object)
            If (Me.GetLetterOperationCompleted Is Nothing) Then
                Me.GetLetterOperationCompleted = AddressOf Me.OnGetLetterOperationCompleted
            End If
            Me.InvokeAsync("GetLetter", New Object() {strSysName, strMessage, dsReturn, strUser, strType, strCategory}, Me.GetLetterOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLetterOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLetterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLetterCompleted(Me, New GetLetterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetNextPendSeqNo", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNextPendSeqNo(ByVal strSysName As String, ByRef strMessage As String, ByRef lngSeqNo As Long, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long) As Boolean
            Dim results() As Object = Me.Invoke("GetNextPendSeqNo", New Object() {strSysName, strMessage, lngSeqNo, strUser, lngClaimNo, lngOccurNo})
            strMessage = CType(results(1),String)
            lngSeqNo = CType(results(2),Long)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNextPendSeqNoAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal lngSeqNo As Long, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long)
            Me.GetNextPendSeqNoAsync(strSysName, strMessage, lngSeqNo, strUser, lngClaimNo, lngOccurNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNextPendSeqNoAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal lngSeqNo As Long, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal userState As Object)
            If (Me.GetNextPendSeqNoOperationCompleted Is Nothing) Then
                Me.GetNextPendSeqNoOperationCompleted = AddressOf Me.OnGetNextPendSeqNoOperationCompleted
            End If
            Me.InvokeAsync("GetNextPendSeqNo", New Object() {strSysName, strMessage, lngSeqNo, strUser, lngClaimNo, lngOccurNo}, Me.GetNextPendSeqNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNextPendSeqNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNextPendSeqNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNextPendSeqNoCompleted(Me, New GetNextPendSeqNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/DeleteClaimAll", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteClaimAll(ByVal strSysName As String, ByVal strUser As String, ByRef strMessage As String, ByVal lngClaim As Long, ByVal lngClaimOccur As Long, ByVal datAccDate As Date, ByVal blnCalculate As Boolean, ByVal blnRollBack As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("DeleteClaimAll", New Object() {strSysName, strUser, strMessage, lngClaim, lngClaimOccur, datAccDate, blnCalculate, blnRollBack})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteClaimAllAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strMessage As String, ByVal lngClaim As Long, ByVal lngClaimOccur As Long, ByVal datAccDate As Date, ByVal blnCalculate As Boolean, ByVal blnRollBack As Boolean)
            Me.DeleteClaimAllAsync(strSysName, strUser, strMessage, lngClaim, lngClaimOccur, datAccDate, blnCalculate, blnRollBack, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteClaimAllAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strMessage As String, ByVal lngClaim As Long, ByVal lngClaimOccur As Long, ByVal datAccDate As Date, ByVal blnCalculate As Boolean, ByVal blnRollBack As Boolean, ByVal userState As Object)
            If (Me.DeleteClaimAllOperationCompleted Is Nothing) Then
                Me.DeleteClaimAllOperationCompleted = AddressOf Me.OnDeleteClaimAllOperationCompleted
            End If
            Me.InvokeAsync("DeleteClaimAll", New Object() {strSysName, strUser, strMessage, lngClaim, lngClaimOccur, datAccDate, blnCalculate, blnRollBack}, Me.DeleteClaimAllOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteClaimAllOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteClaimAllCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteClaimAllCompleted(Me, New DeleteClaimAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/ReverseClaim", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReverseClaim(ByVal strSysName As String, ByVal strUser As String, ByRef strMessage As String, ByVal lngClaim As Long, ByVal lngClaimOccur As Long, ByRef dsHeader As System.Data.DataSet, ByVal blnReverseLater As Boolean, ByVal blnRollBack As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("ReverseClaim", New Object() {strSysName, strUser, strMessage, lngClaim, lngClaimOccur, dsHeader, blnReverseLater, blnRollBack})
            strMessage = CType(results(1),String)
            dsHeader = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReverseClaimAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strMessage As String, ByVal lngClaim As Long, ByVal lngClaimOccur As Long, ByVal dsHeader As System.Data.DataSet, ByVal blnReverseLater As Boolean, ByVal blnRollBack As Boolean)
            Me.ReverseClaimAsync(strSysName, strUser, strMessage, lngClaim, lngClaimOccur, dsHeader, blnReverseLater, blnRollBack, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReverseClaimAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strMessage As String, ByVal lngClaim As Long, ByVal lngClaimOccur As Long, ByVal dsHeader As System.Data.DataSet, ByVal blnReverseLater As Boolean, ByVal blnRollBack As Boolean, ByVal userState As Object)
            If (Me.ReverseClaimOperationCompleted Is Nothing) Then
                Me.ReverseClaimOperationCompleted = AddressOf Me.OnReverseClaimOperationCompleted
            End If
            Me.InvokeAsync("ReverseClaim", New Object() {strSysName, strUser, strMessage, lngClaim, lngClaimOccur, dsHeader, blnReverseLater, blnRollBack}, Me.ReverseClaimOperationCompleted, userState)
        End Sub
        
        Private Sub OnReverseClaimOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReverseClaimCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReverseClaimCompleted(Me, New ReverseClaimCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/BatchSavePendRS", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BatchSavePendRS(ByVal strSysName As String, ByRef strMessage As String, ByRef dsPend As System.Data.DataSet, ByVal strUser As String) As Boolean
            Dim results() As Object = Me.Invoke("BatchSavePendRS", New Object() {strSysName, strMessage, dsPend, strUser})
            strMessage = CType(results(1),String)
            dsPend = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BatchSavePendRSAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsPend As System.Data.DataSet, ByVal strUser As String)
            Me.BatchSavePendRSAsync(strSysName, strMessage, dsPend, strUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BatchSavePendRSAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsPend As System.Data.DataSet, ByVal strUser As String, ByVal userState As Object)
            If (Me.BatchSavePendRSOperationCompleted Is Nothing) Then
                Me.BatchSavePendRSOperationCompleted = AddressOf Me.OnBatchSavePendRSOperationCompleted
            End If
            Me.InvokeAsync("BatchSavePendRS", New Object() {strSysName, strMessage, dsPend, strUser}, Me.BatchSavePendRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnBatchSavePendRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.BatchSavePendRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BatchSavePendRSCompleted(Me, New BatchSavePendRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/ClaimFinal", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ClaimFinal(ByVal strSysName As String, ByRef strMessage As String, ByRef dsClaim As System.Data.DataSet, ByRef dsPayment As System.Data.DataSet, ByRef dsForcibleMsg As System.Data.DataSet, ByRef dsProxyLog As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngClaimOccu As Long, ByVal strUser As String) As Boolean
            Dim results() As Object = Me.Invoke("ClaimFinal", New Object() {strSysName, strMessage, dsClaim, dsPayment, dsForcibleMsg, dsProxyLog, lngClaimNo, lngClaimOccu, strUser})
            strMessage = CType(results(1),String)
            dsClaim = CType(results(2),System.Data.DataSet)
            dsPayment = CType(results(3),System.Data.DataSet)
            dsForcibleMsg = CType(results(4),System.Data.DataSet)
            dsProxyLog = CType(results(5),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ClaimFinalAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsClaim As System.Data.DataSet, ByVal dsPayment As System.Data.DataSet, ByVal dsForcibleMsg As System.Data.DataSet, ByVal dsProxyLog As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngClaimOccu As Long, ByVal strUser As String)
            Me.ClaimFinalAsync(strSysName, strMessage, dsClaim, dsPayment, dsForcibleMsg, dsProxyLog, lngClaimNo, lngClaimOccu, strUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClaimFinalAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsClaim As System.Data.DataSet, ByVal dsPayment As System.Data.DataSet, ByVal dsForcibleMsg As System.Data.DataSet, ByVal dsProxyLog As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngClaimOccu As Long, ByVal strUser As String, ByVal userState As Object)
            If (Me.ClaimFinalOperationCompleted Is Nothing) Then
                Me.ClaimFinalOperationCompleted = AddressOf Me.OnClaimFinalOperationCompleted
            End If
            Me.InvokeAsync("ClaimFinal", New Object() {strSysName, strMessage, dsClaim, dsPayment, dsForcibleMsg, dsProxyLog, lngClaimNo, lngClaimOccu, strUser}, Me.ClaimFinalOperationCompleted, userState)
        End Sub
        
        Private Sub OnClaimFinalOperationCompleted(ByVal arg As Object)
            If (Not (Me.ClaimFinalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ClaimFinalCompleted(Me, New ClaimFinalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/ClaimCheck", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ClaimCheck(ByVal strSysName As String, ByRef strMessage As String, ByRef dsClaim As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngClaimOccu As Long, ByVal strUser As String) As Boolean
            Dim results() As Object = Me.Invoke("ClaimCheck", New Object() {strSysName, strMessage, dsClaim, lngClaimNo, lngClaimOccu, strUser})
            strMessage = CType(results(1),String)
            dsClaim = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ClaimCheckAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsClaim As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngClaimOccu As Long, ByVal strUser As String)
            Me.ClaimCheckAsync(strSysName, strMessage, dsClaim, lngClaimNo, lngClaimOccu, strUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClaimCheckAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsClaim As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngClaimOccu As Long, ByVal strUser As String, ByVal userState As Object)
            If (Me.ClaimCheckOperationCompleted Is Nothing) Then
                Me.ClaimCheckOperationCompleted = AddressOf Me.OnClaimCheckOperationCompleted
            End If
            Me.InvokeAsync("ClaimCheck", New Object() {strSysName, strMessage, dsClaim, lngClaimNo, lngClaimOccu, strUser}, Me.ClaimCheckOperationCompleted, userState)
        End Sub
        
        Private Sub OnClaimCheckOperationCompleted(ByVal arg As Object)
            If (Not (Me.ClaimCheckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ClaimCheckCompleted(Me, New ClaimCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/CheckIsPaidAmtEligible", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckIsPaidAmtEligible(ByVal dtBenefit As System.Data.DataTable, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckIsPaidAmtEligible", New Object() {dtBenefit, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckIsPaidAmtEligibleAsync(ByVal dtBenefit As System.Data.DataTable, ByVal strMessage As String)
            Me.CheckIsPaidAmtEligibleAsync(dtBenefit, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckIsPaidAmtEligibleAsync(ByVal dtBenefit As System.Data.DataTable, ByVal strMessage As String, ByVal userState As Object)
            If (Me.CheckIsPaidAmtEligibleOperationCompleted Is Nothing) Then
                Me.CheckIsPaidAmtEligibleOperationCompleted = AddressOf Me.OnCheckIsPaidAmtEligibleOperationCompleted
            End If
            Me.InvokeAsync("CheckIsPaidAmtEligible", New Object() {dtBenefit, strMessage}, Me.CheckIsPaidAmtEligibleOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckIsPaidAmtEligibleOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckIsPaidAmtEligibleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckIsPaidAmtEligibleCompleted(Me, New CheckIsPaidAmtEligibleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/ReverseApproval", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReverseApproval(ByVal strSysName As String, ByRef strMessage As String, ByRef dsClaim As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngClaimOccur As Long, ByVal strUser As String) As Boolean
            Dim results() As Object = Me.Invoke("ReverseApproval", New Object() {strSysName, strMessage, dsClaim, lngClaimNo, lngClaimOccur, strUser})
            strMessage = CType(results(1),String)
            dsClaim = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReverseApprovalAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsClaim As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngClaimOccur As Long, ByVal strUser As String)
            Me.ReverseApprovalAsync(strSysName, strMessage, dsClaim, lngClaimNo, lngClaimOccur, strUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReverseApprovalAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsClaim As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngClaimOccur As Long, ByVal strUser As String, ByVal userState As Object)
            If (Me.ReverseApprovalOperationCompleted Is Nothing) Then
                Me.ReverseApprovalOperationCompleted = AddressOf Me.OnReverseApprovalOperationCompleted
            End If
            Me.InvokeAsync("ReverseApproval", New Object() {strSysName, strMessage, dsClaim, lngClaimNo, lngClaimOccur, strUser}, Me.ReverseApprovalOperationCompleted, userState)
        End Sub
        
        Private Sub OnReverseApprovalOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReverseApprovalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReverseApprovalCompleted(Me, New ReverseApprovalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetCompanyName", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCompanyName(ByVal strCompanyCode As String, ByRef companyNameEng As String, ByRef companyNameChi As String, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("GetCompanyName", New Object() {strCompanyCode, companyNameEng, companyNameChi, strErr})
            companyNameEng = CType(results(1),String)
            companyNameChi = CType(results(2),String)
            strErr = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCompanyNameAsync(ByVal strCompanyCode As String, ByVal companyNameEng As String, ByVal companyNameChi As String, ByVal strErr As String)
            Me.GetCompanyNameAsync(strCompanyCode, companyNameEng, companyNameChi, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCompanyNameAsync(ByVal strCompanyCode As String, ByVal companyNameEng As String, ByVal companyNameChi As String, ByVal strErr As String, ByVal userState As Object)
            If (Me.GetCompanyNameOperationCompleted Is Nothing) Then
                Me.GetCompanyNameOperationCompleted = AddressOf Me.OnGetCompanyNameOperationCompleted
            End If
            Me.InvokeAsync("GetCompanyName", New Object() {strCompanyCode, companyNameEng, companyNameChi, strErr}, Me.GetCompanyNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCompanyNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCompanyNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCompanyNameCompleted(Me, New GetCompanyNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetTitle", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTitle(ByRef strMessage As String, ByVal strTitle As String, ByVal intGrade As Short) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTitle", New Object() {strMessage, strTitle, intGrade})
            strMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTitleAsync(ByVal strMessage As String, ByVal strTitle As String, ByVal intGrade As Short)
            Me.GetTitleAsync(strMessage, strTitle, intGrade, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTitleAsync(ByVal strMessage As String, ByVal strTitle As String, ByVal intGrade As Short, ByVal userState As Object)
            If (Me.GetTitleOperationCompleted Is Nothing) Then
                Me.GetTitleOperationCompleted = AddressOf Me.OnGetTitleOperationCompleted
            End If
            Me.InvokeAsync("GetTitle", New Object() {strMessage, strTitle, intGrade}, Me.GetTitleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTitleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTitleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTitleCompleted(Me, New GetTitleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/CheckClaimApprovalStatus", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckClaimApprovalStatus(ByVal strSys As String, ByVal strSysName As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByRef strMessage As String, ByVal strPolicyNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("CheckClaimApprovalStatus", New Object() {strSys, strSysName, lngClaimNo, lngOccurNo, strMessage, strPolicyNo})
            strMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckClaimApprovalStatusAsync(ByVal strSys As String, ByVal strSysName As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strMessage As String, ByVal strPolicyNo As String)
            Me.CheckClaimApprovalStatusAsync(strSys, strSysName, lngClaimNo, lngOccurNo, strMessage, strPolicyNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckClaimApprovalStatusAsync(ByVal strSys As String, ByVal strSysName As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strMessage As String, ByVal strPolicyNo As String, ByVal userState As Object)
            If (Me.CheckClaimApprovalStatusOperationCompleted Is Nothing) Then
                Me.CheckClaimApprovalStatusOperationCompleted = AddressOf Me.OnCheckClaimApprovalStatusOperationCompleted
            End If
            Me.InvokeAsync("CheckClaimApprovalStatus", New Object() {strSys, strSysName, lngClaimNo, lngOccurNo, strMessage, strPolicyNo}, Me.CheckClaimApprovalStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckClaimApprovalStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckClaimApprovalStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckClaimApprovalStatusCompleted(Me, New CheckClaimApprovalStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/SetApprovedFlag2nd", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetApprovedFlag2nd(ByVal strSys As String, ByVal strSysName As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal approved As Boolean, ByRef strMessage As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("SetApprovedFlag2nd", New Object() {strSys, strSysName, strUser, lngClaimNo, lngOccurNo, approved, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetApprovedFlag2ndAsync(ByVal strSys As String, ByVal strSysName As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal approved As Boolean, ByVal strMessage As String)
            Me.SetApprovedFlag2ndAsync(strSys, strSysName, strUser, lngClaimNo, lngOccurNo, approved, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetApprovedFlag2ndAsync(ByVal strSys As String, ByVal strSysName As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal approved As Boolean, ByVal strMessage As String, ByVal userState As Object)
            If (Me.SetApprovedFlag2ndOperationCompleted Is Nothing) Then
                Me.SetApprovedFlag2ndOperationCompleted = AddressOf Me.OnSetApprovedFlag2ndOperationCompleted
            End If
            Me.InvokeAsync("SetApprovedFlag2nd", New Object() {strSys, strSysName, strUser, lngClaimNo, lngOccurNo, approved, strMessage}, Me.SetApprovedFlag2ndOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetApprovedFlag2ndOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetApprovedFlag2ndCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetApprovedFlag2ndCompleted(Me, New SetApprovedFlag2ndCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetTitleList", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTitleList(ByRef dsData As System.Data.DataSet, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTitleList", New Object() {dsData, strMessage})
            dsData = CType(results(1),System.Data.DataSet)
            strMessage = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTitleListAsync(ByVal dsData As System.Data.DataSet, ByVal strMessage As String)
            Me.GetTitleListAsync(dsData, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTitleListAsync(ByVal dsData As System.Data.DataSet, ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetTitleListOperationCompleted Is Nothing) Then
                Me.GetTitleListOperationCompleted = AddressOf Me.OnGetTitleListOperationCompleted
            End If
            Me.InvokeAsync("GetTitleList", New Object() {dsData, strMessage}, Me.GetTitleListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTitleListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTitleListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTitleListCompleted(Me, New GetTitleListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetAuthGroupByTitle", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAuthGroupByTitle(ByVal strTitleId As String, ByRef strResult As String, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAuthGroupByTitle", New Object() {strTitleId, strResult, strMessage})
            strResult = CType(results(1),String)
            strMessage = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAuthGroupByTitleAsync(ByVal strTitleId As String, ByVal strResult As String, ByVal strMessage As String)
            Me.GetAuthGroupByTitleAsync(strTitleId, strResult, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAuthGroupByTitleAsync(ByVal strTitleId As String, ByVal strResult As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetAuthGroupByTitleOperationCompleted Is Nothing) Then
                Me.GetAuthGroupByTitleOperationCompleted = AddressOf Me.OnGetAuthGroupByTitleOperationCompleted
            End If
            Me.InvokeAsync("GetAuthGroupByTitle", New Object() {strTitleId, strResult, strMessage}, Me.GetAuthGroupByTitleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAuthGroupByTitleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAuthGroupByTitleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAuthGroupByTitleCompleted(Me, New GetAuthGroupByTitleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetDepartmentList", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDepartmentList(ByRef dsData As System.Data.DataSet, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("GetDepartmentList", New Object() {dsData, strMessage})
            dsData = CType(results(1),System.Data.DataSet)
            strMessage = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDepartmentListAsync(ByVal dsData As System.Data.DataSet, ByVal strMessage As String)
            Me.GetDepartmentListAsync(dsData, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDepartmentListAsync(ByVal dsData As System.Data.DataSet, ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetDepartmentListOperationCompleted Is Nothing) Then
                Me.GetDepartmentListOperationCompleted = AddressOf Me.OnGetDepartmentListOperationCompleted
            End If
            Me.InvokeAsync("GetDepartmentList", New Object() {dsData, strMessage}, Me.GetDepartmentListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDepartmentListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDepartmentListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDepartmentListCompleted(Me, New GetDepartmentListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetUserInfo", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserInfo(ByRef strMessage As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetUserInfo", New Object() {strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserInfoAsync(ByVal strMessage As String)
            Me.GetUserInfoAsync(strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserInfoAsync(ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetUserInfoOperationCompleted Is Nothing) Then
                Me.GetUserInfoOperationCompleted = AddressOf Me.OnGetUserInfoOperationCompleted
            End If
            Me.InvokeAsync("GetUserInfo", New Object() {strMessage}, Me.GetUserInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserInfoCompleted(Me, New GetUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetAuthGroupInfoByUID", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAuthGroupInfoByUID(ByVal strUserId As String, ByRef strMessage As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAuthGroupInfoByUID", New Object() {strUserId, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAuthGroupInfoByUIDAsync(ByVal strUserId As String, ByVal strMessage As String)
            Me.GetAuthGroupInfoByUIDAsync(strUserId, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAuthGroupInfoByUIDAsync(ByVal strUserId As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetAuthGroupInfoByUIDOperationCompleted Is Nothing) Then
                Me.GetAuthGroupInfoByUIDOperationCompleted = AddressOf Me.OnGetAuthGroupInfoByUIDOperationCompleted
            End If
            Me.InvokeAsync("GetAuthGroupInfoByUID", New Object() {strUserId, strMessage}, Me.GetAuthGroupInfoByUIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAuthGroupInfoByUIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAuthGroupInfoByUIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAuthGroupInfoByUIDCompleted(Me, New GetAuthGroupInfoByUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/AddUpdateUser", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddUpdateUser(ByVal strUser As String, ByVal strUserId As String, ByVal strFirstName As String, ByVal strLastName As String, ByVal strTitleId As String, ByVal strDept As String, ByVal strCountryCode As String, ByVal strPhone As String, ByVal bCHQO As Boolean, ByVal bCommittee As Boolean, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("AddUpdateUser", New Object() {strUser, strUserId, strFirstName, strLastName, strTitleId, strDept, strCountryCode, strPhone, bCHQO, bCommittee, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddUpdateUserAsync(ByVal strUser As String, ByVal strUserId As String, ByVal strFirstName As String, ByVal strLastName As String, ByVal strTitleId As String, ByVal strDept As String, ByVal strCountryCode As String, ByVal strPhone As String, ByVal bCHQO As Boolean, ByVal bCommittee As Boolean, ByVal strMessage As String)
            Me.AddUpdateUserAsync(strUser, strUserId, strFirstName, strLastName, strTitleId, strDept, strCountryCode, strPhone, bCHQO, bCommittee, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddUpdateUserAsync(ByVal strUser As String, ByVal strUserId As String, ByVal strFirstName As String, ByVal strLastName As String, ByVal strTitleId As String, ByVal strDept As String, ByVal strCountryCode As String, ByVal strPhone As String, ByVal bCHQO As Boolean, ByVal bCommittee As Boolean, ByVal strMessage As String, ByVal userState As Object)
            If (Me.AddUpdateUserOperationCompleted Is Nothing) Then
                Me.AddUpdateUserOperationCompleted = AddressOf Me.OnAddUpdateUserOperationCompleted
            End If
            Me.InvokeAsync("AddUpdateUser", New Object() {strUser, strUserId, strFirstName, strLastName, strTitleId, strDept, strCountryCode, strPhone, bCHQO, bCommittee, strMessage}, Me.AddUpdateUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddUpdateUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddUpdateUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddUpdateUserCompleted(Me, New AddUpdateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/DeleteUser", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteUser(ByVal strUser As String, ByVal strUserId As String, ByVal strTerminationDate As String, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("DeleteUser", New Object() {strUser, strUserId, strTerminationDate, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteUserAsync(ByVal strUser As String, ByVal strUserId As String, ByVal strTerminationDate As String, ByVal strMessage As String)
            Me.DeleteUserAsync(strUser, strUserId, strTerminationDate, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteUserAsync(ByVal strUser As String, ByVal strUserId As String, ByVal strTerminationDate As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.DeleteUserOperationCompleted Is Nothing) Then
                Me.DeleteUserOperationCompleted = AddressOf Me.OnDeleteUserOperationCompleted
            End If
            Me.InvokeAsync("DeleteUser", New Object() {strUser, strUserId, strTerminationDate, strMessage}, Me.DeleteUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteUserCompleted(Me, New DeleteUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetTitleWithAuthGroup", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTitleWithAuthGroup(ByRef strMessage As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetTitleWithAuthGroup", New Object() {strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTitleWithAuthGroupAsync(ByVal strMessage As String)
            Me.GetTitleWithAuthGroupAsync(strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTitleWithAuthGroupAsync(ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetTitleWithAuthGroupOperationCompleted Is Nothing) Then
                Me.GetTitleWithAuthGroupOperationCompleted = AddressOf Me.OnGetTitleWithAuthGroupOperationCompleted
            End If
            Me.InvokeAsync("GetTitleWithAuthGroup", New Object() {strMessage}, Me.GetTitleWithAuthGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTitleWithAuthGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTitleWithAuthGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTitleWithAuthGroupCompleted(Me, New GetTitleWithAuthGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetAuthGroupList", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAuthGroupList(ByRef dsData As System.Data.DataSet, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAuthGroupList", New Object() {dsData, strMessage})
            dsData = CType(results(1),System.Data.DataSet)
            strMessage = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAuthGroupListAsync(ByVal dsData As System.Data.DataSet, ByVal strMessage As String)
            Me.GetAuthGroupListAsync(dsData, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAuthGroupListAsync(ByVal dsData As System.Data.DataSet, ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetAuthGroupListOperationCompleted Is Nothing) Then
                Me.GetAuthGroupListOperationCompleted = AddressOf Me.OnGetAuthGroupListOperationCompleted
            End If
            Me.InvokeAsync("GetAuthGroupList", New Object() {dsData, strMessage}, Me.GetAuthGroupListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAuthGroupListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAuthGroupListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAuthGroupListCompleted(Me, New GetAuthGroupListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimNatureList", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimNatureList(ByRef dsData As System.Data.DataSet, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("GetClaimNatureList", New Object() {dsData, strMessage})
            dsData = CType(results(1),System.Data.DataSet)
            strMessage = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimNatureListAsync(ByVal dsData As System.Data.DataSet, ByVal strMessage As String)
            Me.GetClaimNatureListAsync(dsData, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimNatureListAsync(ByVal dsData As System.Data.DataSet, ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetClaimNatureListOperationCompleted Is Nothing) Then
                Me.GetClaimNatureListOperationCompleted = AddressOf Me.OnGetClaimNatureListOperationCompleted
            End If
            Me.InvokeAsync("GetClaimNatureList", New Object() {dsData, strMessage}, Me.GetClaimNatureListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimNatureListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimNatureListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimNatureListCompleted(Me, New GetClaimNatureListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/AddTitleWithAuthGroup", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddTitleWithAuthGroup(ByVal strUser As String, ByVal strTitleId As String, ByVal strTitleName As String, ByVal strGrade As Decimal, ByVal strAuthGroup As String, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("AddTitleWithAuthGroup", New Object() {strUser, strTitleId, strTitleName, strGrade, strAuthGroup, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddTitleWithAuthGroupAsync(ByVal strUser As String, ByVal strTitleId As String, ByVal strTitleName As String, ByVal strGrade As Decimal, ByVal strAuthGroup As String, ByVal strMessage As String)
            Me.AddTitleWithAuthGroupAsync(strUser, strTitleId, strTitleName, strGrade, strAuthGroup, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddTitleWithAuthGroupAsync(ByVal strUser As String, ByVal strTitleId As String, ByVal strTitleName As String, ByVal strGrade As Decimal, ByVal strAuthGroup As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.AddTitleWithAuthGroupOperationCompleted Is Nothing) Then
                Me.AddTitleWithAuthGroupOperationCompleted = AddressOf Me.OnAddTitleWithAuthGroupOperationCompleted
            End If
            Me.InvokeAsync("AddTitleWithAuthGroup", New Object() {strUser, strTitleId, strTitleName, strGrade, strAuthGroup, strMessage}, Me.AddTitleWithAuthGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddTitleWithAuthGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddTitleWithAuthGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddTitleWithAuthGroupCompleted(Me, New AddTitleWithAuthGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UpdateTitleWithAuthGroup", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateTitleWithAuthGroup(ByVal strUser As String, ByVal strTitleId As String, ByVal strTitleName As String, ByVal strGrade As Decimal, ByVal strAuthGroup As String, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateTitleWithAuthGroup", New Object() {strUser, strTitleId, strTitleName, strGrade, strAuthGroup, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateTitleWithAuthGroupAsync(ByVal strUser As String, ByVal strTitleId As String, ByVal strTitleName As String, ByVal strGrade As Decimal, ByVal strAuthGroup As String, ByVal strMessage As String)
            Me.UpdateTitleWithAuthGroupAsync(strUser, strTitleId, strTitleName, strGrade, strAuthGroup, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateTitleWithAuthGroupAsync(ByVal strUser As String, ByVal strTitleId As String, ByVal strTitleName As String, ByVal strGrade As Decimal, ByVal strAuthGroup As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.UpdateTitleWithAuthGroupOperationCompleted Is Nothing) Then
                Me.UpdateTitleWithAuthGroupOperationCompleted = AddressOf Me.OnUpdateTitleWithAuthGroupOperationCompleted
            End If
            Me.InvokeAsync("UpdateTitleWithAuthGroup", New Object() {strUser, strTitleId, strTitleName, strGrade, strAuthGroup, strMessage}, Me.UpdateTitleWithAuthGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateTitleWithAuthGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateTitleWithAuthGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateTitleWithAuthGroupCompleted(Me, New UpdateTitleWithAuthGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/DeleteTitleWithAuthGroup", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteTitleWithAuthGroup(ByVal strUser As String, ByVal strTitleId As String, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("DeleteTitleWithAuthGroup", New Object() {strUser, strTitleId, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteTitleWithAuthGroupAsync(ByVal strUser As String, ByVal strTitleId As String, ByVal strMessage As String)
            Me.DeleteTitleWithAuthGroupAsync(strUser, strTitleId, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteTitleWithAuthGroupAsync(ByVal strUser As String, ByVal strTitleId As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.DeleteTitleWithAuthGroupOperationCompleted Is Nothing) Then
                Me.DeleteTitleWithAuthGroupOperationCompleted = AddressOf Me.OnDeleteTitleWithAuthGroupOperationCompleted
            End If
            Me.InvokeAsync("DeleteTitleWithAuthGroup", New Object() {strUser, strTitleId, strMessage}, Me.DeleteTitleWithAuthGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteTitleWithAuthGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteTitleWithAuthGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteTitleWithAuthGroupCompleted(Me, New DeleteTitleWithAuthGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("ING_SOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/CheckIsTitleInUse", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckIsTitleInUse(ByVal strTitleID As String, ByRef bIsInUse As Boolean, ByRef strErr As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckIsTitleInUse", New Object() {strTitleID, bIsInUse, strErr})
            bIsInUse = CType(results(1),Boolean)
            strErr = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckIsTitleInUseAsync(ByVal strTitleID As String, ByVal bIsInUse As Boolean, ByVal strErr As String)
            Me.CheckIsTitleInUseAsync(strTitleID, bIsInUse, strErr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckIsTitleInUseAsync(ByVal strTitleID As String, ByVal bIsInUse As Boolean, ByVal strErr As String, ByVal userState As Object)
            If (Me.CheckIsTitleInUseOperationCompleted Is Nothing) Then
                Me.CheckIsTitleInUseOperationCompleted = AddressOf Me.OnCheckIsTitleInUseOperationCompleted
            End If
            Me.InvokeAsync("CheckIsTitleInUse", New Object() {strTitleID, bIsInUse, strErr}, Me.CheckIsTitleInUseOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckIsTitleInUseOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckIsTitleInUseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckIsTitleInUseCompleted(Me, New CheckIsTitleInUseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetAuthRuleWithAuthGroup", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAuthRuleWithAuthGroup(ByRef strMessage As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAuthRuleWithAuthGroup", New Object() {strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAuthRuleWithAuthGroupAsync(ByVal strMessage As String)
            Me.GetAuthRuleWithAuthGroupAsync(strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAuthRuleWithAuthGroupAsync(ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetAuthRuleWithAuthGroupOperationCompleted Is Nothing) Then
                Me.GetAuthRuleWithAuthGroupOperationCompleted = AddressOf Me.OnGetAuthRuleWithAuthGroupOperationCompleted
            End If
            Me.InvokeAsync("GetAuthRuleWithAuthGroup", New Object() {strMessage}, Me.GetAuthRuleWithAuthGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAuthRuleWithAuthGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAuthRuleWithAuthGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAuthRuleWithAuthGroupCompleted(Me, New GetAuthRuleWithAuthGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetAuthRuleList", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAuthRuleList(ByRef dsData As System.Data.DataSet, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAuthRuleList", New Object() {dsData, strMessage})
            dsData = CType(results(1),System.Data.DataSet)
            strMessage = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAuthRuleListAsync(ByVal dsData As System.Data.DataSet, ByVal strMessage As String)
            Me.GetAuthRuleListAsync(dsData, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAuthRuleListAsync(ByVal dsData As System.Data.DataSet, ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetAuthRuleListOperationCompleted Is Nothing) Then
                Me.GetAuthRuleListOperationCompleted = AddressOf Me.OnGetAuthRuleListOperationCompleted
            End If
            Me.InvokeAsync("GetAuthRuleList", New Object() {dsData, strMessage}, Me.GetAuthRuleListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAuthRuleListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAuthRuleListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAuthRuleListCompleted(Me, New GetAuthRuleListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/AddAuthorityRule", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddAuthorityRule(ByVal strUser As String, ByVal strAuthGroupId As String, ByVal strPayType As String, ByVal strPayTypeText As String, ByVal strClmNatTypeCode As String, ByVal strMaxLimit As String, ByVal strCoolDownDay As String, ByRef strMessage As String) As Object
            Dim results() As Object = Me.Invoke("AddAuthorityRule", New Object() {strUser, strAuthGroupId, strPayType, strPayTypeText, strClmNatTypeCode, strMaxLimit, strCoolDownDay, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddAuthorityRuleAsync(ByVal strUser As String, ByVal strAuthGroupId As String, ByVal strPayType As String, ByVal strPayTypeText As String, ByVal strClmNatTypeCode As String, ByVal strMaxLimit As String, ByVal strCoolDownDay As String, ByVal strMessage As String)
            Me.AddAuthorityRuleAsync(strUser, strAuthGroupId, strPayType, strPayTypeText, strClmNatTypeCode, strMaxLimit, strCoolDownDay, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddAuthorityRuleAsync(ByVal strUser As String, ByVal strAuthGroupId As String, ByVal strPayType As String, ByVal strPayTypeText As String, ByVal strClmNatTypeCode As String, ByVal strMaxLimit As String, ByVal strCoolDownDay As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.AddAuthorityRuleOperationCompleted Is Nothing) Then
                Me.AddAuthorityRuleOperationCompleted = AddressOf Me.OnAddAuthorityRuleOperationCompleted
            End If
            Me.InvokeAsync("AddAuthorityRule", New Object() {strUser, strAuthGroupId, strPayType, strPayTypeText, strClmNatTypeCode, strMaxLimit, strCoolDownDay, strMessage}, Me.AddAuthorityRuleOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddAuthorityRuleOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddAuthorityRuleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddAuthorityRuleCompleted(Me, New AddAuthorityRuleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UpdateAuthorityRule", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateAuthorityRule(ByVal strUser As String, ByVal strAuthGroupId As String, ByVal strPayTypeText As String, ByVal strClmNatTypeCode As String, ByVal strLimitAmt As String, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateAuthorityRule", New Object() {strUser, strAuthGroupId, strPayTypeText, strClmNatTypeCode, strLimitAmt, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateAuthorityRuleAsync(ByVal strUser As String, ByVal strAuthGroupId As String, ByVal strPayTypeText As String, ByVal strClmNatTypeCode As String, ByVal strLimitAmt As String, ByVal strMessage As String)
            Me.UpdateAuthorityRuleAsync(strUser, strAuthGroupId, strPayTypeText, strClmNatTypeCode, strLimitAmt, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAuthorityRuleAsync(ByVal strUser As String, ByVal strAuthGroupId As String, ByVal strPayTypeText As String, ByVal strClmNatTypeCode As String, ByVal strLimitAmt As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.UpdateAuthorityRuleOperationCompleted Is Nothing) Then
                Me.UpdateAuthorityRuleOperationCompleted = AddressOf Me.OnUpdateAuthorityRuleOperationCompleted
            End If
            Me.InvokeAsync("UpdateAuthorityRule", New Object() {strUser, strAuthGroupId, strPayTypeText, strClmNatTypeCode, strLimitAmt, strMessage}, Me.UpdateAuthorityRuleOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAuthorityRuleOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAuthorityRuleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAuthorityRuleCompleted(Me, New UpdateAuthorityRuleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/DeleteAuthorityRule", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteAuthorityRule(ByVal strUser As String, ByVal strAuthGroupId As String, ByVal strPayTypeText As String, ByVal strClmNatTypeCode As String, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("DeleteAuthorityRule", New Object() {strUser, strAuthGroupId, strPayTypeText, strClmNatTypeCode, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteAuthorityRuleAsync(ByVal strUser As String, ByVal strAuthGroupId As String, ByVal strPayTypeText As String, ByVal strClmNatTypeCode As String, ByVal strMessage As String)
            Me.DeleteAuthorityRuleAsync(strUser, strAuthGroupId, strPayTypeText, strClmNatTypeCode, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteAuthorityRuleAsync(ByVal strUser As String, ByVal strAuthGroupId As String, ByVal strPayTypeText As String, ByVal strClmNatTypeCode As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.DeleteAuthorityRuleOperationCompleted Is Nothing) Then
                Me.DeleteAuthorityRuleOperationCompleted = AddressOf Me.OnDeleteAuthorityRuleOperationCompleted
            End If
            Me.InvokeAsync("DeleteAuthorityRule", New Object() {strUser, strAuthGroupId, strPayTypeText, strClmNatTypeCode, strMessage}, Me.DeleteAuthorityRuleOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteAuthorityRuleOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteAuthorityRuleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteAuthorityRuleCompleted(Me, New DeleteAuthorityRuleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/AddUpdateClaimNature", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddUpdateClaimNature(ByVal strUser As String, ByVal strClmNatId As String, ByVal strClmNatTypeCode As String, ByVal strClmNatDesc As String, ByVal strDisplayOrder As String, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("AddUpdateClaimNature", New Object() {strUser, strClmNatId, strClmNatTypeCode, strClmNatDesc, strDisplayOrder, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddUpdateClaimNatureAsync(ByVal strUser As String, ByVal strClmNatId As String, ByVal strClmNatTypeCode As String, ByVal strClmNatDesc As String, ByVal strDisplayOrder As String, ByVal strMessage As String)
            Me.AddUpdateClaimNatureAsync(strUser, strClmNatId, strClmNatTypeCode, strClmNatDesc, strDisplayOrder, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddUpdateClaimNatureAsync(ByVal strUser As String, ByVal strClmNatId As String, ByVal strClmNatTypeCode As String, ByVal strClmNatDesc As String, ByVal strDisplayOrder As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.AddUpdateClaimNatureOperationCompleted Is Nothing) Then
                Me.AddUpdateClaimNatureOperationCompleted = AddressOf Me.OnAddUpdateClaimNatureOperationCompleted
            End If
            Me.InvokeAsync("AddUpdateClaimNature", New Object() {strUser, strClmNatId, strClmNatTypeCode, strClmNatDesc, strDisplayOrder, strMessage}, Me.AddUpdateClaimNatureOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddUpdateClaimNatureOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddUpdateClaimNatureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddUpdateClaimNatureCompleted(Me, New AddUpdateClaimNatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/DeleteClaimNature", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteClaimNature(ByVal strUser As String, ByVal strClmNatCode As String, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("DeleteClaimNature", New Object() {strUser, strClmNatCode, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteClaimNatureAsync(ByVal strUser As String, ByVal strClmNatCode As String, ByVal strMessage As String)
            Me.DeleteClaimNatureAsync(strUser, strClmNatCode, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteClaimNatureAsync(ByVal strUser As String, ByVal strClmNatCode As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.DeleteClaimNatureOperationCompleted Is Nothing) Then
                Me.DeleteClaimNatureOperationCompleted = AddressOf Me.OnDeleteClaimNatureOperationCompleted
            End If
            Me.InvokeAsync("DeleteClaimNature", New Object() {strUser, strClmNatCode, strMessage}, Me.DeleteClaimNatureOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteClaimNatureOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteClaimNatureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteClaimNatureCompleted(Me, New DeleteClaimNatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/AddUpdateAuthGroup", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddUpdateAuthGroup(ByVal strUser As String, ByVal strAuthGroupId As String, ByVal strAuthGroupDesc As String, ByVal strAuthGroupLimitCodePrefix As String, ByVal strDisplayOrder As String, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("AddUpdateAuthGroup", New Object() {strUser, strAuthGroupId, strAuthGroupDesc, strAuthGroupLimitCodePrefix, strDisplayOrder, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddUpdateAuthGroupAsync(ByVal strUser As String, ByVal strAuthGroupId As String, ByVal strAuthGroupDesc As String, ByVal strAuthGroupLimitCodePrefix As String, ByVal strDisplayOrder As String, ByVal strMessage As String)
            Me.AddUpdateAuthGroupAsync(strUser, strAuthGroupId, strAuthGroupDesc, strAuthGroupLimitCodePrefix, strDisplayOrder, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddUpdateAuthGroupAsync(ByVal strUser As String, ByVal strAuthGroupId As String, ByVal strAuthGroupDesc As String, ByVal strAuthGroupLimitCodePrefix As String, ByVal strDisplayOrder As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.AddUpdateAuthGroupOperationCompleted Is Nothing) Then
                Me.AddUpdateAuthGroupOperationCompleted = AddressOf Me.OnAddUpdateAuthGroupOperationCompleted
            End If
            Me.InvokeAsync("AddUpdateAuthGroup", New Object() {strUser, strAuthGroupId, strAuthGroupDesc, strAuthGroupLimitCodePrefix, strDisplayOrder, strMessage}, Me.AddUpdateAuthGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddUpdateAuthGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddUpdateAuthGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddUpdateAuthGroupCompleted(Me, New AddUpdateAuthGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/DeleteAuthGroup", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteAuthGroup(ByVal strUser As String, ByVal strAuthGroupId As String, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("DeleteAuthGroup", New Object() {strUser, strAuthGroupId, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteAuthGroupAsync(ByVal strUser As String, ByVal strAuthGroupId As String, ByVal strMessage As String)
            Me.DeleteAuthGroupAsync(strUser, strAuthGroupId, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteAuthGroupAsync(ByVal strUser As String, ByVal strAuthGroupId As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.DeleteAuthGroupOperationCompleted Is Nothing) Then
                Me.DeleteAuthGroupOperationCompleted = AddressOf Me.OnDeleteAuthGroupOperationCompleted
            End If
            Me.InvokeAsync("DeleteAuthGroup", New Object() {strUser, strAuthGroupId, strMessage}, Me.DeleteAuthGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteAuthGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteAuthGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteAuthGroupCompleted(Me, New DeleteAuthGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimNature", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimNature(ByRef strMessage As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetClaimNature", New Object() {strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimNatureAsync(ByVal strMessage As String)
            Me.GetClaimNatureAsync(strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimNatureAsync(ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetClaimNatureOperationCompleted Is Nothing) Then
                Me.GetClaimNatureOperationCompleted = AddressOf Me.OnGetClaimNatureOperationCompleted
            End If
            Me.InvokeAsync("GetClaimNature", New Object() {strMessage}, Me.GetClaimNatureOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimNatureOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimNatureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimNatureCompleted(Me, New GetClaimNatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimNatureMappingInfo", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimNatureMappingInfo(ByRef strMessage As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetClaimNatureMappingInfo", New Object() {strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimNatureMappingInfoAsync(ByVal strMessage As String)
            Me.GetClaimNatureMappingInfoAsync(strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimNatureMappingInfoAsync(ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetClaimNatureMappingInfoOperationCompleted Is Nothing) Then
                Me.GetClaimNatureMappingInfoOperationCompleted = AddressOf Me.OnGetClaimNatureMappingInfoOperationCompleted
            End If
            Me.InvokeAsync("GetClaimNatureMappingInfo", New Object() {strMessage}, Me.GetClaimNatureMappingInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimNatureMappingInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimNatureMappingInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimNatureMappingInfoCompleted(Me, New GetClaimNatureMappingInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetAuthGroup", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAuthGroup(ByRef strMessage As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAuthGroup", New Object() {strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAuthGroupAsync(ByVal strMessage As String)
            Me.GetAuthGroupAsync(strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAuthGroupAsync(ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetAuthGroupOperationCompleted Is Nothing) Then
                Me.GetAuthGroupOperationCompleted = AddressOf Me.OnGetAuthGroupOperationCompleted
            End If
            Me.InvokeAsync("GetAuthGroup", New Object() {strMessage}, Me.GetAuthGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAuthGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAuthGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAuthGroupCompleted(Me, New GetAuthGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimNatureCodeList", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimNatureCodeList(ByRef dsData As System.Data.DataSet, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("GetClaimNatureCodeList", New Object() {dsData, strMessage})
            dsData = CType(results(1),System.Data.DataSet)
            strMessage = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimNatureCodeListAsync(ByVal dsData As System.Data.DataSet, ByVal strMessage As String)
            Me.GetClaimNatureCodeListAsync(dsData, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimNatureCodeListAsync(ByVal dsData As System.Data.DataSet, ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetClaimNatureCodeListOperationCompleted Is Nothing) Then
                Me.GetClaimNatureCodeListOperationCompleted = AddressOf Me.OnGetClaimNatureCodeListOperationCompleted
            End If
            Me.InvokeAsync("GetClaimNatureCodeList", New Object() {dsData, strMessage}, Me.GetClaimNatureCodeListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimNatureCodeListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimNatureCodeListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimNatureCodeListCompleted(Me, New GetClaimNatureCodeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimNaturePlanOrClaimTypeList", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimNaturePlanOrClaimTypeList(ByRef dsData As System.Data.DataSet, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("GetClaimNaturePlanOrClaimTypeList", New Object() {dsData, strMessage})
            dsData = CType(results(1),System.Data.DataSet)
            strMessage = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimNaturePlanOrClaimTypeListAsync(ByVal dsData As System.Data.DataSet, ByVal strMessage As String)
            Me.GetClaimNaturePlanOrClaimTypeListAsync(dsData, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimNaturePlanOrClaimTypeListAsync(ByVal dsData As System.Data.DataSet, ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetClaimNaturePlanOrClaimTypeListOperationCompleted Is Nothing) Then
                Me.GetClaimNaturePlanOrClaimTypeListOperationCompleted = AddressOf Me.OnGetClaimNaturePlanOrClaimTypeListOperationCompleted
            End If
            Me.InvokeAsync("GetClaimNaturePlanOrClaimTypeList", New Object() {dsData, strMessage}, Me.GetClaimNaturePlanOrClaimTypeListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimNaturePlanOrClaimTypeListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimNaturePlanOrClaimTypeListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimNaturePlanOrClaimTypeListCompleted(Me, New GetClaimNaturePlanOrClaimTypeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetUserGroupList", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserGroupList(ByRef strMessage As String, ByVal strLoginUser As String, ByRef ReturnSQL As String, ByVal strSystem As String, ByVal strFunctionCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetUserGroupList", New Object() {strMessage, strLoginUser, ReturnSQL, strSystem, strFunctionCode})
            strMessage = CType(results(1),String)
            ReturnSQL = CType(results(2),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserGroupListAsync(ByVal strMessage As String, ByVal strLoginUser As String, ByVal ReturnSQL As String, ByVal strSystem As String, ByVal strFunctionCode As String)
            Me.GetUserGroupListAsync(strMessage, strLoginUser, ReturnSQL, strSystem, strFunctionCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserGroupListAsync(ByVal strMessage As String, ByVal strLoginUser As String, ByVal ReturnSQL As String, ByVal strSystem As String, ByVal strFunctionCode As String, ByVal userState As Object)
            If (Me.GetUserGroupListOperationCompleted Is Nothing) Then
                Me.GetUserGroupListOperationCompleted = AddressOf Me.OnGetUserGroupListOperationCompleted
            End If
            Me.InvokeAsync("GetUserGroupList", New Object() {strMessage, strLoginUser, ReturnSQL, strSystem, strFunctionCode}, Me.GetUserGroupListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserGroupListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserGroupListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserGroupListCompleted(Me, New GetUserGroupListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/getLogoImg", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getLogoImg(ByVal strSysName As String, ByVal strUserId As String, ByRef rstLogo As System.Data.DataSet, ByRef strRtnMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("getLogoImg", New Object() {strSysName, strUserId, rstLogo, strRtnMsg})
            rstLogo = CType(results(1),System.Data.DataSet)
            strRtnMsg = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getLogoImgAsync(ByVal strSysName As String, ByVal strUserId As String, ByVal rstLogo As System.Data.DataSet, ByVal strRtnMsg As String)
            Me.getLogoImgAsync(strSysName, strUserId, rstLogo, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getLogoImgAsync(ByVal strSysName As String, ByVal strUserId As String, ByVal rstLogo As System.Data.DataSet, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.getLogoImgOperationCompleted Is Nothing) Then
                Me.getLogoImgOperationCompleted = AddressOf Me.OngetLogoImgOperationCompleted
            End If
            Me.InvokeAsync("getLogoImg", New Object() {strSysName, strUserId, rstLogo, strRtnMsg}, Me.getLogoImgOperationCompleted, userState)
        End Sub
        
        Private Sub OngetLogoImgOperationCompleted(ByVal arg As Object)
            If (Not (Me.getLogoImgCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getLogoImgCompleted(Me, New getLogoImgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/DCADataHeader", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DCADataHeader(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicyNo As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByRef dsHeader As System.Data.DataSet, ByRef strMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("DCADataHeader", New Object() {strSysName, strUser, strPolicyNo, strClaimNo, strClaimOccur, dsHeader, strMsg})
            dsHeader = CType(results(1),System.Data.DataSet)
            strMsg = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DCADataHeaderAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicyNo As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal dsHeader As System.Data.DataSet, ByVal strMsg As String)
            Me.DCADataHeaderAsync(strSysName, strUser, strPolicyNo, strClaimNo, strClaimOccur, dsHeader, strMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DCADataHeaderAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicyNo As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal dsHeader As System.Data.DataSet, ByVal strMsg As String, ByVal userState As Object)
            If (Me.DCADataHeaderOperationCompleted Is Nothing) Then
                Me.DCADataHeaderOperationCompleted = AddressOf Me.OnDCADataHeaderOperationCompleted
            End If
            Me.InvokeAsync("DCADataHeader", New Object() {strSysName, strUser, strPolicyNo, strClaimNo, strClaimOccur, dsHeader, strMsg}, Me.DCADataHeaderOperationCompleted, userState)
        End Sub
        
        Private Sub OnDCADataHeaderOperationCompleted(ByVal arg As Object)
            If (Not (Me.DCADataHeaderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DCADataHeaderCompleted(Me, New DCADataHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/DCADataDetail", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DCADataDetail(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicyNo As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByRef rstDetailds As System.Data.DataSet, ByRef strMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("DCADataDetail", New Object() {strSysName, strUser, strPolicyNo, strClaimNo, strClaimOccur, rstDetailds, strMsg})
            rstDetailds = CType(results(1),System.Data.DataSet)
            strMsg = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DCADataDetailAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicyNo As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal rstDetailds As System.Data.DataSet, ByVal strMsg As String)
            Me.DCADataDetailAsync(strSysName, strUser, strPolicyNo, strClaimNo, strClaimOccur, rstDetailds, strMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DCADataDetailAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicyNo As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal rstDetailds As System.Data.DataSet, ByVal strMsg As String, ByVal userState As Object)
            If (Me.DCADataDetailOperationCompleted Is Nothing) Then
                Me.DCADataDetailOperationCompleted = AddressOf Me.OnDCADataDetailOperationCompleted
            End If
            Me.InvokeAsync("DCADataDetail", New Object() {strSysName, strUser, strPolicyNo, strClaimNo, strClaimOccur, rstDetailds, strMsg}, Me.DCADataDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnDCADataDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.DCADataDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DCADataDetailCompleted(Me, New DCADataDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/DCADataFooter", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DCADataFooter(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicyNo As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByRef dsFooter As System.Data.DataSet, ByRef strMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("DCADataFooter", New Object() {strSysName, strUser, strPolicyNo, strClaimNo, strClaimOccur, dsFooter, strMsg})
            dsFooter = CType(results(1),System.Data.DataSet)
            strMsg = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DCADataFooterAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicyNo As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal dsFooter As System.Data.DataSet, ByVal strMsg As String)
            Me.DCADataFooterAsync(strSysName, strUser, strPolicyNo, strClaimNo, strClaimOccur, dsFooter, strMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DCADataFooterAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicyNo As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal dsFooter As System.Data.DataSet, ByVal strMsg As String, ByVal userState As Object)
            If (Me.DCADataFooterOperationCompleted Is Nothing) Then
                Me.DCADataFooterOperationCompleted = AddressOf Me.OnDCADataFooterOperationCompleted
            End If
            Me.InvokeAsync("DCADataFooter", New Object() {strSysName, strUser, strPolicyNo, strClaimNo, strClaimOccur, dsFooter, strMsg}, Me.DCADataFooterOperationCompleted, userState)
        End Sub
        
        Private Sub OnDCADataFooterOperationCompleted(ByVal arg As Object)
            If (Not (Me.DCADataFooterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DCADataFooterCompleted(Me, New DCADataFooterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/DCALetterInfo", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DCALetterInfo(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicyNo As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByRef rstLetterInfoDS As System.Data.DataSet, ByRef strMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("DCALetterInfo", New Object() {strSysName, strUser, strPolicyNo, strClaimNo, strClaimOccur, rstLetterInfoDS, strMsg})
            rstLetterInfoDS = CType(results(1),System.Data.DataSet)
            strMsg = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DCALetterInfoAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicyNo As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal rstLetterInfoDS As System.Data.DataSet, ByVal strMsg As String)
            Me.DCALetterInfoAsync(strSysName, strUser, strPolicyNo, strClaimNo, strClaimOccur, rstLetterInfoDS, strMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DCALetterInfoAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicyNo As String, ByVal strClaimNo As String, ByVal strClaimOccur As String, ByVal rstLetterInfoDS As System.Data.DataSet, ByVal strMsg As String, ByVal userState As Object)
            If (Me.DCALetterInfoOperationCompleted Is Nothing) Then
                Me.DCALetterInfoOperationCompleted = AddressOf Me.OnDCALetterInfoOperationCompleted
            End If
            Me.InvokeAsync("DCALetterInfo", New Object() {strSysName, strUser, strPolicyNo, strClaimNo, strClaimOccur, rstLetterInfoDS, strMsg}, Me.DCALetterInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnDCALetterInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.DCALetterInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DCALetterInfoCompleted(Me, New DCALetterInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GenerateMemoDetailsM", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub GenerateMemoDetailsM(ByVal strSysName As String, ByRef strMsg As String, ByRef rstClaimDS As System.Data.DataSet, ByRef strInsured As String, ByVal strUser As String, ByVal strDefaultID As String, ByVal strType As String, ByVal strfilter As String)
            Dim results() As Object = Me.Invoke("GenerateMemoDetailsM", New Object() {strSysName, strMsg, rstClaimDS, strInsured, strUser, strDefaultID, strType, strfilter})
            strMsg = CType(results(0),String)
            rstClaimDS = CType(results(1),System.Data.DataSet)
            strInsured = CType(results(2),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GenerateMemoDetailsMAsync(ByVal strSysName As String, ByVal strMsg As String, ByVal rstClaimDS As System.Data.DataSet, ByVal strInsured As String, ByVal strUser As String, ByVal strDefaultID As String, ByVal strType As String, ByVal strfilter As String)
            Me.GenerateMemoDetailsMAsync(strSysName, strMsg, rstClaimDS, strInsured, strUser, strDefaultID, strType, strfilter, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GenerateMemoDetailsMAsync(ByVal strSysName As String, ByVal strMsg As String, ByVal rstClaimDS As System.Data.DataSet, ByVal strInsured As String, ByVal strUser As String, ByVal strDefaultID As String, ByVal strType As String, ByVal strfilter As String, ByVal userState As Object)
            If (Me.GenerateMemoDetailsMOperationCompleted Is Nothing) Then
                Me.GenerateMemoDetailsMOperationCompleted = AddressOf Me.OnGenerateMemoDetailsMOperationCompleted
            End If
            Me.InvokeAsync("GenerateMemoDetailsM", New Object() {strSysName, strMsg, rstClaimDS, strInsured, strUser, strDefaultID, strType, strfilter}, Me.GenerateMemoDetailsMOperationCompleted, userState)
        End Sub
        
        Private Sub OnGenerateMemoDetailsMOperationCompleted(ByVal arg As Object)
            If (Not (Me.GenerateMemoDetailsMCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GenerateMemoDetailsMCompleted(Me, New GenerateMemoDetailsMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GenerateMemoDetails", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub GenerateMemoDetails(ByVal strSysName As String, ByRef strMsg As String, ByRef rstClaimDS As System.Data.DataSet, ByRef aryName() As Object, ByRef aryValue() As Object, ByRef aryAgentFax() As Object, ByVal strUser As String, ByVal strDefaultID As String, ByVal strType As String, ByVal strfilter As String)
            Dim results() As Object = Me.Invoke("GenerateMemoDetails", New Object() {strSysName, strMsg, rstClaimDS, aryName, aryValue, aryAgentFax, strUser, strDefaultID, strType, strfilter})
            strMsg = CType(results(0),String)
            rstClaimDS = CType(results(1),System.Data.DataSet)
            aryName = CType(results(2),Object())
            aryValue = CType(results(3),Object())
            aryAgentFax = CType(results(4),Object())
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GenerateMemoDetailsAsync(ByVal strSysName As String, ByVal strMsg As String, ByVal rstClaimDS As System.Data.DataSet, ByVal aryName() As Object, ByVal aryValue() As Object, ByVal aryAgentFax() As Object, ByVal strUser As String, ByVal strDefaultID As String, ByVal strType As String, ByVal strfilter As String)
            Me.GenerateMemoDetailsAsync(strSysName, strMsg, rstClaimDS, aryName, aryValue, aryAgentFax, strUser, strDefaultID, strType, strfilter, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GenerateMemoDetailsAsync(ByVal strSysName As String, ByVal strMsg As String, ByVal rstClaimDS As System.Data.DataSet, ByVal aryName() As Object, ByVal aryValue() As Object, ByVal aryAgentFax() As Object, ByVal strUser As String, ByVal strDefaultID As String, ByVal strType As String, ByVal strfilter As String, ByVal userState As Object)
            If (Me.GenerateMemoDetailsOperationCompleted Is Nothing) Then
                Me.GenerateMemoDetailsOperationCompleted = AddressOf Me.OnGenerateMemoDetailsOperationCompleted
            End If
            Me.InvokeAsync("GenerateMemoDetails", New Object() {strSysName, strMsg, rstClaimDS, aryName, aryValue, aryAgentFax, strUser, strDefaultID, strType, strfilter}, Me.GenerateMemoDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGenerateMemoDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GenerateMemoDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GenerateMemoDetailsCompleted(Me, New GenerateMemoDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetAddressByPolicyNo", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAddressByPolicyNo(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicyNo As String, ByRef strErrMsg As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAddressByPolicyNo", New Object() {strSysName, strUser, strPolicyNo, strErrMsg})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAddressByPolicyNoAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicyNo As String, ByVal strErrMsg As String)
            Me.GetAddressByPolicyNoAsync(strSysName, strUser, strPolicyNo, strErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAddressByPolicyNoAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicyNo As String, ByVal strErrMsg As String, ByVal userState As Object)
            If (Me.GetAddressByPolicyNoOperationCompleted Is Nothing) Then
                Me.GetAddressByPolicyNoOperationCompleted = AddressOf Me.OnGetAddressByPolicyNoOperationCompleted
            End If
            Me.InvokeAsync("GetAddressByPolicyNo", New Object() {strSysName, strUser, strPolicyNo, strErrMsg}, Me.GetAddressByPolicyNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAddressByPolicyNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAddressByPolicyNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAddressByPolicyNoCompleted(Me, New GetAddressByPolicyNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetAddressByCustomerNo", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAddressByCustomerNo(ByVal strCustomerNo As String, ByRef strErrMsg As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAddressByCustomerNo", New Object() {strCustomerNo, strErrMsg})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAddressByCustomerNoAsync(ByVal strCustomerNo As String, ByVal strErrMsg As String)
            Me.GetAddressByCustomerNoAsync(strCustomerNo, strErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAddressByCustomerNoAsync(ByVal strCustomerNo As String, ByVal strErrMsg As String, ByVal userState As Object)
            If (Me.GetAddressByCustomerNoOperationCompleted Is Nothing) Then
                Me.GetAddressByCustomerNoOperationCompleted = AddressOf Me.OnGetAddressByCustomerNoOperationCompleted
            End If
            Me.InvokeAsync("GetAddressByCustomerNo", New Object() {strCustomerNo, strErrMsg}, Me.GetAddressByCustomerNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAddressByCustomerNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAddressByCustomerNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAddressByCustomerNoCompleted(Me, New GetAddressByCustomerNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetCustomerByRel", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerByRel(ByVal strSysName As String, ByRef strErrMsg As String, ByVal strUser As String, ByVal strPolicy As String, ByVal strRel As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCustomerByRel", New Object() {strSysName, strErrMsg, strUser, strPolicy, strRel})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerByRelAsync(ByVal strSysName As String, ByVal strErrMsg As String, ByVal strUser As String, ByVal strPolicy As String, ByVal strRel As String)
            Me.GetCustomerByRelAsync(strSysName, strErrMsg, strUser, strPolicy, strRel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerByRelAsync(ByVal strSysName As String, ByVal strErrMsg As String, ByVal strUser As String, ByVal strPolicy As String, ByVal strRel As String, ByVal userState As Object)
            If (Me.GetCustomerByRelOperationCompleted Is Nothing) Then
                Me.GetCustomerByRelOperationCompleted = AddressOf Me.OnGetCustomerByRelOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerByRel", New Object() {strSysName, strErrMsg, strUser, strPolicy, strRel}, Me.GetCustomerByRelOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerByRelOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerByRelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerByRelCompleted(Me, New GetCustomerByRelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetCustomerIDByRel", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerIDByRel(ByVal strSysName As String, ByRef strErrMsg As String, ByVal strUser As String, ByVal strPolicy As String, ByVal strRel As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCustomerIDByRel", New Object() {strSysName, strErrMsg, strUser, strPolicy, strRel})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerIDByRelAsync(ByVal strSysName As String, ByVal strErrMsg As String, ByVal strUser As String, ByVal strPolicy As String, ByVal strRel As String)
            Me.GetCustomerIDByRelAsync(strSysName, strErrMsg, strUser, strPolicy, strRel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerIDByRelAsync(ByVal strSysName As String, ByVal strErrMsg As String, ByVal strUser As String, ByVal strPolicy As String, ByVal strRel As String, ByVal userState As Object)
            If (Me.GetCustomerIDByRelOperationCompleted Is Nothing) Then
                Me.GetCustomerIDByRelOperationCompleted = AddressOf Me.OnGetCustomerIDByRelOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerIDByRel", New Object() {strSysName, strErrMsg, strUser, strPolicy, strRel}, Me.GetCustomerIDByRelOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerIDByRelOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerIDByRelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerIDByRelCompleted(Me, New GetCustomerIDByRelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetOwner", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOwner(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicyNo As String, ByRef strErrMsg As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetOwner", New Object() {strSysName, strUser, strPolicyNo, strErrMsg})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOwnerAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicyNo As String, ByVal strErrMsg As String)
            Me.GetOwnerAsync(strSysName, strUser, strPolicyNo, strErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOwnerAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicyNo As String, ByVal strErrMsg As String, ByVal userState As Object)
            If (Me.GetOwnerOperationCompleted Is Nothing) Then
                Me.GetOwnerOperationCompleted = AddressOf Me.OnGetOwnerOperationCompleted
            End If
            Me.InvokeAsync("GetOwner", New Object() {strSysName, strUser, strPolicyNo, strErrMsg}, Me.GetOwnerOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOwnerOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOwnerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOwnerCompleted(Me, New GetOwnerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/getCoverageChineseName", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCoverageChineseName(ByVal strSysName As String, ByVal strUser As String, ByVal pstrProductID As String, ByRef strRtnMsg As String, ByRef ResultRst As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("getCoverageChineseName", New Object() {strSysName, strUser, pstrProductID, strRtnMsg, ResultRst})
            strRtnMsg = CType(results(1),String)
            ResultRst = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCoverageChineseNameAsync(ByVal strSysName As String, ByVal strUser As String, ByVal pstrProductID As String, ByVal strRtnMsg As String, ByVal ResultRst As System.Data.DataSet)
            Me.getCoverageChineseNameAsync(strSysName, strUser, pstrProductID, strRtnMsg, ResultRst, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCoverageChineseNameAsync(ByVal strSysName As String, ByVal strUser As String, ByVal pstrProductID As String, ByVal strRtnMsg As String, ByVal ResultRst As System.Data.DataSet, ByVal userState As Object)
            If (Me.getCoverageChineseNameOperationCompleted Is Nothing) Then
                Me.getCoverageChineseNameOperationCompleted = AddressOf Me.OngetCoverageChineseNameOperationCompleted
            End If
            Me.InvokeAsync("getCoverageChineseName", New Object() {strSysName, strUser, pstrProductID, strRtnMsg, ResultRst}, Me.getCoverageChineseNameOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCoverageChineseNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCoverageChineseNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCoverageChineseNameCompleted(Me, New getCoverageChineseNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/IsPolicySurrender", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsPolicySurrender(ByRef strErrMsg As String, ByVal sPolicyNo As String) As Boolean
            Dim results() As Object = Me.Invoke("IsPolicySurrender", New Object() {strErrMsg, sPolicyNo})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsPolicySurrenderAsync(ByVal strErrMsg As String, ByVal sPolicyNo As String)
            Me.IsPolicySurrenderAsync(strErrMsg, sPolicyNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsPolicySurrenderAsync(ByVal strErrMsg As String, ByVal sPolicyNo As String, ByVal userState As Object)
            If (Me.IsPolicySurrenderOperationCompleted Is Nothing) Then
                Me.IsPolicySurrenderOperationCompleted = AddressOf Me.OnIsPolicySurrenderOperationCompleted
            End If
            Me.InvokeAsync("IsPolicySurrender", New Object() {strErrMsg, sPolicyNo}, Me.IsPolicySurrenderOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsPolicySurrenderOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsPolicySurrenderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsPolicySurrenderCompleted(Me, New IsPolicySurrenderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetEligibleBenefit", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEligibleBenefit(ByVal dblCustomerId As Long, ByVal strPlanCode As String, ByRef strErrMsg As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetEligibleBenefit", New Object() {dblCustomerId, strPlanCode, strErrMsg})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEligibleBenefitAsync(ByVal dblCustomerId As Long, ByVal strPlanCode As String, ByVal strErrMsg As String)
            Me.GetEligibleBenefitAsync(dblCustomerId, strPlanCode, strErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEligibleBenefitAsync(ByVal dblCustomerId As Long, ByVal strPlanCode As String, ByVal strErrMsg As String, ByVal userState As Object)
            If (Me.GetEligibleBenefitOperationCompleted Is Nothing) Then
                Me.GetEligibleBenefitOperationCompleted = AddressOf Me.OnGetEligibleBenefitOperationCompleted
            End If
            Me.InvokeAsync("GetEligibleBenefit", New Object() {dblCustomerId, strPlanCode, strErrMsg}, Me.GetEligibleBenefitOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEligibleBenefitOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEligibleBenefitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEligibleBenefitCompleted(Me, New GetEligibleBenefitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/IsRefundableHospitalIncome", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsRefundableHospitalIncome(ByVal strProductId As String, ByRef strErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("IsRefundableHospitalIncome", New Object() {strProductId, strErrMsg})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsRefundableHospitalIncomeAsync(ByVal strProductId As String, ByVal strErrMsg As String)
            Me.IsRefundableHospitalIncomeAsync(strProductId, strErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsRefundableHospitalIncomeAsync(ByVal strProductId As String, ByVal strErrMsg As String, ByVal userState As Object)
            If (Me.IsRefundableHospitalIncomeOperationCompleted Is Nothing) Then
                Me.IsRefundableHospitalIncomeOperationCompleted = AddressOf Me.OnIsRefundableHospitalIncomeOperationCompleted
            End If
            Me.InvokeAsync("IsRefundableHospitalIncome", New Object() {strProductId, strErrMsg}, Me.IsRefundableHospitalIncomeOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsRefundableHospitalIncomeOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsRefundableHospitalIncomeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsRefundableHospitalIncomeCompleted(Me, New IsRefundableHospitalIncomeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetLifeTimeClaimBalance", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLifeTimeClaimBalance(ByVal lngInsuredId As Long, ByVal strBenefitCode As String, ByVal lngExcludeClaimNo As Long, ByRef strErrMsg As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetLifeTimeClaimBalance", New Object() {lngInsuredId, strBenefitCode, lngExcludeClaimNo, strErrMsg})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLifeTimeClaimBalanceAsync(ByVal lngInsuredId As Long, ByVal strBenefitCode As String, ByVal lngExcludeClaimNo As Long, ByVal strErrMsg As String)
            Me.GetLifeTimeClaimBalanceAsync(lngInsuredId, strBenefitCode, lngExcludeClaimNo, strErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLifeTimeClaimBalanceAsync(ByVal lngInsuredId As Long, ByVal strBenefitCode As String, ByVal lngExcludeClaimNo As Long, ByVal strErrMsg As String, ByVal userState As Object)
            If (Me.GetLifeTimeClaimBalanceOperationCompleted Is Nothing) Then
                Me.GetLifeTimeClaimBalanceOperationCompleted = AddressOf Me.OnGetLifeTimeClaimBalanceOperationCompleted
            End If
            Me.InvokeAsync("GetLifeTimeClaimBalance", New Object() {lngInsuredId, strBenefitCode, lngExcludeClaimNo, strErrMsg}, Me.GetLifeTimeClaimBalanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLifeTimeClaimBalanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLifeTimeClaimBalanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLifeTimeClaimBalanceCompleted(Me, New GetLifeTimeClaimBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetLifeTimeBenefitByInsuredId", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLifeTimeBenefitByInsuredId(ByVal lngInsuredId1 As Long, ByRef strErrMsg As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetLifeTimeBenefitByInsuredId", New Object() {lngInsuredId1, strErrMsg})
            strErrMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLifeTimeBenefitByInsuredIdAsync(ByVal lngInsuredId1 As Long, ByVal strErrMsg As String)
            Me.GetLifeTimeBenefitByInsuredIdAsync(lngInsuredId1, strErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLifeTimeBenefitByInsuredIdAsync(ByVal lngInsuredId1 As Long, ByVal strErrMsg As String, ByVal userState As Object)
            If (Me.GetLifeTimeBenefitByInsuredIdOperationCompleted Is Nothing) Then
                Me.GetLifeTimeBenefitByInsuredIdOperationCompleted = AddressOf Me.OnGetLifeTimeBenefitByInsuredIdOperationCompleted
            End If
            Me.InvokeAsync("GetLifeTimeBenefitByInsuredId", New Object() {lngInsuredId1, strErrMsg}, Me.GetLifeTimeBenefitByInsuredIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLifeTimeBenefitByInsuredIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLifeTimeBenefitByInsuredIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLifeTimeBenefitByInsuredIdCompleted(Me, New GetLifeTimeBenefitByInsuredIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetInsuredMaxBenefitAmount", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInsuredMaxBenefitAmount(ByVal strBenefitCode As String, ByVal insuredId As Long, ByRef dblMaxBenefitAmt As Double, ByRef dblMaxBenefitDay As Double, ByRef strErrMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("GetInsuredMaxBenefitAmount", New Object() {strBenefitCode, insuredId, dblMaxBenefitAmt, dblMaxBenefitDay, strErrMsg})
            dblMaxBenefitAmt = CType(results(1),Double)
            dblMaxBenefitDay = CType(results(2),Double)
            strErrMsg = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInsuredMaxBenefitAmountAsync(ByVal strBenefitCode As String, ByVal insuredId As Long, ByVal dblMaxBenefitAmt As Double, ByVal dblMaxBenefitDay As Double, ByVal strErrMsg As String)
            Me.GetInsuredMaxBenefitAmountAsync(strBenefitCode, insuredId, dblMaxBenefitAmt, dblMaxBenefitDay, strErrMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInsuredMaxBenefitAmountAsync(ByVal strBenefitCode As String, ByVal insuredId As Long, ByVal dblMaxBenefitAmt As Double, ByVal dblMaxBenefitDay As Double, ByVal strErrMsg As String, ByVal userState As Object)
            If (Me.GetInsuredMaxBenefitAmountOperationCompleted Is Nothing) Then
                Me.GetInsuredMaxBenefitAmountOperationCompleted = AddressOf Me.OnGetInsuredMaxBenefitAmountOperationCompleted
            End If
            Me.InvokeAsync("GetInsuredMaxBenefitAmount", New Object() {strBenefitCode, insuredId, dblMaxBenefitAmt, dblMaxBenefitDay, strErrMsg}, Me.GetInsuredMaxBenefitAmountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInsuredMaxBenefitAmountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInsuredMaxBenefitAmountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInsuredMaxBenefitAmountCompleted(Me, New GetInsuredMaxBenefitAmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetInsuredTotalPaidAmount", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInsuredTotalPaidAmount(ByVal strBenefitCode As String, ByVal insuredId As Long, ByRef dblTotalPaidAmt As Double, ByRef dblTotalPaidDay As Double, ByRef strMessage As String, ByVal lngExcludeClaimNo As Long) As Boolean
            Dim results() As Object = Me.Invoke("GetInsuredTotalPaidAmount", New Object() {strBenefitCode, insuredId, dblTotalPaidAmt, dblTotalPaidDay, strMessage, lngExcludeClaimNo})
            dblTotalPaidAmt = CType(results(1),Double)
            dblTotalPaidDay = CType(results(2),Double)
            strMessage = CType(results(3),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInsuredTotalPaidAmountAsync(ByVal strBenefitCode As String, ByVal insuredId As Long, ByVal dblTotalPaidAmt As Double, ByVal dblTotalPaidDay As Double, ByVal strMessage As String, ByVal lngExcludeClaimNo As Long)
            Me.GetInsuredTotalPaidAmountAsync(strBenefitCode, insuredId, dblTotalPaidAmt, dblTotalPaidDay, strMessage, lngExcludeClaimNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInsuredTotalPaidAmountAsync(ByVal strBenefitCode As String, ByVal insuredId As Long, ByVal dblTotalPaidAmt As Double, ByVal dblTotalPaidDay As Double, ByVal strMessage As String, ByVal lngExcludeClaimNo As Long, ByVal userState As Object)
            If (Me.GetInsuredTotalPaidAmountOperationCompleted Is Nothing) Then
                Me.GetInsuredTotalPaidAmountOperationCompleted = AddressOf Me.OnGetInsuredTotalPaidAmountOperationCompleted
            End If
            Me.InvokeAsync("GetInsuredTotalPaidAmount", New Object() {strBenefitCode, insuredId, dblTotalPaidAmt, dblTotalPaidDay, strMessage, lngExcludeClaimNo}, Me.GetInsuredTotalPaidAmountOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInsuredTotalPaidAmountOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInsuredTotalPaidAmountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInsuredTotalPaidAmountCompleted(Me, New GetInsuredTotalPaidAmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetSugClassCountByPlan", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSugClassCountByPlan(ByVal strPlanCode As String, ByVal strTable1 As String, ByVal strTable2 As String, ByRef intSugClassCount As Integer, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("GetSugClassCountByPlan", New Object() {strPlanCode, strTable1, strTable2, intSugClassCount, strMessage})
            intSugClassCount = CType(results(1),Integer)
            strMessage = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSugClassCountByPlanAsync(ByVal strPlanCode As String, ByVal strTable1 As String, ByVal strTable2 As String, ByVal intSugClassCount As Integer, ByVal strMessage As String)
            Me.GetSugClassCountByPlanAsync(strPlanCode, strTable1, strTable2, intSugClassCount, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSugClassCountByPlanAsync(ByVal strPlanCode As String, ByVal strTable1 As String, ByVal strTable2 As String, ByVal intSugClassCount As Integer, ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetSugClassCountByPlanOperationCompleted Is Nothing) Then
                Me.GetSugClassCountByPlanOperationCompleted = AddressOf Me.OnGetSugClassCountByPlanOperationCompleted
            End If
            Me.InvokeAsync("GetSugClassCountByPlan", New Object() {strPlanCode, strTable1, strTable2, intSugClassCount, strMessage}, Me.GetSugClassCountByPlanOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSugClassCountByPlanOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSugClassCountByPlanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSugClassCountByPlanCompleted(Me, New GetSugClassCountByPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetSurClassMapping", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSurClassMapping(ByRef strMessage As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSurClassMapping", New Object() {strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSurClassMappingAsync(ByVal strMessage As String)
            Me.GetSurClassMappingAsync(strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSurClassMappingAsync(ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetSurClassMappingOperationCompleted Is Nothing) Then
                Me.GetSurClassMappingOperationCompleted = AddressOf Me.OnGetSurClassMappingOperationCompleted
            End If
            Me.InvokeAsync("GetSurClassMapping", New Object() {strMessage}, Me.GetSurClassMappingOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSurClassMappingOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSurClassMappingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSurClassMappingCompleted(Me, New GetSurClassMappingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/HasPropDevelopedCountry", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HasPropDevelopedCountry(ByVal strPlanCode As String, ByVal strTable1 As String, ByVal strTable2 As String, ByVal strCurr As String, ByVal strBenefitCode As String, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("HasPropDevelopedCountry", New Object() {strPlanCode, strTable1, strTable2, strCurr, strBenefitCode, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HasPropDevelopedCountryAsync(ByVal strPlanCode As String, ByVal strTable1 As String, ByVal strTable2 As String, ByVal strCurr As String, ByVal strBenefitCode As String, ByVal strMessage As String)
            Me.HasPropDevelopedCountryAsync(strPlanCode, strTable1, strTable2, strCurr, strBenefitCode, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HasPropDevelopedCountryAsync(ByVal strPlanCode As String, ByVal strTable1 As String, ByVal strTable2 As String, ByVal strCurr As String, ByVal strBenefitCode As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.HasPropDevelopedCountryOperationCompleted Is Nothing) Then
                Me.HasPropDevelopedCountryOperationCompleted = AddressOf Me.OnHasPropDevelopedCountryOperationCompleted
            End If
            Me.InvokeAsync("HasPropDevelopedCountry", New Object() {strPlanCode, strTable1, strTable2, strCurr, strBenefitCode, strMessage}, Me.HasPropDevelopedCountryOperationCompleted, userState)
        End Sub
        
        Private Sub OnHasPropDevelopedCountryOperationCompleted(ByVal arg As Object)
            If (Not (Me.HasPropDevelopedCountryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HasPropDevelopedCountryCompleted(Me, New HasPropDevelopedCountryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/HasPropSpecialEndorsement", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HasPropSpecialEndorsement(ByVal strPlanCode As String, ByVal strTable1 As String, ByVal strTable2 As String, ByVal strCurr As String, ByVal strBenefitCode As String, ByRef strMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("HasPropSpecialEndorsement", New Object() {strPlanCode, strTable1, strTable2, strCurr, strBenefitCode, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HasPropSpecialEndorsementAsync(ByVal strPlanCode As String, ByVal strTable1 As String, ByVal strTable2 As String, ByVal strCurr As String, ByVal strBenefitCode As String, ByVal strMessage As String)
            Me.HasPropSpecialEndorsementAsync(strPlanCode, strTable1, strTable2, strCurr, strBenefitCode, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HasPropSpecialEndorsementAsync(ByVal strPlanCode As String, ByVal strTable1 As String, ByVal strTable2 As String, ByVal strCurr As String, ByVal strBenefitCode As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.HasPropSpecialEndorsementOperationCompleted Is Nothing) Then
                Me.HasPropSpecialEndorsementOperationCompleted = AddressOf Me.OnHasPropSpecialEndorsementOperationCompleted
            End If
            Me.InvokeAsync("HasPropSpecialEndorsement", New Object() {strPlanCode, strTable1, strTable2, strCurr, strBenefitCode, strMessage}, Me.HasPropSpecialEndorsementOperationCompleted, userState)
        End Sub
        
        Private Sub OnHasPropSpecialEndorsementOperationCompleted(ByVal arg As Object)
            If (Not (Me.HasPropSpecialEndorsementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HasPropSpecialEndorsementCompleted(Me, New HasPropSpecialEndorsementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetOutstandingRptOrder", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOutstandingRptOrder(ByRef strRtnMsg As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetOutstandingRptOrder", New Object() {strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOutstandingRptOrderAsync(ByVal strRtnMsg As String)
            Me.GetOutstandingRptOrderAsync(strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOutstandingRptOrderAsync(ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetOutstandingRptOrderOperationCompleted Is Nothing) Then
                Me.GetOutstandingRptOrderOperationCompleted = AddressOf Me.OnGetOutstandingRptOrderOperationCompleted
            End If
            Me.InvokeAsync("GetOutstandingRptOrder", New Object() {strRtnMsg}, Me.GetOutstandingRptOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOutstandingRptOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOutstandingRptOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOutstandingRptOrderCompleted(Me, New GetOutstandingRptOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/SaveRptOrder", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveRptOrder(ByRef rstRptOrder As System.Data.DataSet, ByRef strRtnMsg As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveRptOrder", New Object() {rstRptOrder, strRtnMsg})
            rstRptOrder = CType(results(1),System.Data.DataSet)
            strRtnMsg = CType(results(2),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveRptOrderAsync(ByVal rstRptOrder As System.Data.DataSet, ByVal strRtnMsg As String)
            Me.SaveRptOrderAsync(rstRptOrder, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveRptOrderAsync(ByVal rstRptOrder As System.Data.DataSet, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.SaveRptOrderOperationCompleted Is Nothing) Then
                Me.SaveRptOrderOperationCompleted = AddressOf Me.OnSaveRptOrderOperationCompleted
            End If
            Me.InvokeAsync("SaveRptOrder", New Object() {rstRptOrder, strRtnMsg}, Me.SaveRptOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveRptOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveRptOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveRptOrderCompleted(Me, New SaveRptOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetReport", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReport(ByRef strMessage As String, ByRef dsReturn As System.Data.DataSet, ByVal strType As String, ByVal strCategory As String) As Boolean
            Dim results() As Object = Me.Invoke("GetReport", New Object() {strMessage, dsReturn, strType, strCategory})
            strMessage = CType(results(1),String)
            dsReturn = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReportAsync(ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal strType As String, ByVal strCategory As String)
            Me.GetReportAsync(strMessage, dsReturn, strType, strCategory, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReportAsync(ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal strType As String, ByVal strCategory As String, ByVal userState As Object)
            If (Me.GetReportOperationCompleted Is Nothing) Then
                Me.GetReportOperationCompleted = AddressOf Me.OnGetReportOperationCompleted
            End If
            Me.InvokeAsync("GetReport", New Object() {strMessage, dsReturn, strType, strCategory}, Me.GetReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReportCompleted(Me, New GetReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetDeclineCloseClaimAnalysis", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDeclineCloseClaimAnalysis(ByVal dtSettledDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetDeclineCloseClaimAnalysis", New Object() {dtSettledDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDeclineCloseClaimAnalysisAsync(ByVal dtSettledDate As Date, ByVal strRtnMsg As String)
            Me.GetDeclineCloseClaimAnalysisAsync(dtSettledDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDeclineCloseClaimAnalysisAsync(ByVal dtSettledDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetDeclineCloseClaimAnalysisOperationCompleted Is Nothing) Then
                Me.GetDeclineCloseClaimAnalysisOperationCompleted = AddressOf Me.OnGetDeclineCloseClaimAnalysisOperationCompleted
            End If
            Me.InvokeAsync("GetDeclineCloseClaimAnalysis", New Object() {dtSettledDate, strRtnMsg}, Me.GetDeclineCloseClaimAnalysisOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDeclineCloseClaimAnalysisOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDeclineCloseClaimAnalysisCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDeclineCloseClaimAnalysisCompleted(Me, New GetDeclineCloseClaimAnalysisCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetFinalClaimAnalysis", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFinalClaimAnalysis(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetFinalClaimAnalysis", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFinalClaimAnalysisAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.GetFinalClaimAnalysisAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFinalClaimAnalysisAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetFinalClaimAnalysisOperationCompleted Is Nothing) Then
                Me.GetFinalClaimAnalysisOperationCompleted = AddressOf Me.OnGetFinalClaimAnalysisOperationCompleted
            End If
            Me.InvokeAsync("GetFinalClaimAnalysis", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.GetFinalClaimAnalysisOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFinalClaimAnalysisOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFinalClaimAnalysisCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFinalClaimAnalysisCompleted(Me, New GetFinalClaimAnalysisCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetOnlineStatusReport", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOnlineStatusReport(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetOnlineStatusReport", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOnlineStatusReportAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.GetOnlineStatusReportAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOnlineStatusReportAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetOnlineStatusReportOperationCompleted Is Nothing) Then
                Me.GetOnlineStatusReportOperationCompleted = AddressOf Me.OnGetOnlineStatusReportOperationCompleted
            End If
            Me.InvokeAsync("GetOnlineStatusReport", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.GetOnlineStatusReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOnlineStatusReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOnlineStatusReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOnlineStatusReportCompleted(Me, New GetOnlineStatusReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetMarkInReport", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMarkInReport(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetMarkInReport", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMarkInReportAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.GetMarkInReportAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMarkInReportAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetMarkInReportOperationCompleted Is Nothing) Then
                Me.GetMarkInReportOperationCompleted = AddressOf Me.OnGetMarkInReportOperationCompleted
            End If
            Me.InvokeAsync("GetMarkInReport", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.GetMarkInReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMarkInReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMarkInReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMarkInReportCompleted(Me, New GetMarkInReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetDirectCreditTransactionControl", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDirectCreditTransactionControl(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetDirectCreditTransactionControl", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDirectCreditTransactionControlAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.GetDirectCreditTransactionControlAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDirectCreditTransactionControlAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetDirectCreditTransactionControlOperationCompleted Is Nothing) Then
                Me.GetDirectCreditTransactionControlOperationCompleted = AddressOf Me.OnGetDirectCreditTransactionControlOperationCompleted
            End If
            Me.InvokeAsync("GetDirectCreditTransactionControl", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.GetDirectCreditTransactionControlOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDirectCreditTransactionControlOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDirectCreditTransactionControlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDirectCreditTransactionControlCompleted(Me, New GetDirectCreditTransactionControlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetDirectCreditTransactionSuspiciousCase", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDirectCreditTransactionSuspiciousCase(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetDirectCreditTransactionSuspiciousCase", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDirectCreditTransactionSuspiciousCaseAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.GetDirectCreditTransactionSuspiciousCaseAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDirectCreditTransactionSuspiciousCaseAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetDirectCreditTransactionSuspiciousCaseOperationCompleted Is Nothing) Then
                Me.GetDirectCreditTransactionSuspiciousCaseOperationCompleted = AddressOf Me.OnGetDirectCreditTransactionSuspiciousCaseOperationCompleted
            End If
            Me.InvokeAsync("GetDirectCreditTransactionSuspiciousCase", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.GetDirectCreditTransactionSuspiciousCaseOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDirectCreditTransactionSuspiciousCaseOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDirectCreditTransactionSuspiciousCaseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDirectCreditTransactionSuspiciousCaseCompleted(Me, New GetDirectCreditTransactionSuspiciousCaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetReverseDirectPaymentSettlement", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReverseDirectPaymentSettlement(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetReverseDirectPaymentSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReverseDirectPaymentSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.GetReverseDirectPaymentSettlementAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReverseDirectPaymentSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetReverseDirectPaymentSettlementOperationCompleted Is Nothing) Then
                Me.GetReverseDirectPaymentSettlementOperationCompleted = AddressOf Me.OnGetReverseDirectPaymentSettlementOperationCompleted
            End If
            Me.InvokeAsync("GetReverseDirectPaymentSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.GetReverseDirectPaymentSettlementOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReverseDirectPaymentSettlementOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReverseDirectPaymentSettlementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReverseDirectPaymentSettlementCompleted(Me, New GetReverseDirectPaymentSettlementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetManualChequeSettlement", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetManualChequeSettlement(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetManualChequeSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetManualChequeSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.GetManualChequeSettlementAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetManualChequeSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetManualChequeSettlementOperationCompleted Is Nothing) Then
                Me.GetManualChequeSettlementOperationCompleted = AddressOf Me.OnGetManualChequeSettlementOperationCompleted
            End If
            Me.InvokeAsync("GetManualChequeSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.GetManualChequeSettlementOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetManualChequeSettlementOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetManualChequeSettlementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetManualChequeSettlementCompleted(Me, New GetManualChequeSettlementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetEServiceSettlement", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEServiceSettlement(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetEServiceSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEServiceSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.GetEServiceSettlementAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEServiceSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetEServiceSettlementOperationCompleted Is Nothing) Then
                Me.GetEServiceSettlementOperationCompleted = AddressOf Me.OnGetEServiceSettlementOperationCompleted
            End If
            Me.InvokeAsync("GetEServiceSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.GetEServiceSettlementOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEServiceSettlementOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEServiceSettlementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEServiceSettlementCompleted(Me, New GetEServiceSettlementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetReverseManualChequeSettlement", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReverseManualChequeSettlement(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByRef strRtnMsg As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetReverseManualChequeSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg})
            strRtnMsg = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReverseManualChequeSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String)
            Me.GetReverseManualChequeSettlementAsync(dtStartDate, dtEndDate, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReverseManualChequeSettlementAsync(ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetReverseManualChequeSettlementOperationCompleted Is Nothing) Then
                Me.GetReverseManualChequeSettlementOperationCompleted = AddressOf Me.OnGetReverseManualChequeSettlementOperationCompleted
            End If
            Me.InvokeAsync("GetReverseManualChequeSettlement", New Object() {dtStartDate, dtEndDate, strRtnMsg}, Me.GetReverseManualChequeSettlementOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReverseManualChequeSettlementOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReverseManualChequeSettlementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReverseManualChequeSettlementCompleted(Me, New GetReverseManualChequeSettlementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetImpairmentCode", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetImpairmentCode(ByVal strImpairmentCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetImpairmentCode", New Object() {strImpairmentCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetImpairmentCodeAsync(ByVal strImpairmentCode As String)
            Me.GetImpairmentCodeAsync(strImpairmentCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetImpairmentCodeAsync(ByVal strImpairmentCode As String, ByVal userState As Object)
            If (Me.GetImpairmentCodeOperationCompleted Is Nothing) Then
                Me.GetImpairmentCodeOperationCompleted = AddressOf Me.OnGetImpairmentCodeOperationCompleted
            End If
            Me.InvokeAsync("GetImpairmentCode", New Object() {strImpairmentCode}, Me.GetImpairmentCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetImpairmentCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetImpairmentCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetImpairmentCodeCompleted(Me, New GetImpairmentCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetChequeRemark", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetChequeRemark() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetChequeRemark", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetChequeRemarkAsync()
            Me.GetChequeRemarkAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetChequeRemarkAsync(ByVal userState As Object)
            If (Me.GetChequeRemarkOperationCompleted Is Nothing) Then
                Me.GetChequeRemarkOperationCompleted = AddressOf Me.OnGetChequeRemarkOperationCompleted
            End If
            Me.InvokeAsync("GetChequeRemark", New Object(-1) {}, Me.GetChequeRemarkOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetChequeRemarkOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetChequeRemarkCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetChequeRemarkCompleted(Me, New GetChequeRemarkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetAmountLimit", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAmountLimit(ByRef strMessage As String, ByVal strUser As String, ByVal strLimitCode As String, ByVal strType As String, ByVal strCurr As String, ByVal lngDay As Long, ByVal lngTrxAmt As Long, ByVal strAllOpt As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAmountLimit", New Object() {strMessage, strUser, strLimitCode, strType, strCurr, lngDay, lngTrxAmt, strAllOpt})
            strMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAmountLimitAsync(ByVal strMessage As String, ByVal strUser As String, ByVal strLimitCode As String, ByVal strType As String, ByVal strCurr As String, ByVal lngDay As Long, ByVal lngTrxAmt As Long, ByVal strAllOpt As String)
            Me.GetAmountLimitAsync(strMessage, strUser, strLimitCode, strType, strCurr, lngDay, lngTrxAmt, strAllOpt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAmountLimitAsync(ByVal strMessage As String, ByVal strUser As String, ByVal strLimitCode As String, ByVal strType As String, ByVal strCurr As String, ByVal lngDay As Long, ByVal lngTrxAmt As Long, ByVal strAllOpt As String, ByVal userState As Object)
            If (Me.GetAmountLimitOperationCompleted Is Nothing) Then
                Me.GetAmountLimitOperationCompleted = AddressOf Me.OnGetAmountLimitOperationCompleted
            End If
            Me.InvokeAsync("GetAmountLimit", New Object() {strMessage, strUser, strLimitCode, strType, strCurr, lngDay, lngTrxAmt, strAllOpt}, Me.GetAmountLimitOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAmountLimitOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAmountLimitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAmountLimitCompleted(Me, New GetAmountLimitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/DelAmountLimit", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DelAmountLimit(ByRef strMessage As String, ByVal strUser As String, ByVal strLimitCode As String, ByVal lngLimitID As Long) As Boolean
            Dim results() As Object = Me.Invoke("DelAmountLimit", New Object() {strMessage, strUser, strLimitCode, lngLimitID})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DelAmountLimitAsync(ByVal strMessage As String, ByVal strUser As String, ByVal strLimitCode As String, ByVal lngLimitID As Long)
            Me.DelAmountLimitAsync(strMessage, strUser, strLimitCode, lngLimitID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DelAmountLimitAsync(ByVal strMessage As String, ByVal strUser As String, ByVal strLimitCode As String, ByVal lngLimitID As Long, ByVal userState As Object)
            If (Me.DelAmountLimitOperationCompleted Is Nothing) Then
                Me.DelAmountLimitOperationCompleted = AddressOf Me.OnDelAmountLimitOperationCompleted
            End If
            Me.InvokeAsync("DelAmountLimit", New Object() {strMessage, strUser, strLimitCode, lngLimitID}, Me.DelAmountLimitOperationCompleted, userState)
        End Sub
        
        Private Sub OnDelAmountLimitOperationCompleted(ByVal arg As Object)
            If (Not (Me.DelAmountLimitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DelAmountLimitCompleted(Me, New DelAmountLimitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetUserAmountLimit", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserAmountLimit(ByRef strMessage As String, ByVal strRequestID As String, ByVal strFuncID As String, ByVal strLimitCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetUserAmountLimit", New Object() {strMessage, strRequestID, strFuncID, strLimitCode})
            strMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserAmountLimitAsync(ByVal strMessage As String, ByVal strRequestID As String, ByVal strFuncID As String, ByVal strLimitCode As String)
            Me.GetUserAmountLimitAsync(strMessage, strRequestID, strFuncID, strLimitCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserAmountLimitAsync(ByVal strMessage As String, ByVal strRequestID As String, ByVal strFuncID As String, ByVal strLimitCode As String, ByVal userState As Object)
            If (Me.GetUserAmountLimitOperationCompleted Is Nothing) Then
                Me.GetUserAmountLimitOperationCompleted = AddressOf Me.OnGetUserAmountLimitOperationCompleted
            End If
            Me.InvokeAsync("GetUserAmountLimit", New Object() {strMessage, strRequestID, strFuncID, strLimitCode}, Me.GetUserAmountLimitOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserAmountLimitOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserAmountLimitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserAmountLimitCompleted(Me, New GetUserAmountLimitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/DelUserAmountLimit", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DelUserAmountLimit(ByVal strMessage As String, ByVal strUser As String, ByVal strRequestID As String, ByVal strFunctId As String) As Boolean
            Dim results() As Object = Me.Invoke("DelUserAmountLimit", New Object() {strMessage, strUser, strRequestID, strFunctId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DelUserAmountLimitAsync(ByVal strMessage As String, ByVal strUser As String, ByVal strRequestID As String, ByVal strFunctId As String)
            Me.DelUserAmountLimitAsync(strMessage, strUser, strRequestID, strFunctId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DelUserAmountLimitAsync(ByVal strMessage As String, ByVal strUser As String, ByVal strRequestID As String, ByVal strFunctId As String, ByVal userState As Object)
            If (Me.DelUserAmountLimitOperationCompleted Is Nothing) Then
                Me.DelUserAmountLimitOperationCompleted = AddressOf Me.OnDelUserAmountLimitOperationCompleted
            End If
            Me.InvokeAsync("DelUserAmountLimit", New Object() {strMessage, strUser, strRequestID, strFunctId}, Me.DelUserAmountLimitOperationCompleted, userState)
        End Sub
        
        Private Sub OnDelUserAmountLimitOperationCompleted(ByVal arg As Object)
            If (Not (Me.DelUserAmountLimitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DelUserAmountLimitCompleted(Me, New DelUserAmountLimitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/SetEnv", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetEnv() As Boolean
            Dim results() As Object = Me.Invoke("SetEnv", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetEnvAsync()
            Me.SetEnvAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetEnvAsync(ByVal userState As Object)
            If (Me.SetEnvOperationCompleted Is Nothing) Then
                Me.SetEnvOperationCompleted = AddressOf Me.OnSetEnvOperationCompleted
            End If
            Me.InvokeAsync("SetEnv", New Object(-1) {}, Me.SetEnvOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetEnvOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetEnvCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetEnvCompleted(Me, New SetEnvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaims", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaims(ByRef strMessage As String, ByRef dsReturn As System.Data.DataSet, ByRef lngClaimNo As Long, ByRef intOccurNo As Short, ByRef lngInsuredId As Long) As Boolean
            Dim results() As Object = Me.Invoke("GetClaims", New Object() {strMessage, dsReturn, lngClaimNo, intOccurNo, lngInsuredId})
            strMessage = CType(results(1),String)
            dsReturn = CType(results(2),System.Data.DataSet)
            lngClaimNo = CType(results(3),Long)
            intOccurNo = CType(results(4),Short)
            lngInsuredId = CType(results(5),Long)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimsAsync(ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal intOccurNo As Short, ByVal lngInsuredId As Long)
            Me.GetClaimsAsync(strMessage, dsReturn, lngClaimNo, intOccurNo, lngInsuredId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimsAsync(ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal intOccurNo As Short, ByVal lngInsuredId As Long, ByVal userState As Object)
            If (Me.GetClaimsOperationCompleted Is Nothing) Then
                Me.GetClaimsOperationCompleted = AddressOf Me.OnGetClaimsOperationCompleted
            End If
            Me.InvokeAsync("GetClaims", New Object() {strMessage, dsReturn, lngClaimNo, intOccurNo, lngInsuredId}, Me.GetClaimsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimsCompleted(Me, New GetClaimsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetOutstandingClaim", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOutstandingClaim(ByRef strMessage As String, ByRef dsReturn As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal intOccurNo As Integer, ByVal lngInsuredNo As Long, ByVal strType As String, ByVal dDate As Date) As Boolean
            Dim results() As Object = Me.Invoke("GetOutstandingClaim", New Object() {strMessage, dsReturn, lngClaimNo, intOccurNo, lngInsuredNo, strType, dDate})
            strMessage = CType(results(1),String)
            dsReturn = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOutstandingClaimAsync(ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal intOccurNo As Integer, ByVal lngInsuredNo As Long, ByVal strType As String, ByVal dDate As Date)
            Me.GetOutstandingClaimAsync(strMessage, dsReturn, lngClaimNo, intOccurNo, lngInsuredNo, strType, dDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOutstandingClaimAsync(ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal intOccurNo As Integer, ByVal lngInsuredNo As Long, ByVal strType As String, ByVal dDate As Date, ByVal userState As Object)
            If (Me.GetOutstandingClaimOperationCompleted Is Nothing) Then
                Me.GetOutstandingClaimOperationCompleted = AddressOf Me.OnGetOutstandingClaimOperationCompleted
            End If
            Me.InvokeAsync("GetOutstandingClaim", New Object() {strMessage, dsReturn, lngClaimNo, intOccurNo, lngInsuredNo, strType, dDate}, Me.GetOutstandingClaimOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOutstandingClaimOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOutstandingClaimCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOutstandingClaimCompleted(Me, New GetOutstandingClaimCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetSettledClaim", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSettledClaim(ByRef strMessage As String, ByRef dsReturn As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal intOccurNo As Short, ByVal lngInsuredNo As Integer, ByVal strType As String, ByVal dDate As Date) As Boolean
            Dim results() As Object = Me.Invoke("GetSettledClaim", New Object() {strMessage, dsReturn, lngClaimNo, intOccurNo, lngInsuredNo, strType, dDate})
            strMessage = CType(results(1),String)
            dsReturn = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSettledClaimAsync(ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal intOccurNo As Short, ByVal lngInsuredNo As Integer, ByVal strType As String, ByVal dDate As Date)
            Me.GetSettledClaimAsync(strMessage, dsReturn, lngClaimNo, intOccurNo, lngInsuredNo, strType, dDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSettledClaimAsync(ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal intOccurNo As Short, ByVal lngInsuredNo As Integer, ByVal strType As String, ByVal dDate As Date, ByVal userState As Object)
            If (Me.GetSettledClaimOperationCompleted Is Nothing) Then
                Me.GetSettledClaimOperationCompleted = AddressOf Me.OnGetSettledClaimOperationCompleted
            End If
            Me.InvokeAsync("GetSettledClaim", New Object() {strMessage, dsReturn, lngClaimNo, intOccurNo, lngInsuredNo, strType, dDate}, Me.GetSettledClaimOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSettledClaimOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSettledClaimCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSettledClaimCompleted(Me, New GetSettledClaimCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetMastiDate", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMastiDate(ByVal datCalenderDate As Date) As String
            Dim results() As Object = Me.Invoke("GetMastiDate", New Object() {datCalenderDate})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMastiDateAsync(ByVal datCalenderDate As Date)
            Me.GetMastiDateAsync(datCalenderDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMastiDateAsync(ByVal datCalenderDate As Date, ByVal userState As Object)
            If (Me.GetMastiDateOperationCompleted Is Nothing) Then
                Me.GetMastiDateOperationCompleted = AddressOf Me.OnGetMastiDateOperationCompleted
            End If
            Me.InvokeAsync("GetMastiDate", New Object() {datCalenderDate}, Me.GetMastiDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMastiDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMastiDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMastiDateCompleted(Me, New GetMastiDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/LockClaim", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LockClaim(ByVal strSysName As String, ByRef strMessage As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strAction As String) As Boolean
            Dim results() As Object = Me.Invoke("LockClaim", New Object() {strSysName, strMessage, strUser, lngClaimNo, lngOccurNo, strAction})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LockClaimAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strAction As String)
            Me.LockClaimAsync(strSysName, strMessage, strUser, lngClaimNo, lngOccurNo, strAction, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LockClaimAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strAction As String, ByVal userState As Object)
            If (Me.LockClaimOperationCompleted Is Nothing) Then
                Me.LockClaimOperationCompleted = AddressOf Me.OnLockClaimOperationCompleted
            End If
            Me.InvokeAsync("LockClaim", New Object() {strSysName, strMessage, strUser, lngClaimNo, lngOccurNo, strAction}, Me.LockClaimOperationCompleted, userState)
        End Sub
        
        Private Sub OnLockClaimOperationCompleted(ByVal arg As Object)
            If (Not (Me.LockClaimCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LockClaimCompleted(Me, New LockClaimCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetCustomerById", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerById(ByVal lngCustomerId As Long) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCustomerById", New Object() {lngCustomerId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerByIdAsync(ByVal lngCustomerId As Long)
            Me.GetCustomerByIdAsync(lngCustomerId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerByIdAsync(ByVal lngCustomerId As Long, ByVal userState As Object)
            If (Me.GetCustomerByIdOperationCompleted Is Nothing) Then
                Me.GetCustomerByIdOperationCompleted = AddressOf Me.OnGetCustomerByIdOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerById", New Object() {lngCustomerId}, Me.GetCustomerByIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerByIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerByIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerByIdCompleted(Me, New GetCustomerByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetCurrentDDAByPolicyId", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCurrentDDAByPolicyId(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicy As String, ByVal strRtnMsg As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCurrentDDAByPolicyId", New Object() {strSysName, strUser, strPolicy, strRtnMsg})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCurrentDDAByPolicyIdAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicy As String, ByVal strRtnMsg As String)
            Me.GetCurrentDDAByPolicyIdAsync(strSysName, strUser, strPolicy, strRtnMsg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCurrentDDAByPolicyIdAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicy As String, ByVal strRtnMsg As String, ByVal userState As Object)
            If (Me.GetCurrentDDAByPolicyIdOperationCompleted Is Nothing) Then
                Me.GetCurrentDDAByPolicyIdOperationCompleted = AddressOf Me.OnGetCurrentDDAByPolicyIdOperationCompleted
            End If
            Me.InvokeAsync("GetCurrentDDAByPolicyId", New Object() {strSysName, strUser, strPolicy, strRtnMsg}, Me.GetCurrentDDAByPolicyIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCurrentDDAByPolicyIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCurrentDDAByPolicyIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCurrentDDAByPolicyIdCompleted(Me, New GetCurrentDDAByPolicyIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetMCSChannelContact", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMCSChannelContact(ByVal strChannel As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetMCSChannelContact", New Object() {strChannel})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMCSChannelContactAsync(ByVal strChannel As String)
            Me.GetMCSChannelContactAsync(strChannel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMCSChannelContactAsync(ByVal strChannel As String, ByVal userState As Object)
            If (Me.GetMCSChannelContactOperationCompleted Is Nothing) Then
                Me.GetMCSChannelContactOperationCompleted = AddressOf Me.OnGetMCSChannelContactOperationCompleted
            End If
            Me.InvokeAsync("GetMCSChannelContact", New Object() {strChannel}, Me.GetMCSChannelContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMCSChannelContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMCSChannelContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMCSChannelContactCompleted(Me, New GetMCSChannelContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetCodeValue", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCodeValue(ByVal strCode As String, ByVal blnLockFailure As Boolean, ByVal strLock As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCodeValue", New Object() {strCode, blnLockFailure, strLock})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCodeValueAsync(ByVal strCode As String, ByVal blnLockFailure As Boolean, ByVal strLock As String)
            Me.GetCodeValueAsync(strCode, blnLockFailure, strLock, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCodeValueAsync(ByVal strCode As String, ByVal blnLockFailure As Boolean, ByVal strLock As String, ByVal userState As Object)
            If (Me.GetCodeValueOperationCompleted Is Nothing) Then
                Me.GetCodeValueOperationCompleted = AddressOf Me.OnGetCodeValueOperationCompleted
            End If
            Me.InvokeAsync("GetCodeValue", New Object() {strCode, blnLockFailure, strLock}, Me.GetCodeValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCodeValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCodeValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCodeValueCompleted(Me, New GetCodeValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetExchangeRate", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetExchangeRate(ByVal strUser As String, ByVal strFromCurr As String, ByVal strToCurr As String, ByRef dsRate As System.Data.DataSet, ByRef dteEffectiveDate As Date, ByVal strRateType As String, ByVal strFixedFunc As String) As Boolean
            Dim results() As Object = Me.Invoke("GetExchangeRate", New Object() {strUser, strFromCurr, strToCurr, dsRate, dteEffectiveDate, strRateType, strFixedFunc})
            dsRate = CType(results(1),System.Data.DataSet)
            dteEffectiveDate = CType(results(2),Date)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetExchangeRateAsync(ByVal strUser As String, ByVal strFromCurr As String, ByVal strToCurr As String, ByVal dsRate As System.Data.DataSet, ByVal dteEffectiveDate As Date, ByVal strRateType As String, ByVal strFixedFunc As String)
            Me.GetExchangeRateAsync(strUser, strFromCurr, strToCurr, dsRate, dteEffectiveDate, strRateType, strFixedFunc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetExchangeRateAsync(ByVal strUser As String, ByVal strFromCurr As String, ByVal strToCurr As String, ByVal dsRate As System.Data.DataSet, ByVal dteEffectiveDate As Date, ByVal strRateType As String, ByVal strFixedFunc As String, ByVal userState As Object)
            If (Me.GetExchangeRateOperationCompleted Is Nothing) Then
                Me.GetExchangeRateOperationCompleted = AddressOf Me.OnGetExchangeRateOperationCompleted
            End If
            Me.InvokeAsync("GetExchangeRate", New Object() {strUser, strFromCurr, strToCurr, dsRate, dteEffectiveDate, strRateType, strFixedFunc}, Me.GetExchangeRateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetExchangeRateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetExchangeRateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetExchangeRateCompleted(Me, New GetExchangeRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimByClaimNo", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimByClaimNo(ByRef strMessage As String, ByRef dsClaim As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strType As String, ByVal arrStatus As Object, ByVal blnSettleToday As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("GetClaimByClaimNo", New Object() {strMessage, dsClaim, lngClaimNo, lngOccurNo, strType, arrStatus, blnSettleToday})
            strMessage = CType(results(1),String)
            dsClaim = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimByClaimNoAsync(ByVal strMessage As String, ByVal dsClaim As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strType As String, ByVal arrStatus As Object, ByVal blnSettleToday As Boolean)
            Me.GetClaimByClaimNoAsync(strMessage, dsClaim, lngClaimNo, lngOccurNo, strType, arrStatus, blnSettleToday, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimByClaimNoAsync(ByVal strMessage As String, ByVal dsClaim As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strType As String, ByVal arrStatus As Object, ByVal blnSettleToday As Boolean, ByVal userState As Object)
            If (Me.GetClaimByClaimNoOperationCompleted Is Nothing) Then
                Me.GetClaimByClaimNoOperationCompleted = AddressOf Me.OnGetClaimByClaimNoOperationCompleted
            End If
            Me.InvokeAsync("GetClaimByClaimNo", New Object() {strMessage, dsClaim, lngClaimNo, lngOccurNo, strType, arrStatus, blnSettleToday}, Me.GetClaimByClaimNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimByClaimNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimByClaimNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimByClaimNoCompleted(Me, New GetClaimByClaimNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/HasMjcCrisisClaim", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HasMjcCrisisClaim(ByVal lngClaimNo As Long, ByVal lngOccurNo As Long) As Boolean
            Dim results() As Object = Me.Invoke("HasMjcCrisisClaim", New Object() {lngClaimNo, lngOccurNo})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HasMjcCrisisClaimAsync(ByVal lngClaimNo As Long, ByVal lngOccurNo As Long)
            Me.HasMjcCrisisClaimAsync(lngClaimNo, lngOccurNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HasMjcCrisisClaimAsync(ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal userState As Object)
            If (Me.HasMjcCrisisClaimOperationCompleted Is Nothing) Then
                Me.HasMjcCrisisClaimOperationCompleted = AddressOf Me.OnHasMjcCrisisClaimOperationCompleted
            End If
            Me.InvokeAsync("HasMjcCrisisClaim", New Object() {lngClaimNo, lngOccurNo}, Me.HasMjcCrisisClaimOperationCompleted, userState)
        End Sub
        
        Private Sub OnHasMjcCrisisClaimOperationCompleted(ByVal arg As Object)
            If (Not (Me.HasMjcCrisisClaimCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HasMjcCrisisClaimCompleted(Me, New HasMjcCrisisClaimCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/HasLifeStyleInd", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HasLifeStyleInd(ByVal lngClaimNo As Long, ByVal lngOccurNo As Long) As Boolean
            Dim results() As Object = Me.Invoke("HasLifeStyleInd", New Object() {lngClaimNo, lngOccurNo})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HasLifeStyleIndAsync(ByVal lngClaimNo As Long, ByVal lngOccurNo As Long)
            Me.HasLifeStyleIndAsync(lngClaimNo, lngOccurNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HasLifeStyleIndAsync(ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal userState As Object)
            If (Me.HasLifeStyleIndOperationCompleted Is Nothing) Then
                Me.HasLifeStyleIndOperationCompleted = AddressOf Me.OnHasLifeStyleIndOperationCompleted
            End If
            Me.InvokeAsync("HasLifeStyleInd", New Object() {lngClaimNo, lngOccurNo}, Me.HasLifeStyleIndOperationCompleted, userState)
        End Sub
        
        Private Sub OnHasLifeStyleIndOperationCompleted(ByVal arg As Object)
            If (Not (Me.HasLifeStyleIndCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HasLifeStyleIndCompleted(Me, New HasLifeStyleIndCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/HasLifeEnrichmentInd", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HasLifeEnrichmentInd(ByVal lngClaimNo As Long, ByVal lngOccurNo As Long) As Boolean
            Dim results() As Object = Me.Invoke("HasLifeEnrichmentInd", New Object() {lngClaimNo, lngOccurNo})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HasLifeEnrichmentIndAsync(ByVal lngClaimNo As Long, ByVal lngOccurNo As Long)
            Me.HasLifeEnrichmentIndAsync(lngClaimNo, lngOccurNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HasLifeEnrichmentIndAsync(ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal userState As Object)
            If (Me.HasLifeEnrichmentIndOperationCompleted Is Nothing) Then
                Me.HasLifeEnrichmentIndOperationCompleted = AddressOf Me.OnHasLifeEnrichmentIndOperationCompleted
            End If
            Me.InvokeAsync("HasLifeEnrichmentInd", New Object() {lngClaimNo, lngOccurNo}, Me.HasLifeEnrichmentIndOperationCompleted, userState)
        End Sub
        
        Private Sub OnHasLifeEnrichmentIndOperationCompleted(ByVal arg As Object)
            If (Not (Me.HasLifeEnrichmentIndCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HasLifeEnrichmentIndCompleted(Me, New HasLifeEnrichmentIndCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/HasHealthScreenPaymentHistory", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HasHealthScreenPaymentHistory(ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByRef datLastAccidentDate As Date) As Boolean
            Dim results() As Object = Me.Invoke("HasHealthScreenPaymentHistory", New Object() {lngClaimNo, lngOccurNo, datLastAccidentDate})
            datLastAccidentDate = CType(results(1),Date)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HasHealthScreenPaymentHistoryAsync(ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal datLastAccidentDate As Date)
            Me.HasHealthScreenPaymentHistoryAsync(lngClaimNo, lngOccurNo, datLastAccidentDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HasHealthScreenPaymentHistoryAsync(ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal datLastAccidentDate As Date, ByVal userState As Object)
            If (Me.HasHealthScreenPaymentHistoryOperationCompleted Is Nothing) Then
                Me.HasHealthScreenPaymentHistoryOperationCompleted = AddressOf Me.OnHasHealthScreenPaymentHistoryOperationCompleted
            End If
            Me.InvokeAsync("HasHealthScreenPaymentHistory", New Object() {lngClaimNo, lngOccurNo, datLastAccidentDate}, Me.HasHealthScreenPaymentHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnHasHealthScreenPaymentHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.HasHealthScreenPaymentHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HasHealthScreenPaymentHistoryCompleted(Me, New HasHealthScreenPaymentHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/SaveCalLog", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SaveCalLog(ByRef strMsg As String, ByVal lngClaimNo As Long, ByVal lngClaimOccur As Long, ByVal strProcessType As String, ByVal blnCalculateLog As Boolean, ByVal blnHeaderDetails As Boolean, ByVal blnClaimPresentation As Boolean, ByVal blnPolicyCoverage As Boolean)
            Dim results() As Object = Me.Invoke("SaveCalLog", New Object() {strMsg, lngClaimNo, lngClaimOccur, strProcessType, blnCalculateLog, blnHeaderDetails, blnClaimPresentation, blnPolicyCoverage})
            strMsg = CType(results(0),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveCalLogAsync(ByVal strMsg As String, ByVal lngClaimNo As Long, ByVal lngClaimOccur As Long, ByVal strProcessType As String, ByVal blnCalculateLog As Boolean, ByVal blnHeaderDetails As Boolean, ByVal blnClaimPresentation As Boolean, ByVal blnPolicyCoverage As Boolean)
            Me.SaveCalLogAsync(strMsg, lngClaimNo, lngClaimOccur, strProcessType, blnCalculateLog, blnHeaderDetails, blnClaimPresentation, blnPolicyCoverage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveCalLogAsync(ByVal strMsg As String, ByVal lngClaimNo As Long, ByVal lngClaimOccur As Long, ByVal strProcessType As String, ByVal blnCalculateLog As Boolean, ByVal blnHeaderDetails As Boolean, ByVal blnClaimPresentation As Boolean, ByVal blnPolicyCoverage As Boolean, ByVal userState As Object)
            If (Me.SaveCalLogOperationCompleted Is Nothing) Then
                Me.SaveCalLogOperationCompleted = AddressOf Me.OnSaveCalLogOperationCompleted
            End If
            Me.InvokeAsync("SaveCalLog", New Object() {strMsg, lngClaimNo, lngClaimOccur, strProcessType, blnCalculateLog, blnHeaderDetails, blnClaimPresentation, blnPolicyCoverage}, Me.SaveCalLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveCalLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveCalLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveCalLogCompleted(Me, New SaveCalLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/CalculateClaimPayment", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CalculateClaimPayment(ByVal strBaseCurr As String, ByVal strSysName As String, ByVal strUser As String, ByRef strMessage As String, ByVal lngClaim As Long, ByVal lngClaimOccur As Long, ByVal datInDate As Date, ByVal datAccDate As Date, ByVal lngExchgRate As Double, ByVal strInsuredID As String, ByRef dsLock As System.Data.DataSet, ByVal blnResetCal As Boolean, ByVal blnRollBack As Boolean) As Integer
            Dim results() As Object = Me.Invoke("CalculateClaimPayment", New Object() {strBaseCurr, strSysName, strUser, strMessage, lngClaim, lngClaimOccur, datInDate, datAccDate, lngExchgRate, strInsuredID, dsLock, blnResetCal, blnRollBack})
            strMessage = CType(results(1),String)
            dsLock = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CalculateClaimPaymentAsync(ByVal strBaseCurr As String, ByVal strSysName As String, ByVal strUser As String, ByVal strMessage As String, ByVal lngClaim As Long, ByVal lngClaimOccur As Long, ByVal datInDate As Date, ByVal datAccDate As Date, ByVal lngExchgRate As Double, ByVal strInsuredID As String, ByVal dsLock As System.Data.DataSet, ByVal blnResetCal As Boolean, ByVal blnRollBack As Boolean)
            Me.CalculateClaimPaymentAsync(strBaseCurr, strSysName, strUser, strMessage, lngClaim, lngClaimOccur, datInDate, datAccDate, lngExchgRate, strInsuredID, dsLock, blnResetCal, blnRollBack, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CalculateClaimPaymentAsync(ByVal strBaseCurr As String, ByVal strSysName As String, ByVal strUser As String, ByVal strMessage As String, ByVal lngClaim As Long, ByVal lngClaimOccur As Long, ByVal datInDate As Date, ByVal datAccDate As Date, ByVal lngExchgRate As Double, ByVal strInsuredID As String, ByVal dsLock As System.Data.DataSet, ByVal blnResetCal As Boolean, ByVal blnRollBack As Boolean, ByVal userState As Object)
            If (Me.CalculateClaimPaymentOperationCompleted Is Nothing) Then
                Me.CalculateClaimPaymentOperationCompleted = AddressOf Me.OnCalculateClaimPaymentOperationCompleted
            End If
            Me.InvokeAsync("CalculateClaimPayment", New Object() {strBaseCurr, strSysName, strUser, strMessage, lngClaim, lngClaimOccur, datInDate, datAccDate, lngExchgRate, strInsuredID, dsLock, blnResetCal, blnRollBack}, Me.CalculateClaimPaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnCalculateClaimPaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.CalculateClaimPaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CalculateClaimPaymentCompleted(Me, New CalculateClaimPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/AppendComment", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AppendComment(ByVal strSysName As String, ByRef strMessage As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strComment As String) As Boolean
            Dim results() As Object = Me.Invoke("AppendComment", New Object() {strSysName, strMessage, strUser, lngClaimNo, lngOccurNo, strComment})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AppendCommentAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strComment As String)
            Me.AppendCommentAsync(strSysName, strMessage, strUser, lngClaimNo, lngOccurNo, strComment, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AppendCommentAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strComment As String, ByVal userState As Object)
            If (Me.AppendCommentOperationCompleted Is Nothing) Then
                Me.AppendCommentOperationCompleted = AddressOf Me.OnAppendCommentOperationCompleted
            End If
            Me.InvokeAsync("AppendComment", New Object() {strSysName, strMessage, strUser, lngClaimNo, lngOccurNo, strComment}, Me.AppendCommentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAppendCommentOperationCompleted(ByVal arg As Object)
            If (Not (Me.AppendCommentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AppendCommentCompleted(Me, New AppendCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UnLockClaim", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UnLockClaim(ByVal strSysName As String, ByRef strMessage As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strAction As String) As Boolean
            Dim results() As Object = Me.Invoke("UnLockClaim", New Object() {strSysName, strMessage, strUser, lngClaimNo, lngOccurNo, strAction})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UnLockClaimAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strAction As String)
            Me.UnLockClaimAsync(strSysName, strMessage, strUser, lngClaimNo, lngOccurNo, strAction, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UnLockClaimAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strAction As String, ByVal userState As Object)
            If (Me.UnLockClaimOperationCompleted Is Nothing) Then
                Me.UnLockClaimOperationCompleted = AddressOf Me.OnUnLockClaimOperationCompleted
            End If
            Me.InvokeAsync("UnLockClaim", New Object() {strSysName, strMessage, strUser, lngClaimNo, lngOccurNo, strAction}, Me.UnLockClaimOperationCompleted, userState)
        End Sub
        
        Private Sub OnUnLockClaimOperationCompleted(ByVal arg As Object)
            If (Not (Me.UnLockClaimCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UnLockClaimCompleted(Me, New UnLockClaimCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetAgentByAgentId", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAgentByAgentId(ByVal strSysName As String, ByRef strUser As String, ByVal strAgentId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAgentByAgentId", New Object() {strSysName, strUser, strAgentId})
            strUser = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAgentByAgentIdAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strAgentId As String)
            Me.GetAgentByAgentIdAsync(strSysName, strUser, strAgentId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAgentByAgentIdAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strAgentId As String, ByVal userState As Object)
            If (Me.GetAgentByAgentIdOperationCompleted Is Nothing) Then
                Me.GetAgentByAgentIdOperationCompleted = AddressOf Me.OnGetAgentByAgentIdOperationCompleted
            End If
            Me.InvokeAsync("GetAgentByAgentId", New Object() {strSysName, strUser, strAgentId}, Me.GetAgentByAgentIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAgentByAgentIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAgentByAgentIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAgentByAgentIdCompleted(Me, New GetAgentByAgentIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetEmptyClaimHeader", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEmptyClaimHeader(ByRef strMessage As String, ByRef dsHeader As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("GetEmptyClaimHeader", New Object() {strMessage, dsHeader})
            strMessage = CType(results(1),String)
            dsHeader = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEmptyClaimHeaderAsync(ByVal strMessage As String, ByVal dsHeader As System.Data.DataSet)
            Me.GetEmptyClaimHeaderAsync(strMessage, dsHeader, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEmptyClaimHeaderAsync(ByVal strMessage As String, ByVal dsHeader As System.Data.DataSet, ByVal userState As Object)
            If (Me.GetEmptyClaimHeaderOperationCompleted Is Nothing) Then
                Me.GetEmptyClaimHeaderOperationCompleted = AddressOf Me.OnGetEmptyClaimHeaderOperationCompleted
            End If
            Me.InvokeAsync("GetEmptyClaimHeader", New Object() {strMessage, dsHeader}, Me.GetEmptyClaimHeaderOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEmptyClaimHeaderOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEmptyClaimHeaderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEmptyClaimHeaderCompleted(Me, New GetEmptyClaimHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetInsuredByPolicyCoverage", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInsuredByPolicyCoverage(ByVal strSysName As String, ByVal strMsg As String, ByVal strUser As String, ByVal strPolicyNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetInsuredByPolicyCoverage", New Object() {strSysName, strMsg, strUser, strPolicyNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInsuredByPolicyCoverageAsync(ByVal strSysName As String, ByVal strMsg As String, ByVal strUser As String, ByVal strPolicyNo As String)
            Me.GetInsuredByPolicyCoverageAsync(strSysName, strMsg, strUser, strPolicyNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInsuredByPolicyCoverageAsync(ByVal strSysName As String, ByVal strMsg As String, ByVal strUser As String, ByVal strPolicyNo As String, ByVal userState As Object)
            If (Me.GetInsuredByPolicyCoverageOperationCompleted Is Nothing) Then
                Me.GetInsuredByPolicyCoverageOperationCompleted = AddressOf Me.OnGetInsuredByPolicyCoverageOperationCompleted
            End If
            Me.InvokeAsync("GetInsuredByPolicyCoverage", New Object() {strSysName, strMsg, strUser, strPolicyNo}, Me.GetInsuredByPolicyCoverageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInsuredByPolicyCoverageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInsuredByPolicyCoverageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInsuredByPolicyCoverageCompleted(Me, New GetInsuredByPolicyCoverageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetPendingReason", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPendingReason(ByVal strSysName As String, ByRef strMessage As String, ByRef oRs As System.Data.DataSet, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strPendingStatus As String) As Boolean
            Dim results() As Object = Me.Invoke("GetPendingReason", New Object() {strSysName, strMessage, oRs, strUser, lngClaimNo, lngOccurNo, strPendingStatus})
            strMessage = CType(results(1),String)
            oRs = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPendingReasonAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal oRs As System.Data.DataSet, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strPendingStatus As String)
            Me.GetPendingReasonAsync(strSysName, strMessage, oRs, strUser, lngClaimNo, lngOccurNo, strPendingStatus, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPendingReasonAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal oRs As System.Data.DataSet, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strPendingStatus As String, ByVal userState As Object)
            If (Me.GetPendingReasonOperationCompleted Is Nothing) Then
                Me.GetPendingReasonOperationCompleted = AddressOf Me.OnGetPendingReasonOperationCompleted
            End If
            Me.InvokeAsync("GetPendingReason", New Object() {strSysName, strMessage, oRs, strUser, lngClaimNo, lngOccurNo, strPendingStatus}, Me.GetPendingReasonOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPendingReasonOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPendingReasonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPendingReasonCompleted(Me, New GetPendingReasonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetPendingCode", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPendingCode(ByVal strPendingCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPendingCode", New Object() {strPendingCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPendingCodeAsync(ByVal strPendingCode As String)
            Me.GetPendingCodeAsync(strPendingCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPendingCodeAsync(ByVal strPendingCode As String, ByVal userState As Object)
            If (Me.GetPendingCodeOperationCompleted Is Nothing) Then
                Me.GetPendingCodeOperationCompleted = AddressOf Me.OnGetPendingCodeOperationCompleted
            End If
            Me.InvokeAsync("GetPendingCode", New Object() {strPendingCode}, Me.GetPendingCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPendingCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPendingCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPendingCodeCompleted(Me, New GetPendingCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetServerCurrentDateTime", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetServerCurrentDateTime() As Date
            Dim results() As Object = Me.Invoke("GetServerCurrentDateTime", New Object(-1) {})
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetServerCurrentDateTimeAsync()
            Me.GetServerCurrentDateTimeAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetServerCurrentDateTimeAsync(ByVal userState As Object)
            If (Me.GetServerCurrentDateTimeOperationCompleted Is Nothing) Then
                Me.GetServerCurrentDateTimeOperationCompleted = AddressOf Me.OnGetServerCurrentDateTimeOperationCompleted
            End If
            Me.InvokeAsync("GetServerCurrentDateTime", New Object(-1) {}, Me.GetServerCurrentDateTimeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetServerCurrentDateTimeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetServerCurrentDateTimeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetServerCurrentDateTimeCompleted(Me, New GetServerCurrentDateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetPlanByID", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPlanByID(ByVal strSysName As String, ByVal strUser As String, ByVal strPlanId As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPlanByID", New Object() {strSysName, strUser, strPlanId})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPlanByIDAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPlanId As String)
            Me.GetPlanByIDAsync(strSysName, strUser, strPlanId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPlanByIDAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPlanId As String, ByVal userState As Object)
            If (Me.GetPlanByIDOperationCompleted Is Nothing) Then
                Me.GetPlanByIDOperationCompleted = AddressOf Me.OnGetPlanByIDOperationCompleted
            End If
            Me.InvokeAsync("GetPlanByID", New Object() {strSysName, strUser, strPlanId}, Me.GetPlanByIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPlanByIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPlanByIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPlanByIDCompleted(Me, New GetPlanByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimPolicyNCoverage", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimPolicyNCoverage(ByVal strSysName As String, ByRef strMessage As String, ByRef dsReturn As System.Data.DataSet, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal arrCovStatus() As Object) As Boolean
            Dim results() As Object = Me.Invoke("GetClaimPolicyNCoverage", New Object() {strSysName, strMessage, dsReturn, strUser, lngClaimNo, lngOccurNo, arrCovStatus})
            strMessage = CType(results(1),String)
            dsReturn = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimPolicyNCoverageAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal arrCovStatus() As Object)
            Me.GetClaimPolicyNCoverageAsync(strSysName, strMessage, dsReturn, strUser, lngClaimNo, lngOccurNo, arrCovStatus, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimPolicyNCoverageAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal arrCovStatus() As Object, ByVal userState As Object)
            If (Me.GetClaimPolicyNCoverageOperationCompleted Is Nothing) Then
                Me.GetClaimPolicyNCoverageOperationCompleted = AddressOf Me.OnGetClaimPolicyNCoverageOperationCompleted
            End If
            Me.InvokeAsync("GetClaimPolicyNCoverage", New Object() {strSysName, strMessage, dsReturn, strUser, lngClaimNo, lngOccurNo, arrCovStatus}, Me.GetClaimPolicyNCoverageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimPolicyNCoverageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimPolicyNCoverageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimPolicyNCoverageCompleted(Me, New GetClaimPolicyNCoverageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/getClaimBeneHisByClaimNo", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub getClaimBeneHisByClaimNo(ByVal strSysName As String, ByVal strUser As String, ByRef strMessage As String, ByRef dsBene As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strPolicyNo As String, ByVal lngCoverage As Long, ByVal strBenefitPcode As String, ByVal strBenefitCode As String, ByVal strBenefitGroup As String)
            Dim results() As Object = Me.Invoke("getClaimBeneHisByClaimNo", New Object() {strSysName, strUser, strMessage, dsBene, lngClaimNo, lngOccurNo, strPolicyNo, lngCoverage, strBenefitPcode, strBenefitCode, strBenefitGroup})
            strMessage = CType(results(0),String)
            dsBene = CType(results(1),System.Data.DataSet)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getClaimBeneHisByClaimNoAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strMessage As String, ByVal dsBene As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strPolicyNo As String, ByVal lngCoverage As Long, ByVal strBenefitPcode As String, ByVal strBenefitCode As String, ByVal strBenefitGroup As String)
            Me.getClaimBeneHisByClaimNoAsync(strSysName, strUser, strMessage, dsBene, lngClaimNo, lngOccurNo, strPolicyNo, lngCoverage, strBenefitPcode, strBenefitCode, strBenefitGroup, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getClaimBeneHisByClaimNoAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strMessage As String, ByVal dsBene As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strPolicyNo As String, ByVal lngCoverage As Long, ByVal strBenefitPcode As String, ByVal strBenefitCode As String, ByVal strBenefitGroup As String, ByVal userState As Object)
            If (Me.getClaimBeneHisByClaimNoOperationCompleted Is Nothing) Then
                Me.getClaimBeneHisByClaimNoOperationCompleted = AddressOf Me.OngetClaimBeneHisByClaimNoOperationCompleted
            End If
            Me.InvokeAsync("getClaimBeneHisByClaimNo", New Object() {strSysName, strUser, strMessage, dsBene, lngClaimNo, lngOccurNo, strPolicyNo, lngCoverage, strBenefitPcode, strBenefitCode, strBenefitGroup}, Me.getClaimBeneHisByClaimNoOperationCompleted, userState)
        End Sub
        
        Private Sub OngetClaimBeneHisByClaimNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.getClaimBeneHisByClaimNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getClaimBeneHisByClaimNoCompleted(Me, New getClaimBeneHisByClaimNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/getClaimBenefitHistory", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getClaimBenefitHistory(ByVal strSysName As String, ByRef strMessage As String, ByRef dsReturn As System.Data.DataSet, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngClaimOccur As Long, ByVal strPolicy As String, ByVal lngCoverage As Long, ByVal strBenefitPcode As String, ByVal strBenefitCode As String) As Boolean
            Dim results() As Object = Me.Invoke("getClaimBenefitHistory", New Object() {strSysName, strMessage, dsReturn, strUser, lngClaimNo, lngClaimOccur, strPolicy, lngCoverage, strBenefitPcode, strBenefitCode})
            strMessage = CType(results(1),String)
            dsReturn = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getClaimBenefitHistoryAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngClaimOccur As Long, ByVal strPolicy As String, ByVal lngCoverage As Long, ByVal strBenefitPcode As String, ByVal strBenefitCode As String)
            Me.getClaimBenefitHistoryAsync(strSysName, strMessage, dsReturn, strUser, lngClaimNo, lngClaimOccur, strPolicy, lngCoverage, strBenefitPcode, strBenefitCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getClaimBenefitHistoryAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngClaimOccur As Long, ByVal strPolicy As String, ByVal lngCoverage As Long, ByVal strBenefitPcode As String, ByVal strBenefitCode As String, ByVal userState As Object)
            If (Me.getClaimBenefitHistoryOperationCompleted Is Nothing) Then
                Me.getClaimBenefitHistoryOperationCompleted = AddressOf Me.OngetClaimBenefitHistoryOperationCompleted
            End If
            Me.InvokeAsync("getClaimBenefitHistory", New Object() {strSysName, strMessage, dsReturn, strUser, lngClaimNo, lngClaimOccur, strPolicy, lngCoverage, strBenefitPcode, strBenefitCode}, Me.getClaimBenefitHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OngetClaimBenefitHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.getClaimBenefitHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getClaimBenefitHistoryCompleted(Me, New getClaimBenefitHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimBenefit1", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimBenefit1(ByVal strSysName As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetClaimBenefit1", New Object() {strSysName, strUser, lngClaimNo, lngOccurNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimBenefit1Async(ByVal strSysName As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long)
            Me.GetClaimBenefit1Async(strSysName, strUser, lngClaimNo, lngOccurNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimBenefit1Async(ByVal strSysName As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal userState As Object)
            If (Me.GetClaimBenefit1OperationCompleted Is Nothing) Then
                Me.GetClaimBenefit1OperationCompleted = AddressOf Me.OnGetClaimBenefit1OperationCompleted
            End If
            Me.InvokeAsync("GetClaimBenefit1", New Object() {strSysName, strUser, lngClaimNo, lngOccurNo}, Me.GetClaimBenefit1OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimBenefit1OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimBenefit1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimBenefit1Completed(Me, New GetClaimBenefit1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimMessageByNo", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimMessageByNo(ByVal strSysName As String, ByRef dsMessage As System.Data.DataSet, ByVal strUser As String, ByVal strMsgNo As String) As Boolean
            Dim results() As Object = Me.Invoke("GetClaimMessageByNo", New Object() {strSysName, dsMessage, strUser, strMsgNo})
            dsMessage = CType(results(1),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimMessageByNoAsync(ByVal strSysName As String, ByVal dsMessage As System.Data.DataSet, ByVal strUser As String, ByVal strMsgNo As String)
            Me.GetClaimMessageByNoAsync(strSysName, dsMessage, strUser, strMsgNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimMessageByNoAsync(ByVal strSysName As String, ByVal dsMessage As System.Data.DataSet, ByVal strUser As String, ByVal strMsgNo As String, ByVal userState As Object)
            If (Me.GetClaimMessageByNoOperationCompleted Is Nothing) Then
                Me.GetClaimMessageByNoOperationCompleted = AddressOf Me.OnGetClaimMessageByNoOperationCompleted
            End If
            Me.InvokeAsync("GetClaimMessageByNo", New Object() {strSysName, dsMessage, strUser, strMsgNo}, Me.GetClaimMessageByNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimMessageByNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimMessageByNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimMessageByNoCompleted(Me, New GetClaimMessageByNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/IsLocked", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsLocked(ByVal strSysName As String, ByRef strMessage As String, ByRef blnLocked As Boolean, ByRef blnExpired As Boolean, ByRef strUserId As String, ByRef strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strAction As String) As Boolean
            Dim results() As Object = Me.Invoke("IsLocked", New Object() {strSysName, strMessage, blnLocked, blnExpired, strUserId, strUser, lngClaimNo, lngOccurNo, strAction})
            strMessage = CType(results(1),String)
            blnLocked = CType(results(2),Boolean)
            blnExpired = CType(results(3),Boolean)
            strUserId = CType(results(4),String)
            strUser = CType(results(5),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsLockedAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal blnLocked As Boolean, ByVal blnExpired As Boolean, ByVal strUserId As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strAction As String)
            Me.IsLockedAsync(strSysName, strMessage, blnLocked, blnExpired, strUserId, strUser, lngClaimNo, lngOccurNo, strAction, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsLockedAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal blnLocked As Boolean, ByVal blnExpired As Boolean, ByVal strUserId As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strAction As String, ByVal userState As Object)
            If (Me.IsLockedOperationCompleted Is Nothing) Then
                Me.IsLockedOperationCompleted = AddressOf Me.OnIsLockedOperationCompleted
            End If
            Me.InvokeAsync("IsLocked", New Object() {strSysName, strMessage, blnLocked, blnExpired, strUserId, strUser, lngClaimNo, lngOccurNo, strAction}, Me.IsLockedOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsLockedOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsLockedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsLockedCompleted(Me, New IsLockedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/IsPolicyExisted", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsPolicyExisted(ByVal sPolicyNo As String, ByRef dtDate As Date) As Boolean
            Dim results() As Object = Me.Invoke("IsPolicyExisted", New Object() {sPolicyNo, dtDate})
            dtDate = CType(results(1),Date)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsPolicyExistedAsync(ByVal sPolicyNo As String, ByVal dtDate As Date)
            Me.IsPolicyExistedAsync(sPolicyNo, dtDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsPolicyExistedAsync(ByVal sPolicyNo As String, ByVal dtDate As Date, ByVal userState As Object)
            If (Me.IsPolicyExistedOperationCompleted Is Nothing) Then
                Me.IsPolicyExistedOperationCompleted = AddressOf Me.OnIsPolicyExistedOperationCompleted
            End If
            Me.InvokeAsync("IsPolicyExisted", New Object() {sPolicyNo, dtDate}, Me.IsPolicyExistedOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsPolicyExistedOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsPolicyExistedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsPolicyExistedCompleted(Me, New IsPolicyExistedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetEmptyClaimMessage", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEmptyClaimMessage(ByVal strSysName As String, ByRef strMessage As String, ByRef dsRs As System.Data.DataSet, ByVal strUser As String) As Boolean
            Dim results() As Object = Me.Invoke("GetEmptyClaimMessage", New Object() {strSysName, strMessage, dsRs, strUser})
            strMessage = CType(results(1),String)
            dsRs = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEmptyClaimMessageAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsRs As System.Data.DataSet, ByVal strUser As String)
            Me.GetEmptyClaimMessageAsync(strSysName, strMessage, dsRs, strUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEmptyClaimMessageAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsRs As System.Data.DataSet, ByVal strUser As String, ByVal userState As Object)
            If (Me.GetEmptyClaimMessageOperationCompleted Is Nothing) Then
                Me.GetEmptyClaimMessageOperationCompleted = AddressOf Me.OnGetEmptyClaimMessageOperationCompleted
            End If
            Me.InvokeAsync("GetEmptyClaimMessage", New Object() {strSysName, strMessage, dsRs, strUser}, Me.GetEmptyClaimMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEmptyClaimMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEmptyClaimMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEmptyClaimMessageCompleted(Me, New GetEmptyClaimMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetEmptyClaimPayment", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEmptyClaimPayment(ByVal strSysName As String, ByRef strMessage As String, ByRef dsReturn As System.Data.DataSet, ByVal strUser As String) As Boolean
            Dim results() As Object = Me.Invoke("GetEmptyClaimPayment", New Object() {strSysName, strMessage, dsReturn, strUser})
            strMessage = CType(results(1),String)
            dsReturn = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEmptyClaimPaymentAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal strUser As String)
            Me.GetEmptyClaimPaymentAsync(strSysName, strMessage, dsReturn, strUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEmptyClaimPaymentAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal strUser As String, ByVal userState As Object)
            If (Me.GetEmptyClaimPaymentOperationCompleted Is Nothing) Then
                Me.GetEmptyClaimPaymentOperationCompleted = AddressOf Me.OnGetEmptyClaimPaymentOperationCompleted
            End If
            Me.InvokeAsync("GetEmptyClaimPayment", New Object() {strSysName, strMessage, dsReturn, strUser}, Me.GetEmptyClaimPaymentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEmptyClaimPaymentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEmptyClaimPaymentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEmptyClaimPaymentCompleted(Me, New GetEmptyClaimPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetResolveRecord", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetResolveRecord(ByVal strResolveCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetResolveRecord", New Object() {strResolveCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetResolveRecordAsync(ByVal strResolveCode As String)
            Me.GetResolveRecordAsync(strResolveCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetResolveRecordAsync(ByVal strResolveCode As String, ByVal userState As Object)
            If (Me.GetResolveRecordOperationCompleted Is Nothing) Then
                Me.GetResolveRecordOperationCompleted = AddressOf Me.OnGetResolveRecordOperationCompleted
            End If
            Me.InvokeAsync("GetResolveRecord", New Object() {strResolveCode}, Me.GetResolveRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetResolveRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetResolveRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetResolveRecordCompleted(Me, New GetResolveRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetAccPosFurClaim", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccPosFurClaim(ByVal strSysName As String, ByRef strMessage As String, ByRef dsReturn As System.Data.DataSet, ByVal strUser As String, ByVal datDate As Date, ByVal strCode As String, ByVal strInsuredID As String) As Boolean
            Dim results() As Object = Me.Invoke("GetAccPosFurClaim", New Object() {strSysName, strMessage, dsReturn, strUser, datDate, strCode, strInsuredID})
            strMessage = CType(results(1),String)
            dsReturn = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccPosFurClaimAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal strUser As String, ByVal datDate As Date, ByVal strCode As String, ByVal strInsuredID As String)
            Me.GetAccPosFurClaimAsync(strSysName, strMessage, dsReturn, strUser, datDate, strCode, strInsuredID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccPosFurClaimAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal strUser As String, ByVal datDate As Date, ByVal strCode As String, ByVal strInsuredID As String, ByVal userState As Object)
            If (Me.GetAccPosFurClaimOperationCompleted Is Nothing) Then
                Me.GetAccPosFurClaimOperationCompleted = AddressOf Me.OnGetAccPosFurClaimOperationCompleted
            End If
            Me.InvokeAsync("GetAccPosFurClaim", New Object() {strSysName, strMessage, dsReturn, strUser, datDate, strCode, strInsuredID}, Me.GetAccPosFurClaimOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccPosFurClaimOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccPosFurClaimCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccPosFurClaimCompleted(Me, New GetAccPosFurClaimCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetBenefit", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBenefit(ByVal strBenefitCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetBenefit", New Object() {strBenefitCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBenefitAsync(ByVal strBenefitCode As String)
            Me.GetBenefitAsync(strBenefitCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBenefitAsync(ByVal strBenefitCode As String, ByVal userState As Object)
            If (Me.GetBenefitOperationCompleted Is Nothing) Then
                Me.GetBenefitOperationCompleted = AddressOf Me.OnGetBenefitOperationCompleted
            End If
            Me.InvokeAsync("GetBenefit", New Object() {strBenefitCode}, Me.GetBenefitOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBenefitOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBenefitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBenefitCompleted(Me, New GetBenefitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/CheckClaim", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CheckClaim(ByVal strSysName As String, ByRef dsClaimRS As System.Data.DataSet, ByRef dsErrRs As System.Data.DataSet, ByRef strAction As String, ByVal strUser As String, ByVal strPolicyNo As String, ByRef dsfurtherClmRs As System.Data.DataSet, ByVal lngCoverageNo As Long, ByRef dsCoverageRS As System.Data.DataSet, ByVal strValid As String)
            Dim results() As Object = Me.Invoke("CheckClaim", New Object() {strSysName, dsClaimRS, dsErrRs, strAction, strUser, strPolicyNo, dsfurtherClmRs, lngCoverageNo, dsCoverageRS, strValid})
            dsClaimRS = CType(results(0),System.Data.DataSet)
            dsErrRs = CType(results(1),System.Data.DataSet)
            strAction = CType(results(2),String)
            dsfurtherClmRs = CType(results(3),System.Data.DataSet)
            dsCoverageRS = CType(results(4),System.Data.DataSet)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckClaimAsync(ByVal strSysName As String, ByVal dsClaimRS As System.Data.DataSet, ByVal dsErrRs As System.Data.DataSet, ByVal strAction As String, ByVal strUser As String, ByVal strPolicyNo As String, ByVal dsfurtherClmRs As System.Data.DataSet, ByVal lngCoverageNo As Long, ByVal dsCoverageRS As System.Data.DataSet, ByVal strValid As String)
            Me.CheckClaimAsync(strSysName, dsClaimRS, dsErrRs, strAction, strUser, strPolicyNo, dsfurtherClmRs, lngCoverageNo, dsCoverageRS, strValid, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckClaimAsync(ByVal strSysName As String, ByVal dsClaimRS As System.Data.DataSet, ByVal dsErrRs As System.Data.DataSet, ByVal strAction As String, ByVal strUser As String, ByVal strPolicyNo As String, ByVal dsfurtherClmRs As System.Data.DataSet, ByVal lngCoverageNo As Long, ByVal dsCoverageRS As System.Data.DataSet, ByVal strValid As String, ByVal userState As Object)
            If (Me.CheckClaimOperationCompleted Is Nothing) Then
                Me.CheckClaimOperationCompleted = AddressOf Me.OnCheckClaimOperationCompleted
            End If
            Me.InvokeAsync("CheckClaim", New Object() {strSysName, dsClaimRS, dsErrRs, strAction, strUser, strPolicyNo, dsfurtherClmRs, lngCoverageNo, dsCoverageRS, strValid}, Me.CheckClaimOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckClaimOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckClaimCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckClaimCompleted(Me, New CheckClaimCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetAccidentCode", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccidentCode(ByVal sCode As String, ByVal sStatus As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetAccidentCode", New Object() {sCode, sStatus})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccidentCodeAsync(ByVal sCode As String, ByVal sStatus As String)
            Me.GetAccidentCodeAsync(sCode, sStatus, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccidentCodeAsync(ByVal sCode As String, ByVal sStatus As String, ByVal userState As Object)
            If (Me.GetAccidentCodeOperationCompleted Is Nothing) Then
                Me.GetAccidentCodeOperationCompleted = AddressOf Me.OnGetAccidentCodeOperationCompleted
            End If
            Me.InvokeAsync("GetAccidentCode", New Object() {sCode, sStatus}, Me.GetAccidentCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccidentCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccidentCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccidentCodeCompleted(Me, New GetAccidentCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/SaveClaimHeader", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveClaimHeader(ByVal strSysName As String, ByRef strMessage As String, ByRef dsRs As System.Data.DataSet, ByRef dsErrRs As System.Data.DataSet, ByRef dsLogRs As System.Data.DataSet, ByVal strUser As String, ByVal strClaimType As String) As Boolean
            Dim results() As Object = Me.Invoke("SaveClaimHeader", New Object() {strSysName, strMessage, dsRs, dsErrRs, dsLogRs, strUser, strClaimType})
            strMessage = CType(results(1),String)
            dsRs = CType(results(2),System.Data.DataSet)
            dsErrRs = CType(results(3),System.Data.DataSet)
            dsLogRs = CType(results(4),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveClaimHeaderAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsRs As System.Data.DataSet, ByVal dsErrRs As System.Data.DataSet, ByVal dsLogRs As System.Data.DataSet, ByVal strUser As String, ByVal strClaimType As String)
            Me.SaveClaimHeaderAsync(strSysName, strMessage, dsRs, dsErrRs, dsLogRs, strUser, strClaimType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveClaimHeaderAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsRs As System.Data.DataSet, ByVal dsErrRs As System.Data.DataSet, ByVal dsLogRs As System.Data.DataSet, ByVal strUser As String, ByVal strClaimType As String, ByVal userState As Object)
            If (Me.SaveClaimHeaderOperationCompleted Is Nothing) Then
                Me.SaveClaimHeaderOperationCompleted = AddressOf Me.OnSaveClaimHeaderOperationCompleted
            End If
            Me.InvokeAsync("SaveClaimHeader", New Object() {strSysName, strMessage, dsRs, dsErrRs, dsLogRs, strUser, strClaimType}, Me.SaveClaimHeaderOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveClaimHeaderOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveClaimHeaderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveClaimHeaderCompleted(Me, New SaveClaimHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimDetails", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimDetails(ByVal lngClaimNo As Long, ByVal lngOccurNo As Long) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetClaimDetails", New Object() {lngClaimNo, lngOccurNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimDetailsAsync(ByVal lngClaimNo As Long, ByVal lngOccurNo As Long)
            Me.GetClaimDetailsAsync(lngClaimNo, lngOccurNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimDetailsAsync(ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal userState As Object)
            If (Me.GetClaimDetailsOperationCompleted Is Nothing) Then
                Me.GetClaimDetailsOperationCompleted = AddressOf Me.OnGetClaimDetailsOperationCompleted
            End If
            Me.InvokeAsync("GetClaimDetails", New Object() {lngClaimNo, lngOccurNo}, Me.GetClaimDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimDetailsCompleted(Me, New GetClaimDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetEmptyClaimPresentation", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEmptyClaimPresentation(ByRef strMessage As String, ByRef dsRs As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("GetEmptyClaimPresentation", New Object() {strMessage, dsRs})
            strMessage = CType(results(1),String)
            dsRs = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEmptyClaimPresentationAsync(ByVal strMessage As String, ByVal dsRs As System.Data.DataSet)
            Me.GetEmptyClaimPresentationAsync(strMessage, dsRs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEmptyClaimPresentationAsync(ByVal strMessage As String, ByVal dsRs As System.Data.DataSet, ByVal userState As Object)
            If (Me.GetEmptyClaimPresentationOperationCompleted Is Nothing) Then
                Me.GetEmptyClaimPresentationOperationCompleted = AddressOf Me.OnGetEmptyClaimPresentationOperationCompleted
            End If
            Me.InvokeAsync("GetEmptyClaimPresentation", New Object() {strMessage, dsRs}, Me.GetEmptyClaimPresentationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEmptyClaimPresentationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEmptyClaimPresentationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEmptyClaimPresentationCompleted(Me, New GetEmptyClaimPresentationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetPaymentMethod", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPaymentMethod(ByVal strMethod As String, ByRef strMessage As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPaymentMethod", New Object() {strMethod, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPaymentMethodAsync(ByVal strMethod As String, ByVal strMessage As String)
            Me.GetPaymentMethodAsync(strMethod, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPaymentMethodAsync(ByVal strMethod As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetPaymentMethodOperationCompleted Is Nothing) Then
                Me.GetPaymentMethodOperationCompleted = AddressOf Me.OnGetPaymentMethodOperationCompleted
            End If
            Me.InvokeAsync("GetPaymentMethod", New Object() {strMethod, strMessage}, Me.GetPaymentMethodOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPaymentMethodOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPaymentMethodCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPaymentMethodCompleted(Me, New GetPaymentMethodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetPolicyByClaim", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyByClaim(ByVal strSysName As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strPolicyNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPolicyByClaim", New Object() {strSysName, strUser, lngClaimNo, lngOccurNo, strPolicyNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyByClaimAsync(ByVal strSysName As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strPolicyNo As String)
            Me.GetPolicyByClaimAsync(strSysName, strUser, lngClaimNo, lngOccurNo, strPolicyNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyByClaimAsync(ByVal strSysName As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strPolicyNo As String, ByVal userState As Object)
            If (Me.GetPolicyByClaimOperationCompleted Is Nothing) Then
                Me.GetPolicyByClaimOperationCompleted = AddressOf Me.OnGetPolicyByClaimOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyByClaim", New Object() {strSysName, strUser, lngClaimNo, lngOccurNo, strPolicyNo}, Me.GetPolicyByClaimOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyByClaimOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyByClaimCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyByClaimCompleted(Me, New GetPolicyByClaimCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimPresentation", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimPresentation(ByRef strMessage As String, ByRef dsReturn As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal lngSeqNo As Long) As Boolean
            Dim results() As Object = Me.Invoke("GetClaimPresentation", New Object() {strMessage, dsReturn, lngClaimNo, lngOccurNo, lngSeqNo})
            strMessage = CType(results(1),String)
            dsReturn = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimPresentationAsync(ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal lngSeqNo As Long)
            Me.GetClaimPresentationAsync(strMessage, dsReturn, lngClaimNo, lngOccurNo, lngSeqNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimPresentationAsync(ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal lngSeqNo As Long, ByVal userState As Object)
            If (Me.GetClaimPresentationOperationCompleted Is Nothing) Then
                Me.GetClaimPresentationOperationCompleted = AddressOf Me.OnGetClaimPresentationOperationCompleted
            End If
            Me.InvokeAsync("GetClaimPresentation", New Object() {strMessage, dsReturn, lngClaimNo, lngOccurNo, lngSeqNo}, Me.GetClaimPresentationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimPresentationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimPresentationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimPresentationCompleted(Me, New GetClaimPresentationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimStatus", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimStatus(ByRef strMessage As String, ByRef dsStatus As System.Data.DataSet, ByVal strStatus As String) As Boolean
            Dim results() As Object = Me.Invoke("GetClaimStatus", New Object() {strMessage, dsStatus, strStatus})
            strMessage = CType(results(1),String)
            dsStatus = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimStatusAsync(ByVal strMessage As String, ByVal dsStatus As System.Data.DataSet, ByVal strStatus As String)
            Me.GetClaimStatusAsync(strMessage, dsStatus, strStatus, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimStatusAsync(ByVal strMessage As String, ByVal dsStatus As System.Data.DataSet, ByVal strStatus As String, ByVal userState As Object)
            If (Me.GetClaimStatusOperationCompleted Is Nothing) Then
                Me.GetClaimStatusOperationCompleted = AddressOf Me.OnGetClaimStatusOperationCompleted
            End If
            Me.InvokeAsync("GetClaimStatus", New Object() {strMessage, dsStatus, strStatus}, Me.GetClaimStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimStatusCompleted(Me, New GetClaimStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetEmptyClaimPending", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEmptyClaimPending(ByVal strSysName As String, ByRef strMessage As String, ByRef dsReturn As System.Data.DataSet, ByVal strUser As String) As Boolean
            Dim results() As Object = Me.Invoke("GetEmptyClaimPending", New Object() {strSysName, strMessage, dsReturn, strUser})
            strMessage = CType(results(1),String)
            dsReturn = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEmptyClaimPendingAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal strUser As String)
            Me.GetEmptyClaimPendingAsync(strSysName, strMessage, dsReturn, strUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEmptyClaimPendingAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal strUser As String, ByVal userState As Object)
            If (Me.GetEmptyClaimPendingOperationCompleted Is Nothing) Then
                Me.GetEmptyClaimPendingOperationCompleted = AddressOf Me.OnGetEmptyClaimPendingOperationCompleted
            End If
            Me.InvokeAsync("GetEmptyClaimPending", New Object() {strSysName, strMessage, dsReturn, strUser}, Me.GetEmptyClaimPendingOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEmptyClaimPendingOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEmptyClaimPendingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEmptyClaimPendingCompleted(Me, New GetEmptyClaimPendingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetExgratiaReason", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetExgratiaReason(ByRef strMessage As String, ByRef dsReturn As System.Data.DataSet, ByVal strCode As String) As Boolean
            Dim results() As Object = Me.Invoke("GetExgratiaReason", New Object() {strMessage, dsReturn, strCode})
            strMessage = CType(results(1),String)
            dsReturn = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetExgratiaReasonAsync(ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal strCode As String)
            Me.GetExgratiaReasonAsync(strMessage, dsReturn, strCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetExgratiaReasonAsync(ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal strCode As String, ByVal userState As Object)
            If (Me.GetExgratiaReasonOperationCompleted Is Nothing) Then
                Me.GetExgratiaReasonOperationCompleted = AddressOf Me.OnGetExgratiaReasonOperationCompleted
            End If
            Me.InvokeAsync("GetExgratiaReason", New Object() {strMessage, dsReturn, strCode}, Me.GetExgratiaReasonOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetExgratiaReasonOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetExgratiaReasonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetExgratiaReasonCompleted(Me, New GetExgratiaReasonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetTotalPaidByPlanType", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTotalPaidByPlanType(ByVal strSysName As String, ByRef strMessage As String, ByRef dsReturn As System.Data.DataSet, ByRef lngClaimNo As Long, ByRef lngOccur As Long, ByVal strUser As String, ByVal isCIPlan As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("GetTotalPaidByPlanType", New Object() {strSysName, strMessage, dsReturn, lngClaimNo, lngOccur, strUser, isCIPlan})
            strMessage = CType(results(1),String)
            dsReturn = CType(results(2),System.Data.DataSet)
            lngClaimNo = CType(results(3),Long)
            lngOccur = CType(results(4),Long)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTotalPaidByPlanTypeAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngOccur As Long, ByVal strUser As String, ByVal isCIPlan As Boolean)
            Me.GetTotalPaidByPlanTypeAsync(strSysName, strMessage, dsReturn, lngClaimNo, lngOccur, strUser, isCIPlan, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTotalPaidByPlanTypeAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngOccur As Long, ByVal strUser As String, ByVal isCIPlan As Boolean, ByVal userState As Object)
            If (Me.GetTotalPaidByPlanTypeOperationCompleted Is Nothing) Then
                Me.GetTotalPaidByPlanTypeOperationCompleted = AddressOf Me.OnGetTotalPaidByPlanTypeOperationCompleted
            End If
            Me.InvokeAsync("GetTotalPaidByPlanType", New Object() {strSysName, strMessage, dsReturn, lngClaimNo, lngOccur, strUser, isCIPlan}, Me.GetTotalPaidByPlanTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTotalPaidByPlanTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTotalPaidByPlanTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTotalPaidByPlanTypeCompleted(Me, New GetTotalPaidByPlanTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetTotalPaidByPolicy", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTotalPaidByPolicy(ByVal strSysName As String, ByRef strMessage As String, ByRef dsReturn As System.Data.DataSet, ByRef lngClaimNo As Long, ByRef lngOccur As Long, ByVal strUser As String) As Boolean
            Dim results() As Object = Me.Invoke("GetTotalPaidByPolicy", New Object() {strSysName, strMessage, dsReturn, lngClaimNo, lngOccur, strUser})
            strMessage = CType(results(1),String)
            dsReturn = CType(results(2),System.Data.DataSet)
            lngClaimNo = CType(results(3),Long)
            lngOccur = CType(results(4),Long)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTotalPaidByPolicyAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngOccur As Long, ByVal strUser As String)
            Me.GetTotalPaidByPolicyAsync(strSysName, strMessage, dsReturn, lngClaimNo, lngOccur, strUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTotalPaidByPolicyAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngOccur As Long, ByVal strUser As String, ByVal userState As Object)
            If (Me.GetTotalPaidByPolicyOperationCompleted Is Nothing) Then
                Me.GetTotalPaidByPolicyOperationCompleted = AddressOf Me.OnGetTotalPaidByPolicyOperationCompleted
            End If
            Me.InvokeAsync("GetTotalPaidByPolicy", New Object() {strSysName, strMessage, dsReturn, lngClaimNo, lngOccur, strUser}, Me.GetTotalPaidByPolicyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTotalPaidByPolicyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTotalPaidByPolicyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTotalPaidByPolicyCompleted(Me, New GetTotalPaidByPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetPlanFeature", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPlanFeature(ByVal strSysName As String, ByVal strUser As String, ByRef strMessage As String, ByVal strPlan As String, ByVal strTable1 As String, ByVal strTable2 As String, ByVal strPlanCurr As String, ByVal strPlanFeature As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPlanFeature", New Object() {strSysName, strUser, strMessage, strPlan, strTable1, strTable2, strPlanCurr, strPlanFeature})
            strMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPlanFeatureAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strMessage As String, ByVal strPlan As String, ByVal strTable1 As String, ByVal strTable2 As String, ByVal strPlanCurr As String, ByVal strPlanFeature As String)
            Me.GetPlanFeatureAsync(strSysName, strUser, strMessage, strPlan, strTable1, strTable2, strPlanCurr, strPlanFeature, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPlanFeatureAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strMessage As String, ByVal strPlan As String, ByVal strTable1 As String, ByVal strTable2 As String, ByVal strPlanCurr As String, ByVal strPlanFeature As String, ByVal userState As Object)
            If (Me.GetPlanFeatureOperationCompleted Is Nothing) Then
                Me.GetPlanFeatureOperationCompleted = AddressOf Me.OnGetPlanFeatureOperationCompleted
            End If
            Me.InvokeAsync("GetPlanFeature", New Object() {strSysName, strUser, strMessage, strPlan, strTable1, strTable2, strPlanCurr, strPlanFeature}, Me.GetPlanFeatureOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPlanFeatureOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPlanFeatureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPlanFeatureCompleted(Me, New GetPlanFeatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetPlan", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPlan(ByVal strSysName As String, ByVal strUser As String, ByVal strPlan As String, ByVal strTable1 As String, ByVal strTable2 As String, ByVal strPlanCurr As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPlan", New Object() {strSysName, strUser, strPlan, strTable1, strTable2, strPlanCurr})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPlanAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPlan As String, ByVal strTable1 As String, ByVal strTable2 As String, ByVal strPlanCurr As String)
            Me.GetPlanAsync(strSysName, strUser, strPlan, strTable1, strTable2, strPlanCurr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPlanAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPlan As String, ByVal strTable1 As String, ByVal strTable2 As String, ByVal strPlanCurr As String, ByVal userState As Object)
            If (Me.GetPlanOperationCompleted Is Nothing) Then
                Me.GetPlanOperationCompleted = AddressOf Me.OnGetPlanOperationCompleted
            End If
            Me.InvokeAsync("GetPlan", New Object() {strSysName, strUser, strPlan, strTable1, strTable2, strPlanCurr}, Me.GetPlanOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPlanOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPlanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPlanCompleted(Me, New GetPlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetPolicyById", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyById(ByVal strPolicy As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPolicyById", New Object() {strPolicy})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyByIdAsync(ByVal strPolicy As String)
            Me.GetPolicyByIdAsync(strPolicy, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyByIdAsync(ByVal strPolicy As String, ByVal userState As Object)
            If (Me.GetPolicyByIdOperationCompleted Is Nothing) Then
                Me.GetPolicyByIdOperationCompleted = AddressOf Me.OnGetPolicyByIdOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyById", New Object() {strPolicy}, Me.GetPolicyByIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyByIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyByIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyByIdCompleted(Me, New GetPolicyByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetPolicyCoverage", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPolicyCoverage(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicy As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPolicyCoverage", New Object() {strSysName, strUser, strPolicy})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPolicyCoverageAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicy As String)
            Me.GetPolicyCoverageAsync(strSysName, strUser, strPolicy, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPolicyCoverageAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicy As String, ByVal userState As Object)
            If (Me.GetPolicyCoverageOperationCompleted Is Nothing) Then
                Me.GetPolicyCoverageOperationCompleted = AddressOf Me.OnGetPolicyCoverageOperationCompleted
            End If
            Me.InvokeAsync("GetPolicyCoverage", New Object() {strSysName, strUser, strPolicy}, Me.GetPolicyCoverageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPolicyCoverageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPolicyCoverageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPolicyCoverageCompleted(Me, New GetPolicyCoverageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetUser", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUser(ByVal strSysName As String, ByVal strUser As String, ByVal strUserId As String, ByVal strDelUser As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetUser", New Object() {strSysName, strUser, strUserId, strDelUser})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strUserId As String, ByVal strDelUser As String)
            Me.GetUserAsync(strSysName, strUser, strUserId, strDelUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strUserId As String, ByVal strDelUser As String, ByVal userState As Object)
            If (Me.GetUserOperationCompleted Is Nothing) Then
                Me.GetUserOperationCompleted = AddressOf Me.OnGetUserOperationCompleted
            End If
            Me.InvokeAsync("GetUser", New Object() {strSysName, strUser, strUserId, strDelUser}, Me.GetUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserCompleted(Me, New GetUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetGrpByUser", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGrpByUser(ByRef strMessage As String, ByVal strLoginID As String, ByRef strSystem As String, ByRef strFunctionCode As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetGrpByUser", New Object() {strMessage, strLoginID, strSystem, strFunctionCode})
            strMessage = CType(results(1),String)
            strSystem = CType(results(2),String)
            strFunctionCode = CType(results(3),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGrpByUserAsync(ByVal strMessage As String, ByVal strLoginID As String, ByVal strSystem As String, ByVal strFunctionCode As String)
            Me.GetGrpByUserAsync(strMessage, strLoginID, strSystem, strFunctionCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGrpByUserAsync(ByVal strMessage As String, ByVal strLoginID As String, ByVal strSystem As String, ByVal strFunctionCode As String, ByVal userState As Object)
            If (Me.GetGrpByUserOperationCompleted Is Nothing) Then
                Me.GetGrpByUserOperationCompleted = AddressOf Me.OnGetGrpByUserOperationCompleted
            End If
            Me.InvokeAsync("GetGrpByUser", New Object() {strMessage, strLoginID, strSystem, strFunctionCode}, Me.GetGrpByUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGrpByUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGrpByUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGrpByUserCompleted(Me, New GetGrpByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetMceGrpByUser", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMceGrpByUser(ByVal strUser As String, ByRef strMessage As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetMceGrpByUser", New Object() {strUser, strMessage})
            strMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMceGrpByUserAsync(ByVal strUser As String, ByVal strMessage As String)
            Me.GetMceGrpByUserAsync(strUser, strMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMceGrpByUserAsync(ByVal strUser As String, ByVal strMessage As String, ByVal userState As Object)
            If (Me.GetMceGrpByUserOperationCompleted Is Nothing) Then
                Me.GetMceGrpByUserOperationCompleted = AddressOf Me.OnGetMceGrpByUserOperationCompleted
            End If
            Me.InvokeAsync("GetMceGrpByUser", New Object() {strUser, strMessage}, Me.GetMceGrpByUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMceGrpByUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMceGrpByUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMceGrpByUserCompleted(Me, New GetMceGrpByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/IsClaimFinalApproved", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsClaimFinalApproved(ByVal strSysName As String, ByRef strMessage As String, ByVal strUser As String, ByVal strRequestID As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strCurr As String) As Boolean
            Dim results() As Object = Me.Invoke("IsClaimFinalApproved", New Object() {strSysName, strMessage, strUser, strRequestID, lngClaimNo, lngOccurNo, strCurr})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsClaimFinalApprovedAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal strUser As String, ByVal strRequestID As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strCurr As String)
            Me.IsClaimFinalApprovedAsync(strSysName, strMessage, strUser, strRequestID, lngClaimNo, lngOccurNo, strCurr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsClaimFinalApprovedAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal strUser As String, ByVal strRequestID As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strCurr As String, ByVal userState As Object)
            If (Me.IsClaimFinalApprovedOperationCompleted Is Nothing) Then
                Me.IsClaimFinalApprovedOperationCompleted = AddressOf Me.OnIsClaimFinalApprovedOperationCompleted
            End If
            Me.InvokeAsync("IsClaimFinalApproved", New Object() {strSysName, strMessage, strUser, strRequestID, lngClaimNo, lngOccurNo, strCurr}, Me.IsClaimFinalApprovedOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsClaimFinalApprovedOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsClaimFinalApprovedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsClaimFinalApprovedCompleted(Me, New IsClaimFinalApprovedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/IsClaimOverApprovalLimitMJC", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsClaimOverApprovalLimitMJC(ByVal strSysName As String, ByRef strMessage As String, ByVal strUser As String, ByVal strRequestID As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strClaimType As String, ByVal strCurr As String, ByVal lTotalClaimAmount As Decimal, ByVal dtPolicy As System.Data.DataTable, ByVal dtCov As System.Data.DataTable) As Boolean
            Dim results() As Object = Me.Invoke("IsClaimOverApprovalLimitMJC", New Object() {strSysName, strMessage, strUser, strRequestID, lngClaimNo, lngOccurNo, strClaimType, strCurr, lTotalClaimAmount, dtPolicy, dtCov})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsClaimOverApprovalLimitMJCAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal strUser As String, ByVal strRequestID As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strClaimType As String, ByVal strCurr As String, ByVal lTotalClaimAmount As Decimal, ByVal dtPolicy As System.Data.DataTable, ByVal dtCov As System.Data.DataTable)
            Me.IsClaimOverApprovalLimitMJCAsync(strSysName, strMessage, strUser, strRequestID, lngClaimNo, lngOccurNo, strClaimType, strCurr, lTotalClaimAmount, dtPolicy, dtCov, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsClaimOverApprovalLimitMJCAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal strUser As String, ByVal strRequestID As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strClaimType As String, ByVal strCurr As String, ByVal lTotalClaimAmount As Decimal, ByVal dtPolicy As System.Data.DataTable, ByVal dtCov As System.Data.DataTable, ByVal userState As Object)
            If (Me.IsClaimOverApprovalLimitMJCOperationCompleted Is Nothing) Then
                Me.IsClaimOverApprovalLimitMJCOperationCompleted = AddressOf Me.OnIsClaimOverApprovalLimitMJCOperationCompleted
            End If
            Me.InvokeAsync("IsClaimOverApprovalLimitMJC", New Object() {strSysName, strMessage, strUser, strRequestID, lngClaimNo, lngOccurNo, strClaimType, strCurr, lTotalClaimAmount, dtPolicy, dtCov}, Me.IsClaimOverApprovalLimitMJCOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsClaimOverApprovalLimitMJCOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsClaimOverApprovalLimitMJCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsClaimOverApprovalLimitMJCCompleted(Me, New IsClaimOverApprovalLimitMJCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/IsInforcePly_CIW", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsInforcePly_CIW(ByVal strSysName As String, ByVal strMsg As String, ByVal strUser As String, ByVal strPolicy As String, ByVal lngCoverage As Integer) As Boolean
            Dim results() As Object = Me.Invoke("IsInforcePly_CIW", New Object() {strSysName, strMsg, strUser, strPolicy, lngCoverage})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsInforcePly_CIWAsync(ByVal strSysName As String, ByVal strMsg As String, ByVal strUser As String, ByVal strPolicy As String, ByVal lngCoverage As Integer)
            Me.IsInforcePly_CIWAsync(strSysName, strMsg, strUser, strPolicy, lngCoverage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsInforcePly_CIWAsync(ByVal strSysName As String, ByVal strMsg As String, ByVal strUser As String, ByVal strPolicy As String, ByVal lngCoverage As Integer, ByVal userState As Object)
            If (Me.IsInforcePly_CIWOperationCompleted Is Nothing) Then
                Me.IsInforcePly_CIWOperationCompleted = AddressOf Me.OnIsInforcePly_CIWOperationCompleted
            End If
            Me.InvokeAsync("IsInforcePly_CIW", New Object() {strSysName, strMsg, strUser, strPolicy, lngCoverage}, Me.IsInforcePly_CIWOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsInforcePly_CIWOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsInforcePly_CIWCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsInforcePly_CIWCompleted(Me, New IsInforcePly_CIWCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/IsValidBankBranch", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsValidBankBranch(ByVal strSysName As String, ByVal strUser As String, ByVal strRtnMsg As String, ByVal strAccountNumber As String, ByVal strEnvironment As String) As Boolean
            Dim results() As Object = Me.Invoke("IsValidBankBranch", New Object() {strSysName, strUser, strRtnMsg, strAccountNumber, strEnvironment})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsValidBankBranchAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strRtnMsg As String, ByVal strAccountNumber As String, ByVal strEnvironment As String)
            Me.IsValidBankBranchAsync(strSysName, strUser, strRtnMsg, strAccountNumber, strEnvironment, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsValidBankBranchAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strRtnMsg As String, ByVal strAccountNumber As String, ByVal strEnvironment As String, ByVal userState As Object)
            If (Me.IsValidBankBranchOperationCompleted Is Nothing) Then
                Me.IsValidBankBranchOperationCompleted = AddressOf Me.OnIsValidBankBranchOperationCompleted
            End If
            Me.InvokeAsync("IsValidBankBranch", New Object() {strSysName, strUser, strRtnMsg, strAccountNumber, strEnvironment}, Me.IsValidBankBranchOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsValidBankBranchOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsValidBankBranchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsValidBankBranchCompleted(Me, New IsValidBankBranchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UpdateClaimDetails", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateClaimDetails(ByVal strSysName As String, ByRef strMessage As String, ByRef dsCoverageRS As System.Data.DataSet, ByRef dsPresentRS As System.Data.DataSet, ByRef dsClaimRS As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngClaimOccu As Long, ByVal datAccDate As Date, ByVal blnUpdateCoverage As Boolean, ByVal blnUpdatePresent As Boolean, ByVal blnUpdateHeader As Boolean, ByVal strUser As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateClaimDetails", New Object() {strSysName, strMessage, dsCoverageRS, dsPresentRS, dsClaimRS, lngClaimNo, lngClaimOccu, datAccDate, blnUpdateCoverage, blnUpdatePresent, blnUpdateHeader, strUser})
            strMessage = CType(results(1),String)
            dsCoverageRS = CType(results(2),System.Data.DataSet)
            dsPresentRS = CType(results(3),System.Data.DataSet)
            dsClaimRS = CType(results(4),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateClaimDetailsAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsCoverageRS As System.Data.DataSet, ByVal dsPresentRS As System.Data.DataSet, ByVal dsClaimRS As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngClaimOccu As Long, ByVal datAccDate As Date, ByVal blnUpdateCoverage As Boolean, ByVal blnUpdatePresent As Boolean, ByVal blnUpdateHeader As Boolean, ByVal strUser As String)
            Me.UpdateClaimDetailsAsync(strSysName, strMessage, dsCoverageRS, dsPresentRS, dsClaimRS, lngClaimNo, lngClaimOccu, datAccDate, blnUpdateCoverage, blnUpdatePresent, blnUpdateHeader, strUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateClaimDetailsAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsCoverageRS As System.Data.DataSet, ByVal dsPresentRS As System.Data.DataSet, ByVal dsClaimRS As System.Data.DataSet, ByVal lngClaimNo As Long, ByVal lngClaimOccu As Long, ByVal datAccDate As Date, ByVal blnUpdateCoverage As Boolean, ByVal blnUpdatePresent As Boolean, ByVal blnUpdateHeader As Boolean, ByVal strUser As String, ByVal userState As Object)
            If (Me.UpdateClaimDetailsOperationCompleted Is Nothing) Then
                Me.UpdateClaimDetailsOperationCompleted = AddressOf Me.OnUpdateClaimDetailsOperationCompleted
            End If
            Me.InvokeAsync("UpdateClaimDetails", New Object() {strSysName, strMessage, dsCoverageRS, dsPresentRS, dsClaimRS, lngClaimNo, lngClaimOccu, datAccDate, blnUpdateCoverage, blnUpdatePresent, blnUpdateHeader, strUser}, Me.UpdateClaimDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateClaimDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateClaimDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateClaimDetailsCompleted(Me, New UpdateClaimDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UpdateMemoPrintDate", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateMemoPrintDate(ByVal strSysName As String, ByRef strMessage As String, ByVal strUser As String, ByVal lngClaimNo As String, ByVal lngOccurNo As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateMemoPrintDate", New Object() {strSysName, strMessage, strUser, lngClaimNo, lngOccurNo})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateMemoPrintDateAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal strUser As String, ByVal lngClaimNo As String, ByVal lngOccurNo As String)
            Me.UpdateMemoPrintDateAsync(strSysName, strMessage, strUser, lngClaimNo, lngOccurNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateMemoPrintDateAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal strUser As String, ByVal lngClaimNo As String, ByVal lngOccurNo As String, ByVal userState As Object)
            If (Me.UpdateMemoPrintDateOperationCompleted Is Nothing) Then
                Me.UpdateMemoPrintDateOperationCompleted = AddressOf Me.OnUpdateMemoPrintDateOperationCompleted
            End If
            Me.InvokeAsync("UpdateMemoPrintDate", New Object() {strSysName, strMessage, strUser, lngClaimNo, lngOccurNo}, Me.UpdateMemoPrintDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateMemoPrintDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateMemoPrintDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateMemoPrintDateCompleted(Me, New UpdateMemoPrintDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UpdateReminderPrintDate", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateReminderPrintDate(ByRef strMessage As String, ByVal rstClaim As System.Data.DataTable, ByVal strfilter As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateReminderPrintDate", New Object() {strMessage, rstClaim, strfilter})
            strMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateReminderPrintDateAsync(ByVal strMessage As String, ByVal rstClaim As System.Data.DataTable, ByVal strfilter As String)
            Me.UpdateReminderPrintDateAsync(strMessage, rstClaim, strfilter, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateReminderPrintDateAsync(ByVal strMessage As String, ByVal rstClaim As System.Data.DataTable, ByVal strfilter As String, ByVal userState As Object)
            If (Me.UpdateReminderPrintDateOperationCompleted Is Nothing) Then
                Me.UpdateReminderPrintDateOperationCompleted = AddressOf Me.OnUpdateReminderPrintDateOperationCompleted
            End If
            Me.InvokeAsync("UpdateReminderPrintDate", New Object() {strMessage, rstClaim, strfilter}, Me.UpdateReminderPrintDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateReminderPrintDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateReminderPrintDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateReminderPrintDateCompleted(Me, New UpdateReminderPrintDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/UpdatePaymentDetails", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdatePaymentDetails(ByVal strSysName As String, ByRef strMessage As String, ByRef dsBenefitRS As System.Data.DataSet, ByRef dsClaimRS As System.Data.DataSet, ByVal blnUpdateBenefit As Boolean, ByVal blnUpdateHeader As Boolean, ByVal strUser As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdatePaymentDetails", New Object() {strSysName, strMessage, dsBenefitRS, dsClaimRS, blnUpdateBenefit, blnUpdateHeader, strUser})
            strMessage = CType(results(1),String)
            dsBenefitRS = CType(results(2),System.Data.DataSet)
            dsClaimRS = CType(results(3),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdatePaymentDetailsAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsBenefitRS As System.Data.DataSet, ByVal dsClaimRS As System.Data.DataSet, ByVal blnUpdateBenefit As Boolean, ByVal blnUpdateHeader As Boolean, ByVal strUser As String)
            Me.UpdatePaymentDetailsAsync(strSysName, strMessage, dsBenefitRS, dsClaimRS, blnUpdateBenefit, blnUpdateHeader, strUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdatePaymentDetailsAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsBenefitRS As System.Data.DataSet, ByVal dsClaimRS As System.Data.DataSet, ByVal blnUpdateBenefit As Boolean, ByVal blnUpdateHeader As Boolean, ByVal strUser As String, ByVal userState As Object)
            If (Me.UpdatePaymentDetailsOperationCompleted Is Nothing) Then
                Me.UpdatePaymentDetailsOperationCompleted = AddressOf Me.OnUpdatePaymentDetailsOperationCompleted
            End If
            Me.InvokeAsync("UpdatePaymentDetails", New Object() {strSysName, strMessage, dsBenefitRS, dsClaimRS, blnUpdateBenefit, blnUpdateHeader, strUser}, Me.UpdatePaymentDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdatePaymentDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdatePaymentDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdatePaymentDetailsCompleted(Me, New UpdatePaymentDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/getClaimProxyLog", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getClaimProxyLog(ByVal strSysName As String, ByRef strMessage As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strFunctId As String, ByVal strPolicy As String, ByVal strType As String, ByVal lngDays As String, ByVal strCurr As String, ByVal lngAmt As String, ByVal strRequestID As String, ByVal strProxyID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("getClaimProxyLog", New Object() {strSysName, strMessage, strUser, lngClaimNo, lngOccurNo, strFunctId, strPolicy, strType, lngDays, strCurr, lngAmt, strRequestID, strProxyID})
            strMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getClaimProxyLogAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strFunctId As String, ByVal strPolicy As String, ByVal strType As String, ByVal lngDays As String, ByVal strCurr As String, ByVal lngAmt As String, ByVal strRequestID As String, ByVal strProxyID As String)
            Me.getClaimProxyLogAsync(strSysName, strMessage, strUser, lngClaimNo, lngOccurNo, strFunctId, strPolicy, strType, lngDays, strCurr, lngAmt, strRequestID, strProxyID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getClaimProxyLogAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal strFunctId As String, ByVal strPolicy As String, ByVal strType As String, ByVal lngDays As String, ByVal strCurr As String, ByVal lngAmt As String, ByVal strRequestID As String, ByVal strProxyID As String, ByVal userState As Object)
            If (Me.getClaimProxyLogOperationCompleted Is Nothing) Then
                Me.getClaimProxyLogOperationCompleted = AddressOf Me.OngetClaimProxyLogOperationCompleted
            End If
            Me.InvokeAsync("getClaimProxyLog", New Object() {strSysName, strMessage, strUser, lngClaimNo, lngOccurNo, strFunctId, strPolicy, strType, lngDays, strCurr, lngAmt, strRequestID, strProxyID}, Me.getClaimProxyLogOperationCompleted, userState)
        End Sub
        
        Private Sub OngetClaimProxyLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.getClaimProxyLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getClaimProxyLogCompleted(Me, New getClaimProxyLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClientHistory", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientHistory(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicy As String, ByVal strActivityCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetClientHistory", New Object() {strSysName, strUser, strPolicy, strActivityCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClientHistoryAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicy As String, ByVal strActivityCode As String)
            Me.GetClientHistoryAsync(strSysName, strUser, strPolicy, strActivityCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClientHistoryAsync(ByVal strSysName As String, ByVal strUser As String, ByVal strPolicy As String, ByVal strActivityCode As String, ByVal userState As Object)
            If (Me.GetClientHistoryOperationCompleted Is Nothing) Then
                Me.GetClientHistoryOperationCompleted = AddressOf Me.OnGetClientHistoryOperationCompleted
            End If
            Me.InvokeAsync("GetClientHistory", New Object() {strSysName, strUser, strPolicy, strActivityCode}, Me.GetClientHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClientHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClientHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClientHistoryCompleted(Me, New GetClientHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetCurrencyCode", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCurrencyCode(ByRef strErrorMessage As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCurrencyCode", New Object() {strErrorMessage})
            strErrorMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCurrencyCodeAsync(ByVal strErrorMessage As String)
            Me.GetCurrencyCodeAsync(strErrorMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCurrencyCodeAsync(ByVal strErrorMessage As String, ByVal userState As Object)
            If (Me.GetCurrencyCodeOperationCompleted Is Nothing) Then
                Me.GetCurrencyCodeOperationCompleted = AddressOf Me.OnGetCurrencyCodeOperationCompleted
            End If
            Me.InvokeAsync("GetCurrencyCode", New Object() {strErrorMessage}, Me.GetCurrencyCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCurrencyCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCurrencyCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCurrencyCodeCompleted(Me, New GetCurrencyCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetDeclineReason", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDeclineReason(ByRef strMessage As String, ByRef dsReturn As System.Data.DataSet, ByVal strCode As String) As Boolean
            Dim results() As Object = Me.Invoke("GetDeclineReason", New Object() {strMessage, dsReturn, strCode})
            strMessage = CType(results(1),String)
            dsReturn = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDeclineReasonAsync(ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal strCode As String)
            Me.GetDeclineReasonAsync(strMessage, dsReturn, strCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDeclineReasonAsync(ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal strCode As String, ByVal userState As Object)
            If (Me.GetDeclineReasonOperationCompleted Is Nothing) Then
                Me.GetDeclineReasonOperationCompleted = AddressOf Me.OnGetDeclineReasonOperationCompleted
            End If
            Me.InvokeAsync("GetDeclineReason", New Object() {strMessage, dsReturn, strCode}, Me.GetDeclineReasonOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDeclineReasonOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDeclineReasonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDeclineReasonCompleted(Me, New GetDeclineReasonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetHospFurClaim", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetHospFurClaim(ByVal strSysName As String, ByRef strMessage As String, ByRef dsReturn As System.Data.DataSet, ByVal strUser As String, ByVal inHspDate As Date, ByVal outHspDate As Date, ByVal strCode As String, ByVal strInsuredID As String) As Boolean
            Dim results() As Object = Me.Invoke("GetHospFurClaim", New Object() {strSysName, strMessage, dsReturn, strUser, inHspDate, outHspDate, strCode, strInsuredID})
            strMessage = CType(results(1),String)
            dsReturn = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetHospFurClaimAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal strUser As String, ByVal inHspDate As Date, ByVal outHspDate As Date, ByVal strCode As String, ByVal strInsuredID As String)
            Me.GetHospFurClaimAsync(strSysName, strMessage, dsReturn, strUser, inHspDate, outHspDate, strCode, strInsuredID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetHospFurClaimAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsReturn As System.Data.DataSet, ByVal strUser As String, ByVal inHspDate As Date, ByVal outHspDate As Date, ByVal strCode As String, ByVal strInsuredID As String, ByVal userState As Object)
            If (Me.GetHospFurClaimOperationCompleted Is Nothing) Then
                Me.GetHospFurClaimOperationCompleted = AddressOf Me.OnGetHospFurClaimOperationCompleted
            End If
            Me.InvokeAsync("GetHospFurClaim", New Object() {strSysName, strMessage, dsReturn, strUser, inHspDate, outHspDate, strCode, strInsuredID}, Me.GetHospFurClaimOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetHospFurClaimOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetHospFurClaimCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetHospFurClaimCompleted(Me, New GetHospFurClaimCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetHospitalType", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetHospitalType(ByRef strMessage As String, ByRef dsType As System.Data.DataSet, ByVal strType As String) As Boolean
            Dim results() As Object = Me.Invoke("GetHospitalType", New Object() {strMessage, dsType, strType})
            strMessage = CType(results(1),String)
            dsType = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetHospitalTypeAsync(ByVal strMessage As String, ByVal dsType As System.Data.DataSet, ByVal strType As String)
            Me.GetHospitalTypeAsync(strMessage, dsType, strType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetHospitalTypeAsync(ByVal strMessage As String, ByVal dsType As System.Data.DataSet, ByVal strType As String, ByVal userState As Object)
            If (Me.GetHospitalTypeOperationCompleted Is Nothing) Then
                Me.GetHospitalTypeOperationCompleted = AddressOf Me.OnGetHospitalTypeOperationCompleted
            End If
            Me.InvokeAsync("GetHospitalType", New Object() {strMessage, dsType, strType}, Me.GetHospitalTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetHospitalTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetHospitalTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetHospitalTypeCompleted(Me, New GetHospitalTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetLOA", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLOA(ByRef strMessage As String, ByRef dsType As System.Data.DataSet) As Boolean
            Dim results() As Object = Me.Invoke("GetLOA", New Object() {strMessage, dsType})
            strMessage = CType(results(1),String)
            dsType = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLOAAsync(ByVal strMessage As String, ByVal dsType As System.Data.DataSet)
            Me.GetLOAAsync(strMessage, dsType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLOAAsync(ByVal strMessage As String, ByVal dsType As System.Data.DataSet, ByVal userState As Object)
            If (Me.GetLOAOperationCompleted Is Nothing) Then
                Me.GetLOAOperationCompleted = AddressOf Me.OnGetLOAOperationCompleted
            End If
            Me.InvokeAsync("GetLOA", New Object() {strMessage, dsType}, Me.GetLOAOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLOAOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLOACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLOACompleted(Me, New GetLOACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetIllnessCode", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIllnessCode(ByVal sCode As String, ByVal sStatus As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetIllnessCode", New Object() {sCode, sStatus})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIllnessCodeAsync(ByVal sCode As String, ByVal sStatus As String)
            Me.GetIllnessCodeAsync(sCode, sStatus, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIllnessCodeAsync(ByVal sCode As String, ByVal sStatus As String, ByVal userState As Object)
            If (Me.GetIllnessCodeOperationCompleted Is Nothing) Then
                Me.GetIllnessCodeOperationCompleted = AddressOf Me.OnGetIllnessCodeOperationCompleted
            End If
            Me.InvokeAsync("GetIllnessCode", New Object() {sCode, sStatus}, Me.GetIllnessCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIllnessCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIllnessCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIllnessCodeCompleted(Me, New GetIllnessCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetClaimType", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClaimType(ByVal sType As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetClaimType", New Object() {sType})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClaimTypeAsync(ByVal sType As String)
            Me.GetClaimTypeAsync(sType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClaimTypeAsync(ByVal sType As String, ByVal userState As Object)
            If (Me.GetClaimTypeOperationCompleted Is Nothing) Then
                Me.GetClaimTypeOperationCompleted = AddressOf Me.OnGetClaimTypeOperationCompleted
            End If
            Me.InvokeAsync("GetClaimType", New Object() {sType}, Me.GetClaimTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClaimTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClaimTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClaimTypeCompleted(Me, New GetClaimTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetInsuredByPolicy", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInsuredByPolicy(ByVal strPolicyNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetInsuredByPolicy", New Object() {strPolicyNo})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInsuredByPolicyAsync(ByVal strPolicyNo As String)
            Me.GetInsuredByPolicyAsync(strPolicyNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInsuredByPolicyAsync(ByVal strPolicyNo As String, ByVal userState As Object)
            If (Me.GetInsuredByPolicyOperationCompleted Is Nothing) Then
                Me.GetInsuredByPolicyOperationCompleted = AddressOf Me.OnGetInsuredByPolicyOperationCompleted
            End If
            Me.InvokeAsync("GetInsuredByPolicy", New Object() {strPolicyNo}, Me.GetInsuredByPolicyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInsuredByPolicyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInsuredByPolicyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInsuredByPolicyCompleted(Me, New GetInsuredByPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetCoverageStatus", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCoverageStatus(ByVal strCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCoverageStatus", New Object() {strCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCoverageStatusAsync(ByVal strCode As String)
            Me.GetCoverageStatusAsync(strCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCoverageStatusAsync(ByVal strCode As String, ByVal userState As Object)
            If (Me.GetCoverageStatusOperationCompleted Is Nothing) Then
                Me.GetCoverageStatusOperationCompleted = AddressOf Me.OnGetCoverageStatusOperationCompleted
            End If
            Me.InvokeAsync("GetCoverageStatus", New Object() {strCode}, Me.GetCoverageStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCoverageStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCoverageStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCoverageStatusCompleted(Me, New GetCoverageStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetDocument", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDocument(ByVal strSysName As String, ByRef strMessage As String, ByRef dsRs As System.Data.DataSet, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long) As Boolean
            Dim results() As Object = Me.Invoke("GetDocument", New Object() {strSysName, strMessage, dsRs, strUser, lngClaimNo, lngOccurNo})
            strMessage = CType(results(1),String)
            dsRs = CType(results(2),System.Data.DataSet)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDocumentAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsRs As System.Data.DataSet, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long)
            Me.GetDocumentAsync(strSysName, strMessage, dsRs, strUser, lngClaimNo, lngOccurNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDocumentAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal dsRs As System.Data.DataSet, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccurNo As Long, ByVal userState As Object)
            If (Me.GetDocumentOperationCompleted Is Nothing) Then
                Me.GetDocumentOperationCompleted = AddressOf Me.OnGetDocumentOperationCompleted
            End If
            Me.InvokeAsync("GetDocument", New Object() {strSysName, strMessage, dsRs, strUser, lngClaimNo, lngOccurNo}, Me.GetDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDocumentCompleted(Me, New GetDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetLetterType", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLetterType(ByVal strSysName As String, ByRef strMessage As String, ByVal strUser As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetLetterType", New Object() {strSysName, strMessage, strUser})
            strMessage = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLetterTypeAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal strUser As String)
            Me.GetLetterTypeAsync(strSysName, strMessage, strUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLetterTypeAsync(ByVal strSysName As String, ByVal strMessage As String, ByVal strUser As String, ByVal userState As Object)
            If (Me.GetLetterTypeOperationCompleted Is Nothing) Then
                Me.GetLetterTypeOperationCompleted = AddressOf Me.OnGetLetterTypeOperationCompleted
            End If
            Me.InvokeAsync("GetLetterType", New Object() {strSysName, strMessage, strUser}, Me.GetLetterTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLetterTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLetterTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLetterTypeCompleted(Me, New GetLetterTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("MQSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapHeaderAttribute("DBSOAPHeaderValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mcs.ing.com.hk/GetLogMessageByNo", RequestNamespace:="http://mcs.ing.com.hk/", ResponseNamespace:="http://mcs.ing.com.hk/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLogMessageByNo(ByVal strSysName As String, ByVal strUser As String, ByRef lngClaimNo As Long, ByRef lngOccur As Long, ByRef strMessageNo As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetLogMessageByNo", New Object() {strSysName, strUser, lngClaimNo, lngOccur, strMessageNo})
            lngClaimNo = CType(results(1),Long)
            lngOccur = CType(results(2),Long)
            strMessageNo = CType(results(3),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLogMessageByNoAsync(ByVal strSysName As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccur As Long, ByVal strMessageNo As String)
            Me.GetLogMessageByNoAsync(strSysName, strUser, lngClaimNo, lngOccur, strMessageNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLogMessageByNoAsync(ByVal strSysName As String, ByVal strUser As String, ByVal lngClaimNo As Long, ByVal lngOccur As Long, ByVal strMessageNo As String, ByVal userState As Object)
            If (Me.GetLogMessageByNoOperationCompleted Is Nothing) Then
                Me.GetLogMessageByNoOperationCompleted = AddressOf Me.OnGetLogMessageByNoOperationCompleted
            End If
            Me.InvokeAsync("GetLogMessageByNo", New Object() {strSysName, strUser, lngClaimNo, lngOccur, strMessageNo}, Me.GetLogMessageByNoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLogMessageByNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLogMessageByNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLogMessageByNoCompleted(Me, New GetLogMessageByNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://mcs.ing.com.hk/"),  _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="http://mcs.ing.com.hk/", IsNullable:=false)>  _
    Partial Public Class ING_SOAPHeader
        Inherits System.Web.Services.Protocols.SoapHeader
        
        Private userField As String
        
        Private machineIDField As String
        
        Private anyAttrField() As System.Xml.XmlAttribute
        
        '''<remarks/>
        Public Property User() As String
            Get
                Return Me.userField
            End Get
            Set
                Me.userField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MachineID() As String
            Get
                Return Me.machineIDField
            End Get
            Set
                Me.machineIDField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyAttributeAttribute()>  _
        Public Property AnyAttr() As System.Xml.XmlAttribute()
            Get
                Return Me.anyAttrField
            End Get
            Set
                Me.anyAttrField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://mcs.ing.com.hk/")>  _
    Partial Public Class ComHeader
        
        Private projectAliasField As String
        
        Private connectionAliasField As String
        
        Private userTypeField As String
        
        Private environmentUseField As String
        
        Private companyIDField As String
        
        Private userIDField As String
        
        Private machineIDField As String
        
        Private versionNoField As String
        
        Private libraryNameField As String
        
        Private useLocalWSField As String
        
        '''<remarks/>
        Public Property ProjectAlias() As String
            Get
                Return Me.projectAliasField
            End Get
            Set
                Me.projectAliasField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ConnectionAlias() As String
            Get
                Return Me.connectionAliasField
            End Get
            Set
                Me.connectionAliasField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserType() As String
            Get
                Return Me.userTypeField
            End Get
            Set
                Me.userTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EnvironmentUse() As String
            Get
                Return Me.environmentUseField
            End Get
            Set
                Me.environmentUseField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompanyID() As String
            Get
                Return Me.companyIDField
            End Get
            Set
                Me.companyIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As String
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MachineID() As String
            Get
                Return Me.machineIDField
            End Get
            Set
                Me.machineIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property VersionNo() As String
            Get
                Return Me.versionNoField
            End Get
            Set
                Me.versionNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LibraryName() As String
            Get
                Return Me.libraryNameField
            End Get
            Set
                Me.libraryNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UseLocalWS() As String
            Get
                Return Me.useLocalWSField
            End Get
            Set
                Me.useLocalWSField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://mcs.ing.com.hk/")>  _
    Partial Public Class MQHeader
        
        Private queueManagerField As String
        
        Private remoteQueueField As String
        
        Private replyToQueueField As String
        
        Private localQueueField As String
        
        Private timeoutField As Integer
        
        Private projectAliasField As String
        
        Private connectionAliasField As String
        
        Private userTypeField As String
        
        Private environmentUseField As String
        
        Private companyIDField As String
        
        Private userIDField As String
        
        Private machineIDField As String
        
        Private versionNoField As String
        
        Private libraryNameField As String
        
        Private useLocalWSField As String
        
        '''<remarks/>
        Public Property QueueManager() As String
            Get
                Return Me.queueManagerField
            End Get
            Set
                Me.queueManagerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RemoteQueue() As String
            Get
                Return Me.remoteQueueField
            End Get
            Set
                Me.remoteQueueField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ReplyToQueue() As String
            Get
                Return Me.replyToQueueField
            End Get
            Set
                Me.replyToQueueField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LocalQueue() As String
            Get
                Return Me.localQueueField
            End Get
            Set
                Me.localQueueField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Timeout() As Integer
            Get
                Return Me.timeoutField
            End Get
            Set
                Me.timeoutField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectAlias() As String
            Get
                Return Me.projectAliasField
            End Get
            Set
                Me.projectAliasField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ConnectionAlias() As String
            Get
                Return Me.connectionAliasField
            End Get
            Set
                Me.connectionAliasField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserType() As String
            Get
                Return Me.userTypeField
            End Get
            Set
                Me.userTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EnvironmentUse() As String
            Get
                Return Me.environmentUseField
            End Get
            Set
                Me.environmentUseField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompanyID() As String
            Get
                Return Me.companyIDField
            End Get
            Set
                Me.companyIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As String
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MachineID() As String
            Get
                Return Me.machineIDField
            End Get
            Set
                Me.machineIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property VersionNo() As String
            Get
                Return Me.versionNoField
            End Get
            Set
                Me.versionNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LibraryName() As String
            Get
                Return Me.libraryNameField
            End Get
            Set
                Me.libraryNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UseLocalWS() As String
            Get
                Return Me.useLocalWSField
            End Get
            Set
                Me.useLocalWSField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIncludeAttribute(GetType(LASDataAccess)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(MCSBase)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(McsClsAuditTrail)),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://mcs.ing.com.hk/")>  _
    Partial Public MustInherit Class DataAccessBase
    End Class
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIncludeAttribute(GetType(MCSBase)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(McsClsAuditTrail)),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://mcs.ing.com.hk/")>  _
    Partial Public Class LASDataAccess
        Inherits DataAccessBase
        
        Private mQQueuesHeaderField As MQHeader
        
        Private dBHeaderField As ComHeader
        
        '''<remarks/>
        Public Property MQQueuesHeader() As MQHeader
            Get
                Return Me.mQQueuesHeaderField
            End Get
            Set
                Me.mQQueuesHeaderField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DBHeader() As ComHeader
            Get
                Return Me.dBHeaderField
            End Get
            Set
                Me.dBHeaderField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.Xml.Serialization.XmlIncludeAttribute(GetType(McsClsAuditTrail)),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://mcs.ing.com.hk/")>  _
    Partial Public MustInherit Class MCSBase
        Inherits LASDataAccess
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://mcs.ing.com.hk/")>  _
    Partial Public Class McsClsAuditTrail
        Inherits MCSBase
        
        Private strSourceField As String
        
        Private strPolicyNoField As String
        
        Private strClaimNoField As String
        
        Private strInsuredNameField As String
        
        Private strPolicyHolderNameField As String
        
        Private strOccurNoField As String
        
        Private strEventNameField As String
        
        Private strUserIDField As String
        
        Private strRemarksField As String
        
        '''<remarks/>
        Public Property strSource() As String
            Get
                Return Me.strSourceField
            End Get
            Set
                Me.strSourceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strPolicyNo() As String
            Get
                Return Me.strPolicyNoField
            End Get
            Set
                Me.strPolicyNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strClaimNo() As String
            Get
                Return Me.strClaimNoField
            End Get
            Set
                Me.strClaimNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strInsuredName() As String
            Get
                Return Me.strInsuredNameField
            End Get
            Set
                Me.strInsuredNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strPolicyHolderName() As String
            Get
                Return Me.strPolicyHolderNameField
            End Get
            Set
                Me.strPolicyHolderNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strOccurNo() As String
            Get
                Return Me.strOccurNoField
            End Get
            Set
                Me.strOccurNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strEventName() As String
            Get
                Return Me.strEventNameField
            End Get
            Set
                Me.strEventNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strUserID() As String
            Get
                Return Me.strUserIDField
            End Get
            Set
                Me.strUserIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property strRemarks() As String
            Get
                Return Me.strRemarksField
            End Get
            Set
                Me.strRemarksField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://mcs.ing.com.hk/"),  _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="http://mcs.ing.com.hk/", IsNullable:=false)>  _
    Partial Public Class MQSOAPHeader
        Inherits System.Web.Services.Protocols.SoapHeader
        
        Private queueManagerField As String
        
        Private remoteQueueField As String
        
        Private replyToQueueField As String
        
        Private localQueueField As String
        
        Private timeoutField As Integer
        
        Private projectAliasField As String
        
        Private connectionAliasField As String
        
        Private userTypeField As String
        
        Private environmentUseField As String
        
        Private companyIDField As String
        
        Private userIDField As String
        
        Private machineIDField As String
        
        Private versionNoField As String
        
        Private libraryNameField As String
        
        Private anyAttrField() As System.Xml.XmlAttribute
        
        '''<remarks/>
        Public Property QueueManager() As String
            Get
                Return Me.queueManagerField
            End Get
            Set
                Me.queueManagerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RemoteQueue() As String
            Get
                Return Me.remoteQueueField
            End Get
            Set
                Me.remoteQueueField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ReplyToQueue() As String
            Get
                Return Me.replyToQueueField
            End Get
            Set
                Me.replyToQueueField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LocalQueue() As String
            Get
                Return Me.localQueueField
            End Get
            Set
                Me.localQueueField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Timeout() As Integer
            Get
                Return Me.timeoutField
            End Get
            Set
                Me.timeoutField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProjectAlias() As String
            Get
                Return Me.projectAliasField
            End Get
            Set
                Me.projectAliasField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ConnectionAlias() As String
            Get
                Return Me.connectionAliasField
            End Get
            Set
                Me.connectionAliasField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserType() As String
            Get
                Return Me.userTypeField
            End Get
            Set
                Me.userTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EnvironmentUse() As String
            Get
                Return Me.environmentUseField
            End Get
            Set
                Me.environmentUseField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompanyID() As String
            Get
                Return Me.companyIDField
            End Get
            Set
                Me.companyIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserID() As String
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MachineID() As String
            Get
                Return Me.machineIDField
            End Get
            Set
                Me.machineIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property VersionNo() As String
            Get
                Return Me.versionNoField
            End Get
            Set
                Me.versionNoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LibraryName() As String
            Get
                Return Me.libraryNameField
            End Get
            Set
                Me.libraryNameField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyAttributeAttribute()>  _
        Public Property AnyAttr() As System.Xml.XmlAttribute()
            Get
                Return Me.anyAttrField
            End Get
            Set
                Me.anyAttrField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://mcs.ing.com.hk/"),  _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="http://mcs.ing.com.hk/", IsNullable:=false)>  _
    Partial Public Class DBSOAPHeader
        Inherits System.Web.Services.Protocols.SoapHeader
        
        Private projectField As String
        
        Private connectionAliasField As String
        
        Private userField As String
        
        Private userTypeField As String
        
        Private envField As String
        
        Private compField As String
        
        Private cIWProjectField As String
        
        Private cIWConnectionAliasField As String
        
        Private cIWUserField As String
        
        Private cIWEnvField As String
        
        Private cIWCompField As String
        
        Private anyAttrField() As System.Xml.XmlAttribute
        
        '''<remarks/>
        Public Property Project() As String
            Get
                Return Me.projectField
            End Get
            Set
                Me.projectField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ConnectionAlias() As String
            Get
                Return Me.connectionAliasField
            End Get
            Set
                Me.connectionAliasField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property User() As String
            Get
                Return Me.userField
            End Get
            Set
                Me.userField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UserType() As String
            Get
                Return Me.userTypeField
            End Get
            Set
                Me.userTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Env() As String
            Get
                Return Me.envField
            End Get
            Set
                Me.envField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Comp() As String
            Get
                Return Me.compField
            End Get
            Set
                Me.compField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CIWProject() As String
            Get
                Return Me.cIWProjectField
            End Get
            Set
                Me.cIWProjectField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CIWConnectionAlias() As String
            Get
                Return Me.cIWConnectionAliasField
            End Get
            Set
                Me.cIWConnectionAliasField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CIWUser() As String
            Get
                Return Me.cIWUserField
            End Get
            Set
                Me.cIWUserField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CIWEnv() As String
            Get
                Return Me.cIWEnvField
            End Get
            Set
                Me.cIWEnvField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CIWComp() As String
            Get
                Return Me.cIWCompField
            End Get
            Set
                Me.cIWCompField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyAttributeAttribute()>  _
        Public Property AnyAttr() As System.Xml.XmlAttribute()
            Get
                Return Me.anyAttrField
            End Get
            Set
                Me.anyAttrField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub PrintSTPRequestByLetterRequestIDCompletedEventHandler(ByVal sender As Object, ByVal e As PrintSTPRequestByLetterRequestIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintSTPRequestByLetterRequestIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property stackTrace() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetOracleGLVersionNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetOracleGLVersionNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOracleGLVersionNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property versionNo() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateOracleGLVersionNoCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateOracleGLVersionNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateOracleGLVersionNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimsMarkInRecordsByMarkInIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimsMarkInRecordsByMarkInIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimsMarkInRecordsByMarkInIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtRs() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMcsClaimParamCompletedEventHandler(ByVal sender As Object, ByVal e As GetMcsClaimParamCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMcsClaimParamCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtRs() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpsertMcsClaimParamCompletedEventHandler(ByVal sender As Object, ByVal e As UpsertMcsClaimParamCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpsertMcsClaimParamCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SendEmailByCCMSCompletedEventHandler(ByVal sender As Object, ByVal e As SendEmailByCCMSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendEmailByCCMSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strStackTrace() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SendEmailWithAttachmentByCCMSCompletedEventHandler(ByVal sender As Object, ByVal e As SendEmailWithAttachmentByCCMSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendEmailWithAttachmentByCCMSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strStackTrace() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub isTheOneStandardByClaimNoCompletedEventHandler(ByVal sender As Object, ByVal e As isTheOneStandardByClaimNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isTheOneStandardByClaimNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub IsAMCClaimValidCompletedEventHandler(ByVal sender As Object, ByVal e As IsAMCClaimValidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsAMCClaimValidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property blnIncDate() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property blnRemainAmt() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMcsFPSDailyTotalCompletedEventHandler(ByVal sender As Object, ByVal e As GetMcsFPSDailyTotalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMcsFPSDailyTotalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property totalDailyAmount() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Double)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMcsFPSLastCallHSBCDateCompletedEventHandler(ByVal sender As Object, ByVal e As GetMcsFPSLastCallHSBCDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMcsFPSLastCallHSBCDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property LastCallAPIDate() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Date)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCIWSysValCompletedEventHandler(ByVal sender As Object, ByVal e As GetCIWSysValCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCIWSysValCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strVal() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFPSSettlementCompletedEventHandler(ByVal sender As Object, ByVal e As GetFPSSettlementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFPSSettlementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetEmailSettingCompletedEventHandler(ByVal sender As Object, ByVal e As GetEmailSettingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEmailSettingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strVal() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strError() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CreateAppLogCompletedEventHandler(ByVal sender As Object, ByVal e As CreateAppLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateAppLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPresentationSettingCompletedEventHandler(ByVal sender As Object, ByVal e As GetPresentationSettingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPresentationSettingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimEligibleBenefitCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimEligibleBenefitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimEligibleBenefitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtBenefit() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetSettlementDetailsChineseCompletedEventHandler(ByVal sender As Object, ByVal e As GetSettlementDetailsChineseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSettlementDetailsChineseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtLetterDetail() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimPaymentCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimPaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimPaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtPayment() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetDeductibleClaimPresentationCompletedEventHandler(ByVal sender As Object, ByVal e As GetDeductibleClaimPresentationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDeductibleClaimPresentationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtPresentItems() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property decActualDeductible() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Decimal)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CarryForwardClaimCompletedEventHandler(ByVal sender As Object, ByVal e As CarryForwardClaimCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CarryForwardClaimCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property newClaimNo() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property newClaimOcc() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetHighEndMedicalLifeTimePaidAmountCompletedEventHandler(ByVal sender As Object, ByVal e As GetHighEndMedicalLifeTimePaidAmountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetHighEndMedicalLifeTimePaidAmountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property paidCurrency() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property paidAmt() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Decimal)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPlaceOfHospitalCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetPlaceOfHospitalCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPlaceOfHospitalCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetOperationCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetOperationCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOperationCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateSurValueDiffCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateSurValueDiffCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateSurValueDiffCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Remarkmsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errstr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCapsilSurValueCompletedEventHandler(ByVal sender As Object, ByVal e As GetCapsilSurValueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCapsilSurValueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property SurValue() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Decimal)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errstr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCompanyIDbyPolicyCompletedEventHandler(ByVal sender As Object, ByVal e As GetCompanyIDbyPolicyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCompanyIDbyPolicyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property companyID() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMcstransactionDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As GetMcstransactionDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMcstransactionDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateICClaimAmountCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateICClaimAmountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateICClaimAmountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPreClaimAmtCompletedEventHandler(ByVal sender As Object, ByVal e As GetPreClaimAmtCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPreClaimAmtCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property preClaimAmt() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Decimal)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrStr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckCapsilPlanCompletedEventHandler(ByVal sender As Object, ByVal e As CheckCapsilPlanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckCapsilPlanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property StrErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetNotMsgWordingCompletedEventHandler(ByVal sender As Object, ByVal e As GetNotMsgWordingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNotMsgWordingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsResult() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub InsertNotificationCompletedEventHandler(ByVal sender As Object, ByVal e As InsertNotificationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertNotificationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetSettledClaimsWithFpsHistCompletedEventHandler(ByVal sender As Object, ByVal e As GetSettledClaimsWithFpsHistCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSettledClaimsWithFpsHistCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsResult() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub FPSBatchVerifyCompletedEventHandler(ByVal sender As Object, ByVal e As FPSBatchVerifyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FPSBatchVerifyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errstr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFPSMaintCompletedEventHandler(ByVal sender As Object, ByVal e As GetFPSMaintCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFPSMaintCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property FPSMaintValue() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errstr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property lastUpdateDate() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property lastUpdateUser() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SetFPSMaintCompletedEventHandler(ByVal sender As Object, ByVal e As SetFPSMaintCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetFPSMaintCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property FPSMaintValue() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errstr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub FPSDataFeedSetProcessStageCompletedEventHandler(ByVal sender As Object, ByVal e As FPSDataFeedSetProcessStageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FPSDataFeedSetProcessStageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub FPSDataFeedGetProcessStageCompletedEventHandler(ByVal sender As Object, ByVal e As FPSDataFeedGetProcessStageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FPSDataFeedGetProcessStageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub FPSDataFeedProcessCompletedEventHandler(ByVal sender As Object, ByVal e As FPSDataFeedProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FPSDataFeedProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddMessageCompletedEventHandler(ByVal sender As Object, ByVal e As AddMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub FPSFINReportProcessCompletedEventHandler(ByVal sender As Object, ByVal e As FPSFINReportProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FPSFINReportProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFPSPaymentSettlementCompletedEventHandler(ByVal sender As Object, ByVal e As GetFPSPaymentSettlementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFPSPaymentSettlementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFPSPaymentRejectCompletedEventHandler(ByVal sender As Object, ByVal e As GetFPSPaymentRejectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFPSPaymentRejectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPrintFPSPaymentReverseCompletedEventHandler(ByVal sender As Object, ByVal e As GetPrintFPSPaymentReverseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPrintFPSPaymentReverseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimsAuditTrailDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimsAuditTrailDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimsAuditTrailDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strWherePhase() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveAuditTrailCompletedEventHandler(ByVal sender As Object, ByVal e As SaveAuditTrailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveAuditTrailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub PrintClaimsAuditTrailReportCompletedEventHandler(ByVal sender As Object, ByVal e As PrintClaimsAuditTrailReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintClaimsAuditTrailReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strWherePhase() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAuditClaimReportCompletedEventHandler(ByVal sender As Object, ByVal e As GetAuditClaimReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAuditClaimReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAuditEventNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetAuditEventNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAuditEventNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub NeedRefreshClaimPolicyInfoCompletedEventHandler(ByVal sender As Object, ByVal e As NeedRefreshClaimPolicyInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NeedRefreshClaimPolicyInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtClaimNoList() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CapConvSpecialHandleCompletedEventHandler(ByVal sender As Object, ByVal e As CapConvSpecialHandleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CapConvSpecialHandleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub IsCapsilConvertPolicyCompletedEventHandler(ByVal sender As Object, ByVal e As IsCapsilConvertPolicyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsCapsilConvertPolicyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimPolicyNMappingCAPPOLCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimPolicyNMappingCAPPOLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimPolicyNMappingCAPPOLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckPolicyDateValueNStatusCompletedEventHandler(ByVal sender As Object, ByVal e As CheckPolicyDateValueNStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckPolicyDateValueNStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPolicyHistoryForAggregationCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyHistoryForAggregationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyHistoryForAggregationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtCalTotalPerBenefit() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAggregateMasterCompletedEventHandler(ByVal sender As Object, ByVal e As GetAggregateMasterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAggregateMasterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtAggregateMaster() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAggregateDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetAggregateDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAggregateDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetBenefitValidateRelateCompletedEventHandler(ByVal sender As Object, ByVal e As GetBenefitValidateRelateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBenefitValidateRelateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtBenefitValidateRelate() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetBenefitRelateCompletedEventHandler(ByVal sender As Object, ByVal e As GetBenefitRelateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBenefitRelateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtBenefitRelate() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateClaimPaymentCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateClaimPaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateClaimPaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsPayment() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetRCSRegisterCompletedEventHandler(ByVal sender As Object, ByVal e As GetRCSRegisterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRCSRegisterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub RCSClaimRegisterCompletedEventHandler(ByVal sender As Object, ByVal e As RCSClaimRegisterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RCSClaimRegisterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsErrRs() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsLogRs() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property claimNo() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property claimOccur() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property clmStatus() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(6),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTranExclusionCompletedEventHandler(ByVal sender As Object, ByVal e As GetTranExclusionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTranExclusionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsErrRs() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsLogRs() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtTransation() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtSpecialExclusion() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub RCSClaimApprovalCompletedEventHandler(ByVal sender As Object, ByVal e As RCSClaimApprovalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RCSClaimApprovalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub RcsGenSettlementLetterCompletedEventHandler(ByVal sender As Object, ByVal e As RcsGenSettlementLetterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RcsGenSettlementLetterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property returnMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub RCSClaimReversalCompletedEventHandler(ByVal sender As Object, ByVal e As RCSClaimReversalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RCSClaimReversalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property returnMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMcsDeclineEmailItemsCompletedEventHandler(ByVal sender As Object, ByVal e As GetMcsDeclineEmailItemsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMcsDeclineEmailItemsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddMcsDeclineEmailLogCompletedEventHandler(ByVal sender As Object, ByVal e As AddMcsDeclineEmailLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddMcsDeclineEmailLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub IsValidConditionCompletedEventHandler(ByVal sender As Object, ByVal e As IsValidConditionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsValidConditionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetACFBatchIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetACFBatchIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetACFBatchIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtBatch() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateACFBatchIDCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateACFBatchIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateACFBatchIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub RCSBookClaim2BECompletedEventHandler(ByVal sender As Object, ByVal e As RCSBookClaim2BECompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RCSBookClaim2BECompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRCSClaim() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFraudPreventionListCompletedEventHandler(ByVal sender As Object, ByVal e As GetFraudPreventionListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFraudPreventionListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsResult() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFraudPreventionInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetFraudPreventionInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFraudPreventionInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsResult() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveFraudPreventionLogCompletedEventHandler(ByVal sender As Object, ByVal e As SaveFraudPreventionLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveFraudPreventionLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateFraudPreventionLogCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateFraudPreventionLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateFraudPreventionLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ReactivatePaymentCompletedEventHandler(ByVal sender As Object, ByVal e As ReactivatePaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReactivatePaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateClaimPaidTermCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateClaimPaidTermCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateClaimPaidTermCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property iTransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dblFundVal() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsSur() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimPaidTermDataTableCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimPaidTermDataTableCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimPaidTermDataTableCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReceData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CreateClaimPaidTermCompletedEventHandler(ByVal sender As Object, ByVal e As CreateClaimPaidTermCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateClaimPaidTermCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property iSurrReqTransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property iValHistTransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateClaimPaidTermStatusCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateClaimPaidTermStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateClaimPaidTermStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property iTransID() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimPaidTermQueueCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimPaidTermQueueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimPaidTermQueueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPolicyValueEnqCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyValueEnqCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyValueEnqCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CreatePosSurrReqCompletedEventHandler(ByVal sender As Object, ByVal e As CreatePosSurrReqCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreatePosSurrReqCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetSavingABalCompletedEventHandler(ByVal sender As Object, ByVal e As GetSavingABalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSavingABalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPayeeClaimPaymentCompletedEventHandler(ByVal sender As Object, ByVal e As GetPayeeClaimPaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPayeeClaimPaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateCLTLetterPrintStatusCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getLAClientNoCompletedEventHandler(ByVal sender As Object, ByVal e As getLAClientNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getLAClientNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property sLAClientNo_Client() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckIsPaidAmtEligible2CompletedEventHandler(ByVal sender As Object, ByVal e As CheckIsPaidAmtEligible2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckIsPaidAmtEligible2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property decElgBal() As Decimal
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Decimal)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimPaidTermQueueByPolicyCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimPaidTermQueueByPolicyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimPaidTermQueueByPolicyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetChequeByPaymentNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetChequeByPaymentNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetChequeByPaymentNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GenerateSettlementLetterCompletedEventHandler(ByVal sender As Object, ByVal e As GenerateSettlementLetterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GenerateSettlementLetterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtDetails() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CreateSettlementCCMRequestCompletedEventHandler(ByVal sender As Object, ByVal e As CreateSettlementCCMRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateSettlementCCMRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateUserAmountLimitCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateUserAmountLimitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateUserAmountLimitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAmountLimitnCompletedEventHandler(ByVal sender As Object, ByVal e As GetAmountLimitnCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAmountLimitnCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTopActAgcyClaimSummaryCompletedEventHandler(ByVal sender As Object, ByVal e As GetTopActAgcyClaimSummaryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTopActAgcyClaimSummaryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReport() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPendingClaimCompletedEventHandler(ByVal sender As Object, ByVal e As GetPendingClaimCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPendingClaimCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimExpensesAnalysisCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimExpensesAnalysisCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimExpensesAnalysisCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAccessorProductivityCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccessorProductivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccessorProductivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetDeclineExgratiaReasonAnalysisCompletedEventHandler(ByVal sender As Object, ByVal e As GetDeclineExgratiaReasonAnalysisCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDeclineExgratiaReasonAnalysisCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetChequePaymentSummaryCompletedEventHandler(ByVal sender As Object, ByVal e As GetChequePaymentSummaryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetChequePaymentSummaryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTurnaroundTimeAnalysisCompletedEventHandler(ByVal sender As Object, ByVal e As GetTurnaroundTimeAnalysisCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTurnaroundTimeAnalysisCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTopAgentSummaryPaymentCompletedEventHandler(ByVal sender As Object, ByVal e As GetTopAgentSummaryPaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTopAgentSummaryPaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTopAgentSummarySubmissionCompletedEventHandler(ByVal sender As Object, ByVal e As GetTopAgentSummarySubmissionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTopAgentSummarySubmissionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetSystemChequeSettlementCompletedEventHandler(ByVal sender As Object, ByVal e As GetSystemChequeSettlementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSystemChequeSettlementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Get711SettlementCompletedEventHandler(ByVal sender As Object, ByVal e As Get711SettlementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get711SettlementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetIscSettlementCompletedEventHandler(ByVal sender As Object, ByVal e As GetIscSettlementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIscSettlementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetReverseSystemChequeSettlementCompletedEventHandler(ByVal sender As Object, ByVal e As GetReverseSystemChequeSettlementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReverseSystemChequeSettlementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetForcibleErrorCompletedEventHandler(ByVal sender As Object, ByVal e As GetForcibleErrorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetForcibleErrorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimPaymentSummaryCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimPaymentSummaryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimPaymentSummaryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetInsuredAccumulatedPaidCompletedEventHandler(ByVal sender As Object, ByVal e As GetInsuredAccumulatedPaidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInsuredAccumulatedPaidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtAccumlatedPaid() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateCodeValueCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCorrespondenceLetterListCompletedEventHandler(ByVal sender As Object, ByVal e As GetCorrespondenceLetterListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCorrespondenceLetterListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsLetterList() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCorrespondenceRecipientListCompletedEventHandler(ByVal sender As Object, ByVal e As GetCorrespondenceRecipientListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCorrespondenceRecipientListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRecipientList() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCorrespondenceHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As GetCorrespondenceHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCorrespondenceHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property claimOccur() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsCorrespondenceHistory() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub BatchSaveCorrespondenceHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As BatchSaveCorrespondenceHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BatchSaveCorrespondenceHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsCorrespondenceHistory() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCorrespondenceRecipientCompletedEventHandler(ByVal sender As Object, ByVal e As GetCorrespondenceRecipientCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCorrespondenceRecipientCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRecipient() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCorrespondenceRecipientByUUIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetCorrespondenceRecipientByUUIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCorrespondenceRecipientByUUIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRecipient() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimsMarkInRecordsCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimsMarkInRecordsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimsMarkInRecordsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRs() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimsMarkInRecordsFromPortalCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimsMarkInRecordsFromPortalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimsMarkInRecordsFromPortalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRs() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAllIncompletedClaimsMarkInRecordsCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllIncompletedClaimsMarkInRecordsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllIncompletedClaimsMarkInRecordsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRs() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DeleteClaimsMarkInRecordsCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteClaimsMarkInRecordsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteClaimsMarkInRecordsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimTypeByTransCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimTypeByTransCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimTypeByTransCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property claimType() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub InsertMarkInRecordCompletedEventHandler(ByVal sender As Object, ByVal e As InsertMarkInRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertMarkInRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errorMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMcsPaymentDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As GetMcsPaymentDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMcsPaymentDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPreAssessmentCompletedEventHandler(ByVal sender As Object, ByVal e As GetPreAssessmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPreAssessmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetRemainBalanceCompletedEventHandler(ByVal sender As Object, ByVal e As GetRemainBalanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRemainBalanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub isTheOneStandardCompletedEventHandler(ByVal sender As Object, ByVal e As isTheOneStandardCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isTheOneStandardCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetSunAccountExchangeRateCompletedEventHandler(ByVal sender As Object, ByVal e As GetSunAccountExchangeRateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSunAccountExchangeRateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetSunAccountEmailCompletedEventHandler(ByVal sender As Object, ByVal e As GetSunAccountEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSunAccountEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMcsMarkInEmailItemsCompletedEventHandler(ByVal sender As Object, ByVal e As GetMcsMarkInEmailItemsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMcsMarkInEmailItemsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMcsMarkInSmsItemsCompletedEventHandler(ByVal sender As Object, ByVal e As GetMcsMarkInSmsItemsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMcsMarkInSmsItemsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddMcsMarkInEmailLogCompletedEventHandler(ByVal sender As Object, ByVal e As AddMcsMarkInEmailLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddMcsMarkInEmailLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddMcsMarkInSmsLogCompletedEventHandler(ByVal sender As Object, ByVal e As AddMcsMarkInSmsLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddMcsMarkInSmsLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub IsMcsMarkInSmsSentForSamePolicyOnSameDayCompletedEventHandler(ByVal sender As Object, ByVal e As IsMcsMarkInSmsSentForSamePolicyOnSameDayCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsMcsMarkInSmsSentForSamePolicyOnSameDayCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property smsToAgentStatus() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property smsToCustomerStatus() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMcsPaymentEmailItemsCompletedEventHandler(ByVal sender As Object, ByVal e As GetMcsPaymentEmailItemsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMcsPaymentEmailItemsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMcsPaymentSmsItemsCompletedEventHandler(ByVal sender As Object, ByVal e As GetMcsPaymentSmsItemsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMcsPaymentSmsItemsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddMcsPaymentEmailLogCompletedEventHandler(ByVal sender As Object, ByVal e As AddMcsPaymentEmailLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddMcsPaymentEmailLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddMcsPaymentSmsLogCompletedEventHandler(ByVal sender As Object, ByVal e As AddMcsPaymentSmsLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddMcsPaymentSmsLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub IsMcsPaymentSmsSentForSamePolicyOnSameDayCompletedEventHandler(ByVal sender As Object, ByVal e As IsMcsPaymentSmsSentForSamePolicyOnSameDayCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsMcsPaymentSmsSentForSamePolicyOnSameDayCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMcsPaymentSmsLogCountCompletedEventHandler(ByVal sender As Object, ByVal e As GetMcsPaymentSmsLogCountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMcsPaymentSmsLogCountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPolicyLifetimeBalanceCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyLifetimeBalanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyLifetimeBalanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property decBalance() As System.Nullable(Of Decimal)
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Nullable(Of Decimal))
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property intANB() As System.Nullable(Of Integer)
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Nullable(Of Integer))
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetInsuredLifetimeBalanceCompletedEventHandler(ByVal sender As Object, ByVal e As GetInsuredLifetimeBalanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInsuredLifetimeBalanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtBalance() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckAggregateLimitCompletedEventHandler(ByVal sender As Object, ByVal e As CheckAggregateLimitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckAggregateLimitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strAggLimitMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckAggregateLimitClaimMaintCompletedEventHandler(ByVal sender As Object, ByVal e As CheckAggregateLimitClaimMaintCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckAggregateLimitClaimMaintCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetReinstatementDateByPolicyNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetReinstatementDateByPolicyNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReinstatementDateByPolicyNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub HasAggregateSettingByPlanCompletedEventHandler(ByVal sender As Object, ByVal e As HasAggregateSettingByPlanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HasAggregateSettingByPlanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Get7ElevenPaymentRuleCompletedEventHandler(ByVal sender As Object, ByVal e As Get7ElevenPaymentRuleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get7ElevenPaymentRuleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtRule() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateMcs7ElevenMobilePaymentCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMcs7ElevenMobilePaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMcs7ElevenMobilePaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMcs7ElevenContactInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetMcs7ElevenContactInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMcs7ElevenContactInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtContact() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ValidateMcs7ElevenMobileNoCompletedEventHandler(ByVal sender As Object, ByVal e As ValidateMcs7ElevenMobileNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidateMcs7ElevenMobileNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMcs7ElevenEmailCompletedEventHandler(ByVal sender As Object, ByVal e As GetMcs7ElevenEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMcs7ElevenEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strEmail() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckMcs7ElevenVisitCsCompletedEventHandler(ByVal sender As Object, ByVal e As CheckMcs7ElevenVisitCsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckMcs7ElevenVisitCsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckMcsIscUserCompletedEventHandler(ByVal sender As Object, ByVal e As CheckMcsIscUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckMcsIscUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property blnIscUser() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property blnPaLimit() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub PrepareISCRecordCompletedEventHandler(ByVal sender As Object, ByVal e As PrepareISCRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrepareISCRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rstLcp() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rstChqDetail() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rstPayment() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GenerateOnlineChequePaymentCompletedEventHandler(ByVal sender As Object, ByVal e As GenerateOnlineChequePaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GenerateOnlineChequePaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetReverse7ElevenPaymentSettlementCompletedEventHandler(ByVal sender As Object, ByVal e As GetReverse7ElevenPaymentSettlementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReverse7ElevenPaymentSettlementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub Get7ElevenPaymentSettlementCompletedEventHandler(ByVal sender As Object, ByVal e As Get7ElevenPaymentSettlementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Get7ElevenPaymentSettlementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetIscRefNoByClaimNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetIscRefNoByClaimNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIscRefNoByClaimNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dt() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetIscChequeByRefNumCompletedEventHandler(ByVal sender As Object, ByVal e As GetIscChequeByRefNumCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIscChequeByRefNumCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtCheque() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errorMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetIscChqPaymentByChequeIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetIscChqPaymentByChequeIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIscChqPaymentByChequeIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtChqPayment() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property errorMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateIscChqStatusCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateIscChqStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateIscChqStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckIscChequeNoCompletedEventHandler(ByVal sender As Object, ByVal e As CheckIscChequeNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckIscChequeNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetIscNoOfPolicyCompletedEventHandler(ByVal sender As Object, ByVal e As GetIscNoOfPolicyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIscNoOfPolicyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetIscReportPathCompletedEventHandler(ByVal sender As Object, ByVal e As GetIscReportPathCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIscReportPathCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateIscCmRecordCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateIscCmRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateIscCmRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetIscChequeLotCompletedEventHandler(ByVal sender As Object, ByVal e As GetIscChequeLotCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIscChequeLotCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property intLotId() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckIscPlanTypeCompletedEventHandler(ByVal sender As Object, ByVal e As CheckIscPlanTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckIscPlanTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetReverseInstantChequeSettlementCompletedEventHandler(ByVal sender As Object, ByVal e As GetReverseInstantChequeSettlementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReverseInstantChequeSettlementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetInstantChequeSettlementCompletedEventHandler(ByVal sender As Object, ByVal e As GetInstantChequeSettlementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInstantChequeSettlementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckIsIscCompletedEventHandler(ByVal sender As Object, ByVal e As CheckIsIscCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckIsIscCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub FPSPayoutAPICompletedEventHandler(ByVal sender As Object, ByVal e As FPSPayoutAPICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FPSPayoutAPICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property APIResponse() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetProxyTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetProxyTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProxyTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFPSTransactionStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetFPSTransactionStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFPSTransactionStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AllowCallFPSAPICompletedEventHandler(ByVal sender As Object, ByVal e As AllowCallFPSAPICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AllowCallFPSAPICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateMcsFPSPayoutCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMcsFPSPayoutCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMcsFPSPayoutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateMcsFPSPayoutWithMobiCntryCodeCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMcsFPSPayoutWithMobiCntryCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMcsFPSPayoutWithMobiCntryCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMcsFPSProxyInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetMcsFPSProxyInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMcsFPSProxyInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtFPS() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetLetterCompletedEventHandler(ByVal sender As Object, ByVal e As GetLetterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLetterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetNextPendSeqNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetNextPendSeqNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNextPendSeqNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property lngSeqNo() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DeleteClaimAllCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteClaimAllCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteClaimAllCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ReverseClaimCompletedEventHandler(ByVal sender As Object, ByVal e As ReverseClaimCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReverseClaimCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsHeader() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub BatchSavePendRSCompletedEventHandler(ByVal sender As Object, ByVal e As BatchSavePendRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BatchSavePendRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsPend() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ClaimFinalCompletedEventHandler(ByVal sender As Object, ByVal e As ClaimFinalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ClaimFinalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsClaim() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsPayment() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsForcibleMsg() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsProxyLog() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ClaimCheckCompletedEventHandler(ByVal sender As Object, ByVal e As ClaimCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ClaimCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsClaim() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckIsPaidAmtEligibleCompletedEventHandler(ByVal sender As Object, ByVal e As CheckIsPaidAmtEligibleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckIsPaidAmtEligibleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ReverseApprovalCompletedEventHandler(ByVal sender As Object, ByVal e As ReverseApprovalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReverseApprovalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsClaim() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCompanyNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetCompanyNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCompanyNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property companyNameEng() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property companyNameChi() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTitleCompletedEventHandler(ByVal sender As Object, ByVal e As GetTitleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTitleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckClaimApprovalStatusCompletedEventHandler(ByVal sender As Object, ByVal e As CheckClaimApprovalStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckClaimApprovalStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SetApprovedFlag2ndCompletedEventHandler(ByVal sender As Object, ByVal e As SetApprovedFlag2ndCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetApprovedFlag2ndCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTitleListCompletedEventHandler(ByVal sender As Object, ByVal e As GetTitleListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTitleListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAuthGroupByTitleCompletedEventHandler(ByVal sender As Object, ByVal e As GetAuthGroupByTitleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAuthGroupByTitleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strResult() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetDepartmentListCompletedEventHandler(ByVal sender As Object, ByVal e As GetDepartmentListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDepartmentListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetUserInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAuthGroupInfoByUIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetAuthGroupInfoByUIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAuthGroupInfoByUIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddUpdateUserCompletedEventHandler(ByVal sender As Object, ByVal e As AddUpdateUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddUpdateUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DeleteUserCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTitleWithAuthGroupCompletedEventHandler(ByVal sender As Object, ByVal e As GetTitleWithAuthGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTitleWithAuthGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAuthGroupListCompletedEventHandler(ByVal sender As Object, ByVal e As GetAuthGroupListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAuthGroupListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimNatureListCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimNatureListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimNatureListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddTitleWithAuthGroupCompletedEventHandler(ByVal sender As Object, ByVal e As AddTitleWithAuthGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddTitleWithAuthGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateTitleWithAuthGroupCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateTitleWithAuthGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateTitleWithAuthGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DeleteTitleWithAuthGroupCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteTitleWithAuthGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteTitleWithAuthGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckIsTitleInUseCompletedEventHandler(ByVal sender As Object, ByVal e As CheckIsTitleInUseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckIsTitleInUseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property bIsInUse() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErr() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAuthRuleWithAuthGroupCompletedEventHandler(ByVal sender As Object, ByVal e As GetAuthRuleWithAuthGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAuthRuleWithAuthGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAuthRuleListCompletedEventHandler(ByVal sender As Object, ByVal e As GetAuthRuleListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAuthRuleListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddAuthorityRuleCompletedEventHandler(ByVal sender As Object, ByVal e As AddAuthorityRuleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddAuthorityRuleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateAuthorityRuleCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateAuthorityRuleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateAuthorityRuleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DeleteAuthorityRuleCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteAuthorityRuleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteAuthorityRuleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddUpdateClaimNatureCompletedEventHandler(ByVal sender As Object, ByVal e As AddUpdateClaimNatureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddUpdateClaimNatureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DeleteClaimNatureCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteClaimNatureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteClaimNatureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddUpdateAuthGroupCompletedEventHandler(ByVal sender As Object, ByVal e As AddUpdateAuthGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddUpdateAuthGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DeleteAuthGroupCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteAuthGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteAuthGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimNatureCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimNatureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimNatureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimNatureMappingInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimNatureMappingInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimNatureMappingInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAuthGroupCompletedEventHandler(ByVal sender As Object, ByVal e As GetAuthGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAuthGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimNatureCodeListCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimNatureCodeListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimNatureCodeListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimNaturePlanOrClaimTypeListCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimNaturePlanOrClaimTypeListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimNaturePlanOrClaimTypeListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsData() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetUserGroupListCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserGroupListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserGroupListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ReturnSQL() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getLogoImgCompletedEventHandler(ByVal sender As Object, ByVal e As getLogoImgCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getLogoImgCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rstLogo() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DCADataHeaderCompletedEventHandler(ByVal sender As Object, ByVal e As DCADataHeaderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DCADataHeaderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsHeader() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DCADataDetailCompletedEventHandler(ByVal sender As Object, ByVal e As DCADataDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DCADataDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rstDetailds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DCADataFooterCompletedEventHandler(ByVal sender As Object, ByVal e As DCADataFooterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DCADataFooterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsFooter() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DCALetterInfoCompletedEventHandler(ByVal sender As Object, ByVal e As DCALetterInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DCALetterInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rstLetterInfoDS() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GenerateMemoDetailsMCompletedEventHandler(ByVal sender As Object, ByVal e As GenerateMemoDetailsMCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GenerateMemoDetailsMCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property strMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rstClaimDS() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strInsured() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GenerateMemoDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As GenerateMemoDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GenerateMemoDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property strMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rstClaimDS() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property aryName() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Object())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property aryValue() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Object())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property aryAgentFax() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAddressByPolicyNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetAddressByPolicyNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAddressByPolicyNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAddressByCustomerNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetAddressByCustomerNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAddressByCustomerNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCustomerByRelCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerByRelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerByRelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCustomerIDByRelCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerIDByRelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerIDByRelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetOwnerCompletedEventHandler(ByVal sender As Object, ByVal e As GetOwnerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOwnerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getCoverageChineseNameCompletedEventHandler(ByVal sender As Object, ByVal e As getCoverageChineseNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCoverageChineseNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ResultRst() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub IsPolicySurrenderCompletedEventHandler(ByVal sender As Object, ByVal e As IsPolicySurrenderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsPolicySurrenderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetEligibleBenefitCompletedEventHandler(ByVal sender As Object, ByVal e As GetEligibleBenefitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEligibleBenefitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub IsRefundableHospitalIncomeCompletedEventHandler(ByVal sender As Object, ByVal e As IsRefundableHospitalIncomeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsRefundableHospitalIncomeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetLifeTimeClaimBalanceCompletedEventHandler(ByVal sender As Object, ByVal e As GetLifeTimeClaimBalanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLifeTimeClaimBalanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetLifeTimeBenefitByInsuredIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetLifeTimeBenefitByInsuredIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLifeTimeBenefitByInsuredIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetInsuredMaxBenefitAmountCompletedEventHandler(ByVal sender As Object, ByVal e As GetInsuredMaxBenefitAmountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInsuredMaxBenefitAmountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dblMaxBenefitAmt() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dblMaxBenefitDay() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetInsuredTotalPaidAmountCompletedEventHandler(ByVal sender As Object, ByVal e As GetInsuredTotalPaidAmountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInsuredTotalPaidAmountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dblTotalPaidAmt() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dblTotalPaidDay() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Double)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetSugClassCountByPlanCompletedEventHandler(ByVal sender As Object, ByVal e As GetSugClassCountByPlanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSugClassCountByPlanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property intSugClassCount() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetSurClassMappingCompletedEventHandler(ByVal sender As Object, ByVal e As GetSurClassMappingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSurClassMappingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub HasPropDevelopedCountryCompletedEventHandler(ByVal sender As Object, ByVal e As HasPropDevelopedCountryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HasPropDevelopedCountryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub HasPropSpecialEndorsementCompletedEventHandler(ByVal sender As Object, ByVal e As HasPropSpecialEndorsementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HasPropSpecialEndorsementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetOutstandingRptOrderCompletedEventHandler(ByVal sender As Object, ByVal e As GetOutstandingRptOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOutstandingRptOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveRptOrderCompletedEventHandler(ByVal sender As Object, ByVal e As SaveRptOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveRptOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property rstRptOrder() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetReportCompletedEventHandler(ByVal sender As Object, ByVal e As GetReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetDeclineCloseClaimAnalysisCompletedEventHandler(ByVal sender As Object, ByVal e As GetDeclineCloseClaimAnalysisCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDeclineCloseClaimAnalysisCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetFinalClaimAnalysisCompletedEventHandler(ByVal sender As Object, ByVal e As GetFinalClaimAnalysisCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFinalClaimAnalysisCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetOnlineStatusReportCompletedEventHandler(ByVal sender As Object, ByVal e As GetOnlineStatusReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOnlineStatusReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMarkInReportCompletedEventHandler(ByVal sender As Object, ByVal e As GetMarkInReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMarkInReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetDirectCreditTransactionControlCompletedEventHandler(ByVal sender As Object, ByVal e As GetDirectCreditTransactionControlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDirectCreditTransactionControlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetDirectCreditTransactionSuspiciousCaseCompletedEventHandler(ByVal sender As Object, ByVal e As GetDirectCreditTransactionSuspiciousCaseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDirectCreditTransactionSuspiciousCaseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetReverseDirectPaymentSettlementCompletedEventHandler(ByVal sender As Object, ByVal e As GetReverseDirectPaymentSettlementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReverseDirectPaymentSettlementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetManualChequeSettlementCompletedEventHandler(ByVal sender As Object, ByVal e As GetManualChequeSettlementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetManualChequeSettlementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetEServiceSettlementCompletedEventHandler(ByVal sender As Object, ByVal e As GetEServiceSettlementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEServiceSettlementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetReverseManualChequeSettlementCompletedEventHandler(ByVal sender As Object, ByVal e As GetReverseManualChequeSettlementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReverseManualChequeSettlementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strRtnMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetImpairmentCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetImpairmentCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetImpairmentCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetChequeRemarkCompletedEventHandler(ByVal sender As Object, ByVal e As GetChequeRemarkCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetChequeRemarkCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAmountLimitCompletedEventHandler(ByVal sender As Object, ByVal e As GetAmountLimitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAmountLimitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DelAmountLimitCompletedEventHandler(ByVal sender As Object, ByVal e As DelAmountLimitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DelAmountLimitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetUserAmountLimitCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserAmountLimitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserAmountLimitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DelUserAmountLimitCompletedEventHandler(ByVal sender As Object, ByVal e As DelUserAmountLimitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DelUserAmountLimitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SetEnvCompletedEventHandler(ByVal sender As Object, ByVal e As SetEnvCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetEnvCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimsCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property lngClaimNo() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property intOccurNo() As Short
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),Short)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property lngInsuredId() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetOutstandingClaimCompletedEventHandler(ByVal sender As Object, ByVal e As GetOutstandingClaimCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOutstandingClaimCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetSettledClaimCompletedEventHandler(ByVal sender As Object, ByVal e As GetSettledClaimCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSettledClaimCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMastiDateCompletedEventHandler(ByVal sender As Object, ByVal e As GetMastiDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMastiDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub LockClaimCompletedEventHandler(ByVal sender As Object, ByVal e As LockClaimCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LockClaimCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCustomerByIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerByIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerByIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCurrentDDAByPolicyIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetCurrentDDAByPolicyIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCurrentDDAByPolicyIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMCSChannelContactCompletedEventHandler(ByVal sender As Object, ByVal e As GetMCSChannelContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMCSChannelContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCodeValueCompletedEventHandler(ByVal sender As Object, ByVal e As GetCodeValueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCodeValueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetExchangeRateCompletedEventHandler(ByVal sender As Object, ByVal e As GetExchangeRateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetExchangeRateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRate() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dteEffectiveDate() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Date)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimByClaimNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimByClaimNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimByClaimNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsClaim() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub HasMjcCrisisClaimCompletedEventHandler(ByVal sender As Object, ByVal e As HasMjcCrisisClaimCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HasMjcCrisisClaimCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub HasLifeStyleIndCompletedEventHandler(ByVal sender As Object, ByVal e As HasLifeStyleIndCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HasLifeStyleIndCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub HasLifeEnrichmentIndCompletedEventHandler(ByVal sender As Object, ByVal e As HasLifeEnrichmentIndCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HasLifeEnrichmentIndCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub HasHealthScreenPaymentHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As HasHealthScreenPaymentHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HasHealthScreenPaymentHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property datLastAccidentDate() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Date)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveCalLogCompletedEventHandler(ByVal sender As Object, ByVal e As SaveCalLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveCalLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property strMsg() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CalculateClaimPaymentCompletedEventHandler(ByVal sender As Object, ByVal e As CalculateClaimPaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CalculateClaimPaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsLock() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AppendCommentCompletedEventHandler(ByVal sender As Object, ByVal e As AppendCommentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AppendCommentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UnLockClaimCompletedEventHandler(ByVal sender As Object, ByVal e As UnLockClaimCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UnLockClaimCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAgentByAgentIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetAgentByAgentIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAgentByAgentIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strUser() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetEmptyClaimHeaderCompletedEventHandler(ByVal sender As Object, ByVal e As GetEmptyClaimHeaderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEmptyClaimHeaderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsHeader() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetInsuredByPolicyCoverageCompletedEventHandler(ByVal sender As Object, ByVal e As GetInsuredByPolicyCoverageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInsuredByPolicyCoverageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPendingReasonCompletedEventHandler(ByVal sender As Object, ByVal e As GetPendingReasonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPendingReasonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property oRs() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPendingCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetPendingCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPendingCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetServerCurrentDateTimeCompletedEventHandler(ByVal sender As Object, ByVal e As GetServerCurrentDateTimeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetServerCurrentDateTimeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Date)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPlanByIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetPlanByIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPlanByIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimPolicyNCoverageCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimPolicyNCoverageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimPolicyNCoverageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getClaimBeneHisByClaimNoCompletedEventHandler(ByVal sender As Object, ByVal e As getClaimBeneHisByClaimNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getClaimBeneHisByClaimNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsBene() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getClaimBenefitHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As getClaimBenefitHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getClaimBenefitHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimBenefit1CompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimBenefit1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimBenefit1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimMessageByNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimMessageByNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimMessageByNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsMessage() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub IsLockedCompletedEventHandler(ByVal sender As Object, ByVal e As IsLockedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsLockedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property blnLocked() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property blnExpired() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strUserId() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strUser() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(5),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub IsPolicyExistedCompletedEventHandler(ByVal sender As Object, ByVal e As IsPolicyExistedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsPolicyExistedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dtDate() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Date)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetEmptyClaimMessageCompletedEventHandler(ByVal sender As Object, ByVal e As GetEmptyClaimMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEmptyClaimMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRs() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetEmptyClaimPaymentCompletedEventHandler(ByVal sender As Object, ByVal e As GetEmptyClaimPaymentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEmptyClaimPaymentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetResolveRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetResolveRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetResolveRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAccPosFurClaimCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccPosFurClaimCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccPosFurClaimCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetBenefitCompletedEventHandler(ByVal sender As Object, ByVal e As GetBenefitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBenefitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckClaimCompletedEventHandler(ByVal sender As Object, ByVal e As CheckClaimCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckClaimCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property dsClaimRS() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsErrRs() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strAction() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsfurtherClmRs() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsCoverageRS() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAccidentCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccidentCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccidentCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveClaimHeaderCompletedEventHandler(ByVal sender As Object, ByVal e As SaveClaimHeaderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveClaimHeaderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRs() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsErrRs() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsLogRs() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetEmptyClaimPresentationCompletedEventHandler(ByVal sender As Object, ByVal e As GetEmptyClaimPresentationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEmptyClaimPresentationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRs() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPaymentMethodCompletedEventHandler(ByVal sender As Object, ByVal e As GetPaymentMethodCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPaymentMethodCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPolicyByClaimCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyByClaimCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyByClaimCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimPresentationCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimPresentationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimPresentationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsStatus() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetEmptyClaimPendingCompletedEventHandler(ByVal sender As Object, ByVal e As GetEmptyClaimPendingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEmptyClaimPendingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetExgratiaReasonCompletedEventHandler(ByVal sender As Object, ByVal e As GetExgratiaReasonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetExgratiaReasonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTotalPaidByPlanTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetTotalPaidByPlanTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTotalPaidByPlanTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property lngClaimNo() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property lngOccur() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetTotalPaidByPolicyCompletedEventHandler(ByVal sender As Object, ByVal e As GetTotalPaidByPolicyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTotalPaidByPolicyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property lngClaimNo() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property lngOccur() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPlanFeatureCompletedEventHandler(ByVal sender As Object, ByVal e As GetPlanFeatureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPlanFeatureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPlanCompletedEventHandler(ByVal sender As Object, ByVal e As GetPlanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPlanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPolicyByIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyByIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyByIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetPolicyCoverageCompletedEventHandler(ByVal sender As Object, ByVal e As GetPolicyCoverageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPolicyCoverageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetUserCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetGrpByUserCompletedEventHandler(ByVal sender As Object, ByVal e As GetGrpByUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGrpByUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strSystem() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strFunctionCode() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMceGrpByUserCompletedEventHandler(ByVal sender As Object, ByVal e As GetMceGrpByUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMceGrpByUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub IsClaimFinalApprovedCompletedEventHandler(ByVal sender As Object, ByVal e As IsClaimFinalApprovedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsClaimFinalApprovedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub IsClaimOverApprovalLimitMJCCompletedEventHandler(ByVal sender As Object, ByVal e As IsClaimOverApprovalLimitMJCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsClaimOverApprovalLimitMJCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub IsInforcePly_CIWCompletedEventHandler(ByVal sender As Object, ByVal e As IsInforcePly_CIWCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsInforcePly_CIWCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub IsValidBankBranchCompletedEventHandler(ByVal sender As Object, ByVal e As IsValidBankBranchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsValidBankBranchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateClaimDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateClaimDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateClaimDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsCoverageRS() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsPresentRS() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsClaimRS() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateMemoPrintDateCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateMemoPrintDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateMemoPrintDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdateReminderPrintDateCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateReminderPrintDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateReminderPrintDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub UpdatePaymentDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As UpdatePaymentDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdatePaymentDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsBenefitRS() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsClaimRS() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getClaimProxyLogCompletedEventHandler(ByVal sender As Object, ByVal e As getClaimProxyLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getClaimProxyLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClientHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As GetClientHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClientHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCurrencyCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetCurrencyCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCurrencyCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strErrorMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetDeclineReasonCompletedEventHandler(ByVal sender As Object, ByVal e As GetDeclineReasonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDeclineReasonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetHospFurClaimCompletedEventHandler(ByVal sender As Object, ByVal e As GetHospFurClaimCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetHospFurClaimCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsReturn() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetHospitalTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetHospitalTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetHospitalTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsType() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetLOACompletedEventHandler(ByVal sender As Object, ByVal e As GetLOACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLOACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsType() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetIllnessCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetIllnessCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIllnessCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetClaimTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetClaimTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClaimTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetInsuredByPolicyCompletedEventHandler(ByVal sender As Object, ByVal e As GetInsuredByPolicyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInsuredByPolicyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetCoverageStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetCoverageStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCoverageStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As GetDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property dsRs() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetLetterTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetLetterTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLetterTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetLogMessageByNoCompletedEventHandler(ByVal sender As Object, ByVal e As GetLogMessageByNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLogMessageByNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property lngClaimNo() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property lngOccur() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Long)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strMessageNo() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
End Namespace
